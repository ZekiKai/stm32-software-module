
USART_UM982.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d728  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800d8c8  0800d8c8  0000e8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de24  0800de24  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800de24  0800de24  0000ee24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de2c  0800de2c  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de2c  0800de2c  0000ee2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de30  0800de30  0000ee30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800de34  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d88  200001d8  0800e00c  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f60  0800e00c  0000ff60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2a9  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fde  00000000  00000000  0002a4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  0002e490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001166  00000000  00000000  0002fb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9fd  00000000  00000000  00030c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b392  00000000  00000000  0004b67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c1a7  00000000  00000000  00066a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102bb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075dc  00000000  00000000  00102bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0010a1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d8b0 	.word	0x0800d8b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800d8b0 	.word	0x0800d8b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <Andly_GPS>:
    // Return pointer to the character *after* the comma
    return (p) ? (p + 1) : NULL;
*/


void Andly_GPS(Position_Data *data, uint8_t *buf) {
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b096      	sub	sp, #88	@ 0x58
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]

    const char* gga_start = strstr((const char *)buf, "GGA,");
 8000ffe:	49b4      	ldr	r1, [pc, #720]	@ (80012d0 <Andly_GPS+0x2dc>)
 8001000:	6838      	ldr	r0, [r7, #0]
 8001002:	f008 fb9f 	bl	8009744 <strstr>
 8001006:	6578      	str	r0, [r7, #84]	@ 0x54
    if (gga_start == NULL) {
 8001008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 81bc 	beq.w	8001388 <Andly_GPS+0x394>

    // Pointers to the start of each relevant field
    const char *lat_p, *lon_p, *status_p, *num_p, *alt_p;

    // Use a single-pass approach to find all fields.(much more efficient than re-scanning for each field)
    const char* p = gga_start;
 8001010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001012:	653b      	str	r3, [r7, #80]	@ 0x50

    p = strchr(p, ','); if (!p) return;			// Field 1: Coordinated Universal Time
 8001014:	212c      	movs	r1, #44	@ 0x2c
 8001016:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001018:	f008 fb87 	bl	800972a <strchr>
 800101c:	6538      	str	r0, [r7, #80]	@ 0x50
 800101e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 81b3 	beq.w	800138c <Andly_GPS+0x398>

    p = strchr(p+1, ','); if (!p) return;		// Field 2: Latitude
 8001026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001028:	3301      	adds	r3, #1
 800102a:	212c      	movs	r1, #44	@ 0x2c
 800102c:	4618      	mov	r0, r3
 800102e:	f008 fb7c 	bl	800972a <strchr>
 8001032:	6538      	str	r0, [r7, #80]	@ 0x50
 8001034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 81aa 	beq.w	8001390 <Andly_GPS+0x39c>
    lat_p = p + 1;
 800103c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800103e:	3301      	adds	r3, #1
 8001040:	64fb      	str	r3, [r7, #76]	@ 0x4c

    p = strchr(p+1, ','); if (!p) return;		// Field 3: Latitude Direction
 8001042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001044:	3301      	adds	r3, #1
 8001046:	212c      	movs	r1, #44	@ 0x2c
 8001048:	4618      	mov	r0, r3
 800104a:	f008 fb6e 	bl	800972a <strchr>
 800104e:	6538      	str	r0, [r7, #80]	@ 0x50
 8001050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 819e 	beq.w	8001394 <Andly_GPS+0x3a0>

    p = strchr(p+1, ','); if (!p) return;		// Field 4: Longitude
 8001058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800105a:	3301      	adds	r3, #1
 800105c:	212c      	movs	r1, #44	@ 0x2c
 800105e:	4618      	mov	r0, r3
 8001060:	f008 fb63 	bl	800972a <strchr>
 8001064:	6538      	str	r0, [r7, #80]	@ 0x50
 8001066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 8195 	beq.w	8001398 <Andly_GPS+0x3a4>
    lon_p = p + 1;
 800106e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001070:	3301      	adds	r3, #1
 8001072:	64bb      	str	r3, [r7, #72]	@ 0x48

    p = strchr(p+1, ','); if (!p) return;		// Field 5: Longitude Direction
 8001074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001076:	3301      	adds	r3, #1
 8001078:	212c      	movs	r1, #44	@ 0x2c
 800107a:	4618      	mov	r0, r3
 800107c:	f008 fb55 	bl	800972a <strchr>
 8001080:	6538      	str	r0, [r7, #80]	@ 0x50
 8001082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 8189 	beq.w	800139c <Andly_GPS+0x3a8>

    p = strchr(p+1, ','); if (!p) return;		// Field 6: GPS State Quality
 800108a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800108c:	3301      	adds	r3, #1
 800108e:	212c      	movs	r1, #44	@ 0x2c
 8001090:	4618      	mov	r0, r3
 8001092:	f008 fb4a 	bl	800972a <strchr>
 8001096:	6538      	str	r0, [r7, #80]	@ 0x50
 8001098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8180 	beq.w	80013a0 <Andly_GPS+0x3ac>
    status_p = p + 1;
 80010a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010a2:	3301      	adds	r3, #1
 80010a4:	647b      	str	r3, [r7, #68]	@ 0x44

    p = strchr(p+1, ','); if (!p) return;		// Field 7: Number of Satellite
 80010a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010a8:	3301      	adds	r3, #1
 80010aa:	212c      	movs	r1, #44	@ 0x2c
 80010ac:	4618      	mov	r0, r3
 80010ae:	f008 fb3c 	bl	800972a <strchr>
 80010b2:	6538      	str	r0, [r7, #80]	@ 0x50
 80010b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8174 	beq.w	80013a4 <Andly_GPS+0x3b0>
    num_p = p + 1;
 80010bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010be:	3301      	adds	r3, #1
 80010c0:	643b      	str	r3, [r7, #64]	@ 0x40

    p = strchr(p+1, ','); if (!p) return;		// Field 8: hdop
 80010c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010c4:	3301      	adds	r3, #1
 80010c6:	212c      	movs	r1, #44	@ 0x2c
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 fb2e 	bl	800972a <strchr>
 80010ce:	6538      	str	r0, [r7, #80]	@ 0x50
 80010d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 8168 	beq.w	80013a8 <Andly_GPS+0x3b4>

    p = strchr(p+1, ','); if (!p) return;		// Field 9: Altitude
 80010d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010da:	3301      	adds	r3, #1
 80010dc:	212c      	movs	r1, #44	@ 0x2c
 80010de:	4618      	mov	r0, r3
 80010e0:	f008 fb23 	bl	800972a <strchr>
 80010e4:	6538      	str	r0, [r7, #80]	@ 0x50
 80010e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 815f 	beq.w	80013ac <Andly_GPS+0x3b8>
    alt_p = p + 1;
 80010ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010f0:	3301      	adds	r3, #1
 80010f2:	63fb      	str	r3, [r7, #60]	@ 0x3c


    const char* uniheading_ASCII_start = strstr((const char *)buf, "UNIHEADINGA,");
 80010f4:	4977      	ldr	r1, [pc, #476]	@ (80012d4 <Andly_GPS+0x2e0>)
 80010f6:	6838      	ldr	r0, [r7, #0]
 80010f8:	f008 fb24 	bl	8009744 <strstr>
 80010fc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (uniheading_ASCII_start == NULL){
 80010fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 8155 	beq.w	80013b0 <Andly_GPS+0x3bc>
    	return;									// Not a UNIHEADINGA message or malformed, just exit.
    }

    const char *heading_p, *pitch_p, *length_p;
    p = uniheading_ASCII_start;
 8001106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001108:	653b      	str	r3, [r7, #80]	@ 0x50

    p = strchr(p, ';'); if (!p) return;			// Field 1: Solution Status
 800110a:	213b      	movs	r1, #59	@ 0x3b
 800110c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800110e:	f008 fb0c 	bl	800972a <strchr>
 8001112:	6538      	str	r0, [r7, #80]	@ 0x50
 8001114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 814c 	beq.w	80013b4 <Andly_GPS+0x3c0>

    p = strchr(p+1, ','); if (!p) return;		// Field 2: Position Type
 800111c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800111e:	3301      	adds	r3, #1
 8001120:	212c      	movs	r1, #44	@ 0x2c
 8001122:	4618      	mov	r0, r3
 8001124:	f008 fb01 	bl	800972a <strchr>
 8001128:	6538      	str	r0, [r7, #80]	@ 0x50
 800112a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 8143 	beq.w	80013b8 <Andly_GPS+0x3c4>

    p = strchr(p+1, ','); if (!p) return;		// Field 3: Length
 8001132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001134:	3301      	adds	r3, #1
 8001136:	212c      	movs	r1, #44	@ 0x2c
 8001138:	4618      	mov	r0, r3
 800113a:	f008 faf6 	bl	800972a <strchr>
 800113e:	6538      	str	r0, [r7, #80]	@ 0x50
 8001140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 813a 	beq.w	80013bc <Andly_GPS+0x3c8>
    length_p = p + 1;
 8001148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800114a:	3301      	adds	r3, #1
 800114c:	637b      	str	r3, [r7, #52]	@ 0x34

    p = strchr(p+1, ','); if (!p) return;		// Field 4: Heading
 800114e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001150:	3301      	adds	r3, #1
 8001152:	212c      	movs	r1, #44	@ 0x2c
 8001154:	4618      	mov	r0, r3
 8001156:	f008 fae8 	bl	800972a <strchr>
 800115a:	6538      	str	r0, [r7, #80]	@ 0x50
 800115c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 812e 	beq.w	80013c0 <Andly_GPS+0x3cc>
    heading_p = p + 1;
 8001164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001166:	3301      	adds	r3, #1
 8001168:	633b      	str	r3, [r7, #48]	@ 0x30

    p = strchr(p+1, ','); if (!p) return;		// Field 5: Pitch
 800116a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800116c:	3301      	adds	r3, #1
 800116e:	212c      	movs	r1, #44	@ 0x2c
 8001170:	4618      	mov	r0, r3
 8001172:	f008 fada 	bl	800972a <strchr>
 8001176:	6538      	str	r0, [r7, #80]	@ 0x50
 8001178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8122 	beq.w	80013c4 <Andly_GPS+0x3d0>
    pitch_p = p + 1;
 8001180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001182:	3301      	adds	r3, #1
 8001184:	62fb      	str	r3, [r7, #44]	@ 0x2c


    // --- Now parse the fields --- Use sscanf for safe and efficient parsing. It handles empty fields gracefully.

    // If field is empty, sscanf returns 0, and data->gps_status is unchanged.
    if (*status_p != ',') {
 8001186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b2c      	cmp	r3, #44	@ 0x2c
 800118c:	d006      	beq.n	800119c <Andly_GPS+0x1a8>
        sscanf(status_p, "%hhu", &data->gps_status);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	330d      	adds	r3, #13
 8001192:	461a      	mov	r2, r3
 8001194:	4950      	ldr	r1, [pc, #320]	@ (80012d8 <Andly_GPS+0x2e4>)
 8001196:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001198:	f008 fa50 	bl	800963c <siscanf>
    }

    // We only trust data if we have a fix.
    if (data->gps_status > 0) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7b5b      	ldrb	r3, [r3, #13]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8110 	beq.w	80013c6 <Andly_GPS+0x3d2>
        // Number of satellites
        if (*num_p != ',') {
 80011a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b2c      	cmp	r3, #44	@ 0x2c
 80011ac:	d006      	beq.n	80011bc <Andly_GPS+0x1c8>
            sscanf(num_p, "%hhu", &data->gps_num);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	330c      	adds	r3, #12
 80011b2:	461a      	mov	r2, r3
 80011b4:	4948      	ldr	r1, [pc, #288]	@ (80012d8 <Andly_GPS+0x2e4>)
 80011b6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80011b8:	f008 fa40 	bl	800963c <siscanf>
        }

        // Altitude
        if (*alt_p != ',') {
 80011bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b2c      	cmp	r3, #44	@ 0x2c
 80011c2:	d006      	beq.n	80011d2 <Andly_GPS+0x1de>
            sscanf(alt_p, "%f", &data->altitude);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3308      	adds	r3, #8
 80011c8:	461a      	mov	r2, r3
 80011ca:	4944      	ldr	r1, [pc, #272]	@ (80012dc <Andly_GPS+0x2e8>)
 80011cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80011ce:	f008 fa35 	bl	800963c <siscanf>
        }

        // Latitude & Longitude (DDMM.MMMM format)
        double lat_nmea = 0.0, lon_nmea = 0.0;
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
        double lat_deg = 0.0, lon_deg = 0.0;
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	f04f 0300 	mov.w	r3, #0
 80011f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	e9c7 2306 	strd	r2, r3, [r7, #24]

        if (*lat_p != ',') {
 8001202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b2c      	cmp	r3, #44	@ 0x2c
 8001208:	d042      	beq.n	8001290 <Andly_GPS+0x29c>
            sscanf(lat_p, "%lf", &lat_nmea);
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	461a      	mov	r2, r3
 8001210:	4933      	ldr	r1, [pc, #204]	@ (80012e0 <Andly_GPS+0x2ec>)
 8001212:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001214:	f008 fa12 	bl	800963c <siscanf>
            lat_deg = floor(lat_nmea / 100.0);
 8001218:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	4b30      	ldr	r3, [pc, #192]	@ (80012e4 <Andly_GPS+0x2f0>)
 8001222:	f7ff fb1b 	bl	800085c <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	ec43 2b17 	vmov	d7, r2, r3
 800122e:	eeb0 0a47 	vmov.f32	s0, s14
 8001232:	eef0 0a67 	vmov.f32	s1, s15
 8001236:	f00c fabf 	bl	800d7b8 <floor>
 800123a:	ed87 0b08 	vstr	d0, [r7, #32]
            data->latitude = lat_deg + (lat_nmea - lat_deg * 100.0) / 60.0;
 800123e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	4b27      	ldr	r3, [pc, #156]	@ (80012e4 <Andly_GPS+0x2f0>)
 8001248:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800124c:	f7ff f9dc 	bl	8000608 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f81e 	bl	8000298 <__aeabi_dsub>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <Andly_GPS+0x2f4>)
 800126a:	f7ff faf7 	bl	800085c <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800127a:	f7ff f80f 	bl	800029c <__adddf3>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff fcb7 	bl	8000bf8 <__aeabi_d2f>
 800128a:	4602      	mov	r2, r0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	601a      	str	r2, [r3, #0]
        }

        if (*lon_p != ',') {
 8001290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b2c      	cmp	r3, #44	@ 0x2c
 8001296:	d052      	beq.n	800133e <Andly_GPS+0x34a>
            sscanf(lon_p, "%lf", &lon_nmea);
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	461a      	mov	r2, r3
 800129e:	4910      	ldr	r1, [pc, #64]	@ (80012e0 <Andly_GPS+0x2ec>)
 80012a0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80012a2:	f008 f9cb 	bl	800963c <siscanf>
            lon_deg = floor(lon_nmea / 100.0);
 80012a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <Andly_GPS+0x2f0>)
 80012b0:	f7ff fad4 	bl	800085c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	ec43 2b17 	vmov	d7, r2, r3
 80012bc:	eeb0 0a47 	vmov.f32	s0, s14
 80012c0:	eef0 0a67 	vmov.f32	s1, s15
 80012c4:	f00c fa78 	bl	800d7b8 <floor>
 80012c8:	ed87 0b06 	vstr	d0, [r7, #24]
 80012cc:	e00e      	b.n	80012ec <Andly_GPS+0x2f8>
 80012ce:	bf00      	nop
 80012d0:	0800d8c8 	.word	0x0800d8c8
 80012d4:	0800d8d0 	.word	0x0800d8d0
 80012d8:	0800d8e0 	.word	0x0800d8e0
 80012dc:	0800d8e8 	.word	0x0800d8e8
 80012e0:	0800d8ec 	.word	0x0800d8ec
 80012e4:	40590000 	.word	0x40590000
 80012e8:	404e0000 	.word	0x404e0000
            data->longitude = lon_deg + (lon_nmea - lon_deg * 100.0) / 60.0;
 80012ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b35      	ldr	r3, [pc, #212]	@ (80013cc <Andly_GPS+0x3d8>)
 80012f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012fa:	f7ff f985 	bl	8000608 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4620      	mov	r0, r4
 8001304:	4629      	mov	r1, r5
 8001306:	f7fe ffc7 	bl	8000298 <__aeabi_dsub>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	4b2e      	ldr	r3, [pc, #184]	@ (80013d0 <Andly_GPS+0x3dc>)
 8001318:	f7ff faa0 	bl	800085c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001328:	f7fe ffb8 	bl	800029c <__adddf3>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc60 	bl	8000bf8 <__aeabi_d2f>
 8001338:	4602      	mov	r2, r0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	605a      	str	r2, [r3, #4]
        }

        // Length
    	if (*length_p != ','){
 800133e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b2c      	cmp	r3, #44	@ 0x2c
 8001344:	d006      	beq.n	8001354 <Andly_GPS+0x360>
    		sscanf(length_p, "%f", &data->length);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3310      	adds	r3, #16
 800134a:	461a      	mov	r2, r3
 800134c:	4921      	ldr	r1, [pc, #132]	@ (80013d4 <Andly_GPS+0x3e0>)
 800134e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001350:	f008 f974 	bl	800963c <siscanf>
    	}

    	// Heading
    	if (*heading_p != ','){
 8001354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b2c      	cmp	r3, #44	@ 0x2c
 800135a:	d006      	beq.n	800136a <Andly_GPS+0x376>
    		sscanf(heading_p, "%f", &data->heading);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3314      	adds	r3, #20
 8001360:	461a      	mov	r2, r3
 8001362:	491c      	ldr	r1, [pc, #112]	@ (80013d4 <Andly_GPS+0x3e0>)
 8001364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001366:	f008 f969 	bl	800963c <siscanf>
    	}

    	// Pitch
    	if (*pitch_p != ','){
 800136a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001370:	d006      	beq.n	8001380 <Andly_GPS+0x38c>
    		sscanf(pitch_p, "%f", &data->pitch);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3318      	adds	r3, #24
 8001376:	461a      	mov	r2, r3
 8001378:	4916      	ldr	r1, [pc, #88]	@ (80013d4 <Andly_GPS+0x3e0>)
 800137a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800137c:	f008 f95e 	bl	800963c <siscanf>
    	}

        if (data->gps_status == 4 || data->gps_status == 5){
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7b5b      	ldrb	r3, [r3, #13]
 8001384:	2b04      	cmp	r3, #4
 8001386:	e01e      	b.n	80013c6 <Andly_GPS+0x3d2>
        return;									// Not a GGA message or malformed, just exit.
 8001388:	bf00      	nop
 800138a:	e01c      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p, ','); if (!p) return;			// Field 1: Coordinated Universal Time
 800138c:	bf00      	nop
 800138e:	e01a      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p+1, ','); if (!p) return;		// Field 2: Latitude
 8001390:	bf00      	nop
 8001392:	e018      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p+1, ','); if (!p) return;		// Field 3: Latitude Direction
 8001394:	bf00      	nop
 8001396:	e016      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p+1, ','); if (!p) return;		// Field 4: Longitude
 8001398:	bf00      	nop
 800139a:	e014      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p+1, ','); if (!p) return;		// Field 5: Longitude Direction
 800139c:	bf00      	nop
 800139e:	e012      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p+1, ','); if (!p) return;		// Field 6: GPS State Quality
 80013a0:	bf00      	nop
 80013a2:	e010      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p+1, ','); if (!p) return;		// Field 7: Number of Satellite
 80013a4:	bf00      	nop
 80013a6:	e00e      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p+1, ','); if (!p) return;		// Field 8: hdop
 80013a8:	bf00      	nop
 80013aa:	e00c      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p+1, ','); if (!p) return;		// Field 9: Altitude
 80013ac:	bf00      	nop
 80013ae:	e00a      	b.n	80013c6 <Andly_GPS+0x3d2>
    	return;									// Not a UNIHEADINGA message or malformed, just exit.
 80013b0:	bf00      	nop
 80013b2:	e008      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p, ';'); if (!p) return;			// Field 1: Solution Status
 80013b4:	bf00      	nop
 80013b6:	e006      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p+1, ','); if (!p) return;		// Field 2: Position Type
 80013b8:	bf00      	nop
 80013ba:	e004      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p+1, ','); if (!p) return;		// Field 3: Length
 80013bc:	bf00      	nop
 80013be:	e002      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p+1, ','); if (!p) return;		// Field 4: Heading
 80013c0:	bf00      	nop
 80013c2:	e000      	b.n	80013c6 <Andly_GPS+0x3d2>
    p = strchr(p+1, ','); if (!p) return;		// Field 5: Pitch
 80013c4:	bf00      	nop
        }
    }
}
 80013c6:	3758      	adds	r7, #88	@ 0x58
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bdb0      	pop	{r4, r5, r7, pc}
 80013cc:	40590000 	.word	0x40590000
 80013d0:	404e0000 	.word	0x404e0000
 80013d4:	0800d8e8 	.word	0x0800d8e8

080013d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ReceiveDataEx, sizeof(ReceiveDataEx));
 80013dc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013e0:	4913      	ldr	r1, [pc, #76]	@ (8001430 <MX_FREERTOS_Init+0x58>)
 80013e2:	4814      	ldr	r0, [pc, #80]	@ (8001434 <MX_FREERTOS_Init+0x5c>)
 80013e4:	f002 f90d 	bl	8003602 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	osBinarySemaphore_UART = osSemaphoreNew(1, 0, NULL);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2001      	movs	r0, #1
 80013ee:	f003 fa0a 	bl	8004806 <osSemaphoreNew>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a10      	ldr	r2, [pc, #64]	@ (8001438 <MX_FREERTOS_Init+0x60>)
 80013f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	osMessageBuffer = xMessageBufferCreate(BUFFER_SIZE);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2100      	movs	r1, #0
 80013fc:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8001400:	f004 fc34 	bl	8005c6c <xStreamBufferGenericCreate>
 8001404:	4603      	mov	r3, r0
 8001406:	4a0d      	ldr	r2, [pc, #52]	@ (800143c <MX_FREERTOS_Init+0x64>)
 8001408:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800140a:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <MX_FREERTOS_Init+0x68>)
 800140c:	2100      	movs	r1, #0
 800140e:	480d      	ldr	r0, [pc, #52]	@ (8001444 <MX_FREERTOS_Init+0x6c>)
 8001410:	f003 f94c 	bl	80046ac <osThreadNew>
 8001414:	4603      	mov	r3, r0
 8001416:	4a0c      	ldr	r2, [pc, #48]	@ (8001448 <MX_FREERTOS_Init+0x70>)
 8001418:	6013      	str	r3, [r2, #0]

  /* creation of UM982Task */
  UM982TaskHandle = osThreadNew(UM982Handler, NULL, &UM982Task_attributes);
 800141a:	4a0c      	ldr	r2, [pc, #48]	@ (800144c <MX_FREERTOS_Init+0x74>)
 800141c:	2100      	movs	r1, #0
 800141e:	480c      	ldr	r0, [pc, #48]	@ (8001450 <MX_FREERTOS_Init+0x78>)
 8001420:	f003 f944 	bl	80046ac <osThreadNew>
 8001424:	4603      	mov	r3, r0
 8001426:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <MX_FREERTOS_Init+0x7c>)
 8001428:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000214 	.word	0x20000214
 8001434:	20000398 	.word	0x20000398
 8001438:	20000210 	.word	0x20000210
 800143c:	20000340 	.word	0x20000340
 8001440:	0800d978 	.word	0x0800d978
 8001444:	08001459 	.word	0x08001459
 8001448:	20000344 	.word	0x20000344
 800144c:	0800d99c 	.word	0x0800d99c
 8001450:	08001469 	.word	0x08001469
 8001454:	20000348 	.word	0x20000348

08001458 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001460:	2001      	movs	r0, #1
 8001462:	f003 f9b5 	bl	80047d0 <osDelay>
 8001466:	e7fb      	b.n	8001460 <StartDefaultTask+0x8>

08001468 <UM982Handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UM982Handler */
void UM982Handler(void *argument)
{
 8001468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800146c:	b0ed      	sub	sp, #436	@ 0x1b4
 800146e:	af0e      	add	r7, sp, #56	@ 0x38
 8001470:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001474:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001478:	6018      	str	r0, [r3, #0]

  /* Infinite loop */
  for(;;)
  {

		osStatus_t status = osSemaphoreAcquire(osBinarySemaphore_UART, pdMS_TO_TICKS(100));
 800147a:	4b81      	ldr	r3, [pc, #516]	@ (8001680 <UM982Handler+0x218>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2164      	movs	r1, #100	@ 0x64
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fa49 	bl	8004918 <osSemaphoreAcquire>
 8001486:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174

		if (status == osOK){
 800148a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f3      	bne.n	800147a <UM982Handler+0x12>
 8001492:	466b      	mov	r3, sp
 8001494:	603b      	str	r3, [r7, #0]

			HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 8001496:	2120      	movs	r1, #32
 8001498:	487a      	ldr	r0, [pc, #488]	@ (8001684 <UM982Handler+0x21c>)
 800149a:	f001 f860 	bl	800255e <HAL_GPIO_TogglePin>

			// RxBuffer Receive + Size Estimation
			received_size = xMessageBufferReceive(osMessageBuffer, ReceiveData, sizeof(ReceiveData), pdMS_TO_TICKS(100));
 800149e:	4b7a      	ldr	r3, [pc, #488]	@ (8001688 <UM982Handler+0x220>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80014a6:	2364      	movs	r3, #100	@ 0x64
 80014a8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014ac:	f004 fd20 	bl	8005ef0 <xStreamBufferReceive>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173

			// Data Processing
			if (received_size > 0){
 80014b6:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <UM982Handler+0x62>
				Andly_GPS(&Plane_Position, ReceiveData);
 80014be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014c2:	4619      	mov	r1, r3
 80014c4:	4871      	ldr	r0, [pc, #452]	@ (800168c <UM982Handler+0x224>)
 80014c6:	f7ff fd95 	bl	8000ff4 <Andly_GPS>
			}

			// TxBuffer Transmit
			HAL_UART_Transmit(&huart2, ReceiveData, received_size, 100);
 80014ca:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80014d4:	2364      	movs	r3, #100	@ 0x64
 80014d6:	486e      	ldr	r0, [pc, #440]	@ (8001690 <UM982Handler+0x228>)
 80014d8:	f002 f808 	bl	80034ec <HAL_UART_Transmit>

			int print_size = snprintf(NULL, 0, "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
						Plane_Position.latitude,
 80014dc:	4b6b      	ldr	r3, [pc, #428]	@ (800168c <UM982Handler+0x224>)
 80014de:	681b      	ldr	r3, [r3, #0]
			int print_size = snprintf(NULL, 0, "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f839 	bl	8000558 <__aeabi_f2d>
 80014e6:	e9c7 0108 	strd	r0, r1, [r7, #32]
						Plane_Position.longitude,
 80014ea:	4b68      	ldr	r3, [pc, #416]	@ (800168c <UM982Handler+0x224>)
 80014ec:	685b      	ldr	r3, [r3, #4]
			int print_size = snprintf(NULL, 0, "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f832 	bl	8000558 <__aeabi_f2d>
 80014f4:	e9c7 0106 	strd	r0, r1, [r7, #24]
						Plane_Position.altitude,
 80014f8:	4b64      	ldr	r3, [pc, #400]	@ (800168c <UM982Handler+0x224>)
 80014fa:	689b      	ldr	r3, [r3, #8]
			int print_size = snprintf(NULL, 0, "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f82b 	bl	8000558 <__aeabi_f2d>
 8001502:	e9c7 0104 	strd	r0, r1, [r7, #16]
						Plane_Position.gps_num,
 8001506:	4b61      	ldr	r3, [pc, #388]	@ (800168c <UM982Handler+0x224>)
 8001508:	7b1b      	ldrb	r3, [r3, #12]
			int print_size = snprintf(NULL, 0, "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 800150a:	461e      	mov	r6, r3
						Plane_Position.gps_status,
 800150c:	4b5f      	ldr	r3, [pc, #380]	@ (800168c <UM982Handler+0x224>)
 800150e:	7b5b      	ldrb	r3, [r3, #13]
			int print_size = snprintf(NULL, 0, "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 8001510:	60bb      	str	r3, [r7, #8]
						Plane_Position.length,
 8001512:	4b5e      	ldr	r3, [pc, #376]	@ (800168c <UM982Handler+0x224>)
 8001514:	691b      	ldr	r3, [r3, #16]
			int print_size = snprintf(NULL, 0, "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f81e 	bl	8000558 <__aeabi_f2d>
 800151c:	4680      	mov	r8, r0
 800151e:	4689      	mov	r9, r1
						Plane_Position.heading,
 8001520:	4b5a      	ldr	r3, [pc, #360]	@ (800168c <UM982Handler+0x224>)
 8001522:	695b      	ldr	r3, [r3, #20]
			int print_size = snprintf(NULL, 0, "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f817 	bl	8000558 <__aeabi_f2d>
 800152a:	4604      	mov	r4, r0
 800152c:	460d      	mov	r5, r1
						Plane_Position.pitch
 800152e:	4b57      	ldr	r3, [pc, #348]	@ (800168c <UM982Handler+0x224>)
 8001530:	699b      	ldr	r3, [r3, #24]
			int print_size = snprintf(NULL, 0, "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f810 	bl	8000558 <__aeabi_f2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8001540:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8001544:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	9307      	str	r3, [sp, #28]
 800154c:	9606      	str	r6, [sp, #24]
 800154e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001552:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001556:	ed97 7b06 	vldr	d7, [r7, #24]
 800155a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800155e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001562:	ed8d 7b00 	vstr	d7, [sp]
 8001566:	4a4b      	ldr	r2, [pc, #300]	@ (8001694 <UM982Handler+0x22c>)
 8001568:	2100      	movs	r1, #0
 800156a:	2000      	movs	r0, #0
 800156c:	f008 f812 	bl	8009594 <sniprintf>
 8001570:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
						);

			char CharData[print_size];
 8001574:	f8d7 616c 	ldr.w	r6, [r7, #364]	@ 0x16c
 8001578:	1e73      	subs	r3, r6, #1
 800157a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800157e:	4632      	mov	r2, r6
 8001580:	2300      	movs	r3, #0
 8001582:	4692      	mov	sl, r2
 8001584:	469b      	mov	fp, r3
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001592:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800159a:	4632      	mov	r2, r6
 800159c:	2300      	movs	r3, #0
 800159e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80015ae:	4629      	mov	r1, r5
 80015b0:	00cb      	lsls	r3, r1, #3
 80015b2:	4621      	mov	r1, r4
 80015b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015b8:	4621      	mov	r1, r4
 80015ba:	00ca      	lsls	r2, r1, #3
 80015bc:	4633      	mov	r3, r6
 80015be:	3307      	adds	r3, #7
 80015c0:	08db      	lsrs	r3, r3, #3
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	ebad 0d03 	sub.w	sp, sp, r3
 80015c8:	ab0e      	add	r3, sp, #56	@ 0x38
 80015ca:	3300      	adds	r3, #0
 80015cc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

			snprintf(CharData, sizeof(CharData), "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 80015d0:	623e      	str	r6, [r7, #32]
					Plane_Position.latitude,
 80015d2:	4b2e      	ldr	r3, [pc, #184]	@ (800168c <UM982Handler+0x224>)
 80015d4:	681b      	ldr	r3, [r3, #0]
			snprintf(CharData, sizeof(CharData), "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffbe 	bl	8000558 <__aeabi_f2d>
 80015dc:	e9c7 0106 	strd	r0, r1, [r7, #24]
					Plane_Position.longitude,
 80015e0:	4b2a      	ldr	r3, [pc, #168]	@ (800168c <UM982Handler+0x224>)
 80015e2:	685b      	ldr	r3, [r3, #4]
			snprintf(CharData, sizeof(CharData), "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffb7 	bl	8000558 <__aeabi_f2d>
 80015ea:	e9c7 0104 	strd	r0, r1, [r7, #16]
					Plane_Position.altitude,
 80015ee:	4b27      	ldr	r3, [pc, #156]	@ (800168c <UM982Handler+0x224>)
 80015f0:	689b      	ldr	r3, [r3, #8]
			snprintf(CharData, sizeof(CharData), "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ffb0 	bl	8000558 <__aeabi_f2d>
 80015f8:	e9c7 0102 	strd	r0, r1, [r7, #8]
					Plane_Position.gps_num,
 80015fc:	4b23      	ldr	r3, [pc, #140]	@ (800168c <UM982Handler+0x224>)
 80015fe:	7b1b      	ldrb	r3, [r3, #12]
			snprintf(CharData, sizeof(CharData), "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 8001600:	633b      	str	r3, [r7, #48]	@ 0x30
					Plane_Position.gps_status,
 8001602:	4b22      	ldr	r3, [pc, #136]	@ (800168c <UM982Handler+0x224>)
 8001604:	7b5b      	ldrb	r3, [r3, #13]
			snprintf(CharData, sizeof(CharData), "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 8001606:	607b      	str	r3, [r7, #4]
					Plane_Position.length,
 8001608:	4b20      	ldr	r3, [pc, #128]	@ (800168c <UM982Handler+0x224>)
 800160a:	691b      	ldr	r3, [r3, #16]
			snprintf(CharData, sizeof(CharData), "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ffa3 	bl	8000558 <__aeabi_f2d>
 8001612:	4680      	mov	r8, r0
 8001614:	4689      	mov	r9, r1
					Plane_Position.heading,
 8001616:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <UM982Handler+0x224>)
 8001618:	695b      	ldr	r3, [r3, #20]
			snprintf(CharData, sizeof(CharData), "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff9c 	bl	8000558 <__aeabi_f2d>
 8001620:	4604      	mov	r4, r0
 8001622:	460d      	mov	r5, r1
					Plane_Position.pitch
 8001624:	4b19      	ldr	r3, [pc, #100]	@ (800168c <UM982Handler+0x224>)
 8001626:	699b      	ldr	r3, [r3, #24]
			snprintf(CharData, sizeof(CharData), "LAT:%.6f, LON:%.6f, ALT:%.2f, SAT:%d STS:%d, LEN:%.2f, HEAD:%.2f, PIT:%.2f\n",
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff95 	bl	8000558 <__aeabi_f2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8001636:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 800163a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	9207      	str	r2, [sp, #28]
 8001642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001644:	9306      	str	r3, [sp, #24]
 8001646:	ed97 7b02 	vldr	d7, [r7, #8]
 800164a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800164e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001652:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001656:	ed97 7b06 	vldr	d7, [r7, #24]
 800165a:	ed8d 7b00 	vstr	d7, [sp]
 800165e:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <UM982Handler+0x22c>)
 8001660:	6a39      	ldr	r1, [r7, #32]
 8001662:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8001666:	f007 ff95 	bl	8009594 <sniprintf>
					);

			HAL_UART_Transmit(&huart2, (uint8_t *)CharData, sizeof(CharData), 100);
 800166a:	b2b2      	uxth	r2, r6
 800166c:	2364      	movs	r3, #100	@ 0x64
 800166e:	f8d7 1164 	ldr.w	r1, [r7, #356]	@ 0x164
 8001672:	4807      	ldr	r0, [pc, #28]	@ (8001690 <UM982Handler+0x228>)
 8001674:	f001 ff3a 	bl	80034ec <HAL_UART_Transmit>
 8001678:	f8d7 d000 	ldr.w	sp, [r7]
  {
 800167c:	e6fd      	b.n	800147a <UM982Handler+0x12>
 800167e:	bf00      	nop
 8001680:	20000210 	.word	0x20000210
 8001684:	40020000 	.word	0x40020000
 8001688:	20000340 	.word	0x20000340
 800168c:	200001f4 	.word	0x200001f4
 8001690:	200003e0 	.word	0x200003e0
 8001694:	0800d908 	.word	0x0800d908

08001698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b38      	ldr	r3, [pc, #224]	@ (8001794 <MX_GPIO_Init+0xfc>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a37      	ldr	r2, [pc, #220]	@ (8001794 <MX_GPIO_Init+0xfc>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <MX_GPIO_Init+0xfc>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <MX_GPIO_Init+0xfc>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a30      	ldr	r2, [pc, #192]	@ (8001794 <MX_GPIO_Init+0xfc>)
 80016d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b2e      	ldr	r3, [pc, #184]	@ (8001794 <MX_GPIO_Init+0xfc>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <MX_GPIO_Init+0xfc>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <MX_GPIO_Init+0xfc>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <MX_GPIO_Init+0xfc>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <MX_GPIO_Init+0xfc>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a22      	ldr	r2, [pc, #136]	@ (8001794 <MX_GPIO_Init+0xfc>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <MX_GPIO_Init+0xfc>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Yellow_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	21e0      	movs	r1, #224	@ 0xe0
 8001722:	481d      	ldr	r0, [pc, #116]	@ (8001798 <MX_GPIO_Init+0x100>)
 8001724:	f000 ff02 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001728:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800172e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	4817      	ldr	r0, [pc, #92]	@ (800179c <MX_GPIO_Init+0x104>)
 8001740:	f000 fd70 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Yellow_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Yellow_LED_Pin|Red_LED_Pin;
 8001744:	23e0      	movs	r3, #224	@ 0xe0
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	480f      	ldr	r0, [pc, #60]	@ (8001798 <MX_GPIO_Init+0x100>)
 800175c:	f000 fd62 	bl	8002224 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001760:	2301      	movs	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001764:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	480a      	ldr	r0, [pc, #40]	@ (80017a0 <MX_GPIO_Init+0x108>)
 8001776:	f000 fd55 	bl	8002224 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2105      	movs	r1, #5
 800177e:	2006      	movs	r0, #6
 8001780:	f000 fc94 	bl	80020ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001784:	2006      	movs	r0, #6
 8001786:	f000 fcad 	bl	80020e4 <HAL_NVIC_EnableIRQ>

}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	@ 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020400 	.word	0x40020400

080017a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a8:	f000 fb86 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ac:	f000 f80e 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b0:	f7ff ff72 	bl	8001698 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017b4:	f000 faa0 	bl	8001cf8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80017b8:	f000 fa74 	bl	8001ca4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017bc:	f002 ff2c 	bl	8004618 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80017c0:	f7ff fe0a 	bl	80013d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80017c4:	f002 ff4c 	bl	8004660 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <main+0x24>

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b094      	sub	sp, #80	@ 0x50
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2230      	movs	r2, #48	@ 0x30
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f007 ff9d 	bl	800971a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	4b29      	ldr	r3, [pc, #164]	@ (800189c <SystemClock_Config+0xd0>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	4a28      	ldr	r2, [pc, #160]	@ (800189c <SystemClock_Config+0xd0>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001800:	4b26      	ldr	r3, [pc, #152]	@ (800189c <SystemClock_Config+0xd0>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	4b23      	ldr	r3, [pc, #140]	@ (80018a0 <SystemClock_Config+0xd4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001818:	4a21      	ldr	r2, [pc, #132]	@ (80018a0 <SystemClock_Config+0xd4>)
 800181a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <SystemClock_Config+0xd4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800182c:	2302      	movs	r3, #2
 800182e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	2301      	movs	r3, #1
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001834:	2310      	movs	r3, #16
 8001836:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001838:	2302      	movs	r3, #2
 800183a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800183c:	2300      	movs	r3, #0
 800183e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001840:	2310      	movs	r3, #16
 8001842:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001844:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001848:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800184a:	2304      	movs	r3, #4
 800184c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800184e:	2307      	movs	r3, #7
 8001850:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fec0 	bl	80025dc <HAL_RCC_OscConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001862:	f000 f831 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001866:	230f      	movs	r3, #15
 8001868:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186a:	2302      	movs	r3, #2
 800186c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001876:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2102      	movs	r1, #2
 8001882:	4618      	mov	r0, r3
 8001884:	f001 f922 	bl	8002acc <HAL_RCC_ClockConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800188e:	f000 f81b 	bl	80018c8 <Error_Handler>
  }
}
 8001892:	bf00      	nop
 8001894:	3750      	adds	r7, #80	@ 0x50
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000

080018a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018b6:	f000 fb21 	bl	8001efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40010000 	.word	0x40010000

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <Error_Handler+0x8>

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_MspInit+0x54>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a11      	ldr	r2, [pc, #68]	@ (8001928 <HAL_MspInit+0x54>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <HAL_MspInit+0x54>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_MspInit+0x54>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_MspInit+0x54>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <HAL_MspInit+0x54>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	210f      	movs	r1, #15
 8001916:	f06f 0001 	mvn.w	r0, #1
 800191a:	f000 fbc7 	bl	80020ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	@ 0x30
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	4b2e      	ldr	r3, [pc, #184]	@ (80019fc <HAL_InitTick+0xd0>)
 8001942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001944:	4a2d      	ldr	r2, [pc, #180]	@ (80019fc <HAL_InitTick+0xd0>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6453      	str	r3, [r2, #68]	@ 0x44
 800194c:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <HAL_InitTick+0xd0>)
 800194e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001958:	f107 020c 	add.w	r2, r7, #12
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f001 fad2 	bl	8002f0c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001968:	f001 fabc 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 800196c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800196e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001970:	4a23      	ldr	r2, [pc, #140]	@ (8001a00 <HAL_InitTick+0xd4>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	0c9b      	lsrs	r3, r3, #18
 8001978:	3b01      	subs	r3, #1
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800197c:	4b21      	ldr	r3, [pc, #132]	@ (8001a04 <HAL_InitTick+0xd8>)
 800197e:	4a22      	ldr	r2, [pc, #136]	@ (8001a08 <HAL_InitTick+0xdc>)
 8001980:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001982:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <HAL_InitTick+0xd8>)
 8001984:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001988:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800198a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a04 <HAL_InitTick+0xd8>)
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001990:	4b1c      	ldr	r3, [pc, #112]	@ (8001a04 <HAL_InitTick+0xd8>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001996:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <HAL_InitTick+0xd8>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <HAL_InitTick+0xd8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80019a2:	4818      	ldr	r0, [pc, #96]	@ (8001a04 <HAL_InitTick+0xd8>)
 80019a4:	f001 fae4 	bl	8002f70 <HAL_TIM_Base_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80019ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d11b      	bne.n	80019ee <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80019b6:	4813      	ldr	r0, [pc, #76]	@ (8001a04 <HAL_InitTick+0xd8>)
 80019b8:	f001 fb34 	bl	8003024 <HAL_TIM_Base_Start_IT>
 80019bc:	4603      	mov	r3, r0
 80019be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80019c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d111      	bne.n	80019ee <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019ca:	2019      	movs	r0, #25
 80019cc:	f000 fb8a 	bl	80020e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b0f      	cmp	r3, #15
 80019d4:	d808      	bhi.n	80019e8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80019d6:	2200      	movs	r2, #0
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	2019      	movs	r0, #25
 80019dc:	f000 fb66 	bl	80020ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e0:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <HAL_InitTick+0xe0>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e002      	b.n	80019ee <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3730      	adds	r7, #48	@ 0x30
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	431bde83 	.word	0x431bde83
 8001a04:	2000034c 	.word	0x2000034c
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <NMI_Handler+0x4>

08001a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <HardFault_Handler+0x4>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <MemManage_Handler+0x4>

08001a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_Pin);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 fda2 	bl	8002594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a58:	4802      	ldr	r0, [pc, #8]	@ (8001a64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a5a:	f001 fb45 	bl	80030e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000034c 	.word	0x2000034c

08001a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	@ (8001a78 <USART1_IRQHandler+0x10>)
 8001a6e:	f001 fe25 	bl	80036bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000398 	.word	0x20000398

08001a7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a80:	4802      	ldr	r0, [pc, #8]	@ (8001a8c <USART2_IRQHandler+0x10>)
 8001a82:	f001 fe1b 	bl	80036bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200003e0 	.word	0x200003e0

08001a90 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 1 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]

	if (huart == &huart1){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ae0 <HAL_UARTEx_RxEventCallback+0x50>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d118      	bne.n	8001ad6 <HAL_UARTEx_RxEventCallback+0x46>

		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]

		HAL_GPIO_TogglePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin);
 8001aa8:	2140      	movs	r1, #64	@ 0x40
 8001aaa:	480e      	ldr	r0, [pc, #56]	@ (8001ae4 <HAL_UARTEx_RxEventCallback+0x54>)
 8001aac:	f000 fd57 	bl	800255e <HAL_GPIO_TogglePin>

		// RxBuffer Transmit
		xMessageBufferSendFromISR(osMessageBuffer, ReceiveDataEx, Size, &xHigherPriorityTaskWoken);
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <HAL_UARTEx_RxEventCallback+0x58>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	887a      	ldrh	r2, [r7, #2]
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	490c      	ldr	r1, [pc, #48]	@ (8001aec <HAL_UARTEx_RxEventCallback+0x5c>)
 8001abc:	f004 f968 	bl	8005d90 <xStreamBufferSendFromISR>

		// Re-start Receive for potential missing data
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ReceiveDataEx, sizeof(ReceiveDataEx));
 8001ac0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ac4:	4909      	ldr	r1, [pc, #36]	@ (8001aec <HAL_UARTEx_RxEventCallback+0x5c>)
 8001ac6:	4806      	ldr	r0, [pc, #24]	@ (8001ae0 <HAL_UARTEx_RxEventCallback+0x50>)
 8001ac8:	f001 fd9b 	bl	8003602 <HAL_UARTEx_ReceiveToIdle_IT>

		osSemaphoreRelease(osBinarySemaphore_UART);
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <HAL_UARTEx_RxEventCallback+0x60>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 ff73 	bl	80049bc <osSemaphoreRelease>
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000398 	.word	0x20000398
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	20000340 	.word	0x20000340
 8001aec:	20000214 	.word	0x20000214
 8001af0:	20000210 	.word	0x20000210

08001af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return 1;
 8001af8:	2301      	movs	r3, #1
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_kill>:

int _kill(int pid, int sig)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b0e:	f007 fecf 	bl	80098b0 <__errno>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2216      	movs	r2, #22
 8001b16:	601a      	str	r2, [r3, #0]
  return -1;
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_exit>:

void _exit (int status)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ffe7 	bl	8001b04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b36:	bf00      	nop
 8001b38:	e7fd      	b.n	8001b36 <_exit+0x12>

08001b3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e00a      	b.n	8001b62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b4c:	f3af 8000 	nop.w
 8001b50:	4601      	mov	r1, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	60ba      	str	r2, [r7, #8]
 8001b58:	b2ca      	uxtb	r2, r1
 8001b5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	dbf0      	blt.n	8001b4c <_read+0x12>
  }

  return len;
 8001b6a:	687b      	ldr	r3, [r7, #4]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	e009      	b.n	8001b9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	60ba      	str	r2, [r7, #8]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	3301      	adds	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dbf1      	blt.n	8001b86 <_write+0x12>
  }
  return len;
 8001ba2:	687b      	ldr	r3, [r7, #4]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_close>:

int _close(int file)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bd4:	605a      	str	r2, [r3, #4]
  return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_isatty>:

int _isatty(int file)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	@ (8001c70 <_sbrk+0x5c>)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <_sbrk+0x60>)
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <_sbrk+0x64>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	@ (8001c7c <_sbrk+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c44:	f007 fe34 	bl	80098b0 <__errno>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <_sbrk+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20018000 	.word	0x20018000
 8001c74:	00000400 	.word	0x00000400
 8001c78:	20000394 	.word	0x20000394
 8001c7c:	20004f60 	.word	0x20004f60

08001c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <SystemInit+0x20>)
 8001c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ca0 <SystemInit+0x20>)
 8001c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_USART1_UART_Init+0x4c>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	@ (8001cf4 <MX_USART1_UART_Init+0x50>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <MX_USART1_UART_Init+0x4c>)
 8001cb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <MX_USART1_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <MX_USART1_UART_Init+0x4c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <MX_USART1_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <MX_USART1_UART_Init+0x4c>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <MX_USART1_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <MX_USART1_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_USART1_UART_Init+0x4c>)
 8001cdc:	f001 fbb6 	bl	800344c <HAL_UART_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ce6:	f7ff fdef 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000398 	.word	0x20000398
 8001cf4:	40011000 	.word	0x40011000

08001cf8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <MX_USART2_UART_Init+0x50>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d30:	f001 fb8c 	bl	800344c <HAL_UART_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d3a:	f7ff fdc5 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200003e0 	.word	0x200003e0
 8001d48:	40004400 	.word	0x40004400

08001d4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	@ 0x30
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a3a      	ldr	r2, [pc, #232]	@ (8001e54 <HAL_UART_MspInit+0x108>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d135      	bne.n	8001dda <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	4b39      	ldr	r3, [pc, #228]	@ (8001e58 <HAL_UART_MspInit+0x10c>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	4a38      	ldr	r2, [pc, #224]	@ (8001e58 <HAL_UART_MspInit+0x10c>)
 8001d78:	f043 0310 	orr.w	r3, r3, #16
 8001d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7e:	4b36      	ldr	r3, [pc, #216]	@ (8001e58 <HAL_UART_MspInit+0x10c>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	4b32      	ldr	r3, [pc, #200]	@ (8001e58 <HAL_UART_MspInit+0x10c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a31      	ldr	r2, [pc, #196]	@ (8001e58 <HAL_UART_MspInit+0x10c>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e58 <HAL_UART_MspInit+0x10c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001da6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001db8:	2307      	movs	r3, #7
 8001dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4826      	ldr	r0, [pc, #152]	@ (8001e5c <HAL_UART_MspInit+0x110>)
 8001dc4:	f000 fa2e 	bl	8002224 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2105      	movs	r1, #5
 8001dcc:	2025      	movs	r0, #37	@ 0x25
 8001dce:	f000 f96d 	bl	80020ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dd2:	2025      	movs	r0, #37	@ 0x25
 8001dd4:	f000 f986 	bl	80020e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dd8:	e038      	b.n	8001e4c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a20      	ldr	r2, [pc, #128]	@ (8001e60 <HAL_UART_MspInit+0x114>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d133      	bne.n	8001e4c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_UART_MspInit+0x10c>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	4a1a      	ldr	r2, [pc, #104]	@ (8001e58 <HAL_UART_MspInit+0x10c>)
 8001dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_UART_MspInit+0x10c>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <HAL_UART_MspInit+0x10c>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e08:	4a13      	ldr	r2, [pc, #76]	@ (8001e58 <HAL_UART_MspInit+0x10c>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e10:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_UART_MspInit+0x10c>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e1c:	230c      	movs	r3, #12
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4809      	ldr	r0, [pc, #36]	@ (8001e5c <HAL_UART_MspInit+0x110>)
 8001e38:	f000 f9f4 	bl	8002224 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2105      	movs	r1, #5
 8001e40:	2026      	movs	r0, #38	@ 0x26
 8001e42:	f000 f933 	bl	80020ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e46:	2026      	movs	r0, #38	@ 0x26
 8001e48:	f000 f94c 	bl	80020e4 <HAL_NVIC_EnableIRQ>
}
 8001e4c:	bf00      	nop
 8001e4e:	3730      	adds	r7, #48	@ 0x30
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40011000 	.word	0x40011000
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40004400 	.word	0x40004400

08001e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e68:	f7ff ff0a 	bl	8001c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e6c:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e6e:	490d      	ldr	r1, [pc, #52]	@ (8001ea4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e84:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e92:	f007 fd13 	bl	80098bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e96:	f7ff fc85 	bl	80017a4 <main>
  bx  lr    
 8001e9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ea8:	0800de34 	.word	0x0800de34
  ldr r2, =_sbss
 8001eac:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001eb0:	20004f60 	.word	0x20004f60

08001eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <HAL_Init+0x40>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <HAL_Init+0x40>)
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <HAL_Init+0x40>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 f8d8 	bl	8002096 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff fd20 	bl	800192c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fcf2 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20000428 	.word	0x20000428

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	@ (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000428 	.word	0x20000428

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	@ (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	@ (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	@ (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	@ (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	@ 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ff4c 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020be:	f7ff ff61 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 80020c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	6978      	ldr	r0, [r7, #20]
 80020ca:	f7ff ffb1 	bl	8002030 <NVIC_EncodePriority>
 80020ce:	4602      	mov	r2, r0
 80020d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d4:	4611      	mov	r1, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff80 	bl	8001fdc <__NVIC_SetPriority>
}
 80020dc:	bf00      	nop
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff54 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800210e:	f7ff ff09 	bl	8001f24 <HAL_GetTick>
 8002112:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d008      	beq.n	8002132 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2280      	movs	r2, #128	@ 0x80
 8002124:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e052      	b.n	80021d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0216 	bic.w	r2, r2, #22
 8002140:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002150:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d103      	bne.n	8002162 <HAL_DMA_Abort+0x62>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0208 	bic.w	r2, r2, #8
 8002170:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002182:	e013      	b.n	80021ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002184:	f7ff fece 	bl	8001f24 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b05      	cmp	r3, #5
 8002190:	d90c      	bls.n	80021ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2203      	movs	r2, #3
 800219c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e015      	b.n	80021d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1e4      	bne.n	8002184 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021be:	223f      	movs	r2, #63	@ 0x3f
 80021c0:	409a      	lsls	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d004      	beq.n	80021fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00c      	b.n	8002218 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2205      	movs	r2, #5
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0201 	bic.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	@ 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e159      	b.n	80024f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	429a      	cmp	r2, r3
 800225a:	f040 8148 	bne.w	80024ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d005      	beq.n	8002276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	2b02      	cmp	r3, #2
 8002274:	d130      	bne.n	80022d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	2203      	movs	r2, #3
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 0201 	and.w	r2, r3, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d017      	beq.n	8002314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d123      	bne.n	8002368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	08da      	lsrs	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3208      	adds	r2, #8
 8002328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	69b9      	ldr	r1, [r7, #24]
 8002364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2203      	movs	r2, #3
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0203 	and.w	r2, r3, #3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a2 	beq.w	80024ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b57      	ldr	r3, [pc, #348]	@ (800250c <HAL_GPIO_Init+0x2e8>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a56      	ldr	r2, [pc, #344]	@ (800250c <HAL_GPIO_Init+0x2e8>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	4b54      	ldr	r3, [pc, #336]	@ (800250c <HAL_GPIO_Init+0x2e8>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c6:	4a52      	ldr	r2, [pc, #328]	@ (8002510 <HAL_GPIO_Init+0x2ec>)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	220f      	movs	r2, #15
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a49      	ldr	r2, [pc, #292]	@ (8002514 <HAL_GPIO_Init+0x2f0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d019      	beq.n	8002426 <HAL_GPIO_Init+0x202>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a48      	ldr	r2, [pc, #288]	@ (8002518 <HAL_GPIO_Init+0x2f4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_GPIO_Init+0x1fe>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a47      	ldr	r2, [pc, #284]	@ (800251c <HAL_GPIO_Init+0x2f8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00d      	beq.n	800241e <HAL_GPIO_Init+0x1fa>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a46      	ldr	r2, [pc, #280]	@ (8002520 <HAL_GPIO_Init+0x2fc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <HAL_GPIO_Init+0x1f6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a45      	ldr	r2, [pc, #276]	@ (8002524 <HAL_GPIO_Init+0x300>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_GPIO_Init+0x1f2>
 8002412:	2304      	movs	r3, #4
 8002414:	e008      	b.n	8002428 <HAL_GPIO_Init+0x204>
 8002416:	2307      	movs	r3, #7
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x204>
 800241a:	2303      	movs	r3, #3
 800241c:	e004      	b.n	8002428 <HAL_GPIO_Init+0x204>
 800241e:	2302      	movs	r3, #2
 8002420:	e002      	b.n	8002428 <HAL_GPIO_Init+0x204>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_GPIO_Init+0x204>
 8002426:	2300      	movs	r3, #0
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	f002 0203 	and.w	r2, r2, #3
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	4093      	lsls	r3, r2
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002438:	4935      	ldr	r1, [pc, #212]	@ (8002510 <HAL_GPIO_Init+0x2ec>)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002446:	4b38      	ldr	r3, [pc, #224]	@ (8002528 <HAL_GPIO_Init+0x304>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246a:	4a2f      	ldr	r2, [pc, #188]	@ (8002528 <HAL_GPIO_Init+0x304>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002470:	4b2d      	ldr	r3, [pc, #180]	@ (8002528 <HAL_GPIO_Init+0x304>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002494:	4a24      	ldr	r2, [pc, #144]	@ (8002528 <HAL_GPIO_Init+0x304>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800249a:	4b23      	ldr	r3, [pc, #140]	@ (8002528 <HAL_GPIO_Init+0x304>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024be:	4a1a      	ldr	r2, [pc, #104]	@ (8002528 <HAL_GPIO_Init+0x304>)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <HAL_GPIO_Init+0x304>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002528 <HAL_GPIO_Init+0x304>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3301      	adds	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b0f      	cmp	r3, #15
 80024f8:	f67f aea2 	bls.w	8002240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3724      	adds	r7, #36	@ 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	40013800 	.word	0x40013800
 8002514:	40020000 	.word	0x40020000
 8002518:	40020400 	.word	0x40020400
 800251c:	40020800 	.word	0x40020800
 8002520:	40020c00 	.word	0x40020c00
 8002524:	40021000 	.word	0x40021000
 8002528:	40013c00 	.word	0x40013c00

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002548:	e003      	b.n	8002552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002570:	887a      	ldrh	r2, [r7, #2]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4013      	ands	r3, r2
 8002576:	041a      	lsls	r2, r3, #16
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	43d9      	mvns	r1, r3
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	400b      	ands	r3, r1
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d006      	beq.n	80025b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025aa:	4a05      	ldr	r2, [pc, #20]	@ (80025c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f806 	bl	80025c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40013c00 	.word	0x40013c00

080025c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e267      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d075      	beq.n	80026e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025fa:	4b88      	ldr	r3, [pc, #544]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b04      	cmp	r3, #4
 8002604:	d00c      	beq.n	8002620 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002606:	4b85      	ldr	r3, [pc, #532]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800260e:	2b08      	cmp	r3, #8
 8002610:	d112      	bne.n	8002638 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002612:	4b82      	ldr	r3, [pc, #520]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800261a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800261e:	d10b      	bne.n	8002638 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4b7e      	ldr	r3, [pc, #504]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d05b      	beq.n	80026e4 <HAL_RCC_OscConfig+0x108>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d157      	bne.n	80026e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e242      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x74>
 8002642:	4b76      	ldr	r3, [pc, #472]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a75      	ldr	r2, [pc, #468]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e01d      	b.n	800268c <HAL_RCC_OscConfig+0xb0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x98>
 800265a:	4b70      	ldr	r3, [pc, #448]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6f      	ldr	r2, [pc, #444]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b6d      	ldr	r3, [pc, #436]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6c      	ldr	r2, [pc, #432]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0xb0>
 8002674:	4b69      	ldr	r3, [pc, #420]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a68      	ldr	r2, [pc, #416]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800267a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b66      	ldr	r3, [pc, #408]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a65      	ldr	r2, [pc, #404]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800268a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff fc46 	bl	8001f24 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7ff fc42 	bl	8001f24 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	@ 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e207      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b5b      	ldr	r3, [pc, #364]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0xc0>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff fc32 	bl	8001f24 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c4:	f7ff fc2e 	bl	8001f24 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	@ 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e1f3      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	4b51      	ldr	r3, [pc, #324]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0xe8>
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d063      	beq.n	80027ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026f2:	4b4a      	ldr	r3, [pc, #296]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fe:	4b47      	ldr	r3, [pc, #284]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11c      	bne.n	8002744 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270a:	4b44      	ldr	r3, [pc, #272]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d116      	bne.n	8002744 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	4b41      	ldr	r3, [pc, #260]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_RCC_OscConfig+0x152>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e1c7      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4937      	ldr	r1, [pc, #220]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	e03a      	b.n	80027ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274c:	4b34      	ldr	r3, [pc, #208]	@ (8002820 <HAL_RCC_OscConfig+0x244>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7ff fbe7 	bl	8001f24 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275a:	f7ff fbe3 	bl	8001f24 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e1a8      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	4b2b      	ldr	r3, [pc, #172]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b28      	ldr	r3, [pc, #160]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4925      	ldr	r1, [pc, #148]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
 800278c:	e015      	b.n	80027ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278e:	4b24      	ldr	r3, [pc, #144]	@ (8002820 <HAL_RCC_OscConfig+0x244>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff fbc6 	bl	8001f24 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279c:	f7ff fbc2 	bl	8001f24 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e187      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	4b1b      	ldr	r3, [pc, #108]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d036      	beq.n	8002834 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d016      	beq.n	80027fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_RCC_OscConfig+0x248>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7ff fba6 	bl	8001f24 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027dc:	f7ff fba2 	bl	8001f24 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e167      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_RCC_OscConfig+0x240>)
 80027f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x200>
 80027fa:	e01b      	b.n	8002834 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fc:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <HAL_RCC_OscConfig+0x248>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7ff fb8f 	bl	8001f24 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	e00e      	b.n	8002828 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280a:	f7ff fb8b 	bl	8001f24 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d907      	bls.n	8002828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e150      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
 800281c:	40023800 	.word	0x40023800
 8002820:	42470000 	.word	0x42470000
 8002824:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	4b88      	ldr	r3, [pc, #544]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 800282a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ea      	bne.n	800280a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8097 	beq.w	8002970 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002846:	4b81      	ldr	r3, [pc, #516]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10f      	bne.n	8002872 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b7d      	ldr	r3, [pc, #500]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	4a7c      	ldr	r2, [pc, #496]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 800285c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002860:	6413      	str	r3, [r2, #64]	@ 0x40
 8002862:	4b7a      	ldr	r3, [pc, #488]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286e:	2301      	movs	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b77      	ldr	r3, [pc, #476]	@ (8002a50 <HAL_RCC_OscConfig+0x474>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d118      	bne.n	80028b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287e:	4b74      	ldr	r3, [pc, #464]	@ (8002a50 <HAL_RCC_OscConfig+0x474>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a73      	ldr	r2, [pc, #460]	@ (8002a50 <HAL_RCC_OscConfig+0x474>)
 8002884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288a:	f7ff fb4b 	bl	8001f24 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002892:	f7ff fb47 	bl	8001f24 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e10c      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a50 <HAL_RCC_OscConfig+0x474>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d106      	bne.n	80028c6 <HAL_RCC_OscConfig+0x2ea>
 80028b8:	4b64      	ldr	r3, [pc, #400]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028bc:	4a63      	ldr	r2, [pc, #396]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c4:	e01c      	b.n	8002900 <HAL_RCC_OscConfig+0x324>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x30c>
 80028ce:	4b5f      	ldr	r3, [pc, #380]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	4a5e      	ldr	r2, [pc, #376]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028da:	4b5c      	ldr	r3, [pc, #368]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	4a5b      	ldr	r2, [pc, #364]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0x324>
 80028e8:	4b58      	ldr	r3, [pc, #352]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ec:	4a57      	ldr	r2, [pc, #348]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f4:	4b55      	ldr	r3, [pc, #340]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	4a54      	ldr	r2, [pc, #336]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80028fa:	f023 0304 	bic.w	r3, r3, #4
 80028fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d015      	beq.n	8002934 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7ff fb0c 	bl	8001f24 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7ff fb08 	bl	8001f24 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0cb      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002926:	4b49      	ldr	r3, [pc, #292]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0ee      	beq.n	8002910 <HAL_RCC_OscConfig+0x334>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002934:	f7ff faf6 	bl	8001f24 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7ff faf2 	bl	8001f24 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0b5      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002952:	4b3e      	ldr	r3, [pc, #248]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1ee      	bne.n	800293c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800295e:	7dfb      	ldrb	r3, [r7, #23]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002964:	4b39      	ldr	r3, [pc, #228]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	4a38      	ldr	r2, [pc, #224]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 800296a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800296e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a1 	beq.w	8002abc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800297a:	4b34      	ldr	r3, [pc, #208]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	d05c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d141      	bne.n	8002a12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b31      	ldr	r3, [pc, #196]	@ (8002a54 <HAL_RCC_OscConfig+0x478>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7ff fac6 	bl	8001f24 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7ff fac2 	bl	8001f24 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e087      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	4b27      	ldr	r3, [pc, #156]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	019b      	lsls	r3, r3, #6
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	3b01      	subs	r3, #1
 80029d4:	041b      	lsls	r3, r3, #16
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	491b      	ldr	r1, [pc, #108]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <HAL_RCC_OscConfig+0x478>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ea:	f7ff fa9b 	bl	8001f24 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f2:	f7ff fa97 	bl	8001f24 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e05c      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x416>
 8002a10:	e054      	b.n	8002abc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4b10      	ldr	r3, [pc, #64]	@ (8002a54 <HAL_RCC_OscConfig+0x478>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7ff fa84 	bl	8001f24 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7ff fa80 	bl	8001f24 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e045      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_OscConfig+0x470>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x444>
 8002a3e:	e03d      	b.n	8002abc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e038      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40007000 	.word	0x40007000
 8002a54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ec>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d028      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d121      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d11a      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a88:	4013      	ands	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d111      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800

08002acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0cc      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b68      	ldr	r3, [pc, #416]	@ (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d90c      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b65      	ldr	r3, [pc, #404]	@ (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b63      	ldr	r3, [pc, #396]	@ (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b8      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b59      	ldr	r3, [pc, #356]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a58      	ldr	r2, [pc, #352]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b38:	4b53      	ldr	r3, [pc, #332]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b50      	ldr	r3, [pc, #320]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	494d      	ldr	r1, [pc, #308]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d044      	beq.n	8002bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d119      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e067      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002baa:	4b37      	ldr	r3, [pc, #220]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4934      	ldr	r1, [pc, #208]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7ff f9b2 	bl	8001f24 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7ff f9ae 	bl	8001f24 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e04f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	4b2b      	ldr	r3, [pc, #172]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 020c 	and.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1eb      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b25      	ldr	r3, [pc, #148]	@ (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d20c      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b22      	ldr	r3, [pc, #136]	@ (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b20      	ldr	r3, [pc, #128]	@ (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e032      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4916      	ldr	r1, [pc, #88]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3e:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	490e      	ldr	r1, [pc, #56]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c52:	f000 f821 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	@ (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490a      	ldr	r1, [pc, #40]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a09      	ldr	r2, [pc, #36]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fe5a 	bl	800192c <HAL_InitTick>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023c00 	.word	0x40023c00
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	0800d9c0 	.word	0x0800d9c0
 8002c90:	20000000 	.word	0x20000000
 8002c94:	20000004 	.word	0x20000004

08002c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c9c:	b094      	sub	sp, #80	@ 0x50
 8002c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb0:	4b79      	ldr	r3, [pc, #484]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d00d      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	f200 80e1 	bhi.w	8002e84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x34>
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cca:	e0db      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ccc:	4b73      	ldr	r3, [pc, #460]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002cce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cd0:	e0db      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd2:	4b73      	ldr	r3, [pc, #460]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cd6:	e0d8      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ce0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d063      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cee:	4b6a      	ldr	r3, [pc, #424]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d02:	2300      	movs	r3, #0
 8002d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	462b      	mov	r3, r5
 8002d0e:	f04f 0000 	mov.w	r0, #0
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	0159      	lsls	r1, r3, #5
 8002d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d1c:	0150      	lsls	r0, r2, #5
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4621      	mov	r1, r4
 8002d24:	1a51      	subs	r1, r2, r1
 8002d26:	6139      	str	r1, [r7, #16]
 8002d28:	4629      	mov	r1, r5
 8002d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d3c:	4659      	mov	r1, fp
 8002d3e:	018b      	lsls	r3, r1, #6
 8002d40:	4651      	mov	r1, sl
 8002d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d46:	4651      	mov	r1, sl
 8002d48:	018a      	lsls	r2, r1, #6
 8002d4a:	4651      	mov	r1, sl
 8002d4c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d50:	4659      	mov	r1, fp
 8002d52:	eb63 0901 	sbc.w	r9, r3, r1
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d6a:	4690      	mov	r8, r2
 8002d6c:	4699      	mov	r9, r3
 8002d6e:	4623      	mov	r3, r4
 8002d70:	eb18 0303 	adds.w	r3, r8, r3
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	462b      	mov	r3, r5
 8002d78:	eb49 0303 	adc.w	r3, r9, r3
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	024b      	lsls	r3, r1, #9
 8002d8e:	4621      	mov	r1, r4
 8002d90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d94:	4621      	mov	r1, r4
 8002d96:	024a      	lsls	r2, r1, #9
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d9e:	2200      	movs	r2, #0
 8002da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002da4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002da8:	f7fd ff76 	bl	8000c98 <__aeabi_uldivmod>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4613      	mov	r3, r2
 8002db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002db4:	e058      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db6:	4b38      	ldr	r3, [pc, #224]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	099b      	lsrs	r3, r3, #6
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	f04f 0000 	mov.w	r0, #0
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	0159      	lsls	r1, r3, #5
 8002dde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de2:	0150      	lsls	r0, r2, #5
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4641      	mov	r1, r8
 8002dea:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dee:	4649      	mov	r1, r9
 8002df0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e08:	ebb2 040a 	subs.w	r4, r2, sl
 8002e0c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	00eb      	lsls	r3, r5, #3
 8002e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1e:	00e2      	lsls	r2, r4, #3
 8002e20:	4614      	mov	r4, r2
 8002e22:	461d      	mov	r5, r3
 8002e24:	4643      	mov	r3, r8
 8002e26:	18e3      	adds	r3, r4, r3
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	eb45 0303 	adc.w	r3, r5, r3
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e3e:	4629      	mov	r1, r5
 8002e40:	028b      	lsls	r3, r1, #10
 8002e42:	4621      	mov	r1, r4
 8002e44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e48:	4621      	mov	r1, r4
 8002e4a:	028a      	lsls	r2, r1, #10
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e52:	2200      	movs	r2, #0
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	61fa      	str	r2, [r7, #28]
 8002e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e5c:	f7fd ff1c 	bl	8000c98 <__aeabi_uldivmod>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4613      	mov	r3, r2
 8002e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	3301      	adds	r3, #1
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e82:	e002      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3750      	adds	r7, #80	@ 0x50
 8002e90:	46bd      	mov	sp, r7
 8002e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	00f42400 	.word	0x00f42400
 8002ea0:	007a1200 	.word	0x007a1200

08002ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	@ (8002eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000000 	.word	0x20000000

08002ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ec0:	f7ff fff0 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0a9b      	lsrs	r3, r3, #10
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4903      	ldr	r1, [pc, #12]	@ (8002ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	0800d9d0 	.word	0x0800d9d0

08002ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ee8:	f7ff ffdc 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	0b5b      	lsrs	r3, r3, #13
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4903      	ldr	r1, [pc, #12]	@ (8002f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	0800d9d0 	.word	0x0800d9d0

08002f0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	220f      	movs	r2, #15
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f1c:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0203 	and.w	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f28:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f34:	4b0c      	ldr	r3, [pc, #48]	@ (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f40:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <HAL_RCC_GetClockConfig+0x5c>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	08db      	lsrs	r3, r3, #3
 8002f46:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f4e:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <HAL_RCC_GetClockConfig+0x60>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0207 	and.w	r2, r3, #7
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40023c00 	.word	0x40023c00

08002f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e041      	b.n	8003006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f839 	bl	800300e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 f9b2 	bl	8003318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d001      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e044      	b.n	80030c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1e      	ldr	r2, [pc, #120]	@ (80030d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d018      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003066:	d013      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1a      	ldr	r2, [pc, #104]	@ (80030d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00e      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <HAL_TIM_Base_Start_IT+0xb8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a17      	ldr	r2, [pc, #92]	@ (80030e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x6c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a16      	ldr	r2, [pc, #88]	@ (80030e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d111      	bne.n	80030b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d010      	beq.n	80030c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b2:	e007      	b.n	80030c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800
 80030e0:	40000c00 	.word	0x40000c00
 80030e4:	40014000 	.word	0x40014000

080030e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d020      	beq.n	800314c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01b      	beq.n	800314c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0202 	mvn.w	r2, #2
 800311c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f8d2 	bl	80032dc <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8c4 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f8d5 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d020      	beq.n	8003198 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01b      	beq.n	8003198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0204 	mvn.w	r2, #4
 8003168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8ac 	bl	80032dc <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f89e 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f8af 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d020      	beq.n	80031e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01b      	beq.n	80031e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0208 	mvn.w	r2, #8
 80031b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2204      	movs	r2, #4
 80031ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f886 	bl	80032dc <HAL_TIM_IC_CaptureCallback>
 80031d0:	e005      	b.n	80031de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f878 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f889 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d020      	beq.n	8003230 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01b      	beq.n	8003230 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0210 	mvn.w	r2, #16
 8003200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2208      	movs	r2, #8
 8003206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f860 	bl	80032dc <HAL_TIM_IC_CaptureCallback>
 800321c:	e005      	b.n	800322a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f852 	bl	80032c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f863 	bl	80032f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00c      	beq.n	8003254 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0201 	mvn.w	r2, #1
 800324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fe fb28 	bl	80018a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00c      	beq.n	8003278 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8e0 	bl	8003438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00c      	beq.n	800329c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f834 	bl	8003304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0220 	mvn.w	r2, #32
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8b2 	bl	8003424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a37      	ldr	r2, [pc, #220]	@ (8003408 <TIM_Base_SetConfig+0xf0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00f      	beq.n	8003350 <TIM_Base_SetConfig+0x38>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003336:	d00b      	beq.n	8003350 <TIM_Base_SetConfig+0x38>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a34      	ldr	r2, [pc, #208]	@ (800340c <TIM_Base_SetConfig+0xf4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d007      	beq.n	8003350 <TIM_Base_SetConfig+0x38>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a33      	ldr	r2, [pc, #204]	@ (8003410 <TIM_Base_SetConfig+0xf8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d003      	beq.n	8003350 <TIM_Base_SetConfig+0x38>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a32      	ldr	r2, [pc, #200]	@ (8003414 <TIM_Base_SetConfig+0xfc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d108      	bne.n	8003362 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a28      	ldr	r2, [pc, #160]	@ (8003408 <TIM_Base_SetConfig+0xf0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01b      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003370:	d017      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a25      	ldr	r2, [pc, #148]	@ (800340c <TIM_Base_SetConfig+0xf4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a24      	ldr	r2, [pc, #144]	@ (8003410 <TIM_Base_SetConfig+0xf8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00f      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a23      	ldr	r2, [pc, #140]	@ (8003414 <TIM_Base_SetConfig+0xfc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00b      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a22      	ldr	r2, [pc, #136]	@ (8003418 <TIM_Base_SetConfig+0x100>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d007      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a21      	ldr	r2, [pc, #132]	@ (800341c <TIM_Base_SetConfig+0x104>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <TIM_Base_SetConfig+0x8a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a20      	ldr	r2, [pc, #128]	@ (8003420 <TIM_Base_SetConfig+0x108>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d108      	bne.n	80033b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003408 <TIM_Base_SetConfig+0xf0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d103      	bne.n	80033e2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f043 0204 	orr.w	r2, r3, #4
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40010000 	.word	0x40010000
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800
 8003414:	40000c00 	.word	0x40000c00
 8003418:	40014000 	.word	0x40014000
 800341c:	40014400 	.word	0x40014400
 8003420:	40014800 	.word	0x40014800

08003424 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e042      	b.n	80034e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fe fc6a 	bl	8001d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2224      	movs	r2, #36	@ 0x24
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800348e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fe09 	bl	80040a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	@ 0x28
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b20      	cmp	r3, #32
 800350a:	d175      	bne.n	80035f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_UART_Transmit+0x2c>
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e06e      	b.n	80035fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2221      	movs	r2, #33	@ 0x21
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800352a:	f7fe fcfb 	bl	8001f24 <HAL_GetTick>
 800352e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	88fa      	ldrh	r2, [r7, #6]
 8003534:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	88fa      	ldrh	r2, [r7, #6]
 800353a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003544:	d108      	bne.n	8003558 <HAL_UART_Transmit+0x6c>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d104      	bne.n	8003558 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	e003      	b.n	8003560 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003560:	e02e      	b.n	80035c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2200      	movs	r2, #0
 800356a:	2180      	movs	r1, #128	@ 0x80
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fb6d 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e03a      	b.n	80035fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003598:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	3302      	adds	r3, #2
 800359e:	61bb      	str	r3, [r7, #24]
 80035a0:	e007      	b.n	80035b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	3301      	adds	r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1cb      	bne.n	8003562 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	2140      	movs	r1, #64	@ 0x40
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fb39 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e006      	b.n	80035fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b08c      	sub	sp, #48	@ 0x30
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	4613      	mov	r3, r2
 800360e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b20      	cmp	r3, #32
 800361a:	d14a      	bne.n	80036b2 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e043      	b.n	80036b4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	461a      	mov	r2, r3
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fb5d 	bl	8003cfe <UART_Start_Receive_IT>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800364a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800364e:	2b00      	cmp	r3, #0
 8003650:	d12c      	bne.n	80036ac <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	2b01      	cmp	r3, #1
 8003658:	d125      	bne.n	80036a6 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	330c      	adds	r3, #12
 8003676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	617b      	str	r3, [r7, #20]
   return(result);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f043 0310 	orr.w	r3, r3, #16
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003690:	627a      	str	r2, [r7, #36]	@ 0x24
 8003692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	6a39      	ldr	r1, [r7, #32]
 8003696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	61fb      	str	r3, [r7, #28]
   return(result);
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e5      	bne.n	8003670 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80036a4:	e002      	b.n	80036ac <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80036ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036b0:	e000      	b.n	80036b4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80036b2:	2302      	movs	r3, #2
  }
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3730      	adds	r7, #48	@ 0x30
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b0ba      	sub	sp, #232	@ 0xe8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10f      	bne.n	8003722 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_UART_IRQHandler+0x66>
 800370e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fc05 	bl	8003f2a <UART_Receive_IT>
      return;
 8003720:	e273      	b.n	8003c0a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80de 	beq.w	80038e8 <HAL_UART_IRQHandler+0x22c>
 800372c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800373c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80d1 	beq.w	80038e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <HAL_UART_IRQHandler+0xae>
 8003752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	f043 0201 	orr.w	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_UART_IRQHandler+0xd2>
 8003776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003786:	f043 0202 	orr.w	r2, r3, #2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_UART_IRQHandler+0xf6>
 800379a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d011      	beq.n	80037e2 <HAL_UART_IRQHandler+0x126>
 80037be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d105      	bne.n	80037d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	f043 0208 	orr.w	r2, r3, #8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 820a 	beq.w	8003c00 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_UART_IRQHandler+0x14e>
 80037f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fb90 	bl	8003f2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003814:	2b40      	cmp	r3, #64	@ 0x40
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d103      	bne.n	8003836 <HAL_UART_IRQHandler+0x17a>
 800382e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d04f      	beq.n	80038d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fa9b 	bl	8003d72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003846:	2b40      	cmp	r3, #64	@ 0x40
 8003848:	d141      	bne.n	80038ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3314      	adds	r3, #20
 8003850:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003860:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003864:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003868:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3314      	adds	r3, #20
 8003872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003876:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800387a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800388e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1d9      	bne.n	800384a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d013      	beq.n	80038c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a2:	4a8a      	ldr	r2, [pc, #552]	@ (8003acc <HAL_UART_IRQHandler+0x410>)
 80038a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fc98 	bl	80021e0 <HAL_DMA_Abort_IT>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038c0:	4610      	mov	r0, r2
 80038c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c4:	e00e      	b.n	80038e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f9b6 	bl	8003c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038cc:	e00a      	b.n	80038e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f9b2 	bl	8003c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d4:	e006      	b.n	80038e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9ae 	bl	8003c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80038e2:	e18d      	b.n	8003c00 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	bf00      	nop
    return;
 80038e6:	e18b      	b.n	8003c00 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	f040 8167 	bne.w	8003bc0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8160 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8159 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392e:	2b40      	cmp	r3, #64	@ 0x40
 8003930:	f040 80ce 	bne.w	8003ad0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003940:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80a9 	beq.w	8003a9c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800394e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003952:	429a      	cmp	r2, r3
 8003954:	f080 80a2 	bcs.w	8003a9c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800395e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800396a:	f000 8088 	beq.w	8003a7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003984:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800398c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800399a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800399e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1d9      	bne.n	800396e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3314      	adds	r3, #20
 80039c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3314      	adds	r3, #20
 80039da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e1      	bne.n	80039ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3314      	adds	r3, #20
 80039fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3314      	adds	r3, #20
 8003a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e3      	bne.n	80039f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a4e:	f023 0310 	bic.w	r3, r3, #16
 8003a52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e3      	bne.n	8003a3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fb41 	bl	8002100 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	4619      	mov	r1, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7fd fffb 	bl	8001a90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003a9a:	e0b3      	b.n	8003c04 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	f040 80ad 	bne.w	8003c04 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab4:	f040 80a6 	bne.w	8003c04 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7fd ffe3 	bl	8001a90 <HAL_UARTEx_RxEventCallback>
      return;
 8003aca:	e09b      	b.n	8003c04 <HAL_UART_IRQHandler+0x548>
 8003acc:	08003e39 	.word	0x08003e39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 808e 	beq.w	8003c08 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8089 	beq.w	8003c08 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	330c      	adds	r3, #12
 8003b16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e3      	bne.n	8003af6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3314      	adds	r3, #20
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3314      	adds	r3, #20
 8003b4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b52:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e3      	bne.n	8003b2e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0310 	bic.w	r3, r3, #16
 8003b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b98:	61fa      	str	r2, [r7, #28]
 8003b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	69b9      	ldr	r1, [r7, #24]
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	e841 2300 	strex	r3, r2, [r1]
 8003ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e3      	bne.n	8003b74 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fd ff69 	bl	8001a90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bbe:	e023      	b.n	8003c08 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <HAL_UART_IRQHandler+0x524>
 8003bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f93e 	bl	8003e5a <UART_Transmit_IT>
    return;
 8003bde:	e014      	b.n	8003c0a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <HAL_UART_IRQHandler+0x54e>
 8003bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f97e 	bl	8003efa <UART_EndTransmit_IT>
    return;
 8003bfe:	e004      	b.n	8003c0a <HAL_UART_IRQHandler+0x54e>
    return;
 8003c00:	bf00      	nop
 8003c02:	e002      	b.n	8003c0a <HAL_UART_IRQHandler+0x54e>
      return;
 8003c04:	bf00      	nop
 8003c06:	e000      	b.n	8003c0a <HAL_UART_IRQHandler+0x54e>
      return;
 8003c08:	bf00      	nop
  }
}
 8003c0a:	37e8      	adds	r7, #232	@ 0xe8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5c:	e03b      	b.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d037      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c66:	f7fe f95d 	bl	8001f24 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	6a3a      	ldr	r2, [r7, #32]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e03a      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d023      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b80      	cmp	r3, #128	@ 0x80
 8003c92:	d020      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	d01d      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d116      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f857 	bl	8003d72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e00f      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2301      	moveq	r3, #1
 8003ce8:	2300      	movne	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d0b4      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	88fa      	ldrh	r2, [r7, #6]
 8003d16:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	88fa      	ldrh	r2, [r7, #6]
 8003d1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2222      	movs	r2, #34	@ 0x22
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d42:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0220 	orr.w	r2, r2, #32
 8003d62:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b095      	sub	sp, #84	@ 0x54
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	330c      	adds	r3, #12
 8003d80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	330c      	adds	r3, #12
 8003d98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003da0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e5      	bne.n	8003d7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e5      	bne.n	8003dae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d119      	bne.n	8003e1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f023 0310 	bic.w	r3, r3, #16
 8003e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e0a:	61ba      	str	r2, [r7, #24]
 8003e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6979      	ldr	r1, [r7, #20]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	613b      	str	r3, [r7, #16]
   return(result);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e5      	bne.n	8003dea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e2c:	bf00      	nop
 8003e2e:	3754      	adds	r7, #84	@ 0x54
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7ff fef3 	bl	8003c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b21      	cmp	r3, #33	@ 0x21
 8003e6c:	d13e      	bne.n	8003eec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e76:	d114      	bne.n	8003ea2 <UART_Transmit_IT+0x48>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d110      	bne.n	8003ea2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	1c9a      	adds	r2, r3, #2
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	621a      	str	r2, [r3, #32]
 8003ea0:	e008      	b.n	8003eb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	1c59      	adds	r1, r3, #1
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6211      	str	r1, [r2, #32]
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10f      	bne.n	8003ee8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ed6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ee6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fe78 	bl	8003c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b08c      	sub	sp, #48	@ 0x30
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b22      	cmp	r3, #34	@ 0x22
 8003f44:	f040 80aa 	bne.w	800409c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f50:	d115      	bne.n	8003f7e <UART_Receive_IT+0x54>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d111      	bne.n	8003f7e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f76:	1c9a      	adds	r2, r3, #2
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f7c:	e024      	b.n	8003fc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f8c:	d007      	beq.n	8003f9e <UART_Receive_IT+0x74>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <UART_Receive_IT+0x82>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	e008      	b.n	8003fbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d15d      	bne.n	8004098 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0220 	bic.w	r2, r2, #32
 8003fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ffa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	2b01      	cmp	r3, #1
 8004020:	d135      	bne.n	800408e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	613b      	str	r3, [r7, #16]
   return(result);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f023 0310 	bic.w	r3, r3, #16
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004048:	623a      	str	r2, [r7, #32]
 800404a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	69f9      	ldr	r1, [r7, #28]
 800404e:	6a3a      	ldr	r2, [r7, #32]
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	61bb      	str	r3, [r7, #24]
   return(result);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e5      	bne.n	8004028 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b10      	cmp	r3, #16
 8004068:	d10a      	bne.n	8004080 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd fd02 	bl	8001a90 <HAL_UARTEx_RxEventCallback>
 800408c:	e002      	b.n	8004094 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff fdc8 	bl	8003c24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e002      	b.n	800409e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	e000      	b.n	800409e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800409c:	2302      	movs	r3, #2
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3730      	adds	r7, #48	@ 0x30
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ac:	b0c0      	sub	sp, #256	@ 0x100
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	68d9      	ldr	r1, [r3, #12]
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	ea40 0301 	orr.w	r3, r0, r1
 80040d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	431a      	orrs	r2, r3
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004100:	f021 010c 	bic.w	r1, r1, #12
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800410e:	430b      	orrs	r3, r1
 8004110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004122:	6999      	ldr	r1, [r3, #24]
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	ea40 0301 	orr.w	r3, r0, r1
 800412e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b8f      	ldr	r3, [pc, #572]	@ (8004374 <UART_SetConfig+0x2cc>)
 8004138:	429a      	cmp	r2, r3
 800413a:	d005      	beq.n	8004148 <UART_SetConfig+0xa0>
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4b8d      	ldr	r3, [pc, #564]	@ (8004378 <UART_SetConfig+0x2d0>)
 8004144:	429a      	cmp	r2, r3
 8004146:	d104      	bne.n	8004152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004148:	f7fe fecc 	bl	8002ee4 <HAL_RCC_GetPCLK2Freq>
 800414c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004150:	e003      	b.n	800415a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004152:	f7fe feb3 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8004156:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004164:	f040 810c 	bne.w	8004380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416c:	2200      	movs	r2, #0
 800416e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004172:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800417a:	4622      	mov	r2, r4
 800417c:	462b      	mov	r3, r5
 800417e:	1891      	adds	r1, r2, r2
 8004180:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004182:	415b      	adcs	r3, r3
 8004184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800418a:	4621      	mov	r1, r4
 800418c:	eb12 0801 	adds.w	r8, r2, r1
 8004190:	4629      	mov	r1, r5
 8004192:	eb43 0901 	adc.w	r9, r3, r1
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041aa:	4690      	mov	r8, r2
 80041ac:	4699      	mov	r9, r3
 80041ae:	4623      	mov	r3, r4
 80041b0:	eb18 0303 	adds.w	r3, r8, r3
 80041b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041b8:	462b      	mov	r3, r5
 80041ba:	eb49 0303 	adc.w	r3, r9, r3
 80041be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041d6:	460b      	mov	r3, r1
 80041d8:	18db      	adds	r3, r3, r3
 80041da:	653b      	str	r3, [r7, #80]	@ 0x50
 80041dc:	4613      	mov	r3, r2
 80041de:	eb42 0303 	adc.w	r3, r2, r3
 80041e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80041e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041ec:	f7fc fd54 	bl	8000c98 <__aeabi_uldivmod>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4b61      	ldr	r3, [pc, #388]	@ (800437c <UART_SetConfig+0x2d4>)
 80041f6:	fba3 2302 	umull	r2, r3, r3, r2
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	011c      	lsls	r4, r3, #4
 80041fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004202:	2200      	movs	r2, #0
 8004204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004208:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800420c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004210:	4642      	mov	r2, r8
 8004212:	464b      	mov	r3, r9
 8004214:	1891      	adds	r1, r2, r2
 8004216:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004218:	415b      	adcs	r3, r3
 800421a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800421c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004220:	4641      	mov	r1, r8
 8004222:	eb12 0a01 	adds.w	sl, r2, r1
 8004226:	4649      	mov	r1, r9
 8004228:	eb43 0b01 	adc.w	fp, r3, r1
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800423c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004240:	4692      	mov	sl, r2
 8004242:	469b      	mov	fp, r3
 8004244:	4643      	mov	r3, r8
 8004246:	eb1a 0303 	adds.w	r3, sl, r3
 800424a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800424e:	464b      	mov	r3, r9
 8004250:	eb4b 0303 	adc.w	r3, fp, r3
 8004254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800426c:	460b      	mov	r3, r1
 800426e:	18db      	adds	r3, r3, r3
 8004270:	643b      	str	r3, [r7, #64]	@ 0x40
 8004272:	4613      	mov	r3, r2
 8004274:	eb42 0303 	adc.w	r3, r2, r3
 8004278:	647b      	str	r3, [r7, #68]	@ 0x44
 800427a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800427e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004282:	f7fc fd09 	bl	8000c98 <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4611      	mov	r1, r2
 800428c:	4b3b      	ldr	r3, [pc, #236]	@ (800437c <UART_SetConfig+0x2d4>)
 800428e:	fba3 2301 	umull	r2, r3, r3, r1
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2264      	movs	r2, #100	@ 0x64
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	1acb      	subs	r3, r1, r3
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042a2:	4b36      	ldr	r3, [pc, #216]	@ (800437c <UART_SetConfig+0x2d4>)
 80042a4:	fba3 2302 	umull	r2, r3, r3, r2
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042b0:	441c      	add	r4, r3
 80042b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042c4:	4642      	mov	r2, r8
 80042c6:	464b      	mov	r3, r9
 80042c8:	1891      	adds	r1, r2, r2
 80042ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042cc:	415b      	adcs	r3, r3
 80042ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042d4:	4641      	mov	r1, r8
 80042d6:	1851      	adds	r1, r2, r1
 80042d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80042da:	4649      	mov	r1, r9
 80042dc:	414b      	adcs	r3, r1
 80042de:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042ec:	4659      	mov	r1, fp
 80042ee:	00cb      	lsls	r3, r1, #3
 80042f0:	4651      	mov	r1, sl
 80042f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042f6:	4651      	mov	r1, sl
 80042f8:	00ca      	lsls	r2, r1, #3
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	4642      	mov	r2, r8
 8004302:	189b      	adds	r3, r3, r2
 8004304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004308:	464b      	mov	r3, r9
 800430a:	460a      	mov	r2, r1
 800430c:	eb42 0303 	adc.w	r3, r2, r3
 8004310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004320:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004328:	460b      	mov	r3, r1
 800432a:	18db      	adds	r3, r3, r3
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800432e:	4613      	mov	r3, r2
 8004330:	eb42 0303 	adc.w	r3, r2, r3
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800433a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800433e:	f7fc fcab 	bl	8000c98 <__aeabi_uldivmod>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <UART_SetConfig+0x2d4>)
 8004348:	fba3 1302 	umull	r1, r3, r3, r2
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	2164      	movs	r1, #100	@ 0x64
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	3332      	adds	r3, #50	@ 0x32
 800435a:	4a08      	ldr	r2, [pc, #32]	@ (800437c <UART_SetConfig+0x2d4>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	f003 0207 	and.w	r2, r3, #7
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4422      	add	r2, r4
 800436e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004370:	e106      	b.n	8004580 <UART_SetConfig+0x4d8>
 8004372:	bf00      	nop
 8004374:	40011000 	.word	0x40011000
 8004378:	40011400 	.word	0x40011400
 800437c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800438a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800438e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004392:	4642      	mov	r2, r8
 8004394:	464b      	mov	r3, r9
 8004396:	1891      	adds	r1, r2, r2
 8004398:	6239      	str	r1, [r7, #32]
 800439a:	415b      	adcs	r3, r3
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
 800439e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043a2:	4641      	mov	r1, r8
 80043a4:	1854      	adds	r4, r2, r1
 80043a6:	4649      	mov	r1, r9
 80043a8:	eb43 0501 	adc.w	r5, r3, r1
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	00eb      	lsls	r3, r5, #3
 80043b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ba:	00e2      	lsls	r2, r4, #3
 80043bc:	4614      	mov	r4, r2
 80043be:	461d      	mov	r5, r3
 80043c0:	4643      	mov	r3, r8
 80043c2:	18e3      	adds	r3, r4, r3
 80043c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043c8:	464b      	mov	r3, r9
 80043ca:	eb45 0303 	adc.w	r3, r5, r3
 80043ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043ee:	4629      	mov	r1, r5
 80043f0:	008b      	lsls	r3, r1, #2
 80043f2:	4621      	mov	r1, r4
 80043f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f8:	4621      	mov	r1, r4
 80043fa:	008a      	lsls	r2, r1, #2
 80043fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004400:	f7fc fc4a 	bl	8000c98 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4b60      	ldr	r3, [pc, #384]	@ (800458c <UART_SetConfig+0x4e4>)
 800440a:	fba3 2302 	umull	r2, r3, r3, r2
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	011c      	lsls	r4, r3, #4
 8004412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800441c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	1891      	adds	r1, r2, r2
 800442a:	61b9      	str	r1, [r7, #24]
 800442c:	415b      	adcs	r3, r3
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004434:	4641      	mov	r1, r8
 8004436:	1851      	adds	r1, r2, r1
 8004438:	6139      	str	r1, [r7, #16]
 800443a:	4649      	mov	r1, r9
 800443c:	414b      	adcs	r3, r1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800444c:	4659      	mov	r1, fp
 800444e:	00cb      	lsls	r3, r1, #3
 8004450:	4651      	mov	r1, sl
 8004452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004456:	4651      	mov	r1, sl
 8004458:	00ca      	lsls	r2, r1, #3
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	4603      	mov	r3, r0
 8004460:	4642      	mov	r2, r8
 8004462:	189b      	adds	r3, r3, r2
 8004464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004468:	464b      	mov	r3, r9
 800446a:	460a      	mov	r2, r1
 800446c:	eb42 0303 	adc.w	r3, r2, r3
 8004470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800447e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800448c:	4649      	mov	r1, r9
 800448e:	008b      	lsls	r3, r1, #2
 8004490:	4641      	mov	r1, r8
 8004492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004496:	4641      	mov	r1, r8
 8004498:	008a      	lsls	r2, r1, #2
 800449a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800449e:	f7fc fbfb 	bl	8000c98 <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4611      	mov	r1, r2
 80044a8:	4b38      	ldr	r3, [pc, #224]	@ (800458c <UART_SetConfig+0x4e4>)
 80044aa:	fba3 2301 	umull	r2, r3, r3, r1
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2264      	movs	r2, #100	@ 0x64
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	1acb      	subs	r3, r1, r3
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	3332      	adds	r3, #50	@ 0x32
 80044bc:	4a33      	ldr	r2, [pc, #204]	@ (800458c <UART_SetConfig+0x4e4>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c8:	441c      	add	r4, r3
 80044ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ce:	2200      	movs	r2, #0
 80044d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80044d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80044d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044d8:	4642      	mov	r2, r8
 80044da:	464b      	mov	r3, r9
 80044dc:	1891      	adds	r1, r2, r2
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	415b      	adcs	r3, r3
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e8:	4641      	mov	r1, r8
 80044ea:	1851      	adds	r1, r2, r1
 80044ec:	6039      	str	r1, [r7, #0]
 80044ee:	4649      	mov	r1, r9
 80044f0:	414b      	adcs	r3, r1
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004500:	4659      	mov	r1, fp
 8004502:	00cb      	lsls	r3, r1, #3
 8004504:	4651      	mov	r1, sl
 8004506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450a:	4651      	mov	r1, sl
 800450c:	00ca      	lsls	r2, r1, #3
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	4603      	mov	r3, r0
 8004514:	4642      	mov	r2, r8
 8004516:	189b      	adds	r3, r3, r2
 8004518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800451a:	464b      	mov	r3, r9
 800451c:	460a      	mov	r2, r1
 800451e:	eb42 0303 	adc.w	r3, r2, r3
 8004522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	663b      	str	r3, [r7, #96]	@ 0x60
 800452e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800453c:	4649      	mov	r1, r9
 800453e:	008b      	lsls	r3, r1, #2
 8004540:	4641      	mov	r1, r8
 8004542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004546:	4641      	mov	r1, r8
 8004548:	008a      	lsls	r2, r1, #2
 800454a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800454e:	f7fc fba3 	bl	8000c98 <__aeabi_uldivmod>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <UART_SetConfig+0x4e4>)
 8004558:	fba3 1302 	umull	r1, r3, r3, r2
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	2164      	movs	r1, #100	@ 0x64
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	3332      	adds	r3, #50	@ 0x32
 800456a:	4a08      	ldr	r2, [pc, #32]	@ (800458c <UART_SetConfig+0x4e4>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	f003 020f 	and.w	r2, r3, #15
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4422      	add	r2, r4
 800457e:	609a      	str	r2, [r3, #8]
}
 8004580:	bf00      	nop
 8004582:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004586:	46bd      	mov	sp, r7
 8004588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800458c:	51eb851f 	.word	0x51eb851f

08004590 <__NVIC_SetPriority>:
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	6039      	str	r1, [r7, #0]
 800459a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	db0a      	blt.n	80045ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	490c      	ldr	r1, [pc, #48]	@ (80045dc <__NVIC_SetPriority+0x4c>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	0112      	lsls	r2, r2, #4
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	440b      	add	r3, r1
 80045b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045b8:	e00a      	b.n	80045d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	4908      	ldr	r1, [pc, #32]	@ (80045e0 <__NVIC_SetPriority+0x50>)
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	3b04      	subs	r3, #4
 80045c8:	0112      	lsls	r2, r2, #4
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	440b      	add	r3, r1
 80045ce:	761a      	strb	r2, [r3, #24]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000e100 	.word	0xe000e100
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045e8:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <SysTick_Handler+0x1c>)
 80045ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045ec:	f002 fcf8 	bl	8006fe0 <xTaskGetSchedulerState>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d001      	beq.n	80045fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045f6:	f003 fe1f 	bl	8008238 <xPortSysTickHandler>
  }
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	e000e010 	.word	0xe000e010

08004604 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004608:	2100      	movs	r1, #0
 800460a:	f06f 0004 	mvn.w	r0, #4
 800460e:	f7ff ffbf 	bl	8004590 <__NVIC_SetPriority>
#endif
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800461e:	f3ef 8305 	mrs	r3, IPSR
 8004622:	603b      	str	r3, [r7, #0]
  return(result);
 8004624:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800462a:	f06f 0305 	mvn.w	r3, #5
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	e00c      	b.n	800464c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004632:	4b0a      	ldr	r3, [pc, #40]	@ (800465c <osKernelInitialize+0x44>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d105      	bne.n	8004646 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800463a:	4b08      	ldr	r3, [pc, #32]	@ (800465c <osKernelInitialize+0x44>)
 800463c:	2201      	movs	r2, #1
 800463e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004640:	2300      	movs	r3, #0
 8004642:	607b      	str	r3, [r7, #4]
 8004644:	e002      	b.n	800464c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
 800464a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800464c:	687b      	ldr	r3, [r7, #4]
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	2000042c 	.word	0x2000042c

08004660 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004666:	f3ef 8305 	mrs	r3, IPSR
 800466a:	603b      	str	r3, [r7, #0]
  return(result);
 800466c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004672:	f06f 0305 	mvn.w	r3, #5
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	e010      	b.n	800469c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800467a:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <osKernelStart+0x48>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d109      	bne.n	8004696 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004682:	f7ff ffbf 	bl	8004604 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004686:	4b08      	ldr	r3, [pc, #32]	@ (80046a8 <osKernelStart+0x48>)
 8004688:	2202      	movs	r2, #2
 800468a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800468c:	f002 f834 	bl	80066f8 <vTaskStartScheduler>
      stat = osOK;
 8004690:	2300      	movs	r3, #0
 8004692:	607b      	str	r3, [r7, #4]
 8004694:	e002      	b.n	800469c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004696:	f04f 33ff 	mov.w	r3, #4294967295
 800469a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800469c:	687b      	ldr	r3, [r7, #4]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	2000042c 	.word	0x2000042c

080046ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08e      	sub	sp, #56	@ 0x38
 80046b0:	af04      	add	r7, sp, #16
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046bc:	f3ef 8305 	mrs	r3, IPSR
 80046c0:	617b      	str	r3, [r7, #20]
  return(result);
 80046c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d17e      	bne.n	80047c6 <osThreadNew+0x11a>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d07b      	beq.n	80047c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046ce:	2380      	movs	r3, #128	@ 0x80
 80046d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046d2:	2318      	movs	r3, #24
 80046d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80046da:	f04f 33ff 	mov.w	r3, #4294967295
 80046de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d045      	beq.n	8004772 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <osThreadNew+0x48>
        name = attr->name;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <osThreadNew+0x6e>
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b38      	cmp	r3, #56	@ 0x38
 800470c:	d805      	bhi.n	800471a <osThreadNew+0x6e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <osThreadNew+0x72>
        return (NULL);
 800471a:	2300      	movs	r3, #0
 800471c:	e054      	b.n	80047c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00e      	beq.n	8004754 <osThreadNew+0xa8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2ba7      	cmp	r3, #167	@ 0xa7
 800473c:	d90a      	bls.n	8004754 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004742:	2b00      	cmp	r3, #0
 8004744:	d006      	beq.n	8004754 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <osThreadNew+0xa8>
        mem = 1;
 800474e:	2301      	movs	r3, #1
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	e010      	b.n	8004776 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10c      	bne.n	8004776 <osThreadNew+0xca>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d108      	bne.n	8004776 <osThreadNew+0xca>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <osThreadNew+0xca>
          mem = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	e001      	b.n	8004776 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d110      	bne.n	800479e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004784:	9202      	str	r2, [sp, #8]
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	6a3a      	ldr	r2, [r7, #32]
 8004790:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f001 fdbc 	bl	8006310 <xTaskCreateStatic>
 8004798:	4603      	mov	r3, r0
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	e013      	b.n	80047c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d110      	bne.n	80047c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f001 fe0a 	bl	80063d0 <xTaskCreate>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d001      	beq.n	80047c6 <osThreadNew+0x11a>
            hTask = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047c6:	693b      	ldr	r3, [r7, #16]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3728      	adds	r7, #40	@ 0x28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047d8:	f3ef 8305 	mrs	r3, IPSR
 80047dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80047de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <osDelay+0x1c>
    stat = osErrorISR;
 80047e4:	f06f 0305 	mvn.w	r3, #5
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e007      	b.n	80047fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f001 ff48 	bl	800668c <vTaskDelay>
    }
  }

  return (stat);
 80047fc:	68fb      	ldr	r3, [r7, #12]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004806:	b580      	push	{r7, lr}
 8004808:	b08a      	sub	sp, #40	@ 0x28
 800480a:	af02      	add	r7, sp, #8
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004816:	f3ef 8305 	mrs	r3, IPSR
 800481a:	613b      	str	r3, [r7, #16]
  return(result);
 800481c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800481e:	2b00      	cmp	r3, #0
 8004820:	d175      	bne.n	800490e <osSemaphoreNew+0x108>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d072      	beq.n	800490e <osSemaphoreNew+0x108>
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d86e      	bhi.n	800490e <osSemaphoreNew+0x108>
    mem = -1;
 8004830:	f04f 33ff 	mov.w	r3, #4294967295
 8004834:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d015      	beq.n	8004868 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <osSemaphoreNew+0x4c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b4f      	cmp	r3, #79	@ 0x4f
 800484a:	d902      	bls.n	8004852 <osSemaphoreNew+0x4c>
        mem = 1;
 800484c:	2301      	movs	r3, #1
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	e00c      	b.n	800486c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d108      	bne.n	800486c <osSemaphoreNew+0x66>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d104      	bne.n	800486c <osSemaphoreNew+0x66>
          mem = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	e001      	b.n	800486c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004872:	d04c      	beq.n	800490e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d128      	bne.n	80048cc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10a      	bne.n	8004896 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2203      	movs	r2, #3
 8004886:	9200      	str	r2, [sp, #0]
 8004888:	2200      	movs	r2, #0
 800488a:	2100      	movs	r1, #0
 800488c:	2001      	movs	r0, #1
 800488e:	f000 fa2b 	bl	8004ce8 <xQueueGenericCreateStatic>
 8004892:	61f8      	str	r0, [r7, #28]
 8004894:	e005      	b.n	80048a2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004896:	2203      	movs	r2, #3
 8004898:	2100      	movs	r1, #0
 800489a:	2001      	movs	r0, #1
 800489c:	f000 faa1 	bl	8004de2 <xQueueGenericCreate>
 80048a0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d022      	beq.n	80048ee <osSemaphoreNew+0xe8>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01f      	beq.n	80048ee <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80048ae:	2300      	movs	r3, #0
 80048b0:	2200      	movs	r2, #0
 80048b2:	2100      	movs	r1, #0
 80048b4:	69f8      	ldr	r0, [r7, #28]
 80048b6:	f000 fb61 	bl	8004f7c <xQueueGenericSend>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d016      	beq.n	80048ee <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80048c0:	69f8      	ldr	r0, [r7, #28]
 80048c2:	f000 ffff 	bl	80058c4 <vQueueDelete>
            hSemaphore = NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	e010      	b.n	80048ee <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d108      	bne.n	80048e4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	461a      	mov	r2, r3
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fadf 	bl	8004e9e <xQueueCreateCountingSemaphoreStatic>
 80048e0:	61f8      	str	r0, [r7, #28]
 80048e2:	e004      	b.n	80048ee <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fb12 	bl	8004f10 <xQueueCreateCountingSemaphore>
 80048ec:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00c      	beq.n	800490e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <osSemaphoreNew+0xfc>
          name = attr->name;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e001      	b.n	8004906 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004906:	6979      	ldr	r1, [r7, #20]
 8004908:	69f8      	ldr	r0, [r7, #28]
 800490a:	f001 f927 	bl	8005b5c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800490e:	69fb      	ldr	r3, [r7, #28]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3720      	adds	r7, #32
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d103      	bne.n	8004938 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004930:	f06f 0303 	mvn.w	r3, #3
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	e039      	b.n	80049ac <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004938:	f3ef 8305 	mrs	r3, IPSR
 800493c:	60fb      	str	r3, [r7, #12]
  return(result);
 800493e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004940:	2b00      	cmp	r3, #0
 8004942:	d022      	beq.n	800498a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800494a:	f06f 0303 	mvn.w	r3, #3
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e02c      	b.n	80049ac <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	461a      	mov	r2, r3
 800495c:	2100      	movs	r1, #0
 800495e:	6938      	ldr	r0, [r7, #16]
 8004960:	f000 ff2e 	bl	80057c0 <xQueueReceiveFromISR>
 8004964:	4603      	mov	r3, r0
 8004966:	2b01      	cmp	r3, #1
 8004968:	d003      	beq.n	8004972 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800496a:	f06f 0302 	mvn.w	r3, #2
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	e01c      	b.n	80049ac <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d019      	beq.n	80049ac <osSemaphoreAcquire+0x94>
 8004978:	4b0f      	ldr	r3, [pc, #60]	@ (80049b8 <osSemaphoreAcquire+0xa0>)
 800497a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	e010      	b.n	80049ac <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800498a:	6839      	ldr	r1, [r7, #0]
 800498c:	6938      	ldr	r0, [r7, #16]
 800498e:	f000 fe07 	bl	80055a0 <xQueueSemaphoreTake>
 8004992:	4603      	mov	r3, r0
 8004994:	2b01      	cmp	r3, #1
 8004996:	d009      	beq.n	80049ac <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800499e:	f06f 0301 	mvn.w	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e002      	b.n	80049ac <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80049a6:	f06f 0302 	mvn.w	r3, #2
 80049aa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80049ac:	697b      	ldr	r3, [r7, #20]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80049d2:	f06f 0303 	mvn.w	r3, #3
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	e02c      	b.n	8004a34 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049da:	f3ef 8305 	mrs	r3, IPSR
 80049de:	60fb      	str	r3, [r7, #12]
  return(result);
 80049e0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01a      	beq.n	8004a1c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80049ea:	f107 0308 	add.w	r3, r7, #8
 80049ee:	4619      	mov	r1, r3
 80049f0:	6938      	ldr	r0, [r7, #16]
 80049f2:	f000 fc63 	bl	80052bc <xQueueGiveFromISR>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d003      	beq.n	8004a04 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80049fc:	f06f 0302 	mvn.w	r3, #2
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	e017      	b.n	8004a34 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d014      	beq.n	8004a34 <osSemaphoreRelease+0x78>
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <osSemaphoreRelease+0x84>)
 8004a0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	e00b      	b.n	8004a34 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2100      	movs	r1, #0
 8004a22:	6938      	ldr	r0, [r7, #16]
 8004a24:	f000 faaa 	bl	8004f7c <xQueueGenericSend>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d002      	beq.n	8004a34 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004a2e:	f06f 0302 	mvn.w	r3, #2
 8004a32:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004a34:	697b      	ldr	r3, [r7, #20]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	e000ed04 	.word	0xe000ed04

08004a44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4a07      	ldr	r2, [pc, #28]	@ (8004a70 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4a06      	ldr	r2, [pc, #24]	@ (8004a74 <vApplicationGetIdleTaskMemory+0x30>)
 8004a5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2280      	movs	r2, #128	@ 0x80
 8004a60:	601a      	str	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000430 	.word	0x20000430
 8004a74:	200004d8 	.word	0x200004d8

08004a78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a07      	ldr	r2, [pc, #28]	@ (8004aa4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4a06      	ldr	r2, [pc, #24]	@ (8004aa8 <vApplicationGetTimerTaskMemory+0x30>)
 8004a8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a96:	601a      	str	r2, [r3, #0]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	200006d8 	.word	0x200006d8
 8004aa8:	20000780 	.word	0x20000780

08004aac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f103 0208 	add.w	r2, r3, #8
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f103 0208 	add.w	r2, r3, #8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f103 0208 	add.w	r2, r3, #8
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b06:	b480      	push	{r7}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]
}
 8004b42:	bf00      	nop
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d103      	bne.n	8004b6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	e00c      	b.n	8004b88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3308      	adds	r3, #8
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	e002      	b.n	8004b7c <vListInsert+0x2e>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d2f6      	bcs.n	8004b76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6892      	ldr	r2, [r2, #8]
 8004bd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6852      	ldr	r2, [r2, #4]
 8004be0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d103      	bne.n	8004bf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	1e5a      	subs	r2, r3, #1
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10b      	bne.n	8004c40 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c3a:	bf00      	nop
 8004c3c:	bf00      	nop
 8004c3e:	e7fd      	b.n	8004c3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c40:	f003 fa6a 	bl	8008118 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4c:	68f9      	ldr	r1, [r7, #12]
 8004c4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	441a      	add	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c70:	3b01      	subs	r3, #1
 8004c72:	68f9      	ldr	r1, [r7, #12]
 8004c74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	441a      	add	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	22ff      	movs	r2, #255	@ 0xff
 8004c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	22ff      	movs	r2, #255	@ 0xff
 8004c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d114      	bne.n	8004cc0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01a      	beq.n	8004cd4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3310      	adds	r3, #16
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 ffc6 	bl	8006c34 <xTaskRemoveFromEventList>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d012      	beq.n	8004cd4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004cae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <xQueueGenericReset+0xd0>)
 8004cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	e009      	b.n	8004cd4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3310      	adds	r3, #16
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff fef1 	bl	8004aac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3324      	adds	r3, #36	@ 0x24
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff feec 	bl	8004aac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004cd4:	f003 fa52 	bl	800817c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004cd8:	2301      	movs	r3, #1
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	e000ed04 	.word	0xe000ed04

08004ce8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08e      	sub	sp, #56	@ 0x38
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10b      	bne.n	8004d14 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d0e:	bf00      	nop
 8004d10:	bf00      	nop
 8004d12:	e7fd      	b.n	8004d10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <xQueueGenericCreateStatic+0x56>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <xQueueGenericCreateStatic+0x5a>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <xQueueGenericCreateStatic+0x5c>
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	623b      	str	r3, [r7, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	e7fd      	b.n	8004d5c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <xQueueGenericCreateStatic+0x84>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <xQueueGenericCreateStatic+0x88>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <xQueueGenericCreateStatic+0x8a>
 8004d70:	2300      	movs	r3, #0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10b      	bne.n	8004d8e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	61fb      	str	r3, [r7, #28]
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	e7fd      	b.n	8004d8a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d8e:	2350      	movs	r3, #80	@ 0x50
 8004d90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b50      	cmp	r3, #80	@ 0x50
 8004d96:	d00b      	beq.n	8004db0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	61bb      	str	r3, [r7, #24]
}
 8004daa:	bf00      	nop
 8004dac:	bf00      	nop
 8004dae:	e7fd      	b.n	8004dac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004db0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00d      	beq.n	8004dd8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dc4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f840 	bl	8004e58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3730      	adds	r7, #48	@ 0x30
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b08a      	sub	sp, #40	@ 0x28
 8004de6:	af02      	add	r7, sp, #8
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	4613      	mov	r3, r2
 8004dee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10b      	bne.n	8004e0e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	613b      	str	r3, [r7, #16]
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	e7fd      	b.n	8004e0a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	3350      	adds	r3, #80	@ 0x50
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f003 fa9d 	bl	800835c <pvPortMalloc>
 8004e22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d011      	beq.n	8004e4e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	3350      	adds	r3, #80	@ 0x50
 8004e32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e3c:	79fa      	ldrb	r2, [r7, #7]
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	4613      	mov	r3, r2
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f805 	bl	8004e58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
	}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3720      	adds	r7, #32
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d103      	bne.n	8004e74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	e002      	b.n	8004e7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e86:	2101      	movs	r1, #1
 8004e88:	69b8      	ldr	r0, [r7, #24]
 8004e8a:	f7ff fec3 	bl	8004c14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b08a      	sub	sp, #40	@ 0x28
 8004ea2:	af02      	add	r7, sp, #8
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10b      	bne.n	8004ec8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	61bb      	str	r3, [r7, #24]
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	e7fd      	b.n	8004ec4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d90b      	bls.n	8004ee8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	617b      	str	r3, [r7, #20]
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004ee8:	2302      	movs	r3, #2
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7ff fef8 	bl	8004ce8 <xQueueGenericCreateStatic>
 8004ef8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f06:	69fb      	ldr	r3, [r7, #28]
	}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10b      	bne.n	8004f38 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	613b      	str	r3, [r7, #16]
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	e7fd      	b.n	8004f34 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d90b      	bls.n	8004f58 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60fb      	str	r3, [r7, #12]
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	e7fd      	b.n	8004f54 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f58:	2202      	movs	r2, #2
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff ff40 	bl	8004de2 <xQueueGenericCreate>
 8004f62:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f70:	697b      	ldr	r3, [r7, #20]
	}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08e      	sub	sp, #56	@ 0x38
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10b      	bne.n	8004fb0 <xQueueGenericSend+0x34>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004faa:	bf00      	nop
 8004fac:	bf00      	nop
 8004fae:	e7fd      	b.n	8004fac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <xQueueGenericSend+0x42>
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <xQueueGenericSend+0x46>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <xQueueGenericSend+0x48>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10b      	bne.n	8004fe0 <xQueueGenericSend+0x64>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fda:	bf00      	nop
 8004fdc:	bf00      	nop
 8004fde:	e7fd      	b.n	8004fdc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d103      	bne.n	8004fee <xQueueGenericSend+0x72>
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <xQueueGenericSend+0x76>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <xQueueGenericSend+0x78>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10b      	bne.n	8005010 <xQueueGenericSend+0x94>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	623b      	str	r3, [r7, #32]
}
 800500a:	bf00      	nop
 800500c:	bf00      	nop
 800500e:	e7fd      	b.n	800500c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005010:	f001 ffe6 	bl	8006fe0 <xTaskGetSchedulerState>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d102      	bne.n	8005020 <xQueueGenericSend+0xa4>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <xQueueGenericSend+0xa8>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <xQueueGenericSend+0xaa>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <xQueueGenericSend+0xc6>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	61fb      	str	r3, [r7, #28]
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	e7fd      	b.n	800503e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005042:	f003 f869 	bl	8008118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504e:	429a      	cmp	r2, r3
 8005050:	d302      	bcc.n	8005058 <xQueueGenericSend+0xdc>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d129      	bne.n	80050ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800505e:	f000 fc6d 	bl	800593c <prvCopyDataToQueue>
 8005062:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d010      	beq.n	800508e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800506c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506e:	3324      	adds	r3, #36	@ 0x24
 8005070:	4618      	mov	r0, r3
 8005072:	f001 fddf 	bl	8006c34 <xTaskRemoveFromEventList>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d013      	beq.n	80050a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800507c:	4b3f      	ldr	r3, [pc, #252]	@ (800517c <xQueueGenericSend+0x200>)
 800507e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	e00a      	b.n	80050a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800508e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005094:	4b39      	ldr	r3, [pc, #228]	@ (800517c <xQueueGenericSend+0x200>)
 8005096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050a4:	f003 f86a 	bl	800817c <vPortExitCritical>
				return pdPASS;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e063      	b.n	8005174 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d103      	bne.n	80050ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050b2:	f003 f863 	bl	800817c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	e05c      	b.n	8005174 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050c0:	f107 0314 	add.w	r3, r7, #20
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 fe19 	bl	8006cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050ca:	2301      	movs	r3, #1
 80050cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050ce:	f003 f855 	bl	800817c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050d2:	f001 fb81 	bl	80067d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050d6:	f003 f81f 	bl	8008118 <vPortEnterCritical>
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050e0:	b25b      	sxtb	r3, r3
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e6:	d103      	bne.n	80050f0 <xQueueGenericSend+0x174>
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050f6:	b25b      	sxtb	r3, r3
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d103      	bne.n	8005106 <xQueueGenericSend+0x18a>
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005106:	f003 f839 	bl	800817c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800510a:	1d3a      	adds	r2, r7, #4
 800510c:	f107 0314 	add.w	r3, r7, #20
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f001 fe08 	bl	8006d28 <xTaskCheckForTimeOut>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d124      	bne.n	8005168 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800511e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005120:	f000 fd04 	bl	8005b2c <prvIsQueueFull>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d018      	beq.n	800515c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	3310      	adds	r3, #16
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	4611      	mov	r1, r2
 8005132:	4618      	mov	r0, r3
 8005134:	f001 fd2c 	bl	8006b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005138:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800513a:	f000 fc8f 	bl	8005a5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800513e:	f001 fb59 	bl	80067f4 <xTaskResumeAll>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	f47f af7c 	bne.w	8005042 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800514a:	4b0c      	ldr	r3, [pc, #48]	@ (800517c <xQueueGenericSend+0x200>)
 800514c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	e772      	b.n	8005042 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800515c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800515e:	f000 fc7d 	bl	8005a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005162:	f001 fb47 	bl	80067f4 <xTaskResumeAll>
 8005166:	e76c      	b.n	8005042 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800516a:	f000 fc77 	bl	8005a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800516e:	f001 fb41 	bl	80067f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005172:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005174:	4618      	mov	r0, r3
 8005176:	3738      	adds	r7, #56	@ 0x38
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b090      	sub	sp, #64	@ 0x40
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051aa:	bf00      	nop
 80051ac:	bf00      	nop
 80051ae:	e7fd      	b.n	80051ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <xQueueGenericSendFromISR+0x3e>
 80051b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <xQueueGenericSendFromISR+0x42>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <xQueueGenericSendFromISR+0x44>
 80051c2:	2300      	movs	r3, #0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10b      	bne.n	80051e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d103      	bne.n	80051ee <xQueueGenericSendFromISR+0x6e>
 80051e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <xQueueGenericSendFromISR+0x72>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <xQueueGenericSendFromISR+0x74>
 80051f2:	2300      	movs	r3, #0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	623b      	str	r3, [r7, #32]
}
 800520a:	bf00      	nop
 800520c:	bf00      	nop
 800520e:	e7fd      	b.n	800520c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005210:	f003 f862 	bl	80082d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005214:	f3ef 8211 	mrs	r2, BASEPRI
 8005218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	61fa      	str	r2, [r7, #28]
 800522a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800522c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800522e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005238:	429a      	cmp	r2, r3
 800523a:	d302      	bcc.n	8005242 <xQueueGenericSendFromISR+0xc2>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d12f      	bne.n	80052a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005244:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005248:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800524c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005250:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005258:	f000 fb70 	bl	800593c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800525c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005264:	d112      	bne.n	800528c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	d016      	beq.n	800529c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800526e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005270:	3324      	adds	r3, #36	@ 0x24
 8005272:	4618      	mov	r0, r3
 8005274:	f001 fcde 	bl	8006c34 <xTaskRemoveFromEventList>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00e      	beq.n	800529c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	e007      	b.n	800529c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800528c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005290:	3301      	adds	r3, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	b25a      	sxtb	r2, r3
 8005296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800529c:	2301      	movs	r3, #1
 800529e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80052a0:	e001      	b.n	80052a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3740      	adds	r7, #64	@ 0x40
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08e      	sub	sp, #56	@ 0x38
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	623b      	str	r3, [r7, #32]
}
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00b      	beq.n	8005308 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	61fb      	str	r3, [r7, #28]
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	e7fd      	b.n	8005304 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d103      	bne.n	8005318 <xQueueGiveFromISR+0x5c>
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <xQueueGiveFromISR+0x60>
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <xQueueGiveFromISR+0x62>
 800531c:	2300      	movs	r3, #0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	61bb      	str	r3, [r7, #24]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800533a:	f002 ffcd 	bl	80082d8 <vPortValidateInterruptPriority>
	__asm volatile
 800533e:	f3ef 8211 	mrs	r2, BASEPRI
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	617a      	str	r2, [r7, #20]
 8005354:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005356:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005358:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005364:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005366:	429a      	cmp	r2, r3
 8005368:	d22b      	bcs.n	80053c2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800537c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d112      	bne.n	80053ac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	2b00      	cmp	r3, #0
 800538c:	d016      	beq.n	80053bc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800538e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005390:	3324      	adds	r3, #36	@ 0x24
 8005392:	4618      	mov	r0, r3
 8005394:	f001 fc4e 	bl	8006c34 <xTaskRemoveFromEventList>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00e      	beq.n	80053bc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00b      	beq.n	80053bc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2201      	movs	r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e007      	b.n	80053bc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053b0:	3301      	adds	r3, #1
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	b25a      	sxtb	r2, r3
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80053bc:	2301      	movs	r3, #1
 80053be:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c0:	e001      	b.n	80053c6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f383 8811 	msr	BASEPRI, r3
}
 80053d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3738      	adds	r7, #56	@ 0x38
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08c      	sub	sp, #48	@ 0x30
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10b      	bne.n	800540e <xQueueReceive+0x32>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	623b      	str	r3, [r7, #32]
}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	e7fd      	b.n	800540a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d103      	bne.n	800541c <xQueueReceive+0x40>
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <xQueueReceive+0x44>
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <xQueueReceive+0x46>
 8005420:	2300      	movs	r3, #0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <xQueueReceive+0x62>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	61fb      	str	r3, [r7, #28]
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	e7fd      	b.n	800543a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800543e:	f001 fdcf 	bl	8006fe0 <xTaskGetSchedulerState>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d102      	bne.n	800544e <xQueueReceive+0x72>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <xQueueReceive+0x76>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <xQueueReceive+0x78>
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10b      	bne.n	8005470 <xQueueReceive+0x94>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	61bb      	str	r3, [r7, #24]
}
 800546a:	bf00      	nop
 800546c:	bf00      	nop
 800546e:	e7fd      	b.n	800546c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005470:	f002 fe52 	bl	8008118 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01f      	beq.n	80054c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005484:	f000 fac4 	bl	8005a10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	1e5a      	subs	r2, r3, #1
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00f      	beq.n	80054b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549a:	3310      	adds	r3, #16
 800549c:	4618      	mov	r0, r3
 800549e:	f001 fbc9 	bl	8006c34 <xTaskRemoveFromEventList>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054a8:	4b3c      	ldr	r3, [pc, #240]	@ (800559c <xQueueReceive+0x1c0>)
 80054aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054b8:	f002 fe60 	bl	800817c <vPortExitCritical>
				return pdPASS;
 80054bc:	2301      	movs	r3, #1
 80054be:	e069      	b.n	8005594 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d103      	bne.n	80054ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054c6:	f002 fe59 	bl	800817c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054ca:	2300      	movs	r3, #0
 80054cc:	e062      	b.n	8005594 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d106      	bne.n	80054e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054d4:	f107 0310 	add.w	r3, r7, #16
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 fc0f 	bl	8006cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054de:	2301      	movs	r3, #1
 80054e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054e2:	f002 fe4b 	bl	800817c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054e6:	f001 f977 	bl	80067d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054ea:	f002 fe15 	bl	8008118 <vPortEnterCritical>
 80054ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054f4:	b25b      	sxtb	r3, r3
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d103      	bne.n	8005504 <xQueueReceive+0x128>
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800550a:	b25b      	sxtb	r3, r3
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d103      	bne.n	800551a <xQueueReceive+0x13e>
 8005512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800551a:	f002 fe2f 	bl	800817c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800551e:	1d3a      	adds	r2, r7, #4
 8005520:	f107 0310 	add.w	r3, r7, #16
 8005524:	4611      	mov	r1, r2
 8005526:	4618      	mov	r0, r3
 8005528:	f001 fbfe 	bl	8006d28 <xTaskCheckForTimeOut>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d123      	bne.n	800557a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005534:	f000 fae4 	bl	8005b00 <prvIsQueueEmpty>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d017      	beq.n	800556e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800553e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005540:	3324      	adds	r3, #36	@ 0x24
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	4611      	mov	r1, r2
 8005546:	4618      	mov	r0, r3
 8005548:	f001 fb22 	bl	8006b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800554c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800554e:	f000 fa85 	bl	8005a5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005552:	f001 f94f 	bl	80067f4 <xTaskResumeAll>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d189      	bne.n	8005470 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800555c:	4b0f      	ldr	r3, [pc, #60]	@ (800559c <xQueueReceive+0x1c0>)
 800555e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	e780      	b.n	8005470 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800556e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005570:	f000 fa74 	bl	8005a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005574:	f001 f93e 	bl	80067f4 <xTaskResumeAll>
 8005578:	e77a      	b.n	8005470 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800557a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800557c:	f000 fa6e 	bl	8005a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005580:	f001 f938 	bl	80067f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005584:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005586:	f000 fabb 	bl	8005b00 <prvIsQueueEmpty>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	f43f af6f 	beq.w	8005470 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005592:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005594:	4618      	mov	r0, r3
 8005596:	3730      	adds	r7, #48	@ 0x30
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08e      	sub	sp, #56	@ 0x38
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	623b      	str	r3, [r7, #32]
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	e7fd      	b.n	80055d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00b      	beq.n	80055f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	61fb      	str	r3, [r7, #28]
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	e7fd      	b.n	80055f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055f4:	f001 fcf4 	bl	8006fe0 <xTaskGetSchedulerState>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <xQueueSemaphoreTake+0x64>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <xQueueSemaphoreTake+0x68>
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <xQueueSemaphoreTake+0x6a>
 8005608:	2300      	movs	r3, #0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10b      	bne.n	8005626 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	61bb      	str	r3, [r7, #24]
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	e7fd      	b.n	8005622 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005626:	f002 fd77 	bl	8008118 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800562a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d024      	beq.n	8005680 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005638:	1e5a      	subs	r2, r3, #1
 800563a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800563e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005646:	f001 fe45 	bl	80072d4 <pvTaskIncrementMutexHeldCount>
 800564a:	4602      	mov	r2, r0
 800564c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00f      	beq.n	8005678 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565a:	3310      	adds	r3, #16
 800565c:	4618      	mov	r0, r3
 800565e:	f001 fae9 	bl	8006c34 <xTaskRemoveFromEventList>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005668:	4b54      	ldr	r3, [pc, #336]	@ (80057bc <xQueueSemaphoreTake+0x21c>)
 800566a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005678:	f002 fd80 	bl	800817c <vPortExitCritical>
				return pdPASS;
 800567c:	2301      	movs	r3, #1
 800567e:	e098      	b.n	80057b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d112      	bne.n	80056ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00b      	beq.n	80056a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	617b      	str	r3, [r7, #20]
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	e7fd      	b.n	80056a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80056a4:	f002 fd6a 	bl	800817c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e082      	b.n	80057b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056b2:	f107 030c 	add.w	r3, r7, #12
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 fb20 	bl	8006cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056bc:	2301      	movs	r3, #1
 80056be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056c0:	f002 fd5c 	bl	800817c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056c4:	f001 f888 	bl	80067d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056c8:	f002 fd26 	bl	8008118 <vPortEnterCritical>
 80056cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056d2:	b25b      	sxtb	r3, r3
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d103      	bne.n	80056e2 <xQueueSemaphoreTake+0x142>
 80056da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056e8:	b25b      	sxtb	r3, r3
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d103      	bne.n	80056f8 <xQueueSemaphoreTake+0x158>
 80056f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056f8:	f002 fd40 	bl	800817c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056fc:	463a      	mov	r2, r7
 80056fe:	f107 030c 	add.w	r3, r7, #12
 8005702:	4611      	mov	r1, r2
 8005704:	4618      	mov	r0, r3
 8005706:	f001 fb0f 	bl	8006d28 <xTaskCheckForTimeOut>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d132      	bne.n	8005776 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005710:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005712:	f000 f9f5 	bl	8005b00 <prvIsQueueEmpty>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d026      	beq.n	800576a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800571c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d109      	bne.n	8005738 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005724:	f002 fcf8 	bl	8008118 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	4618      	mov	r0, r3
 800572e:	f001 fc75 	bl	800701c <xTaskPriorityInherit>
 8005732:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005734:	f002 fd22 	bl	800817c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573a:	3324      	adds	r3, #36	@ 0x24
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	4611      	mov	r1, r2
 8005740:	4618      	mov	r0, r3
 8005742:	f001 fa25 	bl	8006b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005746:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005748:	f000 f988 	bl	8005a5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800574c:	f001 f852 	bl	80067f4 <xTaskResumeAll>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	f47f af67 	bne.w	8005626 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005758:	4b18      	ldr	r3, [pc, #96]	@ (80057bc <xQueueSemaphoreTake+0x21c>)
 800575a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	e75d      	b.n	8005626 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800576a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800576c:	f000 f976 	bl	8005a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005770:	f001 f840 	bl	80067f4 <xTaskResumeAll>
 8005774:	e757      	b.n	8005626 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005776:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005778:	f000 f970 	bl	8005a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800577c:	f001 f83a 	bl	80067f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005780:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005782:	f000 f9bd 	bl	8005b00 <prvIsQueueEmpty>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	f43f af4c 	beq.w	8005626 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00d      	beq.n	80057b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005794:	f002 fcc0 	bl	8008118 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005798:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800579a:	f000 f8b7 	bl	800590c <prvGetDisinheritPriorityAfterTimeout>
 800579e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80057a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 fd10 	bl	80071cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80057ac:	f002 fce6 	bl	800817c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3738      	adds	r7, #56	@ 0x38
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	e000ed04 	.word	0xe000ed04

080057c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08e      	sub	sp, #56	@ 0x38
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10b      	bne.n	80057ee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	623b      	str	r3, [r7, #32]
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	e7fd      	b.n	80057ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d103      	bne.n	80057fc <xQueueReceiveFromISR+0x3c>
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <xQueueReceiveFromISR+0x40>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <xQueueReceiveFromISR+0x42>
 8005800:	2300      	movs	r3, #0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10b      	bne.n	800581e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	61fb      	str	r3, [r7, #28]
}
 8005818:	bf00      	nop
 800581a:	bf00      	nop
 800581c:	e7fd      	b.n	800581a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800581e:	f002 fd5b 	bl	80082d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005822:	f3ef 8211 	mrs	r2, BASEPRI
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	61ba      	str	r2, [r7, #24]
 8005838:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800583a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800583c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005842:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005846:	2b00      	cmp	r3, #0
 8005848:	d02f      	beq.n	80058aa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800584a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005858:	f000 f8da 	bl	8005a10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	1e5a      	subs	r2, r3, #1
 8005860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005862:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005864:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d112      	bne.n	8005894 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d016      	beq.n	80058a4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005878:	3310      	adds	r3, #16
 800587a:	4618      	mov	r0, r3
 800587c:	f001 f9da 	bl	8006c34 <xTaskRemoveFromEventList>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00e      	beq.n	80058a4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e007      	b.n	80058a4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005898:	3301      	adds	r3, #1
 800589a:	b2db      	uxtb	r3, r3
 800589c:	b25a      	sxtb	r2, r3
 800589e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80058a4:	2301      	movs	r3, #1
 80058a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a8:	e001      	b.n	80058ae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f383 8811 	msr	BASEPRI, r3
}
 80058b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3738      	adds	r7, #56	@ 0x38
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10b      	bne.n	80058ee <vQueueDelete+0x2a>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	60bb      	str	r3, [r7, #8]
}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	e7fd      	b.n	80058ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f95e 	bl	8005bb0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d102      	bne.n	8005904 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f002 fdfa 	bl	80084f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	2b00      	cmp	r3, #0
 800591a:	d006      	beq.n	800592a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	e001      	b.n	800592e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800592e:	68fb      	ldr	r3, [r7, #12]
	}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d14d      	bne.n	80059fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f001 fbc0 	bl	80070ec <xTaskPriorityDisinherit>
 800596c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
 8005974:	e043      	b.n	80059fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d119      	bne.n	80059b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6858      	ldr	r0, [r3, #4]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005984:	461a      	mov	r2, r3
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	f003 ffbf 	bl	800990a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	441a      	add	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d32b      	bcc.n	80059fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	e026      	b.n	80059fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68d8      	ldr	r0, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b8:	461a      	mov	r2, r3
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	f003 ffa5 	bl	800990a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c8:	425b      	negs	r3, r3
 80059ca:	441a      	add	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d207      	bcs.n	80059ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	425b      	negs	r3, r3
 80059e6:	441a      	add	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d105      	bne.n	80059fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a06:	697b      	ldr	r3, [r7, #20]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d018      	beq.n	8005a54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	441a      	add	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d303      	bcc.n	8005a44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68d9      	ldr	r1, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6838      	ldr	r0, [r7, #0]
 8005a50:	f003 ff5b 	bl	800990a <memcpy>
	}
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a64:	f002 fb58 	bl	8008118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a70:	e011      	b.n	8005a96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d012      	beq.n	8005aa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3324      	adds	r3, #36	@ 0x24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f001 f8d8 	bl	8006c34 <xTaskRemoveFromEventList>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a8a:	f001 f9b1 	bl	8006df0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	dce9      	bgt.n	8005a72 <prvUnlockQueue+0x16>
 8005a9e:	e000      	b.n	8005aa2 <prvUnlockQueue+0x46>
					break;
 8005aa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	22ff      	movs	r2, #255	@ 0xff
 8005aa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005aaa:	f002 fb67 	bl	800817c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aae:	f002 fb33 	bl	8008118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ab8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aba:	e011      	b.n	8005ae0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d012      	beq.n	8005aea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3310      	adds	r3, #16
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 f8b3 	bl	8006c34 <xTaskRemoveFromEventList>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ad4:	f001 f98c 	bl	8006df0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	dce9      	bgt.n	8005abc <prvUnlockQueue+0x60>
 8005ae8:	e000      	b.n	8005aec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005aea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	22ff      	movs	r2, #255	@ 0xff
 8005af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005af4:	f002 fb42 	bl	800817c <vPortExitCritical>
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b08:	f002 fb06 	bl	8008118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	e001      	b.n	8005b1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b1e:	f002 fb2d 	bl	800817c <vPortExitCritical>

	return xReturn;
 8005b22:	68fb      	ldr	r3, [r7, #12]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b34:	f002 faf0 	bl	8008118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d102      	bne.n	8005b4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	e001      	b.n	8005b4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b4e:	f002 fb15 	bl	800817c <vPortExitCritical>

	return xReturn;
 8005b52:	68fb      	ldr	r3, [r7, #12]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	e014      	b.n	8005b96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8005bac <vQueueAddToRegistry+0x50>)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b78:	490c      	ldr	r1, [pc, #48]	@ (8005bac <vQueueAddToRegistry+0x50>)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b82:	4a0a      	ldr	r2, [pc, #40]	@ (8005bac <vQueueAddToRegistry+0x50>)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4413      	add	r3, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b8e:	e006      	b.n	8005b9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b07      	cmp	r3, #7
 8005b9a:	d9e7      	bls.n	8005b6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20000b80 	.word	0x20000b80

08005bb0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e016      	b.n	8005bec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005bbe:	4a10      	ldr	r2, [pc, #64]	@ (8005c00 <vQueueUnregisterQueue+0x50>)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d10b      	bne.n	8005be6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005bce:	4a0c      	ldr	r2, [pc, #48]	@ (8005c00 <vQueueUnregisterQueue+0x50>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005bd8:	4a09      	ldr	r2, [pc, #36]	@ (8005c00 <vQueueUnregisterQueue+0x50>)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4413      	add	r3, r2
 8005be0:	2200      	movs	r2, #0
 8005be2:	605a      	str	r2, [r3, #4]
				break;
 8005be4:	e006      	b.n	8005bf4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b07      	cmp	r3, #7
 8005bf0:	d9e5      	bls.n	8005bbe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	20000b80 	.word	0x20000b80

08005c04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c14:	f002 fa80 	bl	8008118 <vPortEnterCritical>
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c1e:	b25b      	sxtb	r3, r3
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d103      	bne.n	8005c2e <vQueueWaitForMessageRestricted+0x2a>
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c34:	b25b      	sxtb	r3, r3
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3a:	d103      	bne.n	8005c44 <vQueueWaitForMessageRestricted+0x40>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c44:	f002 fa9a 	bl	800817c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d106      	bne.n	8005c5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	3324      	adds	r3, #36	@ 0x24
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 ffbf 	bl	8006bdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c5e:	6978      	ldr	r0, [r7, #20]
 8005c60:	f7ff fefc 	bl	8005a5c <prvUnlockQueue>
	}
 8005c64:	bf00      	nop
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08c      	sub	sp, #48	@ 0x30
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d111      	bne.n	8005ca2 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d81d      	bhi.n	8005cc6 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	61fb      	str	r3, [r7, #28]
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	e7fd      	b.n	8005c9e <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10b      	bne.n	8005cc6 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	61bb      	str	r3, [r7, #24]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d90b      	bls.n	8005ce6 <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	617b      	str	r3, [r7, #20]
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	e7fd      	b.n	8005ce2 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8005cec:	2301      	movs	r3, #1
 8005cee:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3324      	adds	r3, #36	@ 0x24
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f002 fb2e 	bl	800835c <pvPortMalloc>
 8005d00:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8005d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	6a38      	ldr	r0, [r7, #32]
 8005d1a:	f000 fac5 	bl	80062a8 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
	}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3728      	adds	r7, #40	@ 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10b      	bne.n	8005d52 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	60fb      	str	r3, [r7, #12]
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	e7fd      	b.n	8005d4e <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d304      	bcc.n	8005d82 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8005d82:	697b      	ldr	r3, [r7, #20]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b090      	sub	sp, #64	@ 0x40
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10b      	bne.n	8005dc4 <xStreamBufferSendFromISR+0x34>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	623b      	str	r3, [r7, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	bf00      	nop
 8005dc2:	e7fd      	b.n	8005dc0 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <xStreamBufferSendFromISR+0x52>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	61fb      	str	r3, [r7, #28]
}
 8005ddc:	bf00      	nop
 8005dde:	bf00      	nop
 8005de0:	e7fd      	b.n	8005dde <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8005de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de4:	7f1b      	ldrb	r3, [r3, #28]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8005dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df0:	3304      	adds	r3, #4
 8005df2:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8005df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005df6:	f7ff ff97 	bl	8005d28 <xStreamBufferSpacesAvailable>
 8005dfa:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e08:	f000 f835 	bl	8005e76 <prvWriteMessageToBuffer>
 8005e0c:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8005e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d02b      	beq.n	8005e6c <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8005e14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e16:	f000 fa27 	bl	8006268 <prvBytesInBuffer>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d323      	bcc.n	8005e6c <xStreamBufferSendFromISR+0xdc>
	__asm volatile
 8005e24:	f3ef 8211 	mrs	r2, BASEPRI
 8005e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	61ba      	str	r2, [r7, #24]
 8005e3a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8005e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00b      	beq.n	8005e60 <xStreamBufferSendFromISR+0xd0>
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	6918      	ldr	r0, [r3, #16]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	2300      	movs	r3, #0
 8005e52:	2200      	movs	r2, #0
 8005e54:	2100      	movs	r1, #0
 8005e56:	f001 fb73 	bl	8007540 <xTaskGenericNotifyFromISR>
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	611a      	str	r2, [r3, #16]
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f383 8811 	msr	BASEPRI, r3
}
 8005e6a:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8005e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3738      	adds	r7, #56	@ 0x38
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b086      	sub	sp, #24
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
 8005e82:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	e01d      	b.n	8005ecc <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	7f1b      	ldrb	r3, [r3, #28]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d108      	bne.n	8005eae <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	bf28      	it	cs
 8005ea8:	4613      	movcs	r3, r2
 8005eaa:	607b      	str	r3, [r7, #4]
 8005eac:	e00e      	b.n	8005ecc <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d308      	bcc.n	8005ec8 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f8df 	bl	8006084 <prvWriteBytesToBuffer>
 8005ec6:	e001      	b.n	8005ecc <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f8d3 	bl	8006084 <prvWriteBytesToBuffer>
 8005ede:	6138      	str	r0, [r7, #16]
 8005ee0:	e001      	b.n	8005ee6 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8005ee6:	693b      	ldr	r3, [r7, #16]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08e      	sub	sp, #56	@ 0x38
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8005f02:	2300      	movs	r3, #0
 8005f04:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10b      	bne.n	8005f24 <xStreamBufferReceive+0x34>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	61fb      	str	r3, [r7, #28]
}
 8005f1e:	bf00      	nop
 8005f20:	bf00      	nop
 8005f22:	e7fd      	b.n	8005f20 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10b      	bne.n	8005f42 <xStreamBufferReceive+0x52>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	61bb      	str	r3, [r7, #24]
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	e7fd      	b.n	8005f3e <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	7f1b      	ldrb	r3, [r3, #28]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8005f4e:	2304      	movs	r3, #4
 8005f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f52:	e001      	b.n	8005f58 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d035      	beq.n	8005fca <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8005f5e:	f002 f8db 	bl	8008118 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8005f62:	6a38      	ldr	r0, [r7, #32]
 8005f64:	f000 f980 	bl	8006268 <prvBytesInBuffer>
 8005f68:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8005f6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d817      	bhi.n	8005fa2 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8005f72:	2000      	movs	r0, #0
 8005f74:	f001 fbca 	bl	800770c <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <xStreamBufferReceive+0xa8>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	617b      	str	r3, [r7, #20]
}
 8005f92:	bf00      	nop
 8005f94:	bf00      	nop
 8005f96:	e7fd      	b.n	8005f94 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8005f98:	f001 f812 	bl	8006fc0 <xTaskGetCurrentTaskHandle>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005fa2:	f002 f8eb 	bl	800817c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8005fa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d811      	bhi.n	8005fd2 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f001 f9a1 	bl	80072fc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8005fc0:	6a38      	ldr	r0, [r7, #32]
 8005fc2:	f000 f951 	bl	8006268 <prvBytesInBuffer>
 8005fc6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005fc8:	e003      	b.n	8005fd2 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8005fca:	6a38      	ldr	r0, [r7, #32]
 8005fcc:	f000 f94c 	bl	8006268 <prvBytesInBuffer>
 8005fd0:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8005fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d91d      	bls.n	8006016 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	6a38      	ldr	r0, [r7, #32]
 8005fe6:	f000 f81b 	bl	8006020 <prvReadMessageFromBuffer>
 8005fea:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8005fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d011      	beq.n	8006016 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8005ff2:	f000 fbf1 	bl	80067d8 <vTaskSuspendAll>
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <xStreamBufferReceive+0x122>
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	6958      	ldr	r0, [r3, #20]
 8006002:	2300      	movs	r3, #0
 8006004:	2200      	movs	r2, #0
 8006006:	2100      	movs	r1, #0
 8006008:	f001 f9d8 	bl	80073bc <xTaskGenericNotify>
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	2200      	movs	r2, #0
 8006010:	615a      	str	r2, [r3, #20]
 8006012:	f000 fbef 	bl	80067f4 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8006016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006018:	4618      	mov	r0, r3
 800601a:	3730      	adds	r7, #48	@ 0x30
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800602e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006030:	2b00      	cmp	r3, #0
 8006032:	d019      	beq.n	8006068 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800603a:	f107 0110 	add.w	r1, r7, #16
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f893 	bl	800616e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d907      	bls.n	800606c <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
 8006066:	e001      	b.n	800606c <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f87b 	bl	800616e <prvReadBytesFromBuffer>
 8006078:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800607a:	697b      	ldr	r3, [r7, #20]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08a      	sub	sp, #40	@ 0x28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	61fb      	str	r3, [r7, #28]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	4293      	cmp	r3, r2
 80060c0:	bf28      	it	cs
 80060c2:	4613      	movcs	r3, r2
 80060c4:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80060c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	441a      	add	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d90b      	bls.n	80060ec <prvWriteBytesToBuffer+0x68>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	61bb      	str	r3, [r7, #24]
}
 80060e6:	bf00      	nop
 80060e8:	bf00      	nop
 80060ea:	e7fd      	b.n	80060e8 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	699a      	ldr	r2, [r3, #24]
 80060f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f2:	4413      	add	r3, r2
 80060f4:	6a3a      	ldr	r2, [r7, #32]
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f003 fc06 	bl	800990a <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	429a      	cmp	r2, r3
 8006104:	d91d      	bls.n	8006142 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	1ad2      	subs	r2, r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	429a      	cmp	r2, r3
 8006112:	d90b      	bls.n	800612c <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	617b      	str	r3, [r7, #20]
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	e7fd      	b.n	8006128 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6998      	ldr	r0, [r3, #24]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	18d1      	adds	r1, r2, r3
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	461a      	mov	r2, r3
 800613e:	f003 fbe4 	bl	800990a <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8006142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4413      	add	r3, r2
 8006148:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006150:	429a      	cmp	r2, r3
 8006152:	d304      	bcc.n	800615e <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006162:	605a      	str	r2, [r3, #4]

	return xCount;
 8006164:	687b      	ldr	r3, [r7, #4]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3728      	adds	r7, #40	@ 0x28
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b08a      	sub	sp, #40	@ 0x28
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
 800617a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	4293      	cmp	r3, r2
 8006182:	bf28      	it	cs
 8006184:	4613      	movcs	r3, r2
 8006186:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d067      	beq.n	800625e <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	6a3a      	ldr	r2, [r7, #32]
 800619e:	4293      	cmp	r3, r2
 80061a0:	bf28      	it	cs
 80061a2:	4613      	movcs	r3, r2
 80061a4:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d90b      	bls.n	80061c6 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	61bb      	str	r3, [r7, #24]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80061c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	441a      	add	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d90b      	bls.n	80061ec <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	617b      	str	r3, [r7, #20]
}
 80061e6:	bf00      	nop
 80061e8:	bf00      	nop
 80061ea:	e7fd      	b.n	80061e8 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f2:	4413      	add	r3, r2
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	4619      	mov	r1, r3
 80061f8:	68b8      	ldr	r0, [r7, #8]
 80061fa:	f003 fb86 	bl	800990a <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80061fe:	6a3a      	ldr	r2, [r7, #32]
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	429a      	cmp	r2, r3
 8006204:	d91a      	bls.n	800623c <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8006206:	6a3a      	ldr	r2, [r7, #32]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	429a      	cmp	r2, r3
 800620c:	d90b      	bls.n	8006226 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	613b      	str	r3, [r7, #16]
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	e7fd      	b.n	8006222 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	18d0      	adds	r0, r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6999      	ldr	r1, [r3, #24]
 8006230:	6a3a      	ldr	r2, [r7, #32]
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	461a      	mov	r2, r3
 8006238:	f003 fb67 	bl	800990a <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800623c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	4413      	add	r3, r2
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800624a:	429a      	cmp	r2, r3
 800624c:	d304      	bcc.n	8006258 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800625c:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800625e:	6a3b      	ldr	r3, [r7, #32]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3728      	adds	r7, #40	@ 0x28
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4413      	add	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	429a      	cmp	r2, r3
 800628e:	d304      	bcc.n	800629a <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800629a:	68fb      	ldr	r3, [r7, #12]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80062b6:	2355      	movs	r3, #85	@ 0x55
 80062b8:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6979      	ldr	r1, [r7, #20]
 80062be:	68b8      	ldr	r0, [r7, #8]
 80062c0:	f003 fa2b 	bl	800971a <memset>
 80062c4:	4602      	mov	r2, r0
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00b      	beq.n	80062e4 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	613b      	str	r3, [r7, #16]
}
 80062de:	bf00      	nop
 80062e0:	bf00      	nop
 80062e2:	e7fd      	b.n	80062e0 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80062e4:	2224      	movs	r2, #36	@ 0x24
 80062e6:	2100      	movs	r1, #0
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f003 fa16 	bl	800971a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006306:	771a      	strb	r2, [r3, #28]
}
 8006308:	bf00      	nop
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08e      	sub	sp, #56	@ 0x38
 8006314:	af04      	add	r7, sp, #16
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800631e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10b      	bne.n	800633c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	623b      	str	r3, [r7, #32]
}
 8006336:	bf00      	nop
 8006338:	bf00      	nop
 800633a:	e7fd      	b.n	8006338 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800633c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	61fb      	str	r3, [r7, #28]
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800635a:	23a8      	movs	r3, #168	@ 0xa8
 800635c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2ba8      	cmp	r3, #168	@ 0xa8
 8006362:	d00b      	beq.n	800637c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	61bb      	str	r3, [r7, #24]
}
 8006376:	bf00      	nop
 8006378:	bf00      	nop
 800637a:	e7fd      	b.n	8006378 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800637c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800637e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01e      	beq.n	80063c2 <xTaskCreateStatic+0xb2>
 8006384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01b      	beq.n	80063c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800638a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006392:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	2202      	movs	r2, #2
 8006398:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800639c:	2300      	movs	r3, #0
 800639e:	9303      	str	r3, [sp, #12]
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	9302      	str	r3, [sp, #8]
 80063a4:	f107 0314 	add.w	r3, r7, #20
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f851 	bl	800645c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80063bc:	f000 f8f6 	bl	80065ac <prvAddNewTaskToReadyList>
 80063c0:	e001      	b.n	80063c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063c6:	697b      	ldr	r3, [r7, #20]
	}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3728      	adds	r7, #40	@ 0x28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08c      	sub	sp, #48	@ 0x30
 80063d4:	af04      	add	r7, sp, #16
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 ffb9 	bl	800835c <pvPortMalloc>
 80063ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00e      	beq.n	8006410 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063f2:	20a8      	movs	r0, #168	@ 0xa8
 80063f4:	f001 ffb2 	bl	800835c <pvPortMalloc>
 80063f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	631a      	str	r2, [r3, #48]	@ 0x30
 8006406:	e005      	b.n	8006414 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006408:	6978      	ldr	r0, [r7, #20]
 800640a:	f002 f875 	bl	80084f8 <vPortFree>
 800640e:	e001      	b.n	8006414 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d017      	beq.n	800644a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006422:	88fa      	ldrh	r2, [r7, #6]
 8006424:	2300      	movs	r3, #0
 8006426:	9303      	str	r3, [sp, #12]
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	9302      	str	r3, [sp, #8]
 800642c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f80f 	bl	800645c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800643e:	69f8      	ldr	r0, [r7, #28]
 8006440:	f000 f8b4 	bl	80065ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006444:	2301      	movs	r3, #1
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	e002      	b.n	8006450 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800644a:	f04f 33ff 	mov.w	r3, #4294967295
 800644e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006450:	69bb      	ldr	r3, [r7, #24]
	}
 8006452:	4618      	mov	r0, r3
 8006454:	3720      	adds	r7, #32
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	461a      	mov	r2, r3
 8006474:	21a5      	movs	r1, #165	@ 0xa5
 8006476:	f003 f950 	bl	800971a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006484:	3b01      	subs	r3, #1
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	f023 0307 	bic.w	r3, r3, #7
 8006492:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00b      	beq.n	80064b6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	617b      	str	r3, [r7, #20]
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	e7fd      	b.n	80064b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01f      	beq.n	80064fc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064bc:	2300      	movs	r3, #0
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e012      	b.n	80064e8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	7819      	ldrb	r1, [r3, #0]
 80064ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	3334      	adds	r3, #52	@ 0x34
 80064d2:	460a      	mov	r2, r1
 80064d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	3301      	adds	r3, #1
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b0f      	cmp	r3, #15
 80064ec:	d9e9      	bls.n	80064c2 <prvInitialiseNewTask+0x66>
 80064ee:	e000      	b.n	80064f2 <prvInitialiseNewTask+0x96>
			{
				break;
 80064f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064fa:	e003      	b.n	8006504 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006506:	2b37      	cmp	r3, #55	@ 0x37
 8006508:	d901      	bls.n	800650e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800650a:	2337      	movs	r3, #55	@ 0x37
 800650c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006512:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006518:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800651a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651c:	2200      	movs	r2, #0
 800651e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006522:	3304      	adds	r3, #4
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe fae1 	bl	8004aec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	3318      	adds	r3, #24
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fadc 	bl	8004aec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006538:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800653a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006548:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	2200      	movs	r2, #0
 800654e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006554:	2200      	movs	r2, #0
 8006556:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	3354      	adds	r3, #84	@ 0x54
 800655e:	224c      	movs	r2, #76	@ 0x4c
 8006560:	2100      	movs	r1, #0
 8006562:	4618      	mov	r0, r3
 8006564:	f003 f8d9 	bl	800971a <memset>
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	4a0d      	ldr	r2, [pc, #52]	@ (80065a0 <prvInitialiseNewTask+0x144>)
 800656c:	659a      	str	r2, [r3, #88]	@ 0x58
 800656e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006570:	4a0c      	ldr	r2, [pc, #48]	@ (80065a4 <prvInitialiseNewTask+0x148>)
 8006572:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006576:	4a0c      	ldr	r2, [pc, #48]	@ (80065a8 <prvInitialiseNewTask+0x14c>)
 8006578:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	68f9      	ldr	r1, [r7, #12]
 800657e:	69b8      	ldr	r0, [r7, #24]
 8006580:	f001 fc98 	bl	8007eb4 <pxPortInitialiseStack>
 8006584:	4602      	mov	r2, r0
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800658a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006596:	bf00      	nop
 8006598:	3720      	adds	r7, #32
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	20004e14 	.word	0x20004e14
 80065a4:	20004e7c 	.word	0x20004e7c
 80065a8:	20004ee4 	.word	0x20004ee4

080065ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065b4:	f001 fdb0 	bl	8008118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006670 <prvAddNewTaskToReadyList+0xc4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3301      	adds	r3, #1
 80065be:	4a2c      	ldr	r2, [pc, #176]	@ (8006670 <prvAddNewTaskToReadyList+0xc4>)
 80065c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065c2:	4b2c      	ldr	r3, [pc, #176]	@ (8006674 <prvAddNewTaskToReadyList+0xc8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d109      	bne.n	80065de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065ca:	4a2a      	ldr	r2, [pc, #168]	@ (8006674 <prvAddNewTaskToReadyList+0xc8>)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065d0:	4b27      	ldr	r3, [pc, #156]	@ (8006670 <prvAddNewTaskToReadyList+0xc4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d110      	bne.n	80065fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065d8:	f000 fc2e 	bl	8006e38 <prvInitialiseTaskLists>
 80065dc:	e00d      	b.n	80065fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065de:	4b26      	ldr	r3, [pc, #152]	@ (8006678 <prvAddNewTaskToReadyList+0xcc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d109      	bne.n	80065fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065e6:	4b23      	ldr	r3, [pc, #140]	@ (8006674 <prvAddNewTaskToReadyList+0xc8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d802      	bhi.n	80065fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006674 <prvAddNewTaskToReadyList+0xc8>)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065fa:	4b20      	ldr	r3, [pc, #128]	@ (800667c <prvAddNewTaskToReadyList+0xd0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3301      	adds	r3, #1
 8006600:	4a1e      	ldr	r2, [pc, #120]	@ (800667c <prvAddNewTaskToReadyList+0xd0>)
 8006602:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006604:	4b1d      	ldr	r3, [pc, #116]	@ (800667c <prvAddNewTaskToReadyList+0xd0>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006610:	4b1b      	ldr	r3, [pc, #108]	@ (8006680 <prvAddNewTaskToReadyList+0xd4>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d903      	bls.n	8006620 <prvAddNewTaskToReadyList+0x74>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	4a18      	ldr	r2, [pc, #96]	@ (8006680 <prvAddNewTaskToReadyList+0xd4>)
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4a15      	ldr	r2, [pc, #84]	@ (8006684 <prvAddNewTaskToReadyList+0xd8>)
 800662e:	441a      	add	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3304      	adds	r3, #4
 8006634:	4619      	mov	r1, r3
 8006636:	4610      	mov	r0, r2
 8006638:	f7fe fa65 	bl	8004b06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800663c:	f001 fd9e 	bl	800817c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006640:	4b0d      	ldr	r3, [pc, #52]	@ (8006678 <prvAddNewTaskToReadyList+0xcc>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00e      	beq.n	8006666 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006648:	4b0a      	ldr	r3, [pc, #40]	@ (8006674 <prvAddNewTaskToReadyList+0xc8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006652:	429a      	cmp	r2, r3
 8006654:	d207      	bcs.n	8006666 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006656:	4b0c      	ldr	r3, [pc, #48]	@ (8006688 <prvAddNewTaskToReadyList+0xdc>)
 8006658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006666:	bf00      	nop
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20001094 	.word	0x20001094
 8006674:	20000bc0 	.word	0x20000bc0
 8006678:	200010a0 	.word	0x200010a0
 800667c:	200010b0 	.word	0x200010b0
 8006680:	2000109c 	.word	0x2000109c
 8006684:	20000bc4 	.word	0x20000bc4
 8006688:	e000ed04 	.word	0xe000ed04

0800668c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d018      	beq.n	80066d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800669e:	4b14      	ldr	r3, [pc, #80]	@ (80066f0 <vTaskDelay+0x64>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <vTaskDelay+0x32>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	60bb      	str	r3, [r7, #8]
}
 80066b8:	bf00      	nop
 80066ba:	bf00      	nop
 80066bc:	e7fd      	b.n	80066ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066be:	f000 f88b 	bl	80067d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066c2:	2100      	movs	r1, #0
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 f847 	bl	8007758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066ca:	f000 f893 	bl	80067f4 <xTaskResumeAll>
 80066ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d107      	bne.n	80066e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80066d6:	4b07      	ldr	r3, [pc, #28]	@ (80066f4 <vTaskDelay+0x68>)
 80066d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066e6:	bf00      	nop
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	200010bc 	.word	0x200010bc
 80066f4:	e000ed04 	.word	0xe000ed04

080066f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08a      	sub	sp, #40	@ 0x28
 80066fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006706:	463a      	mov	r2, r7
 8006708:	1d39      	adds	r1, r7, #4
 800670a:	f107 0308 	add.w	r3, r7, #8
 800670e:	4618      	mov	r0, r3
 8006710:	f7fe f998 	bl	8004a44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	9202      	str	r2, [sp, #8]
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	2300      	movs	r3, #0
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	2300      	movs	r3, #0
 8006724:	460a      	mov	r2, r1
 8006726:	4924      	ldr	r1, [pc, #144]	@ (80067b8 <vTaskStartScheduler+0xc0>)
 8006728:	4824      	ldr	r0, [pc, #144]	@ (80067bc <vTaskStartScheduler+0xc4>)
 800672a:	f7ff fdf1 	bl	8006310 <xTaskCreateStatic>
 800672e:	4603      	mov	r3, r0
 8006730:	4a23      	ldr	r2, [pc, #140]	@ (80067c0 <vTaskStartScheduler+0xc8>)
 8006732:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006734:	4b22      	ldr	r3, [pc, #136]	@ (80067c0 <vTaskStartScheduler+0xc8>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800673c:	2301      	movs	r3, #1
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	e001      	b.n	8006746 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d102      	bne.n	8006752 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800674c:	f001 f858 	bl	8007800 <xTimerCreateTimerTask>
 8006750:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d11b      	bne.n	8006790 <vTaskStartScheduler+0x98>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	613b      	str	r3, [r7, #16]
}
 800676a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800676c:	4b15      	ldr	r3, [pc, #84]	@ (80067c4 <vTaskStartScheduler+0xcc>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3354      	adds	r3, #84	@ 0x54
 8006772:	4a15      	ldr	r2, [pc, #84]	@ (80067c8 <vTaskStartScheduler+0xd0>)
 8006774:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006776:	4b15      	ldr	r3, [pc, #84]	@ (80067cc <vTaskStartScheduler+0xd4>)
 8006778:	f04f 32ff 	mov.w	r2, #4294967295
 800677c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800677e:	4b14      	ldr	r3, [pc, #80]	@ (80067d0 <vTaskStartScheduler+0xd8>)
 8006780:	2201      	movs	r2, #1
 8006782:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006784:	4b13      	ldr	r3, [pc, #76]	@ (80067d4 <vTaskStartScheduler+0xdc>)
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800678a:	f001 fc21 	bl	8007fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800678e:	e00f      	b.n	80067b0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006796:	d10b      	bne.n	80067b0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	60fb      	str	r3, [r7, #12]
}
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	e7fd      	b.n	80067ac <vTaskStartScheduler+0xb4>
}
 80067b0:	bf00      	nop
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	0800d954 	.word	0x0800d954
 80067bc:	08006e09 	.word	0x08006e09
 80067c0:	200010b8 	.word	0x200010b8
 80067c4:	20000bc0 	.word	0x20000bc0
 80067c8:	2000001c 	.word	0x2000001c
 80067cc:	200010b4 	.word	0x200010b4
 80067d0:	200010a0 	.word	0x200010a0
 80067d4:	20001098 	.word	0x20001098

080067d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067dc:	4b04      	ldr	r3, [pc, #16]	@ (80067f0 <vTaskSuspendAll+0x18>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3301      	adds	r3, #1
 80067e2:	4a03      	ldr	r2, [pc, #12]	@ (80067f0 <vTaskSuspendAll+0x18>)
 80067e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80067e6:	bf00      	nop
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	200010bc 	.word	0x200010bc

080067f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006802:	4b42      	ldr	r3, [pc, #264]	@ (800690c <xTaskResumeAll+0x118>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <xTaskResumeAll+0x2e>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	603b      	str	r3, [r7, #0]
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	e7fd      	b.n	800681e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006822:	f001 fc79 	bl	8008118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006826:	4b39      	ldr	r3, [pc, #228]	@ (800690c <xTaskResumeAll+0x118>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3b01      	subs	r3, #1
 800682c:	4a37      	ldr	r2, [pc, #220]	@ (800690c <xTaskResumeAll+0x118>)
 800682e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006830:	4b36      	ldr	r3, [pc, #216]	@ (800690c <xTaskResumeAll+0x118>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d162      	bne.n	80068fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006838:	4b35      	ldr	r3, [pc, #212]	@ (8006910 <xTaskResumeAll+0x11c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d05e      	beq.n	80068fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006840:	e02f      	b.n	80068a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006842:	4b34      	ldr	r3, [pc, #208]	@ (8006914 <xTaskResumeAll+0x120>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3318      	adds	r3, #24
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe f9b6 	bl	8004bc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3304      	adds	r3, #4
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe f9b1 	bl	8004bc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006862:	4b2d      	ldr	r3, [pc, #180]	@ (8006918 <xTaskResumeAll+0x124>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d903      	bls.n	8006872 <xTaskResumeAll+0x7e>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686e:	4a2a      	ldr	r2, [pc, #168]	@ (8006918 <xTaskResumeAll+0x124>)
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4a27      	ldr	r2, [pc, #156]	@ (800691c <xTaskResumeAll+0x128>)
 8006880:	441a      	add	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f7fe f93c 	bl	8004b06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006892:	4b23      	ldr	r3, [pc, #140]	@ (8006920 <xTaskResumeAll+0x12c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	429a      	cmp	r2, r3
 800689a:	d302      	bcc.n	80068a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800689c:	4b21      	ldr	r3, [pc, #132]	@ (8006924 <xTaskResumeAll+0x130>)
 800689e:	2201      	movs	r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006914 <xTaskResumeAll+0x120>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1cb      	bne.n	8006842 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068b0:	f000 fb66 	bl	8006f80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006928 <xTaskResumeAll+0x134>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d010      	beq.n	80068e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068c0:	f000 f846 	bl	8006950 <xTaskIncrementTick>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80068ca:	4b16      	ldr	r3, [pc, #88]	@ (8006924 <xTaskResumeAll+0x130>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f1      	bne.n	80068c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80068dc:	4b12      	ldr	r3, [pc, #72]	@ (8006928 <xTaskResumeAll+0x134>)
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068e2:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <xTaskResumeAll+0x130>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068ea:	2301      	movs	r3, #1
 80068ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068ee:	4b0f      	ldr	r3, [pc, #60]	@ (800692c <xTaskResumeAll+0x138>)
 80068f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068fe:	f001 fc3d 	bl	800817c <vPortExitCritical>

	return xAlreadyYielded;
 8006902:	68bb      	ldr	r3, [r7, #8]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	200010bc 	.word	0x200010bc
 8006910:	20001094 	.word	0x20001094
 8006914:	20001054 	.word	0x20001054
 8006918:	2000109c 	.word	0x2000109c
 800691c:	20000bc4 	.word	0x20000bc4
 8006920:	20000bc0 	.word	0x20000bc0
 8006924:	200010a8 	.word	0x200010a8
 8006928:	200010a4 	.word	0x200010a4
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006936:	4b05      	ldr	r3, [pc, #20]	@ (800694c <xTaskGetTickCount+0x1c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800693c:	687b      	ldr	r3, [r7, #4]
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	20001098 	.word	0x20001098

08006950 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800695a:	4b4f      	ldr	r3, [pc, #316]	@ (8006a98 <xTaskIncrementTick+0x148>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f040 8090 	bne.w	8006a84 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006964:	4b4d      	ldr	r3, [pc, #308]	@ (8006a9c <xTaskIncrementTick+0x14c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3301      	adds	r3, #1
 800696a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800696c:	4a4b      	ldr	r2, [pc, #300]	@ (8006a9c <xTaskIncrementTick+0x14c>)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d121      	bne.n	80069bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006978:	4b49      	ldr	r3, [pc, #292]	@ (8006aa0 <xTaskIncrementTick+0x150>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00b      	beq.n	800699a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	603b      	str	r3, [r7, #0]
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop
 8006998:	e7fd      	b.n	8006996 <xTaskIncrementTick+0x46>
 800699a:	4b41      	ldr	r3, [pc, #260]	@ (8006aa0 <xTaskIncrementTick+0x150>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	4b40      	ldr	r3, [pc, #256]	@ (8006aa4 <xTaskIncrementTick+0x154>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa0 <xTaskIncrementTick+0x150>)
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa4 <xTaskIncrementTick+0x154>)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	4b3e      	ldr	r3, [pc, #248]	@ (8006aa8 <xTaskIncrementTick+0x158>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3301      	adds	r3, #1
 80069b4:	4a3c      	ldr	r2, [pc, #240]	@ (8006aa8 <xTaskIncrementTick+0x158>)
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	f000 fae2 	bl	8006f80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069bc:	4b3b      	ldr	r3, [pc, #236]	@ (8006aac <xTaskIncrementTick+0x15c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d349      	bcc.n	8006a5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069c6:	4b36      	ldr	r3, [pc, #216]	@ (8006aa0 <xTaskIncrementTick+0x150>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d104      	bne.n	80069da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d0:	4b36      	ldr	r3, [pc, #216]	@ (8006aac <xTaskIncrementTick+0x15c>)
 80069d2:	f04f 32ff 	mov.w	r2, #4294967295
 80069d6:	601a      	str	r2, [r3, #0]
					break;
 80069d8:	e03f      	b.n	8006a5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069da:	4b31      	ldr	r3, [pc, #196]	@ (8006aa0 <xTaskIncrementTick+0x150>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d203      	bcs.n	80069fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069f2:	4a2e      	ldr	r2, [pc, #184]	@ (8006aac <xTaskIncrementTick+0x15c>)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069f8:	e02f      	b.n	8006a5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	3304      	adds	r3, #4
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe f8de 	bl	8004bc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	3318      	adds	r3, #24
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe f8d5 	bl	8004bc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a1a:	4b25      	ldr	r3, [pc, #148]	@ (8006ab0 <xTaskIncrementTick+0x160>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d903      	bls.n	8006a2a <xTaskIncrementTick+0xda>
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a26:	4a22      	ldr	r2, [pc, #136]	@ (8006ab0 <xTaskIncrementTick+0x160>)
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab4 <xTaskIncrementTick+0x164>)
 8006a38:	441a      	add	r2, r3
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f7fe f860 	bl	8004b06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ab8 <xTaskIncrementTick+0x168>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d3b8      	bcc.n	80069c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006a54:	2301      	movs	r3, #1
 8006a56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a58:	e7b5      	b.n	80069c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a5a:	4b17      	ldr	r3, [pc, #92]	@ (8006ab8 <xTaskIncrementTick+0x168>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a60:	4914      	ldr	r1, [pc, #80]	@ (8006ab4 <xTaskIncrementTick+0x164>)
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	440b      	add	r3, r1
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d901      	bls.n	8006a76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006a72:	2301      	movs	r3, #1
 8006a74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a76:	4b11      	ldr	r3, [pc, #68]	@ (8006abc <xTaskIncrementTick+0x16c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	e004      	b.n	8006a8e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a84:	4b0e      	ldr	r3, [pc, #56]	@ (8006ac0 <xTaskIncrementTick+0x170>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8006ac0 <xTaskIncrementTick+0x170>)
 8006a8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a8e:	697b      	ldr	r3, [r7, #20]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	200010bc 	.word	0x200010bc
 8006a9c:	20001098 	.word	0x20001098
 8006aa0:	2000104c 	.word	0x2000104c
 8006aa4:	20001050 	.word	0x20001050
 8006aa8:	200010ac 	.word	0x200010ac
 8006aac:	200010b4 	.word	0x200010b4
 8006ab0:	2000109c 	.word	0x2000109c
 8006ab4:	20000bc4 	.word	0x20000bc4
 8006ab8:	20000bc0 	.word	0x20000bc0
 8006abc:	200010a8 	.word	0x200010a8
 8006ac0:	200010a4 	.word	0x200010a4

08006ac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006aca:	4b2b      	ldr	r3, [pc, #172]	@ (8006b78 <vTaskSwitchContext+0xb4>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8006b7c <vTaskSwitchContext+0xb8>)
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ad8:	e047      	b.n	8006b6a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006ada:	4b28      	ldr	r3, [pc, #160]	@ (8006b7c <vTaskSwitchContext+0xb8>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae0:	4b27      	ldr	r3, [pc, #156]	@ (8006b80 <vTaskSwitchContext+0xbc>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	e011      	b.n	8006b0c <vTaskSwitchContext+0x48>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10b      	bne.n	8006b06 <vTaskSwitchContext+0x42>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	e7fd      	b.n	8006b02 <vTaskSwitchContext+0x3e>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	491d      	ldr	r1, [pc, #116]	@ (8006b84 <vTaskSwitchContext+0xc0>)
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	440b      	add	r3, r1
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0e3      	beq.n	8006ae8 <vTaskSwitchContext+0x24>
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4a16      	ldr	r2, [pc, #88]	@ (8006b84 <vTaskSwitchContext+0xc0>)
 8006b2c:	4413      	add	r3, r2
 8006b2e:	60bb      	str	r3, [r7, #8]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	605a      	str	r2, [r3, #4]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	3308      	adds	r3, #8
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d104      	bne.n	8006b50 <vTaskSwitchContext+0x8c>
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	605a      	str	r2, [r3, #4]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	4a0c      	ldr	r2, [pc, #48]	@ (8006b88 <vTaskSwitchContext+0xc4>)
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	4a09      	ldr	r2, [pc, #36]	@ (8006b80 <vTaskSwitchContext+0xbc>)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b60:	4b09      	ldr	r3, [pc, #36]	@ (8006b88 <vTaskSwitchContext+0xc4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3354      	adds	r3, #84	@ 0x54
 8006b66:	4a09      	ldr	r2, [pc, #36]	@ (8006b8c <vTaskSwitchContext+0xc8>)
 8006b68:	6013      	str	r3, [r2, #0]
}
 8006b6a:	bf00      	nop
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	200010bc 	.word	0x200010bc
 8006b7c:	200010a8 	.word	0x200010a8
 8006b80:	2000109c 	.word	0x2000109c
 8006b84:	20000bc4 	.word	0x20000bc4
 8006b88:	20000bc0 	.word	0x20000bc0
 8006b8c:	2000001c 	.word	0x2000001c

08006b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10b      	bne.n	8006bb8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	60fb      	str	r3, [r7, #12]
}
 8006bb2:	bf00      	nop
 8006bb4:	bf00      	nop
 8006bb6:	e7fd      	b.n	8006bb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bb8:	4b07      	ldr	r3, [pc, #28]	@ (8006bd8 <vTaskPlaceOnEventList+0x48>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3318      	adds	r3, #24
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7fd ffc4 	bl	8004b4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	6838      	ldr	r0, [r7, #0]
 8006bca:	f000 fdc5 	bl	8007758 <prvAddCurrentTaskToDelayedList>
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000bc0 	.word	0x20000bc0

08006bdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	617b      	str	r3, [r7, #20]
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c06:	4b0a      	ldr	r3, [pc, #40]	@ (8006c30 <vTaskPlaceOnEventListRestricted+0x54>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3318      	adds	r3, #24
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f7fd ff79 	bl	8004b06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	68b8      	ldr	r0, [r7, #8]
 8006c24:	f000 fd98 	bl	8007758 <prvAddCurrentTaskToDelayedList>
	}
 8006c28:	bf00      	nop
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000bc0 	.word	0x20000bc0

08006c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10b      	bne.n	8006c62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	60fb      	str	r3, [r7, #12]
}
 8006c5c:	bf00      	nop
 8006c5e:	bf00      	nop
 8006c60:	e7fd      	b.n	8006c5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	3318      	adds	r3, #24
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fd ffaa 	bl	8004bc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce4 <xTaskRemoveFromEventList+0xb0>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d11d      	bne.n	8006cb0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fd ffa1 	bl	8004bc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c82:	4b19      	ldr	r3, [pc, #100]	@ (8006ce8 <xTaskRemoveFromEventList+0xb4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d903      	bls.n	8006c92 <xTaskRemoveFromEventList+0x5e>
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8e:	4a16      	ldr	r2, [pc, #88]	@ (8006ce8 <xTaskRemoveFromEventList+0xb4>)
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4a13      	ldr	r2, [pc, #76]	@ (8006cec <xTaskRemoveFromEventList+0xb8>)
 8006ca0:	441a      	add	r2, r3
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f7fd ff2c 	bl	8004b06 <vListInsertEnd>
 8006cae:	e005      	b.n	8006cbc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	3318      	adds	r3, #24
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	480e      	ldr	r0, [pc, #56]	@ (8006cf0 <xTaskRemoveFromEventList+0xbc>)
 8006cb8:	f7fd ff25 	bl	8004b06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf4 <xTaskRemoveFromEventList+0xc0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d905      	bls.n	8006cd6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cce:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf8 <xTaskRemoveFromEventList+0xc4>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	e001      	b.n	8006cda <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cda:	697b      	ldr	r3, [r7, #20]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	200010bc 	.word	0x200010bc
 8006ce8:	2000109c 	.word	0x2000109c
 8006cec:	20000bc4 	.word	0x20000bc4
 8006cf0:	20001054 	.word	0x20001054
 8006cf4:	20000bc0 	.word	0x20000bc0
 8006cf8:	200010a8 	.word	0x200010a8

08006cfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d04:	4b06      	ldr	r3, [pc, #24]	@ (8006d20 <vTaskInternalSetTimeOutState+0x24>)
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d0c:	4b05      	ldr	r3, [pc, #20]	@ (8006d24 <vTaskInternalSetTimeOutState+0x28>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	605a      	str	r2, [r3, #4]
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	200010ac 	.word	0x200010ac
 8006d24:	20001098 	.word	0x20001098

08006d28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10b      	bne.n	8006d50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	613b      	str	r3, [r7, #16]
}
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	e7fd      	b.n	8006d4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10b      	bne.n	8006d6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	60fb      	str	r3, [r7, #12]
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	e7fd      	b.n	8006d6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006d6e:	f001 f9d3 	bl	8008118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d72:	4b1d      	ldr	r3, [pc, #116]	@ (8006de8 <xTaskCheckForTimeOut+0xc0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8a:	d102      	bne.n	8006d92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	61fb      	str	r3, [r7, #28]
 8006d90:	e023      	b.n	8006dda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	4b15      	ldr	r3, [pc, #84]	@ (8006dec <xTaskCheckForTimeOut+0xc4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d007      	beq.n	8006dae <xTaskCheckForTimeOut+0x86>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d302      	bcc.n	8006dae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006da8:	2301      	movs	r3, #1
 8006daa:	61fb      	str	r3, [r7, #28]
 8006dac:	e015      	b.n	8006dda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d20b      	bcs.n	8006dd0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff ff99 	bl	8006cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61fb      	str	r3, [r7, #28]
 8006dce:	e004      	b.n	8006dda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dda:	f001 f9cf 	bl	800817c <vPortExitCritical>

	return xReturn;
 8006dde:	69fb      	ldr	r3, [r7, #28]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3720      	adds	r7, #32
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20001098 	.word	0x20001098
 8006dec:	200010ac 	.word	0x200010ac

08006df0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006df4:	4b03      	ldr	r3, [pc, #12]	@ (8006e04 <vTaskMissedYield+0x14>)
 8006df6:	2201      	movs	r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
}
 8006dfa:	bf00      	nop
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	200010a8 	.word	0x200010a8

08006e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e10:	f000 f852 	bl	8006eb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e14:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <prvIdleTask+0x28>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d9f9      	bls.n	8006e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e1c:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <prvIdleTask+0x2c>)
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e2c:	e7f0      	b.n	8006e10 <prvIdleTask+0x8>
 8006e2e:	bf00      	nop
 8006e30:	20000bc4 	.word	0x20000bc4
 8006e34:	e000ed04 	.word	0xe000ed04

08006e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e3e:	2300      	movs	r3, #0
 8006e40:	607b      	str	r3, [r7, #4]
 8006e42:	e00c      	b.n	8006e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	4613      	mov	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4a12      	ldr	r2, [pc, #72]	@ (8006e98 <prvInitialiseTaskLists+0x60>)
 8006e50:	4413      	add	r3, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fd fe2a 	bl	8004aac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	607b      	str	r3, [r7, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b37      	cmp	r3, #55	@ 0x37
 8006e62:	d9ef      	bls.n	8006e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e64:	480d      	ldr	r0, [pc, #52]	@ (8006e9c <prvInitialiseTaskLists+0x64>)
 8006e66:	f7fd fe21 	bl	8004aac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e6a:	480d      	ldr	r0, [pc, #52]	@ (8006ea0 <prvInitialiseTaskLists+0x68>)
 8006e6c:	f7fd fe1e 	bl	8004aac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e70:	480c      	ldr	r0, [pc, #48]	@ (8006ea4 <prvInitialiseTaskLists+0x6c>)
 8006e72:	f7fd fe1b 	bl	8004aac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e76:	480c      	ldr	r0, [pc, #48]	@ (8006ea8 <prvInitialiseTaskLists+0x70>)
 8006e78:	f7fd fe18 	bl	8004aac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e7c:	480b      	ldr	r0, [pc, #44]	@ (8006eac <prvInitialiseTaskLists+0x74>)
 8006e7e:	f7fd fe15 	bl	8004aac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e82:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb0 <prvInitialiseTaskLists+0x78>)
 8006e84:	4a05      	ldr	r2, [pc, #20]	@ (8006e9c <prvInitialiseTaskLists+0x64>)
 8006e86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e88:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb4 <prvInitialiseTaskLists+0x7c>)
 8006e8a:	4a05      	ldr	r2, [pc, #20]	@ (8006ea0 <prvInitialiseTaskLists+0x68>)
 8006e8c:	601a      	str	r2, [r3, #0]
}
 8006e8e:	bf00      	nop
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000bc4 	.word	0x20000bc4
 8006e9c:	20001024 	.word	0x20001024
 8006ea0:	20001038 	.word	0x20001038
 8006ea4:	20001054 	.word	0x20001054
 8006ea8:	20001068 	.word	0x20001068
 8006eac:	20001080 	.word	0x20001080
 8006eb0:	2000104c 	.word	0x2000104c
 8006eb4:	20001050 	.word	0x20001050

08006eb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ebe:	e019      	b.n	8006ef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ec0:	f001 f92a 	bl	8008118 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec4:	4b10      	ldr	r3, [pc, #64]	@ (8006f08 <prvCheckTasksWaitingTermination+0x50>)
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fd fe75 	bl	8004bc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f0c <prvCheckTasksWaitingTermination+0x54>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	4a0b      	ldr	r2, [pc, #44]	@ (8006f0c <prvCheckTasksWaitingTermination+0x54>)
 8006ede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f10 <prvCheckTasksWaitingTermination+0x58>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8006f10 <prvCheckTasksWaitingTermination+0x58>)
 8006ee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006eea:	f001 f947 	bl	800817c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f810 	bl	8006f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ef4:	4b06      	ldr	r3, [pc, #24]	@ (8006f10 <prvCheckTasksWaitingTermination+0x58>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e1      	bne.n	8006ec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20001068 	.word	0x20001068
 8006f0c:	20001094 	.word	0x20001094
 8006f10:	2000107c 	.word	0x2000107c

08006f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3354      	adds	r3, #84	@ 0x54
 8006f20:	4618      	mov	r0, r3
 8006f22:	f002 fc39 	bl	8009798 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d108      	bne.n	8006f42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 fadf 	bl	80084f8 <vPortFree>
				vPortFree( pxTCB );
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f001 fadc 	bl	80084f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f40:	e019      	b.n	8006f76 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d103      	bne.n	8006f54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fad3 	bl	80084f8 <vPortFree>
	}
 8006f52:	e010      	b.n	8006f76 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d00b      	beq.n	8006f76 <prvDeleteTCB+0x62>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60fb      	str	r3, [r7, #12]
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	e7fd      	b.n	8006f72 <prvDeleteTCB+0x5e>
	}
 8006f76:	bf00      	nop
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f86:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <prvResetNextTaskUnblockTime+0x38>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f90:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <prvResetNextTaskUnblockTime+0x3c>)
 8006f92:	f04f 32ff 	mov.w	r2, #4294967295
 8006f96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f98:	e008      	b.n	8006fac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f9a:	4b07      	ldr	r3, [pc, #28]	@ (8006fb8 <prvResetNextTaskUnblockTime+0x38>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	4a04      	ldr	r2, [pc, #16]	@ (8006fbc <prvResetNextTaskUnblockTime+0x3c>)
 8006faa:	6013      	str	r3, [r2, #0]
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	2000104c 	.word	0x2000104c
 8006fbc:	200010b4 	.word	0x200010b4

08006fc0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006fc6:	4b05      	ldr	r3, [pc, #20]	@ (8006fdc <xTaskGetCurrentTaskHandle+0x1c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006fcc:	687b      	ldr	r3, [r7, #4]
	}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	20000bc0 	.word	0x20000bc0

08006fe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8007014 <xTaskGetSchedulerState+0x34>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d102      	bne.n	8006ff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	607b      	str	r3, [r7, #4]
 8006ff2:	e008      	b.n	8007006 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ff4:	4b08      	ldr	r3, [pc, #32]	@ (8007018 <xTaskGetSchedulerState+0x38>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d102      	bne.n	8007002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	607b      	str	r3, [r7, #4]
 8007000:	e001      	b.n	8007006 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007002:	2300      	movs	r3, #0
 8007004:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007006:	687b      	ldr	r3, [r7, #4]
	}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	200010a0 	.word	0x200010a0
 8007018:	200010bc 	.word	0x200010bc

0800701c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d051      	beq.n	80070d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007036:	4b2a      	ldr	r3, [pc, #168]	@ (80070e0 <xTaskPriorityInherit+0xc4>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703c:	429a      	cmp	r2, r3
 800703e:	d241      	bcs.n	80070c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	db06      	blt.n	8007056 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007048:	4b25      	ldr	r3, [pc, #148]	@ (80070e0 <xTaskPriorityInherit+0xc4>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	6959      	ldr	r1, [r3, #20]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4a1f      	ldr	r2, [pc, #124]	@ (80070e4 <xTaskPriorityInherit+0xc8>)
 8007068:	4413      	add	r3, r2
 800706a:	4299      	cmp	r1, r3
 800706c:	d122      	bne.n	80070b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	3304      	adds	r3, #4
 8007072:	4618      	mov	r0, r3
 8007074:	f7fd fda4 	bl	8004bc0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007078:	4b19      	ldr	r3, [pc, #100]	@ (80070e0 <xTaskPriorityInherit+0xc4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007086:	4b18      	ldr	r3, [pc, #96]	@ (80070e8 <xTaskPriorityInherit+0xcc>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d903      	bls.n	8007096 <xTaskPriorityInherit+0x7a>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007092:	4a15      	ldr	r2, [pc, #84]	@ (80070e8 <xTaskPriorityInherit+0xcc>)
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4a10      	ldr	r2, [pc, #64]	@ (80070e4 <xTaskPriorityInherit+0xc8>)
 80070a4:	441a      	add	r2, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	3304      	adds	r3, #4
 80070aa:	4619      	mov	r1, r3
 80070ac:	4610      	mov	r0, r2
 80070ae:	f7fd fd2a 	bl	8004b06 <vListInsertEnd>
 80070b2:	e004      	b.n	80070be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070b4:	4b0a      	ldr	r3, [pc, #40]	@ (80070e0 <xTaskPriorityInherit+0xc4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070be:	2301      	movs	r3, #1
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	e008      	b.n	80070d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070c8:	4b05      	ldr	r3, [pc, #20]	@ (80070e0 <xTaskPriorityInherit+0xc4>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d201      	bcs.n	80070d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070d2:	2301      	movs	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070d6:	68fb      	ldr	r3, [r7, #12]
	}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000bc0 	.word	0x20000bc0
 80070e4:	20000bc4 	.word	0x20000bc4
 80070e8:	2000109c 	.word	0x2000109c

080070ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d058      	beq.n	80071b4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007102:	4b2f      	ldr	r3, [pc, #188]	@ (80071c0 <xTaskPriorityDisinherit+0xd4>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	429a      	cmp	r2, r3
 800710a:	d00b      	beq.n	8007124 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	60fb      	str	r3, [r7, #12]
}
 800711e:	bf00      	nop
 8007120:	bf00      	nop
 8007122:	e7fd      	b.n	8007120 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10b      	bne.n	8007144 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	60bb      	str	r3, [r7, #8]
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	e7fd      	b.n	8007140 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007148:	1e5a      	subs	r2, r3, #1
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007156:	429a      	cmp	r2, r3
 8007158:	d02c      	beq.n	80071b4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800715e:	2b00      	cmp	r3, #0
 8007160:	d128      	bne.n	80071b4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3304      	adds	r3, #4
 8007166:	4618      	mov	r0, r3
 8007168:	f7fd fd2a 	bl	8004bc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007178:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007184:	4b0f      	ldr	r3, [pc, #60]	@ (80071c4 <xTaskPriorityDisinherit+0xd8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d903      	bls.n	8007194 <xTaskPriorityDisinherit+0xa8>
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007190:	4a0c      	ldr	r2, [pc, #48]	@ (80071c4 <xTaskPriorityDisinherit+0xd8>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4a09      	ldr	r2, [pc, #36]	@ (80071c8 <xTaskPriorityDisinherit+0xdc>)
 80071a2:	441a      	add	r2, r3
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7fd fcab 	bl	8004b06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071b0:	2301      	movs	r3, #1
 80071b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071b4:	697b      	ldr	r3, [r7, #20]
	}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20000bc0 	.word	0x20000bc0
 80071c4:	2000109c 	.word	0x2000109c
 80071c8:	20000bc4 	.word	0x20000bc4

080071cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071da:	2301      	movs	r3, #1
 80071dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d06c      	beq.n	80072be <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10b      	bne.n	8007204 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	60fb      	str	r3, [r7, #12]
}
 80071fe:	bf00      	nop
 8007200:	bf00      	nop
 8007202:	e7fd      	b.n	8007200 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	429a      	cmp	r2, r3
 800720c:	d902      	bls.n	8007214 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	e002      	b.n	800721a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007218:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721e:	69fa      	ldr	r2, [r7, #28]
 8007220:	429a      	cmp	r2, r3
 8007222:	d04c      	beq.n	80072be <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	429a      	cmp	r2, r3
 800722c:	d147      	bne.n	80072be <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800722e:	4b26      	ldr	r3, [pc, #152]	@ (80072c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	429a      	cmp	r2, r3
 8007236:	d10b      	bne.n	8007250 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	60bb      	str	r3, [r7, #8]
}
 800724a:	bf00      	nop
 800724c:	bf00      	nop
 800724e:	e7fd      	b.n	800724c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	db04      	blt.n	800726e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	6959      	ldr	r1, [r3, #20]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4a13      	ldr	r2, [pc, #76]	@ (80072cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800727e:	4413      	add	r3, r2
 8007280:	4299      	cmp	r1, r3
 8007282:	d11c      	bne.n	80072be <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	3304      	adds	r3, #4
 8007288:	4618      	mov	r0, r3
 800728a:	f7fd fc99 	bl	8004bc0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007292:	4b0f      	ldr	r3, [pc, #60]	@ (80072d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d903      	bls.n	80072a2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729e:	4a0c      	ldr	r2, [pc, #48]	@ (80072d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4a07      	ldr	r2, [pc, #28]	@ (80072cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80072b0:	441a      	add	r2, r3
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	3304      	adds	r3, #4
 80072b6:	4619      	mov	r1, r3
 80072b8:	4610      	mov	r0, r2
 80072ba:	f7fd fc24 	bl	8004b06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072be:	bf00      	nop
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000bc0 	.word	0x20000bc0
 80072cc:	20000bc4 	.word	0x20000bc4
 80072d0:	2000109c 	.word	0x2000109c

080072d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072d8:	4b07      	ldr	r3, [pc, #28]	@ (80072f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d004      	beq.n	80072ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072e0:	4b05      	ldr	r3, [pc, #20]	@ (80072f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072e6:	3201      	adds	r2, #1
 80072e8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80072ea:	4b03      	ldr	r3, [pc, #12]	@ (80072f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80072ec:	681b      	ldr	r3, [r3, #0]
	}
 80072ee:	4618      	mov	r0, r3
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	20000bc0 	.word	0x20000bc0

080072fc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800730a:	f000 ff05 	bl	8008118 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800730e:	4b29      	ldr	r3, [pc, #164]	@ (80073b4 <xTaskNotifyWait+0xb8>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d01c      	beq.n	8007356 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800731c:	4b25      	ldr	r3, [pc, #148]	@ (80073b4 <xTaskNotifyWait+0xb8>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	43d2      	mvns	r2, r2
 8007328:	400a      	ands	r2, r1
 800732a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800732e:	4b21      	ldr	r3, [pc, #132]	@ (80073b4 <xTaskNotifyWait+0xb8>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800733e:	2101      	movs	r1, #1
 8007340:	6838      	ldr	r0, [r7, #0]
 8007342:	f000 fa09 	bl	8007758 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007346:	4b1c      	ldr	r3, [pc, #112]	@ (80073b8 <xTaskNotifyWait+0xbc>)
 8007348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007356:	f000 ff11 	bl	800817c <vPortExitCritical>

		taskENTER_CRITICAL();
 800735a:	f000 fedd 	bl	8008118 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007364:	4b13      	ldr	r3, [pc, #76]	@ (80073b4 <xTaskNotifyWait+0xb8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007370:	4b10      	ldr	r3, [pc, #64]	@ (80073b4 <xTaskNotifyWait+0xb8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d002      	beq.n	8007384 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]
 8007382:	e00a      	b.n	800739a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007384:	4b0b      	ldr	r3, [pc, #44]	@ (80073b4 <xTaskNotifyWait+0xb8>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	43d2      	mvns	r2, r2
 8007390:	400a      	ands	r2, r1
 8007392:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8007396:	2301      	movs	r3, #1
 8007398:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800739a:	4b06      	ldr	r3, [pc, #24]	@ (80073b4 <xTaskNotifyWait+0xb8>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80073a4:	f000 feea 	bl	800817c <vPortExitCritical>

		return xReturn;
 80073a8:	697b      	ldr	r3, [r7, #20]
	}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20000bc0 	.word	0x20000bc0
 80073b8:	e000ed04 	.word	0xe000ed04

080073bc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	@ 0x28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80073cc:	2301      	movs	r3, #1
 80073ce:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10b      	bne.n	80073ee <xTaskGenericNotify+0x32>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	61bb      	str	r3, [r7, #24]
}
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	e7fd      	b.n	80073ea <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80073f2:	f000 fe91 	bl	8008118 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d004      	beq.n	8007406 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800740c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	2202      	movs	r2, #2
 8007412:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	2b04      	cmp	r3, #4
 800741a:	d82e      	bhi.n	800747a <xTaskGenericNotify+0xbe>
 800741c:	a201      	add	r2, pc, #4	@ (adr r2, 8007424 <xTaskGenericNotify+0x68>)
 800741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	0800749f 	.word	0x0800749f
 8007428:	08007439 	.word	0x08007439
 800742c:	0800744b 	.word	0x0800744b
 8007430:	0800745b 	.word	0x0800745b
 8007434:	08007465 	.word	0x08007465
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	431a      	orrs	r2, r3
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007448:	e02c      	b.n	80074a4 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007458:	e024      	b.n	80074a4 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007462:	e01f      	b.n	80074a4 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007464:	7ffb      	ldrb	r3, [r7, #31]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d004      	beq.n	8007474 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007472:	e017      	b.n	80074a4 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8007474:	2300      	movs	r3, #0
 8007476:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007478:	e014      	b.n	80074a4 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007484:	d00d      	beq.n	80074a2 <xTaskGenericNotify+0xe6>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	617b      	str	r3, [r7, #20]
}
 8007498:	bf00      	nop
 800749a:	bf00      	nop
 800749c:	e7fd      	b.n	800749a <xTaskGenericNotify+0xde>
					break;
 800749e:	bf00      	nop
 80074a0:	e000      	b.n	80074a4 <xTaskGenericNotify+0xe8>

					break;
 80074a2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80074a4:	7ffb      	ldrb	r3, [r7, #31]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d13b      	bne.n	8007522 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	3304      	adds	r3, #4
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fd fb86 	bl	8004bc0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007530 <xTaskGenericNotify+0x174>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d903      	bls.n	80074c8 <xTaskGenericNotify+0x10c>
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c4:	4a1a      	ldr	r2, [pc, #104]	@ (8007530 <xTaskGenericNotify+0x174>)
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4a17      	ldr	r2, [pc, #92]	@ (8007534 <xTaskGenericNotify+0x178>)
 80074d6:	441a      	add	r2, r3
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	3304      	adds	r3, #4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f7fd fb11 	bl	8004b06 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <xTaskGenericNotify+0x148>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	613b      	str	r3, [r7, #16]
}
 80074fe:	bf00      	nop
 8007500:	bf00      	nop
 8007502:	e7fd      	b.n	8007500 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007508:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <xTaskGenericNotify+0x17c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750e:	429a      	cmp	r2, r3
 8007510:	d907      	bls.n	8007522 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007512:	4b0a      	ldr	r3, [pc, #40]	@ (800753c <xTaskGenericNotify+0x180>)
 8007514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007522:	f000 fe2b 	bl	800817c <vPortExitCritical>

		return xReturn;
 8007526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007528:	4618      	mov	r0, r3
 800752a:	3728      	adds	r7, #40	@ 0x28
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	2000109c 	.word	0x2000109c
 8007534:	20000bc4 	.word	0x20000bc4
 8007538:	20000bc0 	.word	0x20000bc0
 800753c:	e000ed04 	.word	0xe000ed04

08007540 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08e      	sub	sp, #56	@ 0x38
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	603b      	str	r3, [r7, #0]
 800754c:	4613      	mov	r3, r2
 800754e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007550:	2301      	movs	r3, #1
 8007552:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	e7fd      	b.n	800756e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007572:	f000 feb1 	bl	80082d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800757a:	f3ef 8211 	mrs	r2, BASEPRI
 800757e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	623a      	str	r2, [r7, #32]
 8007590:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007592:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007594:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d004      	beq.n	80075a6 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80075a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80075ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80075b8:	79fb      	ldrb	r3, [r7, #7]
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d82e      	bhi.n	800761c <xTaskGenericNotifyFromISR+0xdc>
 80075be:	a201      	add	r2, pc, #4	@ (adr r2, 80075c4 <xTaskGenericNotifyFromISR+0x84>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	08007641 	.word	0x08007641
 80075c8:	080075d9 	.word	0x080075d9
 80075cc:	080075eb 	.word	0x080075eb
 80075d0:	080075fb 	.word	0x080075fb
 80075d4:	08007605 	.word	0x08007605
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80075d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	431a      	orrs	r2, r3
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80075e8:	e02d      	b.n	8007646 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80075f8:	e025      	b.n	8007646 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007602:	e020      	b.n	8007646 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007604:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007608:	2b02      	cmp	r3, #2
 800760a:	d004      	beq.n	8007616 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800760c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007614:	e017      	b.n	8007646 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8007616:	2300      	movs	r3, #0
 8007618:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800761a:	e014      	b.n	8007646 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d00d      	beq.n	8007644 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	61bb      	str	r3, [r7, #24]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007640:	bf00      	nop
 8007642:	e000      	b.n	8007646 <xTaskGenericNotifyFromISR+0x106>
					break;
 8007644:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007646:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800764a:	2b01      	cmp	r3, #1
 800764c:	d147      	bne.n	80076de <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00b      	beq.n	800766e <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	617b      	str	r3, [r7, #20]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800766e:	4b21      	ldr	r3, [pc, #132]	@ (80076f4 <xTaskGenericNotifyFromISR+0x1b4>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d11d      	bne.n	80076b2 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	3304      	adds	r3, #4
 800767a:	4618      	mov	r0, r3
 800767c:	f7fd faa0 	bl	8004bc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007684:	4b1c      	ldr	r3, [pc, #112]	@ (80076f8 <xTaskGenericNotifyFromISR+0x1b8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d903      	bls.n	8007694 <xTaskGenericNotifyFromISR+0x154>
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007690:	4a19      	ldr	r2, [pc, #100]	@ (80076f8 <xTaskGenericNotifyFromISR+0x1b8>)
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007698:	4613      	mov	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4a16      	ldr	r2, [pc, #88]	@ (80076fc <xTaskGenericNotifyFromISR+0x1bc>)
 80076a2:	441a      	add	r2, r3
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	3304      	adds	r3, #4
 80076a8:	4619      	mov	r1, r3
 80076aa:	4610      	mov	r0, r2
 80076ac:	f7fd fa2b 	bl	8004b06 <vListInsertEnd>
 80076b0:	e005      	b.n	80076be <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	3318      	adds	r3, #24
 80076b6:	4619      	mov	r1, r3
 80076b8:	4811      	ldr	r0, [pc, #68]	@ (8007700 <xTaskGenericNotifyFromISR+0x1c0>)
 80076ba:	f7fd fa24 	bl	8004b06 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c2:	4b10      	ldr	r3, [pc, #64]	@ (8007704 <xTaskGenericNotifyFromISR+0x1c4>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d908      	bls.n	80076de <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80076cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80076d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80076d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007708 <xTaskGenericNotifyFromISR+0x1c8>)
 80076da:	2201      	movs	r2, #1
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f383 8811 	msr	BASEPRI, r3
}
 80076e8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80076ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3738      	adds	r7, #56	@ 0x38
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	200010bc 	.word	0x200010bc
 80076f8:	2000109c 	.word	0x2000109c
 80076fc:	20000bc4 	.word	0x20000bc4
 8007700:	20001054 	.word	0x20001054
 8007704:	20000bc0 	.word	0x20000bc0
 8007708:	200010a8 	.word	0x200010a8

0800770c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <xTaskNotifyStateClear+0x14>
 800771a:	4b0e      	ldr	r3, [pc, #56]	@ (8007754 <xTaskNotifyStateClear+0x48>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	e000      	b.n	8007722 <xTaskNotifyStateClear+0x16>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8007724:	f000 fcf8 	bl	8008118 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d106      	bne.n	8007742 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 800773c:	2301      	movs	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	e001      	b.n	8007746 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8007746:	f000 fd19 	bl	800817c <vPortExitCritical>

		return xReturn;
 800774a:	68fb      	ldr	r3, [r7, #12]
	}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000bc0 	.word	0x20000bc0

08007758 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007762:	4b21      	ldr	r3, [pc, #132]	@ (80077e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007768:	4b20      	ldr	r3, [pc, #128]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3304      	adds	r3, #4
 800776e:	4618      	mov	r0, r3
 8007770:	f7fd fa26 	bl	8004bc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	d10a      	bne.n	8007792 <prvAddCurrentTaskToDelayedList+0x3a>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d007      	beq.n	8007792 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007782:	4b1a      	ldr	r3, [pc, #104]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	4819      	ldr	r0, [pc, #100]	@ (80077f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800778c:	f7fd f9bb 	bl	8004b06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007790:	e026      	b.n	80077e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4413      	add	r3, r2
 8007798:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800779a:	4b14      	ldr	r3, [pc, #80]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d209      	bcs.n	80077be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077aa:	4b12      	ldr	r3, [pc, #72]	@ (80077f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	4b0f      	ldr	r3, [pc, #60]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3304      	adds	r3, #4
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f7fd f9c9 	bl	8004b4e <vListInsert>
}
 80077bc:	e010      	b.n	80077e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077be:	4b0e      	ldr	r3, [pc, #56]	@ (80077f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	4b0a      	ldr	r3, [pc, #40]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4619      	mov	r1, r3
 80077ca:	4610      	mov	r0, r2
 80077cc:	f7fd f9bf 	bl	8004b4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077d0:	4b0a      	ldr	r3, [pc, #40]	@ (80077fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d202      	bcs.n	80077e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077da:	4a08      	ldr	r2, [pc, #32]	@ (80077fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	6013      	str	r3, [r2, #0]
}
 80077e0:	bf00      	nop
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20001098 	.word	0x20001098
 80077ec:	20000bc0 	.word	0x20000bc0
 80077f0:	20001080 	.word	0x20001080
 80077f4:	20001050 	.word	0x20001050
 80077f8:	2000104c 	.word	0x2000104c
 80077fc:	200010b4 	.word	0x200010b4

08007800 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08a      	sub	sp, #40	@ 0x28
 8007804:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007806:	2300      	movs	r3, #0
 8007808:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800780a:	f000 fb13 	bl	8007e34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800780e:	4b1d      	ldr	r3, [pc, #116]	@ (8007884 <xTimerCreateTimerTask+0x84>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d021      	beq.n	800785a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800781e:	1d3a      	adds	r2, r7, #4
 8007820:	f107 0108 	add.w	r1, r7, #8
 8007824:	f107 030c 	add.w	r3, r7, #12
 8007828:	4618      	mov	r0, r3
 800782a:	f7fd f925 	bl	8004a78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	9202      	str	r2, [sp, #8]
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	2302      	movs	r3, #2
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	2300      	movs	r3, #0
 800783e:	460a      	mov	r2, r1
 8007840:	4911      	ldr	r1, [pc, #68]	@ (8007888 <xTimerCreateTimerTask+0x88>)
 8007842:	4812      	ldr	r0, [pc, #72]	@ (800788c <xTimerCreateTimerTask+0x8c>)
 8007844:	f7fe fd64 	bl	8006310 <xTaskCreateStatic>
 8007848:	4603      	mov	r3, r0
 800784a:	4a11      	ldr	r2, [pc, #68]	@ (8007890 <xTimerCreateTimerTask+0x90>)
 800784c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800784e:	4b10      	ldr	r3, [pc, #64]	@ (8007890 <xTimerCreateTimerTask+0x90>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007856:	2301      	movs	r3, #1
 8007858:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10b      	bne.n	8007878 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	613b      	str	r3, [r7, #16]
}
 8007872:	bf00      	nop
 8007874:	bf00      	nop
 8007876:	e7fd      	b.n	8007874 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007878:	697b      	ldr	r3, [r7, #20]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	200010f0 	.word	0x200010f0
 8007888:	0800d95c 	.word	0x0800d95c
 800788c:	080079cd 	.word	0x080079cd
 8007890:	200010f4 	.word	0x200010f4

08007894 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08a      	sub	sp, #40	@ 0x28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	623b      	str	r3, [r7, #32]
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	e7fd      	b.n	80078c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078c4:	4b19      	ldr	r3, [pc, #100]	@ (800792c <xTimerGenericCommand+0x98>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d02a      	beq.n	8007922 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b05      	cmp	r3, #5
 80078dc:	dc18      	bgt.n	8007910 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078de:	f7ff fb7f 	bl	8006fe0 <xTaskGetSchedulerState>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d109      	bne.n	80078fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078e8:	4b10      	ldr	r3, [pc, #64]	@ (800792c <xTimerGenericCommand+0x98>)
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	f107 0110 	add.w	r1, r7, #16
 80078f0:	2300      	movs	r3, #0
 80078f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078f4:	f7fd fb42 	bl	8004f7c <xQueueGenericSend>
 80078f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80078fa:	e012      	b.n	8007922 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078fc:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <xTimerGenericCommand+0x98>)
 80078fe:	6818      	ldr	r0, [r3, #0]
 8007900:	f107 0110 	add.w	r1, r7, #16
 8007904:	2300      	movs	r3, #0
 8007906:	2200      	movs	r2, #0
 8007908:	f7fd fb38 	bl	8004f7c <xQueueGenericSend>
 800790c:	6278      	str	r0, [r7, #36]	@ 0x24
 800790e:	e008      	b.n	8007922 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007910:	4b06      	ldr	r3, [pc, #24]	@ (800792c <xTimerGenericCommand+0x98>)
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	f107 0110 	add.w	r1, r7, #16
 8007918:	2300      	movs	r3, #0
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	f7fd fc30 	bl	8005180 <xQueueGenericSendFromISR>
 8007920:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007924:	4618      	mov	r0, r3
 8007926:	3728      	adds	r7, #40	@ 0x28
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	200010f0 	.word	0x200010f0

08007930 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af02      	add	r7, sp, #8
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800793a:	4b23      	ldr	r3, [pc, #140]	@ (80079c8 <prvProcessExpiredTimer+0x98>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	3304      	adds	r3, #4
 8007948:	4618      	mov	r0, r3
 800794a:	f7fd f939 	bl	8004bc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d023      	beq.n	80079a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	699a      	ldr	r2, [r3, #24]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	18d1      	adds	r1, r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	6978      	ldr	r0, [r7, #20]
 800796a:	f000 f8d5 	bl	8007b18 <prvInsertTimerInActiveList>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d020      	beq.n	80079b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007974:	2300      	movs	r3, #0
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	2300      	movs	r3, #0
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	2100      	movs	r1, #0
 800797e:	6978      	ldr	r0, [r7, #20]
 8007980:	f7ff ff88 	bl	8007894 <xTimerGenericCommand>
 8007984:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d114      	bne.n	80079b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	60fb      	str	r3, [r7, #12]
}
 800799e:	bf00      	nop
 80079a0:	bf00      	nop
 80079a2:	e7fd      	b.n	80079a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	6978      	ldr	r0, [r7, #20]
 80079bc:	4798      	blx	r3
}
 80079be:	bf00      	nop
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	200010e8 	.word	0x200010e8

080079cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079d4:	f107 0308 	add.w	r3, r7, #8
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 f859 	bl	8007a90 <prvGetNextExpireTime>
 80079de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4619      	mov	r1, r3
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 f805 	bl	80079f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079ea:	f000 f8d7 	bl	8007b9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079ee:	bf00      	nop
 80079f0:	e7f0      	b.n	80079d4 <prvTimerTask+0x8>
	...

080079f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079fe:	f7fe feeb 	bl	80067d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a02:	f107 0308 	add.w	r3, r7, #8
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f866 	bl	8007ad8 <prvSampleTimeNow>
 8007a0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d130      	bne.n	8007a76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10a      	bne.n	8007a30 <prvProcessTimerOrBlockTask+0x3c>
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d806      	bhi.n	8007a30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a22:	f7fe fee7 	bl	80067f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a26:	68f9      	ldr	r1, [r7, #12]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff ff81 	bl	8007930 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a2e:	e024      	b.n	8007a7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d008      	beq.n	8007a48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a36:	4b13      	ldr	r3, [pc, #76]	@ (8007a84 <prvProcessTimerOrBlockTask+0x90>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <prvProcessTimerOrBlockTask+0x50>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <prvProcessTimerOrBlockTask+0x52>
 8007a44:	2300      	movs	r3, #0
 8007a46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a48:	4b0f      	ldr	r3, [pc, #60]	@ (8007a88 <prvProcessTimerOrBlockTask+0x94>)
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	4619      	mov	r1, r3
 8007a56:	f7fe f8d5 	bl	8005c04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a5a:	f7fe fecb 	bl	80067f4 <xTaskResumeAll>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a64:	4b09      	ldr	r3, [pc, #36]	@ (8007a8c <prvProcessTimerOrBlockTask+0x98>)
 8007a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	f3bf 8f6f 	isb	sy
}
 8007a74:	e001      	b.n	8007a7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a76:	f7fe febd 	bl	80067f4 <xTaskResumeAll>
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	200010ec 	.word	0x200010ec
 8007a88:	200010f0 	.word	0x200010f0
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a98:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad4 <prvGetNextExpireTime+0x44>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <prvGetNextExpireTime+0x16>
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	e000      	b.n	8007aa8 <prvGetNextExpireTime+0x18>
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d105      	bne.n	8007ac0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ab4:	4b07      	ldr	r3, [pc, #28]	@ (8007ad4 <prvGetNextExpireTime+0x44>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e001      	b.n	8007ac4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	200010e8 	.word	0x200010e8

08007ad8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ae0:	f7fe ff26 	bl	8006930 <xTaskGetTickCount>
 8007ae4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8007b14 <prvSampleTimeNow+0x3c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d205      	bcs.n	8007afc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007af0:	f000 f93a 	bl	8007d68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	e002      	b.n	8007b02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b02:	4a04      	ldr	r2, [pc, #16]	@ (8007b14 <prvSampleTimeNow+0x3c>)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b08:	68fb      	ldr	r3, [r7, #12]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	200010f8 	.word	0x200010f8

08007b18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
 8007b24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d812      	bhi.n	8007b64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	1ad2      	subs	r2, r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d302      	bcc.n	8007b52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	e01b      	b.n	8007b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b52:	4b10      	ldr	r3, [pc, #64]	@ (8007b94 <prvInsertTimerInActiveList+0x7c>)
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3304      	adds	r3, #4
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	f7fc fff6 	bl	8004b4e <vListInsert>
 8007b62:	e012      	b.n	8007b8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d206      	bcs.n	8007b7a <prvInsertTimerInActiveList+0x62>
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d302      	bcc.n	8007b7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b74:	2301      	movs	r3, #1
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	e007      	b.n	8007b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b7a:	4b07      	ldr	r3, [pc, #28]	@ (8007b98 <prvInsertTimerInActiveList+0x80>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3304      	adds	r3, #4
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f7fc ffe2 	bl	8004b4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b8a:	697b      	ldr	r3, [r7, #20]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	200010ec 	.word	0x200010ec
 8007b98:	200010e8 	.word	0x200010e8

08007b9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08e      	sub	sp, #56	@ 0x38
 8007ba0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ba2:	e0ce      	b.n	8007d42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	da19      	bge.n	8007bde <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007baa:	1d3b      	adds	r3, r7, #4
 8007bac:	3304      	adds	r3, #4
 8007bae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10b      	bne.n	8007bce <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	61fb      	str	r3, [r7, #28]
}
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	e7fd      	b.n	8007bca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bd4:	6850      	ldr	r0, [r2, #4]
 8007bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bd8:	6892      	ldr	r2, [r2, #8]
 8007bda:	4611      	mov	r1, r2
 8007bdc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f2c0 80ae 	blt.w	8007d42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fc ffe2 	bl	8004bc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff ff6a 	bl	8007ad8 <prvSampleTimeNow>
 8007c04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b09      	cmp	r3, #9
 8007c0a:	f200 8097 	bhi.w	8007d3c <prvProcessReceivedCommands+0x1a0>
 8007c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c14 <prvProcessReceivedCommands+0x78>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c3d 	.word	0x08007c3d
 8007c18:	08007c3d 	.word	0x08007c3d
 8007c1c:	08007c3d 	.word	0x08007c3d
 8007c20:	08007cb3 	.word	0x08007cb3
 8007c24:	08007cc7 	.word	0x08007cc7
 8007c28:	08007d13 	.word	0x08007d13
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c3d 	.word	0x08007c3d
 8007c34:	08007cb3 	.word	0x08007cb3
 8007c38:	08007cc7 	.word	0x08007cc7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	18d1      	adds	r1, r2, r3
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c5c:	f7ff ff5c 	bl	8007b18 <prvInsertTimerInActiveList>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d06c      	beq.n	8007d40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d061      	beq.n	8007d40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	441a      	add	r2, r3
 8007c84:	2300      	movs	r3, #0
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c8e:	f7ff fe01 	bl	8007894 <xTimerGenericCommand>
 8007c92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d152      	bne.n	8007d40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	61bb      	str	r3, [r7, #24]
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	e7fd      	b.n	8007cae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cb8:	f023 0301 	bic.w	r3, r3, #1
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007cc4:	e03d      	b.n	8007d42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ccc:	f043 0301 	orr.w	r3, r3, #1
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cdc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	617b      	str	r3, [r7, #20]
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d00:	699a      	ldr	r2, [r3, #24]
 8007d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d04:	18d1      	adds	r1, r2, r3
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d0c:	f7ff ff04 	bl	8007b18 <prvInsertTimerInActiveList>
					break;
 8007d10:	e017      	b.n	8007d42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007d20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d22:	f000 fbe9 	bl	80084f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d26:	e00c      	b.n	8007d42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d2e:	f023 0301 	bic.w	r3, r3, #1
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d3a:	e002      	b.n	8007d42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007d3c:	bf00      	nop
 8007d3e:	e000      	b.n	8007d42 <prvProcessReceivedCommands+0x1a6>
					break;
 8007d40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d42:	4b08      	ldr	r3, [pc, #32]	@ (8007d64 <prvProcessReceivedCommands+0x1c8>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	1d39      	adds	r1, r7, #4
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fd fb46 	bl	80053dc <xQueueReceive>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f47f af26 	bne.w	8007ba4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	3730      	adds	r7, #48	@ 0x30
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	200010f0 	.word	0x200010f0

08007d68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d6e:	e049      	b.n	8007e04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d70:	4b2e      	ldr	r3, [pc, #184]	@ (8007e2c <prvSwitchTimerLists+0xc4>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8007e2c <prvSwitchTimerLists+0xc4>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7fc ff19 	bl	8004bc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d02f      	beq.n	8007e04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4413      	add	r3, r2
 8007dac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d90e      	bls.n	8007dd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e2c <prvSwitchTimerLists+0xc4>)
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4610      	mov	r0, r2
 8007dce:	f7fc febe 	bl	8004b4e <vListInsert>
 8007dd2:	e017      	b.n	8007e04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	2100      	movs	r1, #0
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f7ff fd58 	bl	8007894 <xTimerGenericCommand>
 8007de4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10b      	bne.n	8007e04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	603b      	str	r3, [r7, #0]
}
 8007dfe:	bf00      	nop
 8007e00:	bf00      	nop
 8007e02:	e7fd      	b.n	8007e00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e04:	4b09      	ldr	r3, [pc, #36]	@ (8007e2c <prvSwitchTimerLists+0xc4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1b0      	bne.n	8007d70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e0e:	4b07      	ldr	r3, [pc, #28]	@ (8007e2c <prvSwitchTimerLists+0xc4>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e14:	4b06      	ldr	r3, [pc, #24]	@ (8007e30 <prvSwitchTimerLists+0xc8>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a04      	ldr	r2, [pc, #16]	@ (8007e2c <prvSwitchTimerLists+0xc4>)
 8007e1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e1c:	4a04      	ldr	r2, [pc, #16]	@ (8007e30 <prvSwitchTimerLists+0xc8>)
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	6013      	str	r3, [r2, #0]
}
 8007e22:	bf00      	nop
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	200010e8 	.word	0x200010e8
 8007e30:	200010ec 	.word	0x200010ec

08007e34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e3a:	f000 f96d 	bl	8008118 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e3e:	4b15      	ldr	r3, [pc, #84]	@ (8007e94 <prvCheckForValidListAndQueue+0x60>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d120      	bne.n	8007e88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e46:	4814      	ldr	r0, [pc, #80]	@ (8007e98 <prvCheckForValidListAndQueue+0x64>)
 8007e48:	f7fc fe30 	bl	8004aac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e4c:	4813      	ldr	r0, [pc, #76]	@ (8007e9c <prvCheckForValidListAndQueue+0x68>)
 8007e4e:	f7fc fe2d 	bl	8004aac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e52:	4b13      	ldr	r3, [pc, #76]	@ (8007ea0 <prvCheckForValidListAndQueue+0x6c>)
 8007e54:	4a10      	ldr	r2, [pc, #64]	@ (8007e98 <prvCheckForValidListAndQueue+0x64>)
 8007e56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e58:	4b12      	ldr	r3, [pc, #72]	@ (8007ea4 <prvCheckForValidListAndQueue+0x70>)
 8007e5a:	4a10      	ldr	r2, [pc, #64]	@ (8007e9c <prvCheckForValidListAndQueue+0x68>)
 8007e5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e5e:	2300      	movs	r3, #0
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	4b11      	ldr	r3, [pc, #68]	@ (8007ea8 <prvCheckForValidListAndQueue+0x74>)
 8007e64:	4a11      	ldr	r2, [pc, #68]	@ (8007eac <prvCheckForValidListAndQueue+0x78>)
 8007e66:	2110      	movs	r1, #16
 8007e68:	200a      	movs	r0, #10
 8007e6a:	f7fc ff3d 	bl	8004ce8 <xQueueGenericCreateStatic>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	4a08      	ldr	r2, [pc, #32]	@ (8007e94 <prvCheckForValidListAndQueue+0x60>)
 8007e72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e74:	4b07      	ldr	r3, [pc, #28]	@ (8007e94 <prvCheckForValidListAndQueue+0x60>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e7c:	4b05      	ldr	r3, [pc, #20]	@ (8007e94 <prvCheckForValidListAndQueue+0x60>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	490b      	ldr	r1, [pc, #44]	@ (8007eb0 <prvCheckForValidListAndQueue+0x7c>)
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fd fe6a 	bl	8005b5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e88:	f000 f978 	bl	800817c <vPortExitCritical>
}
 8007e8c:	bf00      	nop
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	200010f0 	.word	0x200010f0
 8007e98:	200010c0 	.word	0x200010c0
 8007e9c:	200010d4 	.word	0x200010d4
 8007ea0:	200010e8 	.word	0x200010e8
 8007ea4:	200010ec 	.word	0x200010ec
 8007ea8:	2000119c 	.word	0x2000119c
 8007eac:	200010fc 	.word	0x200010fc
 8007eb0:	0800d964 	.word	0x0800d964

08007eb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3b04      	subs	r3, #4
 8007ec4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f023 0201 	bic.w	r2, r3, #1
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3b04      	subs	r3, #4
 8007ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8007f18 <pxPortInitialiseStack+0x64>)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3b14      	subs	r3, #20
 8007eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3b04      	subs	r3, #4
 8007efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f06f 0202 	mvn.w	r2, #2
 8007f02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3b20      	subs	r3, #32
 8007f08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	08007f1d 	.word	0x08007f1d

08007f1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f26:	4b13      	ldr	r3, [pc, #76]	@ (8007f74 <prvTaskExitError+0x58>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2e:	d00b      	beq.n	8007f48 <prvTaskExitError+0x2c>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	60fb      	str	r3, [r7, #12]
}
 8007f42:	bf00      	nop
 8007f44:	bf00      	nop
 8007f46:	e7fd      	b.n	8007f44 <prvTaskExitError+0x28>
	__asm volatile
 8007f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	60bb      	str	r3, [r7, #8]
}
 8007f5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f5c:	bf00      	nop
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0fc      	beq.n	8007f5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	2000000c 	.word	0x2000000c
	...

08007f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f80:	4b07      	ldr	r3, [pc, #28]	@ (8007fa0 <pxCurrentTCBConst2>)
 8007f82:	6819      	ldr	r1, [r3, #0]
 8007f84:	6808      	ldr	r0, [r1, #0]
 8007f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8a:	f380 8809 	msr	PSP, r0
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f380 8811 	msr	BASEPRI, r0
 8007f9a:	4770      	bx	lr
 8007f9c:	f3af 8000 	nop.w

08007fa0 <pxCurrentTCBConst2>:
 8007fa0:	20000bc0 	.word	0x20000bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop

08007fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fa8:	4808      	ldr	r0, [pc, #32]	@ (8007fcc <prvPortStartFirstTask+0x24>)
 8007faa:	6800      	ldr	r0, [r0, #0]
 8007fac:	6800      	ldr	r0, [r0, #0]
 8007fae:	f380 8808 	msr	MSP, r0
 8007fb2:	f04f 0000 	mov.w	r0, #0
 8007fb6:	f380 8814 	msr	CONTROL, r0
 8007fba:	b662      	cpsie	i
 8007fbc:	b661      	cpsie	f
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	df00      	svc	0
 8007fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fca:	bf00      	nop
 8007fcc:	e000ed08 	.word	0xe000ed08

08007fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fd6:	4b47      	ldr	r3, [pc, #284]	@ (80080f4 <xPortStartScheduler+0x124>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a47      	ldr	r2, [pc, #284]	@ (80080f8 <xPortStartScheduler+0x128>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d10b      	bne.n	8007ff8 <xPortStartScheduler+0x28>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	613b      	str	r3, [r7, #16]
}
 8007ff2:	bf00      	nop
 8007ff4:	bf00      	nop
 8007ff6:	e7fd      	b.n	8007ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80080f4 <xPortStartScheduler+0x124>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80080fc <xPortStartScheduler+0x12c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d10b      	bne.n	800801a <xPortStartScheduler+0x4a>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	60fb      	str	r3, [r7, #12]
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	e7fd      	b.n	8008016 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800801a:	4b39      	ldr	r3, [pc, #228]	@ (8008100 <xPortStartScheduler+0x130>)
 800801c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	22ff      	movs	r2, #255	@ 0xff
 800802a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	b2db      	uxtb	r3, r3
 8008032:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800803c:	b2da      	uxtb	r2, r3
 800803e:	4b31      	ldr	r3, [pc, #196]	@ (8008104 <xPortStartScheduler+0x134>)
 8008040:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008042:	4b31      	ldr	r3, [pc, #196]	@ (8008108 <xPortStartScheduler+0x138>)
 8008044:	2207      	movs	r2, #7
 8008046:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008048:	e009      	b.n	800805e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800804a:	4b2f      	ldr	r3, [pc, #188]	@ (8008108 <xPortStartScheduler+0x138>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3b01      	subs	r3, #1
 8008050:	4a2d      	ldr	r2, [pc, #180]	@ (8008108 <xPortStartScheduler+0x138>)
 8008052:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	b2db      	uxtb	r3, r3
 800805c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	b2db      	uxtb	r3, r3
 8008062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008066:	2b80      	cmp	r3, #128	@ 0x80
 8008068:	d0ef      	beq.n	800804a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800806a:	4b27      	ldr	r3, [pc, #156]	@ (8008108 <xPortStartScheduler+0x138>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f1c3 0307 	rsb	r3, r3, #7
 8008072:	2b04      	cmp	r3, #4
 8008074:	d00b      	beq.n	800808e <xPortStartScheduler+0xbe>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	60bb      	str	r3, [r7, #8]
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800808e:	4b1e      	ldr	r3, [pc, #120]	@ (8008108 <xPortStartScheduler+0x138>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	4a1c      	ldr	r2, [pc, #112]	@ (8008108 <xPortStartScheduler+0x138>)
 8008096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008098:	4b1b      	ldr	r3, [pc, #108]	@ (8008108 <xPortStartScheduler+0x138>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080a0:	4a19      	ldr	r2, [pc, #100]	@ (8008108 <xPortStartScheduler+0x138>)
 80080a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080ac:	4b17      	ldr	r3, [pc, #92]	@ (800810c <xPortStartScheduler+0x13c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a16      	ldr	r2, [pc, #88]	@ (800810c <xPortStartScheduler+0x13c>)
 80080b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080b8:	4b14      	ldr	r3, [pc, #80]	@ (800810c <xPortStartScheduler+0x13c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a13      	ldr	r2, [pc, #76]	@ (800810c <xPortStartScheduler+0x13c>)
 80080be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80080c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080c4:	f000 f8da 	bl	800827c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080c8:	4b11      	ldr	r3, [pc, #68]	@ (8008110 <xPortStartScheduler+0x140>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080ce:	f000 f8f9 	bl	80082c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080d2:	4b10      	ldr	r3, [pc, #64]	@ (8008114 <xPortStartScheduler+0x144>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008114 <xPortStartScheduler+0x144>)
 80080d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80080dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080de:	f7ff ff63 	bl	8007fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080e2:	f7fe fcef 	bl	8006ac4 <vTaskSwitchContext>
	prvTaskExitError();
 80080e6:	f7ff ff19 	bl	8007f1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	e000ed00 	.word	0xe000ed00
 80080f8:	410fc271 	.word	0x410fc271
 80080fc:	410fc270 	.word	0x410fc270
 8008100:	e000e400 	.word	0xe000e400
 8008104:	200011ec 	.word	0x200011ec
 8008108:	200011f0 	.word	0x200011f0
 800810c:	e000ed20 	.word	0xe000ed20
 8008110:	2000000c 	.word	0x2000000c
 8008114:	e000ef34 	.word	0xe000ef34

08008118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	607b      	str	r3, [r7, #4]
}
 8008130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008132:	4b10      	ldr	r3, [pc, #64]	@ (8008174 <vPortEnterCritical+0x5c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3301      	adds	r3, #1
 8008138:	4a0e      	ldr	r2, [pc, #56]	@ (8008174 <vPortEnterCritical+0x5c>)
 800813a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800813c:	4b0d      	ldr	r3, [pc, #52]	@ (8008174 <vPortEnterCritical+0x5c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d110      	bne.n	8008166 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008144:	4b0c      	ldr	r3, [pc, #48]	@ (8008178 <vPortEnterCritical+0x60>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <vPortEnterCritical+0x4e>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	603b      	str	r3, [r7, #0]
}
 8008160:	bf00      	nop
 8008162:	bf00      	nop
 8008164:	e7fd      	b.n	8008162 <vPortEnterCritical+0x4a>
	}
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	2000000c 	.word	0x2000000c
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008182:	4b12      	ldr	r3, [pc, #72]	@ (80081cc <vPortExitCritical+0x50>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10b      	bne.n	80081a2 <vPortExitCritical+0x26>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	607b      	str	r3, [r7, #4]
}
 800819c:	bf00      	nop
 800819e:	bf00      	nop
 80081a0:	e7fd      	b.n	800819e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081a2:	4b0a      	ldr	r3, [pc, #40]	@ (80081cc <vPortExitCritical+0x50>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	4a08      	ldr	r2, [pc, #32]	@ (80081cc <vPortExitCritical+0x50>)
 80081aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081ac:	4b07      	ldr	r3, [pc, #28]	@ (80081cc <vPortExitCritical+0x50>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d105      	bne.n	80081c0 <vPortExitCritical+0x44>
 80081b4:	2300      	movs	r3, #0
 80081b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f383 8811 	msr	BASEPRI, r3
}
 80081be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	2000000c 	.word	0x2000000c

080081d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081d0:	f3ef 8009 	mrs	r0, PSP
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	4b15      	ldr	r3, [pc, #84]	@ (8008230 <pxCurrentTCBConst>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	f01e 0f10 	tst.w	lr, #16
 80081e0:	bf08      	it	eq
 80081e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ea:	6010      	str	r0, [r2, #0]
 80081ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081f4:	f380 8811 	msr	BASEPRI, r0
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f7fe fc60 	bl	8006ac4 <vTaskSwitchContext>
 8008204:	f04f 0000 	mov.w	r0, #0
 8008208:	f380 8811 	msr	BASEPRI, r0
 800820c:	bc09      	pop	{r0, r3}
 800820e:	6819      	ldr	r1, [r3, #0]
 8008210:	6808      	ldr	r0, [r1, #0]
 8008212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008216:	f01e 0f10 	tst.w	lr, #16
 800821a:	bf08      	it	eq
 800821c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008220:	f380 8809 	msr	PSP, r0
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	f3af 8000 	nop.w

08008230 <pxCurrentTCBConst>:
 8008230:	20000bc0 	.word	0x20000bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop

08008238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	607b      	str	r3, [r7, #4]
}
 8008250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008252:	f7fe fb7d 	bl	8006950 <xTaskIncrementTick>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800825c:	4b06      	ldr	r3, [pc, #24]	@ (8008278 <xPortSysTickHandler+0x40>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	2300      	movs	r3, #0
 8008266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f383 8811 	msr	BASEPRI, r3
}
 800826e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008270:	bf00      	nop
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008280:	4b0b      	ldr	r3, [pc, #44]	@ (80082b0 <vPortSetupTimerInterrupt+0x34>)
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008286:	4b0b      	ldr	r3, [pc, #44]	@ (80082b4 <vPortSetupTimerInterrupt+0x38>)
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800828c:	4b0a      	ldr	r3, [pc, #40]	@ (80082b8 <vPortSetupTimerInterrupt+0x3c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a0a      	ldr	r2, [pc, #40]	@ (80082bc <vPortSetupTimerInterrupt+0x40>)
 8008292:	fba2 2303 	umull	r2, r3, r2, r3
 8008296:	099b      	lsrs	r3, r3, #6
 8008298:	4a09      	ldr	r2, [pc, #36]	@ (80082c0 <vPortSetupTimerInterrupt+0x44>)
 800829a:	3b01      	subs	r3, #1
 800829c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800829e:	4b04      	ldr	r3, [pc, #16]	@ (80082b0 <vPortSetupTimerInterrupt+0x34>)
 80082a0:	2207      	movs	r2, #7
 80082a2:	601a      	str	r2, [r3, #0]
}
 80082a4:	bf00      	nop
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	e000e010 	.word	0xe000e010
 80082b4:	e000e018 	.word	0xe000e018
 80082b8:	20000000 	.word	0x20000000
 80082bc:	10624dd3 	.word	0x10624dd3
 80082c0:	e000e014 	.word	0xe000e014

080082c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80082d4 <vPortEnableVFP+0x10>
 80082c8:	6801      	ldr	r1, [r0, #0]
 80082ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80082ce:	6001      	str	r1, [r0, #0]
 80082d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082d2:	bf00      	nop
 80082d4:	e000ed88 	.word	0xe000ed88

080082d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082de:	f3ef 8305 	mrs	r3, IPSR
 80082e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b0f      	cmp	r3, #15
 80082e8:	d915      	bls.n	8008316 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082ea:	4a18      	ldr	r2, [pc, #96]	@ (800834c <vPortValidateInterruptPriority+0x74>)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082f4:	4b16      	ldr	r3, [pc, #88]	@ (8008350 <vPortValidateInterruptPriority+0x78>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	7afa      	ldrb	r2, [r7, #11]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d20b      	bcs.n	8008316 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	607b      	str	r3, [r7, #4]
}
 8008310:	bf00      	nop
 8008312:	bf00      	nop
 8008314:	e7fd      	b.n	8008312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008316:	4b0f      	ldr	r3, [pc, #60]	@ (8008354 <vPortValidateInterruptPriority+0x7c>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800831e:	4b0e      	ldr	r3, [pc, #56]	@ (8008358 <vPortValidateInterruptPriority+0x80>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	429a      	cmp	r2, r3
 8008324:	d90b      	bls.n	800833e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	603b      	str	r3, [r7, #0]
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <vPortValidateInterruptPriority+0x62>
	}
 800833e:	bf00      	nop
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	e000e3f0 	.word	0xe000e3f0
 8008350:	200011ec 	.word	0x200011ec
 8008354:	e000ed0c 	.word	0xe000ed0c
 8008358:	200011f0 	.word	0x200011f0

0800835c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08a      	sub	sp, #40	@ 0x28
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008364:	2300      	movs	r3, #0
 8008366:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008368:	f7fe fa36 	bl	80067d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800836c:	4b5c      	ldr	r3, [pc, #368]	@ (80084e0 <pvPortMalloc+0x184>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008374:	f000 f924 	bl	80085c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008378:	4b5a      	ldr	r3, [pc, #360]	@ (80084e4 <pvPortMalloc+0x188>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4013      	ands	r3, r2
 8008380:	2b00      	cmp	r3, #0
 8008382:	f040 8095 	bne.w	80084b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01e      	beq.n	80083ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800838c:	2208      	movs	r2, #8
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4413      	add	r3, r2
 8008392:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d015      	beq.n	80083ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f023 0307 	bic.w	r3, r3, #7
 80083a4:	3308      	adds	r3, #8
 80083a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00b      	beq.n	80083ca <pvPortMalloc+0x6e>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	617b      	str	r3, [r7, #20]
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	e7fd      	b.n	80083c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d06f      	beq.n	80084b0 <pvPortMalloc+0x154>
 80083d0:	4b45      	ldr	r3, [pc, #276]	@ (80084e8 <pvPortMalloc+0x18c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d86a      	bhi.n	80084b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083da:	4b44      	ldr	r3, [pc, #272]	@ (80084ec <pvPortMalloc+0x190>)
 80083dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083de:	4b43      	ldr	r3, [pc, #268]	@ (80084ec <pvPortMalloc+0x190>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083e4:	e004      	b.n	80083f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80083e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d903      	bls.n	8008402 <pvPortMalloc+0xa6>
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1f1      	bne.n	80083e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008402:	4b37      	ldr	r3, [pc, #220]	@ (80084e0 <pvPortMalloc+0x184>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008408:	429a      	cmp	r2, r3
 800840a:	d051      	beq.n	80084b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2208      	movs	r2, #8
 8008412:	4413      	add	r3, r2
 8008414:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800841e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	1ad2      	subs	r2, r2, r3
 8008426:	2308      	movs	r3, #8
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	429a      	cmp	r2, r3
 800842c:	d920      	bls.n	8008470 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800842e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4413      	add	r3, r2
 8008434:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	f003 0307 	and.w	r3, r3, #7
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <pvPortMalloc+0xfc>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	613b      	str	r3, [r7, #16]
}
 8008452:	bf00      	nop
 8008454:	bf00      	nop
 8008456:	e7fd      	b.n	8008454 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	1ad2      	subs	r2, r2, r3
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800846a:	69b8      	ldr	r0, [r7, #24]
 800846c:	f000 f90a 	bl	8008684 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008470:	4b1d      	ldr	r3, [pc, #116]	@ (80084e8 <pvPortMalloc+0x18c>)
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	4a1b      	ldr	r2, [pc, #108]	@ (80084e8 <pvPortMalloc+0x18c>)
 800847c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800847e:	4b1a      	ldr	r3, [pc, #104]	@ (80084e8 <pvPortMalloc+0x18c>)
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	4b1b      	ldr	r3, [pc, #108]	@ (80084f0 <pvPortMalloc+0x194>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d203      	bcs.n	8008492 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800848a:	4b17      	ldr	r3, [pc, #92]	@ (80084e8 <pvPortMalloc+0x18c>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a18      	ldr	r2, [pc, #96]	@ (80084f0 <pvPortMalloc+0x194>)
 8008490:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	4b13      	ldr	r3, [pc, #76]	@ (80084e4 <pvPortMalloc+0x188>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	431a      	orrs	r2, r3
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084a6:	4b13      	ldr	r3, [pc, #76]	@ (80084f4 <pvPortMalloc+0x198>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3301      	adds	r3, #1
 80084ac:	4a11      	ldr	r2, [pc, #68]	@ (80084f4 <pvPortMalloc+0x198>)
 80084ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084b0:	f7fe f9a0 	bl	80067f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00b      	beq.n	80084d6 <pvPortMalloc+0x17a>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	60fb      	str	r3, [r7, #12]
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	e7fd      	b.n	80084d2 <pvPortMalloc+0x176>
	return pvReturn;
 80084d6:	69fb      	ldr	r3, [r7, #28]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3728      	adds	r7, #40	@ 0x28
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20004dfc 	.word	0x20004dfc
 80084e4:	20004e10 	.word	0x20004e10
 80084e8:	20004e00 	.word	0x20004e00
 80084ec:	20004df4 	.word	0x20004df4
 80084f0:	20004e04 	.word	0x20004e04
 80084f4:	20004e08 	.word	0x20004e08

080084f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d04f      	beq.n	80085aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800850a:	2308      	movs	r3, #8
 800850c:	425b      	negs	r3, r3
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	4413      	add	r3, r2
 8008512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	4b25      	ldr	r3, [pc, #148]	@ (80085b4 <vPortFree+0xbc>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4013      	ands	r3, r2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10b      	bne.n	800853e <vPortFree+0x46>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	60fb      	str	r3, [r7, #12]
}
 8008538:	bf00      	nop
 800853a:	bf00      	nop
 800853c:	e7fd      	b.n	800853a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00b      	beq.n	800855e <vPortFree+0x66>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	60bb      	str	r3, [r7, #8]
}
 8008558:	bf00      	nop
 800855a:	bf00      	nop
 800855c:	e7fd      	b.n	800855a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	4b14      	ldr	r3, [pc, #80]	@ (80085b4 <vPortFree+0xbc>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4013      	ands	r3, r2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01e      	beq.n	80085aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d11a      	bne.n	80085aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	685a      	ldr	r2, [r3, #4]
 8008578:	4b0e      	ldr	r3, [pc, #56]	@ (80085b4 <vPortFree+0xbc>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	43db      	mvns	r3, r3
 800857e:	401a      	ands	r2, r3
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008584:	f7fe f928 	bl	80067d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	4b0a      	ldr	r3, [pc, #40]	@ (80085b8 <vPortFree+0xc0>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4413      	add	r3, r2
 8008592:	4a09      	ldr	r2, [pc, #36]	@ (80085b8 <vPortFree+0xc0>)
 8008594:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008596:	6938      	ldr	r0, [r7, #16]
 8008598:	f000 f874 	bl	8008684 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800859c:	4b07      	ldr	r3, [pc, #28]	@ (80085bc <vPortFree+0xc4>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3301      	adds	r3, #1
 80085a2:	4a06      	ldr	r2, [pc, #24]	@ (80085bc <vPortFree+0xc4>)
 80085a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085a6:	f7fe f925 	bl	80067f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085aa:	bf00      	nop
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20004e10 	.word	0x20004e10
 80085b8:	20004e00 	.word	0x20004e00
 80085bc:	20004e0c 	.word	0x20004e0c

080085c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80085ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085cc:	4b27      	ldr	r3, [pc, #156]	@ (800866c <prvHeapInit+0xac>)
 80085ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00c      	beq.n	80085f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3307      	adds	r3, #7
 80085de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f023 0307 	bic.w	r3, r3, #7
 80085e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	4a1f      	ldr	r2, [pc, #124]	@ (800866c <prvHeapInit+0xac>)
 80085f0:	4413      	add	r3, r2
 80085f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008670 <prvHeapInit+0xb0>)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008670 <prvHeapInit+0xb0>)
 8008600:	2200      	movs	r2, #0
 8008602:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	4413      	add	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800860c:	2208      	movs	r2, #8
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	1a9b      	subs	r3, r3, r2
 8008612:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0307 	bic.w	r3, r3, #7
 800861a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4a15      	ldr	r2, [pc, #84]	@ (8008674 <prvHeapInit+0xb4>)
 8008620:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008622:	4b14      	ldr	r3, [pc, #80]	@ (8008674 <prvHeapInit+0xb4>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2200      	movs	r2, #0
 8008628:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800862a:	4b12      	ldr	r3, [pc, #72]	@ (8008674 <prvHeapInit+0xb4>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	1ad2      	subs	r2, r2, r3
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008640:	4b0c      	ldr	r3, [pc, #48]	@ (8008674 <prvHeapInit+0xb4>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	4a0a      	ldr	r2, [pc, #40]	@ (8008678 <prvHeapInit+0xb8>)
 800864e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	4a09      	ldr	r2, [pc, #36]	@ (800867c <prvHeapInit+0xbc>)
 8008656:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008658:	4b09      	ldr	r3, [pc, #36]	@ (8008680 <prvHeapInit+0xc0>)
 800865a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800865e:	601a      	str	r2, [r3, #0]
}
 8008660:	bf00      	nop
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	200011f4 	.word	0x200011f4
 8008670:	20004df4 	.word	0x20004df4
 8008674:	20004dfc 	.word	0x20004dfc
 8008678:	20004e04 	.word	0x20004e04
 800867c:	20004e00 	.word	0x20004e00
 8008680:	20004e10 	.word	0x20004e10

08008684 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800868c:	4b28      	ldr	r3, [pc, #160]	@ (8008730 <prvInsertBlockIntoFreeList+0xac>)
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	e002      	b.n	8008698 <prvInsertBlockIntoFreeList+0x14>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d8f7      	bhi.n	8008692 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	4413      	add	r3, r2
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d108      	bne.n	80086c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	441a      	add	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	441a      	add	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d118      	bne.n	800870c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	4b15      	ldr	r3, [pc, #84]	@ (8008734 <prvInsertBlockIntoFreeList+0xb0>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d00d      	beq.n	8008702 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	441a      	add	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	e008      	b.n	8008714 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008702:	4b0c      	ldr	r3, [pc, #48]	@ (8008734 <prvInsertBlockIntoFreeList+0xb0>)
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	e003      	b.n	8008714 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	429a      	cmp	r2, r3
 800871a:	d002      	beq.n	8008722 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008722:	bf00      	nop
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20004df4 	.word	0x20004df4
 8008734:	20004dfc 	.word	0x20004dfc

08008738 <__cvt>:
 8008738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800873c:	ec57 6b10 	vmov	r6, r7, d0
 8008740:	2f00      	cmp	r7, #0
 8008742:	460c      	mov	r4, r1
 8008744:	4619      	mov	r1, r3
 8008746:	463b      	mov	r3, r7
 8008748:	bfbb      	ittet	lt
 800874a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800874e:	461f      	movlt	r7, r3
 8008750:	2300      	movge	r3, #0
 8008752:	232d      	movlt	r3, #45	@ 0x2d
 8008754:	700b      	strb	r3, [r1, #0]
 8008756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008758:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800875c:	4691      	mov	r9, r2
 800875e:	f023 0820 	bic.w	r8, r3, #32
 8008762:	bfbc      	itt	lt
 8008764:	4632      	movlt	r2, r6
 8008766:	4616      	movlt	r6, r2
 8008768:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800876c:	d005      	beq.n	800877a <__cvt+0x42>
 800876e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008772:	d100      	bne.n	8008776 <__cvt+0x3e>
 8008774:	3401      	adds	r4, #1
 8008776:	2102      	movs	r1, #2
 8008778:	e000      	b.n	800877c <__cvt+0x44>
 800877a:	2103      	movs	r1, #3
 800877c:	ab03      	add	r3, sp, #12
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	ab02      	add	r3, sp, #8
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	ec47 6b10 	vmov	d0, r6, r7
 8008788:	4653      	mov	r3, sl
 800878a:	4622      	mov	r2, r4
 800878c:	f001 f95c 	bl	8009a48 <_dtoa_r>
 8008790:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008794:	4605      	mov	r5, r0
 8008796:	d119      	bne.n	80087cc <__cvt+0x94>
 8008798:	f019 0f01 	tst.w	r9, #1
 800879c:	d00e      	beq.n	80087bc <__cvt+0x84>
 800879e:	eb00 0904 	add.w	r9, r0, r4
 80087a2:	2200      	movs	r2, #0
 80087a4:	2300      	movs	r3, #0
 80087a6:	4630      	mov	r0, r6
 80087a8:	4639      	mov	r1, r7
 80087aa:	f7f8 f995 	bl	8000ad8 <__aeabi_dcmpeq>
 80087ae:	b108      	cbz	r0, 80087b4 <__cvt+0x7c>
 80087b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80087b4:	2230      	movs	r2, #48	@ 0x30
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	454b      	cmp	r3, r9
 80087ba:	d31e      	bcc.n	80087fa <__cvt+0xc2>
 80087bc:	9b03      	ldr	r3, [sp, #12]
 80087be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087c0:	1b5b      	subs	r3, r3, r5
 80087c2:	4628      	mov	r0, r5
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	b004      	add	sp, #16
 80087c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087d0:	eb00 0904 	add.w	r9, r0, r4
 80087d4:	d1e5      	bne.n	80087a2 <__cvt+0x6a>
 80087d6:	7803      	ldrb	r3, [r0, #0]
 80087d8:	2b30      	cmp	r3, #48	@ 0x30
 80087da:	d10a      	bne.n	80087f2 <__cvt+0xba>
 80087dc:	2200      	movs	r2, #0
 80087de:	2300      	movs	r3, #0
 80087e0:	4630      	mov	r0, r6
 80087e2:	4639      	mov	r1, r7
 80087e4:	f7f8 f978 	bl	8000ad8 <__aeabi_dcmpeq>
 80087e8:	b918      	cbnz	r0, 80087f2 <__cvt+0xba>
 80087ea:	f1c4 0401 	rsb	r4, r4, #1
 80087ee:	f8ca 4000 	str.w	r4, [sl]
 80087f2:	f8da 3000 	ldr.w	r3, [sl]
 80087f6:	4499      	add	r9, r3
 80087f8:	e7d3      	b.n	80087a2 <__cvt+0x6a>
 80087fa:	1c59      	adds	r1, r3, #1
 80087fc:	9103      	str	r1, [sp, #12]
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	e7d9      	b.n	80087b6 <__cvt+0x7e>

08008802 <__exponent>:
 8008802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008804:	2900      	cmp	r1, #0
 8008806:	bfba      	itte	lt
 8008808:	4249      	neglt	r1, r1
 800880a:	232d      	movlt	r3, #45	@ 0x2d
 800880c:	232b      	movge	r3, #43	@ 0x2b
 800880e:	2909      	cmp	r1, #9
 8008810:	7002      	strb	r2, [r0, #0]
 8008812:	7043      	strb	r3, [r0, #1]
 8008814:	dd29      	ble.n	800886a <__exponent+0x68>
 8008816:	f10d 0307 	add.w	r3, sp, #7
 800881a:	461d      	mov	r5, r3
 800881c:	270a      	movs	r7, #10
 800881e:	461a      	mov	r2, r3
 8008820:	fbb1 f6f7 	udiv	r6, r1, r7
 8008824:	fb07 1416 	mls	r4, r7, r6, r1
 8008828:	3430      	adds	r4, #48	@ 0x30
 800882a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800882e:	460c      	mov	r4, r1
 8008830:	2c63      	cmp	r4, #99	@ 0x63
 8008832:	f103 33ff 	add.w	r3, r3, #4294967295
 8008836:	4631      	mov	r1, r6
 8008838:	dcf1      	bgt.n	800881e <__exponent+0x1c>
 800883a:	3130      	adds	r1, #48	@ 0x30
 800883c:	1e94      	subs	r4, r2, #2
 800883e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008842:	1c41      	adds	r1, r0, #1
 8008844:	4623      	mov	r3, r4
 8008846:	42ab      	cmp	r3, r5
 8008848:	d30a      	bcc.n	8008860 <__exponent+0x5e>
 800884a:	f10d 0309 	add.w	r3, sp, #9
 800884e:	1a9b      	subs	r3, r3, r2
 8008850:	42ac      	cmp	r4, r5
 8008852:	bf88      	it	hi
 8008854:	2300      	movhi	r3, #0
 8008856:	3302      	adds	r3, #2
 8008858:	4403      	add	r3, r0
 800885a:	1a18      	subs	r0, r3, r0
 800885c:	b003      	add	sp, #12
 800885e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008860:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008864:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008868:	e7ed      	b.n	8008846 <__exponent+0x44>
 800886a:	2330      	movs	r3, #48	@ 0x30
 800886c:	3130      	adds	r1, #48	@ 0x30
 800886e:	7083      	strb	r3, [r0, #2]
 8008870:	70c1      	strb	r1, [r0, #3]
 8008872:	1d03      	adds	r3, r0, #4
 8008874:	e7f1      	b.n	800885a <__exponent+0x58>
	...

08008878 <_printf_float>:
 8008878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	b08d      	sub	sp, #52	@ 0x34
 800887e:	460c      	mov	r4, r1
 8008880:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008884:	4616      	mov	r6, r2
 8008886:	461f      	mov	r7, r3
 8008888:	4605      	mov	r5, r0
 800888a:	f000 ff71 	bl	8009770 <_localeconv_r>
 800888e:	6803      	ldr	r3, [r0, #0]
 8008890:	9304      	str	r3, [sp, #16]
 8008892:	4618      	mov	r0, r3
 8008894:	f7f7 fcf4 	bl	8000280 <strlen>
 8008898:	2300      	movs	r3, #0
 800889a:	930a      	str	r3, [sp, #40]	@ 0x28
 800889c:	f8d8 3000 	ldr.w	r3, [r8]
 80088a0:	9005      	str	r0, [sp, #20]
 80088a2:	3307      	adds	r3, #7
 80088a4:	f023 0307 	bic.w	r3, r3, #7
 80088a8:	f103 0208 	add.w	r2, r3, #8
 80088ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80088b0:	f8d4 b000 	ldr.w	fp, [r4]
 80088b4:	f8c8 2000 	str.w	r2, [r8]
 80088b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80088c0:	9307      	str	r3, [sp, #28]
 80088c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80088c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80088ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088ce:	4b9c      	ldr	r3, [pc, #624]	@ (8008b40 <_printf_float+0x2c8>)
 80088d0:	f04f 32ff 	mov.w	r2, #4294967295
 80088d4:	f7f8 f932 	bl	8000b3c <__aeabi_dcmpun>
 80088d8:	bb70      	cbnz	r0, 8008938 <_printf_float+0xc0>
 80088da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088de:	4b98      	ldr	r3, [pc, #608]	@ (8008b40 <_printf_float+0x2c8>)
 80088e0:	f04f 32ff 	mov.w	r2, #4294967295
 80088e4:	f7f8 f90c 	bl	8000b00 <__aeabi_dcmple>
 80088e8:	bb30      	cbnz	r0, 8008938 <_printf_float+0xc0>
 80088ea:	2200      	movs	r2, #0
 80088ec:	2300      	movs	r3, #0
 80088ee:	4640      	mov	r0, r8
 80088f0:	4649      	mov	r1, r9
 80088f2:	f7f8 f8fb 	bl	8000aec <__aeabi_dcmplt>
 80088f6:	b110      	cbz	r0, 80088fe <_printf_float+0x86>
 80088f8:	232d      	movs	r3, #45	@ 0x2d
 80088fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088fe:	4a91      	ldr	r2, [pc, #580]	@ (8008b44 <_printf_float+0x2cc>)
 8008900:	4b91      	ldr	r3, [pc, #580]	@ (8008b48 <_printf_float+0x2d0>)
 8008902:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008906:	bf94      	ite	ls
 8008908:	4690      	movls	r8, r2
 800890a:	4698      	movhi	r8, r3
 800890c:	2303      	movs	r3, #3
 800890e:	6123      	str	r3, [r4, #16]
 8008910:	f02b 0304 	bic.w	r3, fp, #4
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	f04f 0900 	mov.w	r9, #0
 800891a:	9700      	str	r7, [sp, #0]
 800891c:	4633      	mov	r3, r6
 800891e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008920:	4621      	mov	r1, r4
 8008922:	4628      	mov	r0, r5
 8008924:	f000 f9d2 	bl	8008ccc <_printf_common>
 8008928:	3001      	adds	r0, #1
 800892a:	f040 808d 	bne.w	8008a48 <_printf_float+0x1d0>
 800892e:	f04f 30ff 	mov.w	r0, #4294967295
 8008932:	b00d      	add	sp, #52	@ 0x34
 8008934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008938:	4642      	mov	r2, r8
 800893a:	464b      	mov	r3, r9
 800893c:	4640      	mov	r0, r8
 800893e:	4649      	mov	r1, r9
 8008940:	f7f8 f8fc 	bl	8000b3c <__aeabi_dcmpun>
 8008944:	b140      	cbz	r0, 8008958 <_printf_float+0xe0>
 8008946:	464b      	mov	r3, r9
 8008948:	2b00      	cmp	r3, #0
 800894a:	bfbc      	itt	lt
 800894c:	232d      	movlt	r3, #45	@ 0x2d
 800894e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008952:	4a7e      	ldr	r2, [pc, #504]	@ (8008b4c <_printf_float+0x2d4>)
 8008954:	4b7e      	ldr	r3, [pc, #504]	@ (8008b50 <_printf_float+0x2d8>)
 8008956:	e7d4      	b.n	8008902 <_printf_float+0x8a>
 8008958:	6863      	ldr	r3, [r4, #4]
 800895a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800895e:	9206      	str	r2, [sp, #24]
 8008960:	1c5a      	adds	r2, r3, #1
 8008962:	d13b      	bne.n	80089dc <_printf_float+0x164>
 8008964:	2306      	movs	r3, #6
 8008966:	6063      	str	r3, [r4, #4]
 8008968:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800896c:	2300      	movs	r3, #0
 800896e:	6022      	str	r2, [r4, #0]
 8008970:	9303      	str	r3, [sp, #12]
 8008972:	ab0a      	add	r3, sp, #40	@ 0x28
 8008974:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008978:	ab09      	add	r3, sp, #36	@ 0x24
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	6861      	ldr	r1, [r4, #4]
 800897e:	ec49 8b10 	vmov	d0, r8, r9
 8008982:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008986:	4628      	mov	r0, r5
 8008988:	f7ff fed6 	bl	8008738 <__cvt>
 800898c:	9b06      	ldr	r3, [sp, #24]
 800898e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008990:	2b47      	cmp	r3, #71	@ 0x47
 8008992:	4680      	mov	r8, r0
 8008994:	d129      	bne.n	80089ea <_printf_float+0x172>
 8008996:	1cc8      	adds	r0, r1, #3
 8008998:	db02      	blt.n	80089a0 <_printf_float+0x128>
 800899a:	6863      	ldr	r3, [r4, #4]
 800899c:	4299      	cmp	r1, r3
 800899e:	dd41      	ble.n	8008a24 <_printf_float+0x1ac>
 80089a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80089a4:	fa5f fa8a 	uxtb.w	sl, sl
 80089a8:	3901      	subs	r1, #1
 80089aa:	4652      	mov	r2, sl
 80089ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80089b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80089b2:	f7ff ff26 	bl	8008802 <__exponent>
 80089b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089b8:	1813      	adds	r3, r2, r0
 80089ba:	2a01      	cmp	r2, #1
 80089bc:	4681      	mov	r9, r0
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	dc02      	bgt.n	80089c8 <_printf_float+0x150>
 80089c2:	6822      	ldr	r2, [r4, #0]
 80089c4:	07d2      	lsls	r2, r2, #31
 80089c6:	d501      	bpl.n	80089cc <_printf_float+0x154>
 80089c8:	3301      	adds	r3, #1
 80089ca:	6123      	str	r3, [r4, #16]
 80089cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0a2      	beq.n	800891a <_printf_float+0xa2>
 80089d4:	232d      	movs	r3, #45	@ 0x2d
 80089d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089da:	e79e      	b.n	800891a <_printf_float+0xa2>
 80089dc:	9a06      	ldr	r2, [sp, #24]
 80089de:	2a47      	cmp	r2, #71	@ 0x47
 80089e0:	d1c2      	bne.n	8008968 <_printf_float+0xf0>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1c0      	bne.n	8008968 <_printf_float+0xf0>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e7bd      	b.n	8008966 <_printf_float+0xee>
 80089ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80089ee:	d9db      	bls.n	80089a8 <_printf_float+0x130>
 80089f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80089f4:	d118      	bne.n	8008a28 <_printf_float+0x1b0>
 80089f6:	2900      	cmp	r1, #0
 80089f8:	6863      	ldr	r3, [r4, #4]
 80089fa:	dd0b      	ble.n	8008a14 <_printf_float+0x19c>
 80089fc:	6121      	str	r1, [r4, #16]
 80089fe:	b913      	cbnz	r3, 8008a06 <_printf_float+0x18e>
 8008a00:	6822      	ldr	r2, [r4, #0]
 8008a02:	07d0      	lsls	r0, r2, #31
 8008a04:	d502      	bpl.n	8008a0c <_printf_float+0x194>
 8008a06:	3301      	adds	r3, #1
 8008a08:	440b      	add	r3, r1
 8008a0a:	6123      	str	r3, [r4, #16]
 8008a0c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a0e:	f04f 0900 	mov.w	r9, #0
 8008a12:	e7db      	b.n	80089cc <_printf_float+0x154>
 8008a14:	b913      	cbnz	r3, 8008a1c <_printf_float+0x1a4>
 8008a16:	6822      	ldr	r2, [r4, #0]
 8008a18:	07d2      	lsls	r2, r2, #31
 8008a1a:	d501      	bpl.n	8008a20 <_printf_float+0x1a8>
 8008a1c:	3302      	adds	r3, #2
 8008a1e:	e7f4      	b.n	8008a0a <_printf_float+0x192>
 8008a20:	2301      	movs	r3, #1
 8008a22:	e7f2      	b.n	8008a0a <_printf_float+0x192>
 8008a24:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a2a:	4299      	cmp	r1, r3
 8008a2c:	db05      	blt.n	8008a3a <_printf_float+0x1c2>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	6121      	str	r1, [r4, #16]
 8008a32:	07d8      	lsls	r0, r3, #31
 8008a34:	d5ea      	bpl.n	8008a0c <_printf_float+0x194>
 8008a36:	1c4b      	adds	r3, r1, #1
 8008a38:	e7e7      	b.n	8008a0a <_printf_float+0x192>
 8008a3a:	2900      	cmp	r1, #0
 8008a3c:	bfd4      	ite	le
 8008a3e:	f1c1 0202 	rsble	r2, r1, #2
 8008a42:	2201      	movgt	r2, #1
 8008a44:	4413      	add	r3, r2
 8008a46:	e7e0      	b.n	8008a0a <_printf_float+0x192>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	055a      	lsls	r2, r3, #21
 8008a4c:	d407      	bmi.n	8008a5e <_printf_float+0x1e6>
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	4642      	mov	r2, r8
 8008a52:	4631      	mov	r1, r6
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b8      	blx	r7
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d12b      	bne.n	8008ab4 <_printf_float+0x23c>
 8008a5c:	e767      	b.n	800892e <_printf_float+0xb6>
 8008a5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a62:	f240 80dd 	bls.w	8008c20 <_printf_float+0x3a8>
 8008a66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f7f8 f833 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d033      	beq.n	8008ade <_printf_float+0x266>
 8008a76:	4a37      	ldr	r2, [pc, #220]	@ (8008b54 <_printf_float+0x2dc>)
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	47b8      	blx	r7
 8008a80:	3001      	adds	r0, #1
 8008a82:	f43f af54 	beq.w	800892e <_printf_float+0xb6>
 8008a86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a8a:	4543      	cmp	r3, r8
 8008a8c:	db02      	blt.n	8008a94 <_printf_float+0x21c>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	07d8      	lsls	r0, r3, #31
 8008a92:	d50f      	bpl.n	8008ab4 <_printf_float+0x23c>
 8008a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a98:	4631      	mov	r1, r6
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	47b8      	blx	r7
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	f43f af45 	beq.w	800892e <_printf_float+0xb6>
 8008aa4:	f04f 0900 	mov.w	r9, #0
 8008aa8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008aac:	f104 0a1a 	add.w	sl, r4, #26
 8008ab0:	45c8      	cmp	r8, r9
 8008ab2:	dc09      	bgt.n	8008ac8 <_printf_float+0x250>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	079b      	lsls	r3, r3, #30
 8008ab8:	f100 8103 	bmi.w	8008cc2 <_printf_float+0x44a>
 8008abc:	68e0      	ldr	r0, [r4, #12]
 8008abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ac0:	4298      	cmp	r0, r3
 8008ac2:	bfb8      	it	lt
 8008ac4:	4618      	movlt	r0, r3
 8008ac6:	e734      	b.n	8008932 <_printf_float+0xba>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4652      	mov	r2, sl
 8008acc:	4631      	mov	r1, r6
 8008ace:	4628      	mov	r0, r5
 8008ad0:	47b8      	blx	r7
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	f43f af2b 	beq.w	800892e <_printf_float+0xb6>
 8008ad8:	f109 0901 	add.w	r9, r9, #1
 8008adc:	e7e8      	b.n	8008ab0 <_printf_float+0x238>
 8008ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	dc39      	bgt.n	8008b58 <_printf_float+0x2e0>
 8008ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8008b54 <_printf_float+0x2dc>)
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	4631      	mov	r1, r6
 8008aea:	4628      	mov	r0, r5
 8008aec:	47b8      	blx	r7
 8008aee:	3001      	adds	r0, #1
 8008af0:	f43f af1d 	beq.w	800892e <_printf_float+0xb6>
 8008af4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008af8:	ea59 0303 	orrs.w	r3, r9, r3
 8008afc:	d102      	bne.n	8008b04 <_printf_float+0x28c>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	07d9      	lsls	r1, r3, #31
 8008b02:	d5d7      	bpl.n	8008ab4 <_printf_float+0x23c>
 8008b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f43f af0d 	beq.w	800892e <_printf_float+0xb6>
 8008b14:	f04f 0a00 	mov.w	sl, #0
 8008b18:	f104 0b1a 	add.w	fp, r4, #26
 8008b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1e:	425b      	negs	r3, r3
 8008b20:	4553      	cmp	r3, sl
 8008b22:	dc01      	bgt.n	8008b28 <_printf_float+0x2b0>
 8008b24:	464b      	mov	r3, r9
 8008b26:	e793      	b.n	8008a50 <_printf_float+0x1d8>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	465a      	mov	r2, fp
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	4628      	mov	r0, r5
 8008b30:	47b8      	blx	r7
 8008b32:	3001      	adds	r0, #1
 8008b34:	f43f aefb 	beq.w	800892e <_printf_float+0xb6>
 8008b38:	f10a 0a01 	add.w	sl, sl, #1
 8008b3c:	e7ee      	b.n	8008b1c <_printf_float+0x2a4>
 8008b3e:	bf00      	nop
 8008b40:	7fefffff 	.word	0x7fefffff
 8008b44:	0800d9d8 	.word	0x0800d9d8
 8008b48:	0800d9dc 	.word	0x0800d9dc
 8008b4c:	0800d9e0 	.word	0x0800d9e0
 8008b50:	0800d9e4 	.word	0x0800d9e4
 8008b54:	0800dd78 	.word	0x0800dd78
 8008b58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b5e:	4553      	cmp	r3, sl
 8008b60:	bfa8      	it	ge
 8008b62:	4653      	movge	r3, sl
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	4699      	mov	r9, r3
 8008b68:	dc36      	bgt.n	8008bd8 <_printf_float+0x360>
 8008b6a:	f04f 0b00 	mov.w	fp, #0
 8008b6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b72:	f104 021a 	add.w	r2, r4, #26
 8008b76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b78:	9306      	str	r3, [sp, #24]
 8008b7a:	eba3 0309 	sub.w	r3, r3, r9
 8008b7e:	455b      	cmp	r3, fp
 8008b80:	dc31      	bgt.n	8008be6 <_printf_float+0x36e>
 8008b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b84:	459a      	cmp	sl, r3
 8008b86:	dc3a      	bgt.n	8008bfe <_printf_float+0x386>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	07da      	lsls	r2, r3, #31
 8008b8c:	d437      	bmi.n	8008bfe <_printf_float+0x386>
 8008b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b90:	ebaa 0903 	sub.w	r9, sl, r3
 8008b94:	9b06      	ldr	r3, [sp, #24]
 8008b96:	ebaa 0303 	sub.w	r3, sl, r3
 8008b9a:	4599      	cmp	r9, r3
 8008b9c:	bfa8      	it	ge
 8008b9e:	4699      	movge	r9, r3
 8008ba0:	f1b9 0f00 	cmp.w	r9, #0
 8008ba4:	dc33      	bgt.n	8008c0e <_printf_float+0x396>
 8008ba6:	f04f 0800 	mov.w	r8, #0
 8008baa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bae:	f104 0b1a 	add.w	fp, r4, #26
 8008bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb4:	ebaa 0303 	sub.w	r3, sl, r3
 8008bb8:	eba3 0309 	sub.w	r3, r3, r9
 8008bbc:	4543      	cmp	r3, r8
 8008bbe:	f77f af79 	ble.w	8008ab4 <_printf_float+0x23c>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	465a      	mov	r2, fp
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4628      	mov	r0, r5
 8008bca:	47b8      	blx	r7
 8008bcc:	3001      	adds	r0, #1
 8008bce:	f43f aeae 	beq.w	800892e <_printf_float+0xb6>
 8008bd2:	f108 0801 	add.w	r8, r8, #1
 8008bd6:	e7ec      	b.n	8008bb2 <_printf_float+0x33a>
 8008bd8:	4642      	mov	r2, r8
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4628      	mov	r0, r5
 8008bde:	47b8      	blx	r7
 8008be0:	3001      	adds	r0, #1
 8008be2:	d1c2      	bne.n	8008b6a <_printf_float+0x2f2>
 8008be4:	e6a3      	b.n	800892e <_printf_float+0xb6>
 8008be6:	2301      	movs	r3, #1
 8008be8:	4631      	mov	r1, r6
 8008bea:	4628      	mov	r0, r5
 8008bec:	9206      	str	r2, [sp, #24]
 8008bee:	47b8      	blx	r7
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	f43f ae9c 	beq.w	800892e <_printf_float+0xb6>
 8008bf6:	9a06      	ldr	r2, [sp, #24]
 8008bf8:	f10b 0b01 	add.w	fp, fp, #1
 8008bfc:	e7bb      	b.n	8008b76 <_printf_float+0x2fe>
 8008bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c02:	4631      	mov	r1, r6
 8008c04:	4628      	mov	r0, r5
 8008c06:	47b8      	blx	r7
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d1c0      	bne.n	8008b8e <_printf_float+0x316>
 8008c0c:	e68f      	b.n	800892e <_printf_float+0xb6>
 8008c0e:	9a06      	ldr	r2, [sp, #24]
 8008c10:	464b      	mov	r3, r9
 8008c12:	4442      	add	r2, r8
 8008c14:	4631      	mov	r1, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	47b8      	blx	r7
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	d1c3      	bne.n	8008ba6 <_printf_float+0x32e>
 8008c1e:	e686      	b.n	800892e <_printf_float+0xb6>
 8008c20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c24:	f1ba 0f01 	cmp.w	sl, #1
 8008c28:	dc01      	bgt.n	8008c2e <_printf_float+0x3b6>
 8008c2a:	07db      	lsls	r3, r3, #31
 8008c2c:	d536      	bpl.n	8008c9c <_printf_float+0x424>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	4642      	mov	r2, r8
 8008c32:	4631      	mov	r1, r6
 8008c34:	4628      	mov	r0, r5
 8008c36:	47b8      	blx	r7
 8008c38:	3001      	adds	r0, #1
 8008c3a:	f43f ae78 	beq.w	800892e <_printf_float+0xb6>
 8008c3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c42:	4631      	mov	r1, r6
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b8      	blx	r7
 8008c48:	3001      	adds	r0, #1
 8008c4a:	f43f ae70 	beq.w	800892e <_printf_float+0xb6>
 8008c4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c52:	2200      	movs	r2, #0
 8008c54:	2300      	movs	r3, #0
 8008c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c5a:	f7f7 ff3d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c5e:	b9c0      	cbnz	r0, 8008c92 <_printf_float+0x41a>
 8008c60:	4653      	mov	r3, sl
 8008c62:	f108 0201 	add.w	r2, r8, #1
 8008c66:	4631      	mov	r1, r6
 8008c68:	4628      	mov	r0, r5
 8008c6a:	47b8      	blx	r7
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d10c      	bne.n	8008c8a <_printf_float+0x412>
 8008c70:	e65d      	b.n	800892e <_printf_float+0xb6>
 8008c72:	2301      	movs	r3, #1
 8008c74:	465a      	mov	r2, fp
 8008c76:	4631      	mov	r1, r6
 8008c78:	4628      	mov	r0, r5
 8008c7a:	47b8      	blx	r7
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	f43f ae56 	beq.w	800892e <_printf_float+0xb6>
 8008c82:	f108 0801 	add.w	r8, r8, #1
 8008c86:	45d0      	cmp	r8, sl
 8008c88:	dbf3      	blt.n	8008c72 <_printf_float+0x3fa>
 8008c8a:	464b      	mov	r3, r9
 8008c8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c90:	e6df      	b.n	8008a52 <_printf_float+0x1da>
 8008c92:	f04f 0800 	mov.w	r8, #0
 8008c96:	f104 0b1a 	add.w	fp, r4, #26
 8008c9a:	e7f4      	b.n	8008c86 <_printf_float+0x40e>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	4642      	mov	r2, r8
 8008ca0:	e7e1      	b.n	8008c66 <_printf_float+0x3ee>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	464a      	mov	r2, r9
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	4628      	mov	r0, r5
 8008caa:	47b8      	blx	r7
 8008cac:	3001      	adds	r0, #1
 8008cae:	f43f ae3e 	beq.w	800892e <_printf_float+0xb6>
 8008cb2:	f108 0801 	add.w	r8, r8, #1
 8008cb6:	68e3      	ldr	r3, [r4, #12]
 8008cb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008cba:	1a5b      	subs	r3, r3, r1
 8008cbc:	4543      	cmp	r3, r8
 8008cbe:	dcf0      	bgt.n	8008ca2 <_printf_float+0x42a>
 8008cc0:	e6fc      	b.n	8008abc <_printf_float+0x244>
 8008cc2:	f04f 0800 	mov.w	r8, #0
 8008cc6:	f104 0919 	add.w	r9, r4, #25
 8008cca:	e7f4      	b.n	8008cb6 <_printf_float+0x43e>

08008ccc <_printf_common>:
 8008ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd0:	4616      	mov	r6, r2
 8008cd2:	4698      	mov	r8, r3
 8008cd4:	688a      	ldr	r2, [r1, #8]
 8008cd6:	690b      	ldr	r3, [r1, #16]
 8008cd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	bfb8      	it	lt
 8008ce0:	4613      	movlt	r3, r2
 8008ce2:	6033      	str	r3, [r6, #0]
 8008ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ce8:	4607      	mov	r7, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	b10a      	cbz	r2, 8008cf2 <_printf_common+0x26>
 8008cee:	3301      	adds	r3, #1
 8008cf0:	6033      	str	r3, [r6, #0]
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	0699      	lsls	r1, r3, #26
 8008cf6:	bf42      	ittt	mi
 8008cf8:	6833      	ldrmi	r3, [r6, #0]
 8008cfa:	3302      	addmi	r3, #2
 8008cfc:	6033      	strmi	r3, [r6, #0]
 8008cfe:	6825      	ldr	r5, [r4, #0]
 8008d00:	f015 0506 	ands.w	r5, r5, #6
 8008d04:	d106      	bne.n	8008d14 <_printf_common+0x48>
 8008d06:	f104 0a19 	add.w	sl, r4, #25
 8008d0a:	68e3      	ldr	r3, [r4, #12]
 8008d0c:	6832      	ldr	r2, [r6, #0]
 8008d0e:	1a9b      	subs	r3, r3, r2
 8008d10:	42ab      	cmp	r3, r5
 8008d12:	dc26      	bgt.n	8008d62 <_printf_common+0x96>
 8008d14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d18:	6822      	ldr	r2, [r4, #0]
 8008d1a:	3b00      	subs	r3, #0
 8008d1c:	bf18      	it	ne
 8008d1e:	2301      	movne	r3, #1
 8008d20:	0692      	lsls	r2, r2, #26
 8008d22:	d42b      	bmi.n	8008d7c <_printf_common+0xb0>
 8008d24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d28:	4641      	mov	r1, r8
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	47c8      	blx	r9
 8008d2e:	3001      	adds	r0, #1
 8008d30:	d01e      	beq.n	8008d70 <_printf_common+0xa4>
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	6922      	ldr	r2, [r4, #16]
 8008d36:	f003 0306 	and.w	r3, r3, #6
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	bf02      	ittt	eq
 8008d3e:	68e5      	ldreq	r5, [r4, #12]
 8008d40:	6833      	ldreq	r3, [r6, #0]
 8008d42:	1aed      	subeq	r5, r5, r3
 8008d44:	68a3      	ldr	r3, [r4, #8]
 8008d46:	bf0c      	ite	eq
 8008d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d4c:	2500      	movne	r5, #0
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	bfc4      	itt	gt
 8008d52:	1a9b      	subgt	r3, r3, r2
 8008d54:	18ed      	addgt	r5, r5, r3
 8008d56:	2600      	movs	r6, #0
 8008d58:	341a      	adds	r4, #26
 8008d5a:	42b5      	cmp	r5, r6
 8008d5c:	d11a      	bne.n	8008d94 <_printf_common+0xc8>
 8008d5e:	2000      	movs	r0, #0
 8008d60:	e008      	b.n	8008d74 <_printf_common+0xa8>
 8008d62:	2301      	movs	r3, #1
 8008d64:	4652      	mov	r2, sl
 8008d66:	4641      	mov	r1, r8
 8008d68:	4638      	mov	r0, r7
 8008d6a:	47c8      	blx	r9
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d103      	bne.n	8008d78 <_printf_common+0xac>
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d78:	3501      	adds	r5, #1
 8008d7a:	e7c6      	b.n	8008d0a <_printf_common+0x3e>
 8008d7c:	18e1      	adds	r1, r4, r3
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	2030      	movs	r0, #48	@ 0x30
 8008d82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d86:	4422      	add	r2, r4
 8008d88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d90:	3302      	adds	r3, #2
 8008d92:	e7c7      	b.n	8008d24 <_printf_common+0x58>
 8008d94:	2301      	movs	r3, #1
 8008d96:	4622      	mov	r2, r4
 8008d98:	4641      	mov	r1, r8
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	47c8      	blx	r9
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d0e6      	beq.n	8008d70 <_printf_common+0xa4>
 8008da2:	3601      	adds	r6, #1
 8008da4:	e7d9      	b.n	8008d5a <_printf_common+0x8e>
	...

08008da8 <_printf_i>:
 8008da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	7e0f      	ldrb	r7, [r1, #24]
 8008dae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008db0:	2f78      	cmp	r7, #120	@ 0x78
 8008db2:	4691      	mov	r9, r2
 8008db4:	4680      	mov	r8, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	469a      	mov	sl, r3
 8008dba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008dbe:	d807      	bhi.n	8008dd0 <_printf_i+0x28>
 8008dc0:	2f62      	cmp	r7, #98	@ 0x62
 8008dc2:	d80a      	bhi.n	8008dda <_printf_i+0x32>
 8008dc4:	2f00      	cmp	r7, #0
 8008dc6:	f000 80d2 	beq.w	8008f6e <_printf_i+0x1c6>
 8008dca:	2f58      	cmp	r7, #88	@ 0x58
 8008dcc:	f000 80b9 	beq.w	8008f42 <_printf_i+0x19a>
 8008dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008dd8:	e03a      	b.n	8008e50 <_printf_i+0xa8>
 8008dda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008dde:	2b15      	cmp	r3, #21
 8008de0:	d8f6      	bhi.n	8008dd0 <_printf_i+0x28>
 8008de2:	a101      	add	r1, pc, #4	@ (adr r1, 8008de8 <_printf_i+0x40>)
 8008de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008de8:	08008e41 	.word	0x08008e41
 8008dec:	08008e55 	.word	0x08008e55
 8008df0:	08008dd1 	.word	0x08008dd1
 8008df4:	08008dd1 	.word	0x08008dd1
 8008df8:	08008dd1 	.word	0x08008dd1
 8008dfc:	08008dd1 	.word	0x08008dd1
 8008e00:	08008e55 	.word	0x08008e55
 8008e04:	08008dd1 	.word	0x08008dd1
 8008e08:	08008dd1 	.word	0x08008dd1
 8008e0c:	08008dd1 	.word	0x08008dd1
 8008e10:	08008dd1 	.word	0x08008dd1
 8008e14:	08008f55 	.word	0x08008f55
 8008e18:	08008e7f 	.word	0x08008e7f
 8008e1c:	08008f0f 	.word	0x08008f0f
 8008e20:	08008dd1 	.word	0x08008dd1
 8008e24:	08008dd1 	.word	0x08008dd1
 8008e28:	08008f77 	.word	0x08008f77
 8008e2c:	08008dd1 	.word	0x08008dd1
 8008e30:	08008e7f 	.word	0x08008e7f
 8008e34:	08008dd1 	.word	0x08008dd1
 8008e38:	08008dd1 	.word	0x08008dd1
 8008e3c:	08008f17 	.word	0x08008f17
 8008e40:	6833      	ldr	r3, [r6, #0]
 8008e42:	1d1a      	adds	r2, r3, #4
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6032      	str	r2, [r6, #0]
 8008e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e50:	2301      	movs	r3, #1
 8008e52:	e09d      	b.n	8008f90 <_printf_i+0x1e8>
 8008e54:	6833      	ldr	r3, [r6, #0]
 8008e56:	6820      	ldr	r0, [r4, #0]
 8008e58:	1d19      	adds	r1, r3, #4
 8008e5a:	6031      	str	r1, [r6, #0]
 8008e5c:	0606      	lsls	r6, r0, #24
 8008e5e:	d501      	bpl.n	8008e64 <_printf_i+0xbc>
 8008e60:	681d      	ldr	r5, [r3, #0]
 8008e62:	e003      	b.n	8008e6c <_printf_i+0xc4>
 8008e64:	0645      	lsls	r5, r0, #25
 8008e66:	d5fb      	bpl.n	8008e60 <_printf_i+0xb8>
 8008e68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e6c:	2d00      	cmp	r5, #0
 8008e6e:	da03      	bge.n	8008e78 <_printf_i+0xd0>
 8008e70:	232d      	movs	r3, #45	@ 0x2d
 8008e72:	426d      	negs	r5, r5
 8008e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e78:	4859      	ldr	r0, [pc, #356]	@ (8008fe0 <_printf_i+0x238>)
 8008e7a:	230a      	movs	r3, #10
 8008e7c:	e011      	b.n	8008ea2 <_printf_i+0xfa>
 8008e7e:	6821      	ldr	r1, [r4, #0]
 8008e80:	6833      	ldr	r3, [r6, #0]
 8008e82:	0608      	lsls	r0, r1, #24
 8008e84:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e88:	d402      	bmi.n	8008e90 <_printf_i+0xe8>
 8008e8a:	0649      	lsls	r1, r1, #25
 8008e8c:	bf48      	it	mi
 8008e8e:	b2ad      	uxthmi	r5, r5
 8008e90:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e92:	4853      	ldr	r0, [pc, #332]	@ (8008fe0 <_printf_i+0x238>)
 8008e94:	6033      	str	r3, [r6, #0]
 8008e96:	bf14      	ite	ne
 8008e98:	230a      	movne	r3, #10
 8008e9a:	2308      	moveq	r3, #8
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ea2:	6866      	ldr	r6, [r4, #4]
 8008ea4:	60a6      	str	r6, [r4, #8]
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	bfa2      	ittt	ge
 8008eaa:	6821      	ldrge	r1, [r4, #0]
 8008eac:	f021 0104 	bicge.w	r1, r1, #4
 8008eb0:	6021      	strge	r1, [r4, #0]
 8008eb2:	b90d      	cbnz	r5, 8008eb8 <_printf_i+0x110>
 8008eb4:	2e00      	cmp	r6, #0
 8008eb6:	d04b      	beq.n	8008f50 <_printf_i+0x1a8>
 8008eb8:	4616      	mov	r6, r2
 8008eba:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ebe:	fb03 5711 	mls	r7, r3, r1, r5
 8008ec2:	5dc7      	ldrb	r7, [r0, r7]
 8008ec4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ec8:	462f      	mov	r7, r5
 8008eca:	42bb      	cmp	r3, r7
 8008ecc:	460d      	mov	r5, r1
 8008ece:	d9f4      	bls.n	8008eba <_printf_i+0x112>
 8008ed0:	2b08      	cmp	r3, #8
 8008ed2:	d10b      	bne.n	8008eec <_printf_i+0x144>
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	07df      	lsls	r7, r3, #31
 8008ed8:	d508      	bpl.n	8008eec <_printf_i+0x144>
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	6861      	ldr	r1, [r4, #4]
 8008ede:	4299      	cmp	r1, r3
 8008ee0:	bfde      	ittt	le
 8008ee2:	2330      	movle	r3, #48	@ 0x30
 8008ee4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ee8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008eec:	1b92      	subs	r2, r2, r6
 8008eee:	6122      	str	r2, [r4, #16]
 8008ef0:	f8cd a000 	str.w	sl, [sp]
 8008ef4:	464b      	mov	r3, r9
 8008ef6:	aa03      	add	r2, sp, #12
 8008ef8:	4621      	mov	r1, r4
 8008efa:	4640      	mov	r0, r8
 8008efc:	f7ff fee6 	bl	8008ccc <_printf_common>
 8008f00:	3001      	adds	r0, #1
 8008f02:	d14a      	bne.n	8008f9a <_printf_i+0x1f2>
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295
 8008f08:	b004      	add	sp, #16
 8008f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	f043 0320 	orr.w	r3, r3, #32
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	4833      	ldr	r0, [pc, #204]	@ (8008fe4 <_printf_i+0x23c>)
 8008f18:	2778      	movs	r7, #120	@ 0x78
 8008f1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	6831      	ldr	r1, [r6, #0]
 8008f22:	061f      	lsls	r7, r3, #24
 8008f24:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f28:	d402      	bmi.n	8008f30 <_printf_i+0x188>
 8008f2a:	065f      	lsls	r7, r3, #25
 8008f2c:	bf48      	it	mi
 8008f2e:	b2ad      	uxthmi	r5, r5
 8008f30:	6031      	str	r1, [r6, #0]
 8008f32:	07d9      	lsls	r1, r3, #31
 8008f34:	bf44      	itt	mi
 8008f36:	f043 0320 	orrmi.w	r3, r3, #32
 8008f3a:	6023      	strmi	r3, [r4, #0]
 8008f3c:	b11d      	cbz	r5, 8008f46 <_printf_i+0x19e>
 8008f3e:	2310      	movs	r3, #16
 8008f40:	e7ac      	b.n	8008e9c <_printf_i+0xf4>
 8008f42:	4827      	ldr	r0, [pc, #156]	@ (8008fe0 <_printf_i+0x238>)
 8008f44:	e7e9      	b.n	8008f1a <_printf_i+0x172>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	f023 0320 	bic.w	r3, r3, #32
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	e7f6      	b.n	8008f3e <_printf_i+0x196>
 8008f50:	4616      	mov	r6, r2
 8008f52:	e7bd      	b.n	8008ed0 <_printf_i+0x128>
 8008f54:	6833      	ldr	r3, [r6, #0]
 8008f56:	6825      	ldr	r5, [r4, #0]
 8008f58:	6961      	ldr	r1, [r4, #20]
 8008f5a:	1d18      	adds	r0, r3, #4
 8008f5c:	6030      	str	r0, [r6, #0]
 8008f5e:	062e      	lsls	r6, r5, #24
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	d501      	bpl.n	8008f68 <_printf_i+0x1c0>
 8008f64:	6019      	str	r1, [r3, #0]
 8008f66:	e002      	b.n	8008f6e <_printf_i+0x1c6>
 8008f68:	0668      	lsls	r0, r5, #25
 8008f6a:	d5fb      	bpl.n	8008f64 <_printf_i+0x1bc>
 8008f6c:	8019      	strh	r1, [r3, #0]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6123      	str	r3, [r4, #16]
 8008f72:	4616      	mov	r6, r2
 8008f74:	e7bc      	b.n	8008ef0 <_printf_i+0x148>
 8008f76:	6833      	ldr	r3, [r6, #0]
 8008f78:	1d1a      	adds	r2, r3, #4
 8008f7a:	6032      	str	r2, [r6, #0]
 8008f7c:	681e      	ldr	r6, [r3, #0]
 8008f7e:	6862      	ldr	r2, [r4, #4]
 8008f80:	2100      	movs	r1, #0
 8008f82:	4630      	mov	r0, r6
 8008f84:	f7f7 f92c 	bl	80001e0 <memchr>
 8008f88:	b108      	cbz	r0, 8008f8e <_printf_i+0x1e6>
 8008f8a:	1b80      	subs	r0, r0, r6
 8008f8c:	6060      	str	r0, [r4, #4]
 8008f8e:	6863      	ldr	r3, [r4, #4]
 8008f90:	6123      	str	r3, [r4, #16]
 8008f92:	2300      	movs	r3, #0
 8008f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f98:	e7aa      	b.n	8008ef0 <_printf_i+0x148>
 8008f9a:	6923      	ldr	r3, [r4, #16]
 8008f9c:	4632      	mov	r2, r6
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	47d0      	blx	sl
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d0ad      	beq.n	8008f04 <_printf_i+0x15c>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	079b      	lsls	r3, r3, #30
 8008fac:	d413      	bmi.n	8008fd6 <_printf_i+0x22e>
 8008fae:	68e0      	ldr	r0, [r4, #12]
 8008fb0:	9b03      	ldr	r3, [sp, #12]
 8008fb2:	4298      	cmp	r0, r3
 8008fb4:	bfb8      	it	lt
 8008fb6:	4618      	movlt	r0, r3
 8008fb8:	e7a6      	b.n	8008f08 <_printf_i+0x160>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4632      	mov	r2, r6
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	4640      	mov	r0, r8
 8008fc2:	47d0      	blx	sl
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d09d      	beq.n	8008f04 <_printf_i+0x15c>
 8008fc8:	3501      	adds	r5, #1
 8008fca:	68e3      	ldr	r3, [r4, #12]
 8008fcc:	9903      	ldr	r1, [sp, #12]
 8008fce:	1a5b      	subs	r3, r3, r1
 8008fd0:	42ab      	cmp	r3, r5
 8008fd2:	dcf2      	bgt.n	8008fba <_printf_i+0x212>
 8008fd4:	e7eb      	b.n	8008fae <_printf_i+0x206>
 8008fd6:	2500      	movs	r5, #0
 8008fd8:	f104 0619 	add.w	r6, r4, #25
 8008fdc:	e7f5      	b.n	8008fca <_printf_i+0x222>
 8008fde:	bf00      	nop
 8008fe0:	0800d9e8 	.word	0x0800d9e8
 8008fe4:	0800d9f9 	.word	0x0800d9f9

08008fe8 <_scanf_float>:
 8008fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fec:	b087      	sub	sp, #28
 8008fee:	4617      	mov	r7, r2
 8008ff0:	9303      	str	r3, [sp, #12]
 8008ff2:	688b      	ldr	r3, [r1, #8]
 8008ff4:	1e5a      	subs	r2, r3, #1
 8008ff6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008ffa:	bf81      	itttt	hi
 8008ffc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009000:	eb03 0b05 	addhi.w	fp, r3, r5
 8009004:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009008:	608b      	strhi	r3, [r1, #8]
 800900a:	680b      	ldr	r3, [r1, #0]
 800900c:	460a      	mov	r2, r1
 800900e:	f04f 0500 	mov.w	r5, #0
 8009012:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009016:	f842 3b1c 	str.w	r3, [r2], #28
 800901a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800901e:	4680      	mov	r8, r0
 8009020:	460c      	mov	r4, r1
 8009022:	bf98      	it	ls
 8009024:	f04f 0b00 	movls.w	fp, #0
 8009028:	9201      	str	r2, [sp, #4]
 800902a:	4616      	mov	r6, r2
 800902c:	46aa      	mov	sl, r5
 800902e:	46a9      	mov	r9, r5
 8009030:	9502      	str	r5, [sp, #8]
 8009032:	68a2      	ldr	r2, [r4, #8]
 8009034:	b152      	cbz	r2, 800904c <_scanf_float+0x64>
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b4e      	cmp	r3, #78	@ 0x4e
 800903c:	d864      	bhi.n	8009108 <_scanf_float+0x120>
 800903e:	2b40      	cmp	r3, #64	@ 0x40
 8009040:	d83c      	bhi.n	80090bc <_scanf_float+0xd4>
 8009042:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009046:	b2c8      	uxtb	r0, r1
 8009048:	280e      	cmp	r0, #14
 800904a:	d93a      	bls.n	80090c2 <_scanf_float+0xda>
 800904c:	f1b9 0f00 	cmp.w	r9, #0
 8009050:	d003      	beq.n	800905a <_scanf_float+0x72>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800905e:	f1ba 0f01 	cmp.w	sl, #1
 8009062:	f200 8117 	bhi.w	8009294 <_scanf_float+0x2ac>
 8009066:	9b01      	ldr	r3, [sp, #4]
 8009068:	429e      	cmp	r6, r3
 800906a:	f200 8108 	bhi.w	800927e <_scanf_float+0x296>
 800906e:	2001      	movs	r0, #1
 8009070:	b007      	add	sp, #28
 8009072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009076:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800907a:	2a0d      	cmp	r2, #13
 800907c:	d8e6      	bhi.n	800904c <_scanf_float+0x64>
 800907e:	a101      	add	r1, pc, #4	@ (adr r1, 8009084 <_scanf_float+0x9c>)
 8009080:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009084:	080091cb 	.word	0x080091cb
 8009088:	0800904d 	.word	0x0800904d
 800908c:	0800904d 	.word	0x0800904d
 8009090:	0800904d 	.word	0x0800904d
 8009094:	0800922b 	.word	0x0800922b
 8009098:	08009203 	.word	0x08009203
 800909c:	0800904d 	.word	0x0800904d
 80090a0:	0800904d 	.word	0x0800904d
 80090a4:	080091d9 	.word	0x080091d9
 80090a8:	0800904d 	.word	0x0800904d
 80090ac:	0800904d 	.word	0x0800904d
 80090b0:	0800904d 	.word	0x0800904d
 80090b4:	0800904d 	.word	0x0800904d
 80090b8:	08009191 	.word	0x08009191
 80090bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80090c0:	e7db      	b.n	800907a <_scanf_float+0x92>
 80090c2:	290e      	cmp	r1, #14
 80090c4:	d8c2      	bhi.n	800904c <_scanf_float+0x64>
 80090c6:	a001      	add	r0, pc, #4	@ (adr r0, 80090cc <_scanf_float+0xe4>)
 80090c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80090cc:	08009181 	.word	0x08009181
 80090d0:	0800904d 	.word	0x0800904d
 80090d4:	08009181 	.word	0x08009181
 80090d8:	08009217 	.word	0x08009217
 80090dc:	0800904d 	.word	0x0800904d
 80090e0:	08009129 	.word	0x08009129
 80090e4:	08009167 	.word	0x08009167
 80090e8:	08009167 	.word	0x08009167
 80090ec:	08009167 	.word	0x08009167
 80090f0:	08009167 	.word	0x08009167
 80090f4:	08009167 	.word	0x08009167
 80090f8:	08009167 	.word	0x08009167
 80090fc:	08009167 	.word	0x08009167
 8009100:	08009167 	.word	0x08009167
 8009104:	08009167 	.word	0x08009167
 8009108:	2b6e      	cmp	r3, #110	@ 0x6e
 800910a:	d809      	bhi.n	8009120 <_scanf_float+0x138>
 800910c:	2b60      	cmp	r3, #96	@ 0x60
 800910e:	d8b2      	bhi.n	8009076 <_scanf_float+0x8e>
 8009110:	2b54      	cmp	r3, #84	@ 0x54
 8009112:	d07b      	beq.n	800920c <_scanf_float+0x224>
 8009114:	2b59      	cmp	r3, #89	@ 0x59
 8009116:	d199      	bne.n	800904c <_scanf_float+0x64>
 8009118:	2d07      	cmp	r5, #7
 800911a:	d197      	bne.n	800904c <_scanf_float+0x64>
 800911c:	2508      	movs	r5, #8
 800911e:	e02c      	b.n	800917a <_scanf_float+0x192>
 8009120:	2b74      	cmp	r3, #116	@ 0x74
 8009122:	d073      	beq.n	800920c <_scanf_float+0x224>
 8009124:	2b79      	cmp	r3, #121	@ 0x79
 8009126:	e7f6      	b.n	8009116 <_scanf_float+0x12e>
 8009128:	6821      	ldr	r1, [r4, #0]
 800912a:	05c8      	lsls	r0, r1, #23
 800912c:	d51b      	bpl.n	8009166 <_scanf_float+0x17e>
 800912e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009132:	6021      	str	r1, [r4, #0]
 8009134:	f109 0901 	add.w	r9, r9, #1
 8009138:	f1bb 0f00 	cmp.w	fp, #0
 800913c:	d003      	beq.n	8009146 <_scanf_float+0x15e>
 800913e:	3201      	adds	r2, #1
 8009140:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009144:	60a2      	str	r2, [r4, #8]
 8009146:	68a3      	ldr	r3, [r4, #8]
 8009148:	3b01      	subs	r3, #1
 800914a:	60a3      	str	r3, [r4, #8]
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	3301      	adds	r3, #1
 8009150:	6123      	str	r3, [r4, #16]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3b01      	subs	r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	607b      	str	r3, [r7, #4]
 800915a:	f340 8087 	ble.w	800926c <_scanf_float+0x284>
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	3301      	adds	r3, #1
 8009162:	603b      	str	r3, [r7, #0]
 8009164:	e765      	b.n	8009032 <_scanf_float+0x4a>
 8009166:	eb1a 0105 	adds.w	r1, sl, r5
 800916a:	f47f af6f 	bne.w	800904c <_scanf_float+0x64>
 800916e:	6822      	ldr	r2, [r4, #0]
 8009170:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009174:	6022      	str	r2, [r4, #0]
 8009176:	460d      	mov	r5, r1
 8009178:	468a      	mov	sl, r1
 800917a:	f806 3b01 	strb.w	r3, [r6], #1
 800917e:	e7e2      	b.n	8009146 <_scanf_float+0x15e>
 8009180:	6822      	ldr	r2, [r4, #0]
 8009182:	0610      	lsls	r0, r2, #24
 8009184:	f57f af62 	bpl.w	800904c <_scanf_float+0x64>
 8009188:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800918c:	6022      	str	r2, [r4, #0]
 800918e:	e7f4      	b.n	800917a <_scanf_float+0x192>
 8009190:	f1ba 0f00 	cmp.w	sl, #0
 8009194:	d10e      	bne.n	80091b4 <_scanf_float+0x1cc>
 8009196:	f1b9 0f00 	cmp.w	r9, #0
 800919a:	d10e      	bne.n	80091ba <_scanf_float+0x1d2>
 800919c:	6822      	ldr	r2, [r4, #0]
 800919e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80091a2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80091a6:	d108      	bne.n	80091ba <_scanf_float+0x1d2>
 80091a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80091ac:	6022      	str	r2, [r4, #0]
 80091ae:	f04f 0a01 	mov.w	sl, #1
 80091b2:	e7e2      	b.n	800917a <_scanf_float+0x192>
 80091b4:	f1ba 0f02 	cmp.w	sl, #2
 80091b8:	d055      	beq.n	8009266 <_scanf_float+0x27e>
 80091ba:	2d01      	cmp	r5, #1
 80091bc:	d002      	beq.n	80091c4 <_scanf_float+0x1dc>
 80091be:	2d04      	cmp	r5, #4
 80091c0:	f47f af44 	bne.w	800904c <_scanf_float+0x64>
 80091c4:	3501      	adds	r5, #1
 80091c6:	b2ed      	uxtb	r5, r5
 80091c8:	e7d7      	b.n	800917a <_scanf_float+0x192>
 80091ca:	f1ba 0f01 	cmp.w	sl, #1
 80091ce:	f47f af3d 	bne.w	800904c <_scanf_float+0x64>
 80091d2:	f04f 0a02 	mov.w	sl, #2
 80091d6:	e7d0      	b.n	800917a <_scanf_float+0x192>
 80091d8:	b97d      	cbnz	r5, 80091fa <_scanf_float+0x212>
 80091da:	f1b9 0f00 	cmp.w	r9, #0
 80091de:	f47f af38 	bne.w	8009052 <_scanf_float+0x6a>
 80091e2:	6822      	ldr	r2, [r4, #0]
 80091e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80091e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80091ec:	f040 8108 	bne.w	8009400 <_scanf_float+0x418>
 80091f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80091f4:	6022      	str	r2, [r4, #0]
 80091f6:	2501      	movs	r5, #1
 80091f8:	e7bf      	b.n	800917a <_scanf_float+0x192>
 80091fa:	2d03      	cmp	r5, #3
 80091fc:	d0e2      	beq.n	80091c4 <_scanf_float+0x1dc>
 80091fe:	2d05      	cmp	r5, #5
 8009200:	e7de      	b.n	80091c0 <_scanf_float+0x1d8>
 8009202:	2d02      	cmp	r5, #2
 8009204:	f47f af22 	bne.w	800904c <_scanf_float+0x64>
 8009208:	2503      	movs	r5, #3
 800920a:	e7b6      	b.n	800917a <_scanf_float+0x192>
 800920c:	2d06      	cmp	r5, #6
 800920e:	f47f af1d 	bne.w	800904c <_scanf_float+0x64>
 8009212:	2507      	movs	r5, #7
 8009214:	e7b1      	b.n	800917a <_scanf_float+0x192>
 8009216:	6822      	ldr	r2, [r4, #0]
 8009218:	0591      	lsls	r1, r2, #22
 800921a:	f57f af17 	bpl.w	800904c <_scanf_float+0x64>
 800921e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009222:	6022      	str	r2, [r4, #0]
 8009224:	f8cd 9008 	str.w	r9, [sp, #8]
 8009228:	e7a7      	b.n	800917a <_scanf_float+0x192>
 800922a:	6822      	ldr	r2, [r4, #0]
 800922c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009230:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009234:	d006      	beq.n	8009244 <_scanf_float+0x25c>
 8009236:	0550      	lsls	r0, r2, #21
 8009238:	f57f af08 	bpl.w	800904c <_scanf_float+0x64>
 800923c:	f1b9 0f00 	cmp.w	r9, #0
 8009240:	f000 80de 	beq.w	8009400 <_scanf_float+0x418>
 8009244:	0591      	lsls	r1, r2, #22
 8009246:	bf58      	it	pl
 8009248:	9902      	ldrpl	r1, [sp, #8]
 800924a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800924e:	bf58      	it	pl
 8009250:	eba9 0101 	subpl.w	r1, r9, r1
 8009254:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009258:	bf58      	it	pl
 800925a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800925e:	6022      	str	r2, [r4, #0]
 8009260:	f04f 0900 	mov.w	r9, #0
 8009264:	e789      	b.n	800917a <_scanf_float+0x192>
 8009266:	f04f 0a03 	mov.w	sl, #3
 800926a:	e786      	b.n	800917a <_scanf_float+0x192>
 800926c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009270:	4639      	mov	r1, r7
 8009272:	4640      	mov	r0, r8
 8009274:	4798      	blx	r3
 8009276:	2800      	cmp	r0, #0
 8009278:	f43f aedb 	beq.w	8009032 <_scanf_float+0x4a>
 800927c:	e6e6      	b.n	800904c <_scanf_float+0x64>
 800927e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009282:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009286:	463a      	mov	r2, r7
 8009288:	4640      	mov	r0, r8
 800928a:	4798      	blx	r3
 800928c:	6923      	ldr	r3, [r4, #16]
 800928e:	3b01      	subs	r3, #1
 8009290:	6123      	str	r3, [r4, #16]
 8009292:	e6e8      	b.n	8009066 <_scanf_float+0x7e>
 8009294:	1e6b      	subs	r3, r5, #1
 8009296:	2b06      	cmp	r3, #6
 8009298:	d824      	bhi.n	80092e4 <_scanf_float+0x2fc>
 800929a:	2d02      	cmp	r5, #2
 800929c:	d836      	bhi.n	800930c <_scanf_float+0x324>
 800929e:	9b01      	ldr	r3, [sp, #4]
 80092a0:	429e      	cmp	r6, r3
 80092a2:	f67f aee4 	bls.w	800906e <_scanf_float+0x86>
 80092a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80092aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092ae:	463a      	mov	r2, r7
 80092b0:	4640      	mov	r0, r8
 80092b2:	4798      	blx	r3
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	3b01      	subs	r3, #1
 80092b8:	6123      	str	r3, [r4, #16]
 80092ba:	e7f0      	b.n	800929e <_scanf_float+0x2b6>
 80092bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80092c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80092c4:	463a      	mov	r2, r7
 80092c6:	4640      	mov	r0, r8
 80092c8:	4798      	blx	r3
 80092ca:	6923      	ldr	r3, [r4, #16]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092d4:	fa5f fa8a 	uxtb.w	sl, sl
 80092d8:	f1ba 0f02 	cmp.w	sl, #2
 80092dc:	d1ee      	bne.n	80092bc <_scanf_float+0x2d4>
 80092de:	3d03      	subs	r5, #3
 80092e0:	b2ed      	uxtb	r5, r5
 80092e2:	1b76      	subs	r6, r6, r5
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	05da      	lsls	r2, r3, #23
 80092e8:	d530      	bpl.n	800934c <_scanf_float+0x364>
 80092ea:	055b      	lsls	r3, r3, #21
 80092ec:	d511      	bpl.n	8009312 <_scanf_float+0x32a>
 80092ee:	9b01      	ldr	r3, [sp, #4]
 80092f0:	429e      	cmp	r6, r3
 80092f2:	f67f aebc 	bls.w	800906e <_scanf_float+0x86>
 80092f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80092fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092fe:	463a      	mov	r2, r7
 8009300:	4640      	mov	r0, r8
 8009302:	4798      	blx	r3
 8009304:	6923      	ldr	r3, [r4, #16]
 8009306:	3b01      	subs	r3, #1
 8009308:	6123      	str	r3, [r4, #16]
 800930a:	e7f0      	b.n	80092ee <_scanf_float+0x306>
 800930c:	46aa      	mov	sl, r5
 800930e:	46b3      	mov	fp, r6
 8009310:	e7de      	b.n	80092d0 <_scanf_float+0x2e8>
 8009312:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009316:	6923      	ldr	r3, [r4, #16]
 8009318:	2965      	cmp	r1, #101	@ 0x65
 800931a:	f103 33ff 	add.w	r3, r3, #4294967295
 800931e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009322:	6123      	str	r3, [r4, #16]
 8009324:	d00c      	beq.n	8009340 <_scanf_float+0x358>
 8009326:	2945      	cmp	r1, #69	@ 0x45
 8009328:	d00a      	beq.n	8009340 <_scanf_float+0x358>
 800932a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800932e:	463a      	mov	r2, r7
 8009330:	4640      	mov	r0, r8
 8009332:	4798      	blx	r3
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800933a:	3b01      	subs	r3, #1
 800933c:	1eb5      	subs	r5, r6, #2
 800933e:	6123      	str	r3, [r4, #16]
 8009340:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009344:	463a      	mov	r2, r7
 8009346:	4640      	mov	r0, r8
 8009348:	4798      	blx	r3
 800934a:	462e      	mov	r6, r5
 800934c:	6822      	ldr	r2, [r4, #0]
 800934e:	f012 0210 	ands.w	r2, r2, #16
 8009352:	d001      	beq.n	8009358 <_scanf_float+0x370>
 8009354:	2000      	movs	r0, #0
 8009356:	e68b      	b.n	8009070 <_scanf_float+0x88>
 8009358:	7032      	strb	r2, [r6, #0]
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009364:	d11c      	bne.n	80093a0 <_scanf_float+0x3b8>
 8009366:	9b02      	ldr	r3, [sp, #8]
 8009368:	454b      	cmp	r3, r9
 800936a:	eba3 0209 	sub.w	r2, r3, r9
 800936e:	d123      	bne.n	80093b8 <_scanf_float+0x3d0>
 8009370:	9901      	ldr	r1, [sp, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	4640      	mov	r0, r8
 8009376:	f002 fcdf 	bl	800bd38 <_strtod_r>
 800937a:	9b03      	ldr	r3, [sp, #12]
 800937c:	6821      	ldr	r1, [r4, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f011 0f02 	tst.w	r1, #2
 8009384:	ec57 6b10 	vmov	r6, r7, d0
 8009388:	f103 0204 	add.w	r2, r3, #4
 800938c:	d01f      	beq.n	80093ce <_scanf_float+0x3e6>
 800938e:	9903      	ldr	r1, [sp, #12]
 8009390:	600a      	str	r2, [r1, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	e9c3 6700 	strd	r6, r7, [r3]
 8009398:	68e3      	ldr	r3, [r4, #12]
 800939a:	3301      	adds	r3, #1
 800939c:	60e3      	str	r3, [r4, #12]
 800939e:	e7d9      	b.n	8009354 <_scanf_float+0x36c>
 80093a0:	9b04      	ldr	r3, [sp, #16]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0e4      	beq.n	8009370 <_scanf_float+0x388>
 80093a6:	9905      	ldr	r1, [sp, #20]
 80093a8:	230a      	movs	r3, #10
 80093aa:	3101      	adds	r1, #1
 80093ac:	4640      	mov	r0, r8
 80093ae:	f002 fd43 	bl	800be38 <_strtol_r>
 80093b2:	9b04      	ldr	r3, [sp, #16]
 80093b4:	9e05      	ldr	r6, [sp, #20]
 80093b6:	1ac2      	subs	r2, r0, r3
 80093b8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80093bc:	429e      	cmp	r6, r3
 80093be:	bf28      	it	cs
 80093c0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80093c4:	4910      	ldr	r1, [pc, #64]	@ (8009408 <_scanf_float+0x420>)
 80093c6:	4630      	mov	r0, r6
 80093c8:	f000 f918 	bl	80095fc <siprintf>
 80093cc:	e7d0      	b.n	8009370 <_scanf_float+0x388>
 80093ce:	f011 0f04 	tst.w	r1, #4
 80093d2:	9903      	ldr	r1, [sp, #12]
 80093d4:	600a      	str	r2, [r1, #0]
 80093d6:	d1dc      	bne.n	8009392 <_scanf_float+0x3aa>
 80093d8:	681d      	ldr	r5, [r3, #0]
 80093da:	4632      	mov	r2, r6
 80093dc:	463b      	mov	r3, r7
 80093de:	4630      	mov	r0, r6
 80093e0:	4639      	mov	r1, r7
 80093e2:	f7f7 fbab 	bl	8000b3c <__aeabi_dcmpun>
 80093e6:	b128      	cbz	r0, 80093f4 <_scanf_float+0x40c>
 80093e8:	4808      	ldr	r0, [pc, #32]	@ (800940c <_scanf_float+0x424>)
 80093ea:	f000 fa9d 	bl	8009928 <nanf>
 80093ee:	ed85 0a00 	vstr	s0, [r5]
 80093f2:	e7d1      	b.n	8009398 <_scanf_float+0x3b0>
 80093f4:	4630      	mov	r0, r6
 80093f6:	4639      	mov	r1, r7
 80093f8:	f7f7 fbfe 	bl	8000bf8 <__aeabi_d2f>
 80093fc:	6028      	str	r0, [r5, #0]
 80093fe:	e7cb      	b.n	8009398 <_scanf_float+0x3b0>
 8009400:	f04f 0900 	mov.w	r9, #0
 8009404:	e629      	b.n	800905a <_scanf_float+0x72>
 8009406:	bf00      	nop
 8009408:	0800da0a 	.word	0x0800da0a
 800940c:	0800ddc0 	.word	0x0800ddc0

08009410 <std>:
 8009410:	2300      	movs	r3, #0
 8009412:	b510      	push	{r4, lr}
 8009414:	4604      	mov	r4, r0
 8009416:	e9c0 3300 	strd	r3, r3, [r0]
 800941a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800941e:	6083      	str	r3, [r0, #8]
 8009420:	8181      	strh	r1, [r0, #12]
 8009422:	6643      	str	r3, [r0, #100]	@ 0x64
 8009424:	81c2      	strh	r2, [r0, #14]
 8009426:	6183      	str	r3, [r0, #24]
 8009428:	4619      	mov	r1, r3
 800942a:	2208      	movs	r2, #8
 800942c:	305c      	adds	r0, #92	@ 0x5c
 800942e:	f000 f974 	bl	800971a <memset>
 8009432:	4b0d      	ldr	r3, [pc, #52]	@ (8009468 <std+0x58>)
 8009434:	6263      	str	r3, [r4, #36]	@ 0x24
 8009436:	4b0d      	ldr	r3, [pc, #52]	@ (800946c <std+0x5c>)
 8009438:	62a3      	str	r3, [r4, #40]	@ 0x28
 800943a:	4b0d      	ldr	r3, [pc, #52]	@ (8009470 <std+0x60>)
 800943c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800943e:	4b0d      	ldr	r3, [pc, #52]	@ (8009474 <std+0x64>)
 8009440:	6323      	str	r3, [r4, #48]	@ 0x30
 8009442:	4b0d      	ldr	r3, [pc, #52]	@ (8009478 <std+0x68>)
 8009444:	6224      	str	r4, [r4, #32]
 8009446:	429c      	cmp	r4, r3
 8009448:	d006      	beq.n	8009458 <std+0x48>
 800944a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800944e:	4294      	cmp	r4, r2
 8009450:	d002      	beq.n	8009458 <std+0x48>
 8009452:	33d0      	adds	r3, #208	@ 0xd0
 8009454:	429c      	cmp	r4, r3
 8009456:	d105      	bne.n	8009464 <std+0x54>
 8009458:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800945c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009460:	f000 ba50 	b.w	8009904 <__retarget_lock_init_recursive>
 8009464:	bd10      	pop	{r4, pc}
 8009466:	bf00      	nop
 8009468:	08009691 	.word	0x08009691
 800946c:	080096b7 	.word	0x080096b7
 8009470:	080096ef 	.word	0x080096ef
 8009474:	08009713 	.word	0x08009713
 8009478:	20004e14 	.word	0x20004e14

0800947c <stdio_exit_handler>:
 800947c:	4a02      	ldr	r2, [pc, #8]	@ (8009488 <stdio_exit_handler+0xc>)
 800947e:	4903      	ldr	r1, [pc, #12]	@ (800948c <stdio_exit_handler+0x10>)
 8009480:	4803      	ldr	r0, [pc, #12]	@ (8009490 <stdio_exit_handler+0x14>)
 8009482:	f000 b869 	b.w	8009558 <_fwalk_sglue>
 8009486:	bf00      	nop
 8009488:	20000010 	.word	0x20000010
 800948c:	0800c829 	.word	0x0800c829
 8009490:	20000020 	.word	0x20000020

08009494 <cleanup_stdio>:
 8009494:	6841      	ldr	r1, [r0, #4]
 8009496:	4b0c      	ldr	r3, [pc, #48]	@ (80094c8 <cleanup_stdio+0x34>)
 8009498:	4299      	cmp	r1, r3
 800949a:	b510      	push	{r4, lr}
 800949c:	4604      	mov	r4, r0
 800949e:	d001      	beq.n	80094a4 <cleanup_stdio+0x10>
 80094a0:	f003 f9c2 	bl	800c828 <_fflush_r>
 80094a4:	68a1      	ldr	r1, [r4, #8]
 80094a6:	4b09      	ldr	r3, [pc, #36]	@ (80094cc <cleanup_stdio+0x38>)
 80094a8:	4299      	cmp	r1, r3
 80094aa:	d002      	beq.n	80094b2 <cleanup_stdio+0x1e>
 80094ac:	4620      	mov	r0, r4
 80094ae:	f003 f9bb 	bl	800c828 <_fflush_r>
 80094b2:	68e1      	ldr	r1, [r4, #12]
 80094b4:	4b06      	ldr	r3, [pc, #24]	@ (80094d0 <cleanup_stdio+0x3c>)
 80094b6:	4299      	cmp	r1, r3
 80094b8:	d004      	beq.n	80094c4 <cleanup_stdio+0x30>
 80094ba:	4620      	mov	r0, r4
 80094bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094c0:	f003 b9b2 	b.w	800c828 <_fflush_r>
 80094c4:	bd10      	pop	{r4, pc}
 80094c6:	bf00      	nop
 80094c8:	20004e14 	.word	0x20004e14
 80094cc:	20004e7c 	.word	0x20004e7c
 80094d0:	20004ee4 	.word	0x20004ee4

080094d4 <global_stdio_init.part.0>:
 80094d4:	b510      	push	{r4, lr}
 80094d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009504 <global_stdio_init.part.0+0x30>)
 80094d8:	4c0b      	ldr	r4, [pc, #44]	@ (8009508 <global_stdio_init.part.0+0x34>)
 80094da:	4a0c      	ldr	r2, [pc, #48]	@ (800950c <global_stdio_init.part.0+0x38>)
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	4620      	mov	r0, r4
 80094e0:	2200      	movs	r2, #0
 80094e2:	2104      	movs	r1, #4
 80094e4:	f7ff ff94 	bl	8009410 <std>
 80094e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80094ec:	2201      	movs	r2, #1
 80094ee:	2109      	movs	r1, #9
 80094f0:	f7ff ff8e 	bl	8009410 <std>
 80094f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80094f8:	2202      	movs	r2, #2
 80094fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094fe:	2112      	movs	r1, #18
 8009500:	f7ff bf86 	b.w	8009410 <std>
 8009504:	20004f4c 	.word	0x20004f4c
 8009508:	20004e14 	.word	0x20004e14
 800950c:	0800947d 	.word	0x0800947d

08009510 <__sfp_lock_acquire>:
 8009510:	4801      	ldr	r0, [pc, #4]	@ (8009518 <__sfp_lock_acquire+0x8>)
 8009512:	f000 b9f8 	b.w	8009906 <__retarget_lock_acquire_recursive>
 8009516:	bf00      	nop
 8009518:	20004f55 	.word	0x20004f55

0800951c <__sfp_lock_release>:
 800951c:	4801      	ldr	r0, [pc, #4]	@ (8009524 <__sfp_lock_release+0x8>)
 800951e:	f000 b9f3 	b.w	8009908 <__retarget_lock_release_recursive>
 8009522:	bf00      	nop
 8009524:	20004f55 	.word	0x20004f55

08009528 <__sinit>:
 8009528:	b510      	push	{r4, lr}
 800952a:	4604      	mov	r4, r0
 800952c:	f7ff fff0 	bl	8009510 <__sfp_lock_acquire>
 8009530:	6a23      	ldr	r3, [r4, #32]
 8009532:	b11b      	cbz	r3, 800953c <__sinit+0x14>
 8009534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009538:	f7ff bff0 	b.w	800951c <__sfp_lock_release>
 800953c:	4b04      	ldr	r3, [pc, #16]	@ (8009550 <__sinit+0x28>)
 800953e:	6223      	str	r3, [r4, #32]
 8009540:	4b04      	ldr	r3, [pc, #16]	@ (8009554 <__sinit+0x2c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1f5      	bne.n	8009534 <__sinit+0xc>
 8009548:	f7ff ffc4 	bl	80094d4 <global_stdio_init.part.0>
 800954c:	e7f2      	b.n	8009534 <__sinit+0xc>
 800954e:	bf00      	nop
 8009550:	08009495 	.word	0x08009495
 8009554:	20004f4c 	.word	0x20004f4c

08009558 <_fwalk_sglue>:
 8009558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800955c:	4607      	mov	r7, r0
 800955e:	4688      	mov	r8, r1
 8009560:	4614      	mov	r4, r2
 8009562:	2600      	movs	r6, #0
 8009564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009568:	f1b9 0901 	subs.w	r9, r9, #1
 800956c:	d505      	bpl.n	800957a <_fwalk_sglue+0x22>
 800956e:	6824      	ldr	r4, [r4, #0]
 8009570:	2c00      	cmp	r4, #0
 8009572:	d1f7      	bne.n	8009564 <_fwalk_sglue+0xc>
 8009574:	4630      	mov	r0, r6
 8009576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800957a:	89ab      	ldrh	r3, [r5, #12]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d907      	bls.n	8009590 <_fwalk_sglue+0x38>
 8009580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009584:	3301      	adds	r3, #1
 8009586:	d003      	beq.n	8009590 <_fwalk_sglue+0x38>
 8009588:	4629      	mov	r1, r5
 800958a:	4638      	mov	r0, r7
 800958c:	47c0      	blx	r8
 800958e:	4306      	orrs	r6, r0
 8009590:	3568      	adds	r5, #104	@ 0x68
 8009592:	e7e9      	b.n	8009568 <_fwalk_sglue+0x10>

08009594 <sniprintf>:
 8009594:	b40c      	push	{r2, r3}
 8009596:	b530      	push	{r4, r5, lr}
 8009598:	4b17      	ldr	r3, [pc, #92]	@ (80095f8 <sniprintf+0x64>)
 800959a:	1e0c      	subs	r4, r1, #0
 800959c:	681d      	ldr	r5, [r3, #0]
 800959e:	b09d      	sub	sp, #116	@ 0x74
 80095a0:	da08      	bge.n	80095b4 <sniprintf+0x20>
 80095a2:	238b      	movs	r3, #139	@ 0x8b
 80095a4:	602b      	str	r3, [r5, #0]
 80095a6:	f04f 30ff 	mov.w	r0, #4294967295
 80095aa:	b01d      	add	sp, #116	@ 0x74
 80095ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095b0:	b002      	add	sp, #8
 80095b2:	4770      	bx	lr
 80095b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80095b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80095bc:	bf14      	ite	ne
 80095be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80095c2:	4623      	moveq	r3, r4
 80095c4:	9304      	str	r3, [sp, #16]
 80095c6:	9307      	str	r3, [sp, #28]
 80095c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80095cc:	9002      	str	r0, [sp, #8]
 80095ce:	9006      	str	r0, [sp, #24]
 80095d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80095d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80095d6:	ab21      	add	r3, sp, #132	@ 0x84
 80095d8:	a902      	add	r1, sp, #8
 80095da:	4628      	mov	r0, r5
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	f002 fc89 	bl	800bef4 <_svfiprintf_r>
 80095e2:	1c43      	adds	r3, r0, #1
 80095e4:	bfbc      	itt	lt
 80095e6:	238b      	movlt	r3, #139	@ 0x8b
 80095e8:	602b      	strlt	r3, [r5, #0]
 80095ea:	2c00      	cmp	r4, #0
 80095ec:	d0dd      	beq.n	80095aa <sniprintf+0x16>
 80095ee:	9b02      	ldr	r3, [sp, #8]
 80095f0:	2200      	movs	r2, #0
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	e7d9      	b.n	80095aa <sniprintf+0x16>
 80095f6:	bf00      	nop
 80095f8:	2000001c 	.word	0x2000001c

080095fc <siprintf>:
 80095fc:	b40e      	push	{r1, r2, r3}
 80095fe:	b500      	push	{lr}
 8009600:	b09c      	sub	sp, #112	@ 0x70
 8009602:	ab1d      	add	r3, sp, #116	@ 0x74
 8009604:	9002      	str	r0, [sp, #8]
 8009606:	9006      	str	r0, [sp, #24]
 8009608:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800960c:	4809      	ldr	r0, [pc, #36]	@ (8009634 <siprintf+0x38>)
 800960e:	9107      	str	r1, [sp, #28]
 8009610:	9104      	str	r1, [sp, #16]
 8009612:	4909      	ldr	r1, [pc, #36]	@ (8009638 <siprintf+0x3c>)
 8009614:	f853 2b04 	ldr.w	r2, [r3], #4
 8009618:	9105      	str	r1, [sp, #20]
 800961a:	6800      	ldr	r0, [r0, #0]
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	a902      	add	r1, sp, #8
 8009620:	f002 fc68 	bl	800bef4 <_svfiprintf_r>
 8009624:	9b02      	ldr	r3, [sp, #8]
 8009626:	2200      	movs	r2, #0
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	b01c      	add	sp, #112	@ 0x70
 800962c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009630:	b003      	add	sp, #12
 8009632:	4770      	bx	lr
 8009634:	2000001c 	.word	0x2000001c
 8009638:	ffff0208 	.word	0xffff0208

0800963c <siscanf>:
 800963c:	b40e      	push	{r1, r2, r3}
 800963e:	b530      	push	{r4, r5, lr}
 8009640:	b09c      	sub	sp, #112	@ 0x70
 8009642:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009644:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8009648:	f854 5b04 	ldr.w	r5, [r4], #4
 800964c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009650:	9002      	str	r0, [sp, #8]
 8009652:	9006      	str	r0, [sp, #24]
 8009654:	f7f6 fe14 	bl	8000280 <strlen>
 8009658:	4b0b      	ldr	r3, [pc, #44]	@ (8009688 <siscanf+0x4c>)
 800965a:	9003      	str	r0, [sp, #12]
 800965c:	9007      	str	r0, [sp, #28]
 800965e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009660:	480a      	ldr	r0, [pc, #40]	@ (800968c <siscanf+0x50>)
 8009662:	9401      	str	r4, [sp, #4]
 8009664:	2300      	movs	r3, #0
 8009666:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009668:	9314      	str	r3, [sp, #80]	@ 0x50
 800966a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800966e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009672:	462a      	mov	r2, r5
 8009674:	4623      	mov	r3, r4
 8009676:	a902      	add	r1, sp, #8
 8009678:	6800      	ldr	r0, [r0, #0]
 800967a:	f002 fd8f 	bl	800c19c <__ssvfiscanf_r>
 800967e:	b01c      	add	sp, #112	@ 0x70
 8009680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009684:	b003      	add	sp, #12
 8009686:	4770      	bx	lr
 8009688:	080096b3 	.word	0x080096b3
 800968c:	2000001c 	.word	0x2000001c

08009690 <__sread>:
 8009690:	b510      	push	{r4, lr}
 8009692:	460c      	mov	r4, r1
 8009694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009698:	f000 f8e6 	bl	8009868 <_read_r>
 800969c:	2800      	cmp	r0, #0
 800969e:	bfab      	itete	ge
 80096a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096a2:	89a3      	ldrhlt	r3, [r4, #12]
 80096a4:	181b      	addge	r3, r3, r0
 80096a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096aa:	bfac      	ite	ge
 80096ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096ae:	81a3      	strhlt	r3, [r4, #12]
 80096b0:	bd10      	pop	{r4, pc}

080096b2 <__seofread>:
 80096b2:	2000      	movs	r0, #0
 80096b4:	4770      	bx	lr

080096b6 <__swrite>:
 80096b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ba:	461f      	mov	r7, r3
 80096bc:	898b      	ldrh	r3, [r1, #12]
 80096be:	05db      	lsls	r3, r3, #23
 80096c0:	4605      	mov	r5, r0
 80096c2:	460c      	mov	r4, r1
 80096c4:	4616      	mov	r6, r2
 80096c6:	d505      	bpl.n	80096d4 <__swrite+0x1e>
 80096c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096cc:	2302      	movs	r3, #2
 80096ce:	2200      	movs	r2, #0
 80096d0:	f000 f8b8 	bl	8009844 <_lseek_r>
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096de:	81a3      	strh	r3, [r4, #12]
 80096e0:	4632      	mov	r2, r6
 80096e2:	463b      	mov	r3, r7
 80096e4:	4628      	mov	r0, r5
 80096e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ea:	f000 b8cf 	b.w	800988c <_write_r>

080096ee <__sseek>:
 80096ee:	b510      	push	{r4, lr}
 80096f0:	460c      	mov	r4, r1
 80096f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f6:	f000 f8a5 	bl	8009844 <_lseek_r>
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	bf15      	itete	ne
 8009700:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009702:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009706:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800970a:	81a3      	strheq	r3, [r4, #12]
 800970c:	bf18      	it	ne
 800970e:	81a3      	strhne	r3, [r4, #12]
 8009710:	bd10      	pop	{r4, pc}

08009712 <__sclose>:
 8009712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009716:	f000 b82f 	b.w	8009778 <_close_r>

0800971a <memset>:
 800971a:	4402      	add	r2, r0
 800971c:	4603      	mov	r3, r0
 800971e:	4293      	cmp	r3, r2
 8009720:	d100      	bne.n	8009724 <memset+0xa>
 8009722:	4770      	bx	lr
 8009724:	f803 1b01 	strb.w	r1, [r3], #1
 8009728:	e7f9      	b.n	800971e <memset+0x4>

0800972a <strchr>:
 800972a:	b2c9      	uxtb	r1, r1
 800972c:	4603      	mov	r3, r0
 800972e:	4618      	mov	r0, r3
 8009730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009734:	b112      	cbz	r2, 800973c <strchr+0x12>
 8009736:	428a      	cmp	r2, r1
 8009738:	d1f9      	bne.n	800972e <strchr+0x4>
 800973a:	4770      	bx	lr
 800973c:	2900      	cmp	r1, #0
 800973e:	bf18      	it	ne
 8009740:	2000      	movne	r0, #0
 8009742:	4770      	bx	lr

08009744 <strstr>:
 8009744:	780a      	ldrb	r2, [r1, #0]
 8009746:	b570      	push	{r4, r5, r6, lr}
 8009748:	b96a      	cbnz	r2, 8009766 <strstr+0x22>
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	429a      	cmp	r2, r3
 800974e:	d109      	bne.n	8009764 <strstr+0x20>
 8009750:	460c      	mov	r4, r1
 8009752:	4605      	mov	r5, r0
 8009754:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009758:	2b00      	cmp	r3, #0
 800975a:	d0f6      	beq.n	800974a <strstr+0x6>
 800975c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009760:	429e      	cmp	r6, r3
 8009762:	d0f7      	beq.n	8009754 <strstr+0x10>
 8009764:	3001      	adds	r0, #1
 8009766:	7803      	ldrb	r3, [r0, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1ef      	bne.n	800974c <strstr+0x8>
 800976c:	4618      	mov	r0, r3
 800976e:	e7ec      	b.n	800974a <strstr+0x6>

08009770 <_localeconv_r>:
 8009770:	4800      	ldr	r0, [pc, #0]	@ (8009774 <_localeconv_r+0x4>)
 8009772:	4770      	bx	lr
 8009774:	2000015c 	.word	0x2000015c

08009778 <_close_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4d06      	ldr	r5, [pc, #24]	@ (8009794 <_close_r+0x1c>)
 800977c:	2300      	movs	r3, #0
 800977e:	4604      	mov	r4, r0
 8009780:	4608      	mov	r0, r1
 8009782:	602b      	str	r3, [r5, #0]
 8009784:	f7f8 fa12 	bl	8001bac <_close>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_close_r+0x1a>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_close_r+0x1a>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	20004f50 	.word	0x20004f50

08009798 <_reclaim_reent>:
 8009798:	4b29      	ldr	r3, [pc, #164]	@ (8009840 <_reclaim_reent+0xa8>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4283      	cmp	r3, r0
 800979e:	b570      	push	{r4, r5, r6, lr}
 80097a0:	4604      	mov	r4, r0
 80097a2:	d04b      	beq.n	800983c <_reclaim_reent+0xa4>
 80097a4:	69c3      	ldr	r3, [r0, #28]
 80097a6:	b1ab      	cbz	r3, 80097d4 <_reclaim_reent+0x3c>
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	b16b      	cbz	r3, 80097c8 <_reclaim_reent+0x30>
 80097ac:	2500      	movs	r5, #0
 80097ae:	69e3      	ldr	r3, [r4, #28]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	5959      	ldr	r1, [r3, r5]
 80097b4:	2900      	cmp	r1, #0
 80097b6:	d13b      	bne.n	8009830 <_reclaim_reent+0x98>
 80097b8:	3504      	adds	r5, #4
 80097ba:	2d80      	cmp	r5, #128	@ 0x80
 80097bc:	d1f7      	bne.n	80097ae <_reclaim_reent+0x16>
 80097be:	69e3      	ldr	r3, [r4, #28]
 80097c0:	4620      	mov	r0, r4
 80097c2:	68d9      	ldr	r1, [r3, #12]
 80097c4:	f000 ff04 	bl	800a5d0 <_free_r>
 80097c8:	69e3      	ldr	r3, [r4, #28]
 80097ca:	6819      	ldr	r1, [r3, #0]
 80097cc:	b111      	cbz	r1, 80097d4 <_reclaim_reent+0x3c>
 80097ce:	4620      	mov	r0, r4
 80097d0:	f000 fefe 	bl	800a5d0 <_free_r>
 80097d4:	6961      	ldr	r1, [r4, #20]
 80097d6:	b111      	cbz	r1, 80097de <_reclaim_reent+0x46>
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 fef9 	bl	800a5d0 <_free_r>
 80097de:	69e1      	ldr	r1, [r4, #28]
 80097e0:	b111      	cbz	r1, 80097e8 <_reclaim_reent+0x50>
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 fef4 	bl	800a5d0 <_free_r>
 80097e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80097ea:	b111      	cbz	r1, 80097f2 <_reclaim_reent+0x5a>
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 feef 	bl	800a5d0 <_free_r>
 80097f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097f4:	b111      	cbz	r1, 80097fc <_reclaim_reent+0x64>
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 feea 	bl	800a5d0 <_free_r>
 80097fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80097fe:	b111      	cbz	r1, 8009806 <_reclaim_reent+0x6e>
 8009800:	4620      	mov	r0, r4
 8009802:	f000 fee5 	bl	800a5d0 <_free_r>
 8009806:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009808:	b111      	cbz	r1, 8009810 <_reclaim_reent+0x78>
 800980a:	4620      	mov	r0, r4
 800980c:	f000 fee0 	bl	800a5d0 <_free_r>
 8009810:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009812:	b111      	cbz	r1, 800981a <_reclaim_reent+0x82>
 8009814:	4620      	mov	r0, r4
 8009816:	f000 fedb 	bl	800a5d0 <_free_r>
 800981a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800981c:	b111      	cbz	r1, 8009824 <_reclaim_reent+0x8c>
 800981e:	4620      	mov	r0, r4
 8009820:	f000 fed6 	bl	800a5d0 <_free_r>
 8009824:	6a23      	ldr	r3, [r4, #32]
 8009826:	b14b      	cbz	r3, 800983c <_reclaim_reent+0xa4>
 8009828:	4620      	mov	r0, r4
 800982a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800982e:	4718      	bx	r3
 8009830:	680e      	ldr	r6, [r1, #0]
 8009832:	4620      	mov	r0, r4
 8009834:	f000 fecc 	bl	800a5d0 <_free_r>
 8009838:	4631      	mov	r1, r6
 800983a:	e7bb      	b.n	80097b4 <_reclaim_reent+0x1c>
 800983c:	bd70      	pop	{r4, r5, r6, pc}
 800983e:	bf00      	nop
 8009840:	2000001c 	.word	0x2000001c

08009844 <_lseek_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	4d07      	ldr	r5, [pc, #28]	@ (8009864 <_lseek_r+0x20>)
 8009848:	4604      	mov	r4, r0
 800984a:	4608      	mov	r0, r1
 800984c:	4611      	mov	r1, r2
 800984e:	2200      	movs	r2, #0
 8009850:	602a      	str	r2, [r5, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	f7f8 f9d1 	bl	8001bfa <_lseek>
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	d102      	bne.n	8009862 <_lseek_r+0x1e>
 800985c:	682b      	ldr	r3, [r5, #0]
 800985e:	b103      	cbz	r3, 8009862 <_lseek_r+0x1e>
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	bd38      	pop	{r3, r4, r5, pc}
 8009864:	20004f50 	.word	0x20004f50

08009868 <_read_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d07      	ldr	r5, [pc, #28]	@ (8009888 <_read_r+0x20>)
 800986c:	4604      	mov	r4, r0
 800986e:	4608      	mov	r0, r1
 8009870:	4611      	mov	r1, r2
 8009872:	2200      	movs	r2, #0
 8009874:	602a      	str	r2, [r5, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	f7f8 f95f 	bl	8001b3a <_read>
 800987c:	1c43      	adds	r3, r0, #1
 800987e:	d102      	bne.n	8009886 <_read_r+0x1e>
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	b103      	cbz	r3, 8009886 <_read_r+0x1e>
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	bd38      	pop	{r3, r4, r5, pc}
 8009888:	20004f50 	.word	0x20004f50

0800988c <_write_r>:
 800988c:	b538      	push	{r3, r4, r5, lr}
 800988e:	4d07      	ldr	r5, [pc, #28]	@ (80098ac <_write_r+0x20>)
 8009890:	4604      	mov	r4, r0
 8009892:	4608      	mov	r0, r1
 8009894:	4611      	mov	r1, r2
 8009896:	2200      	movs	r2, #0
 8009898:	602a      	str	r2, [r5, #0]
 800989a:	461a      	mov	r2, r3
 800989c:	f7f8 f96a 	bl	8001b74 <_write>
 80098a0:	1c43      	adds	r3, r0, #1
 80098a2:	d102      	bne.n	80098aa <_write_r+0x1e>
 80098a4:	682b      	ldr	r3, [r5, #0]
 80098a6:	b103      	cbz	r3, 80098aa <_write_r+0x1e>
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	bd38      	pop	{r3, r4, r5, pc}
 80098ac:	20004f50 	.word	0x20004f50

080098b0 <__errno>:
 80098b0:	4b01      	ldr	r3, [pc, #4]	@ (80098b8 <__errno+0x8>)
 80098b2:	6818      	ldr	r0, [r3, #0]
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	2000001c 	.word	0x2000001c

080098bc <__libc_init_array>:
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	4d0d      	ldr	r5, [pc, #52]	@ (80098f4 <__libc_init_array+0x38>)
 80098c0:	4c0d      	ldr	r4, [pc, #52]	@ (80098f8 <__libc_init_array+0x3c>)
 80098c2:	1b64      	subs	r4, r4, r5
 80098c4:	10a4      	asrs	r4, r4, #2
 80098c6:	2600      	movs	r6, #0
 80098c8:	42a6      	cmp	r6, r4
 80098ca:	d109      	bne.n	80098e0 <__libc_init_array+0x24>
 80098cc:	4d0b      	ldr	r5, [pc, #44]	@ (80098fc <__libc_init_array+0x40>)
 80098ce:	4c0c      	ldr	r4, [pc, #48]	@ (8009900 <__libc_init_array+0x44>)
 80098d0:	f003 ffee 	bl	800d8b0 <_init>
 80098d4:	1b64      	subs	r4, r4, r5
 80098d6:	10a4      	asrs	r4, r4, #2
 80098d8:	2600      	movs	r6, #0
 80098da:	42a6      	cmp	r6, r4
 80098dc:	d105      	bne.n	80098ea <__libc_init_array+0x2e>
 80098de:	bd70      	pop	{r4, r5, r6, pc}
 80098e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098e4:	4798      	blx	r3
 80098e6:	3601      	adds	r6, #1
 80098e8:	e7ee      	b.n	80098c8 <__libc_init_array+0xc>
 80098ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ee:	4798      	blx	r3
 80098f0:	3601      	adds	r6, #1
 80098f2:	e7f2      	b.n	80098da <__libc_init_array+0x1e>
 80098f4:	0800de2c 	.word	0x0800de2c
 80098f8:	0800de2c 	.word	0x0800de2c
 80098fc:	0800de2c 	.word	0x0800de2c
 8009900:	0800de30 	.word	0x0800de30

08009904 <__retarget_lock_init_recursive>:
 8009904:	4770      	bx	lr

08009906 <__retarget_lock_acquire_recursive>:
 8009906:	4770      	bx	lr

08009908 <__retarget_lock_release_recursive>:
 8009908:	4770      	bx	lr

0800990a <memcpy>:
 800990a:	440a      	add	r2, r1
 800990c:	4291      	cmp	r1, r2
 800990e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009912:	d100      	bne.n	8009916 <memcpy+0xc>
 8009914:	4770      	bx	lr
 8009916:	b510      	push	{r4, lr}
 8009918:	f811 4b01 	ldrb.w	r4, [r1], #1
 800991c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009920:	4291      	cmp	r1, r2
 8009922:	d1f9      	bne.n	8009918 <memcpy+0xe>
 8009924:	bd10      	pop	{r4, pc}
	...

08009928 <nanf>:
 8009928:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009930 <nanf+0x8>
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	7fc00000 	.word	0x7fc00000

08009934 <quorem>:
 8009934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009938:	6903      	ldr	r3, [r0, #16]
 800993a:	690c      	ldr	r4, [r1, #16]
 800993c:	42a3      	cmp	r3, r4
 800993e:	4607      	mov	r7, r0
 8009940:	db7e      	blt.n	8009a40 <quorem+0x10c>
 8009942:	3c01      	subs	r4, #1
 8009944:	f101 0814 	add.w	r8, r1, #20
 8009948:	00a3      	lsls	r3, r4, #2
 800994a:	f100 0514 	add.w	r5, r0, #20
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009954:	9301      	str	r3, [sp, #4]
 8009956:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800995a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800995e:	3301      	adds	r3, #1
 8009960:	429a      	cmp	r2, r3
 8009962:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009966:	fbb2 f6f3 	udiv	r6, r2, r3
 800996a:	d32e      	bcc.n	80099ca <quorem+0x96>
 800996c:	f04f 0a00 	mov.w	sl, #0
 8009970:	46c4      	mov	ip, r8
 8009972:	46ae      	mov	lr, r5
 8009974:	46d3      	mov	fp, sl
 8009976:	f85c 3b04 	ldr.w	r3, [ip], #4
 800997a:	b298      	uxth	r0, r3
 800997c:	fb06 a000 	mla	r0, r6, r0, sl
 8009980:	0c02      	lsrs	r2, r0, #16
 8009982:	0c1b      	lsrs	r3, r3, #16
 8009984:	fb06 2303 	mla	r3, r6, r3, r2
 8009988:	f8de 2000 	ldr.w	r2, [lr]
 800998c:	b280      	uxth	r0, r0
 800998e:	b292      	uxth	r2, r2
 8009990:	1a12      	subs	r2, r2, r0
 8009992:	445a      	add	r2, fp
 8009994:	f8de 0000 	ldr.w	r0, [lr]
 8009998:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800999c:	b29b      	uxth	r3, r3
 800999e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80099a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80099a6:	b292      	uxth	r2, r2
 80099a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80099ac:	45e1      	cmp	r9, ip
 80099ae:	f84e 2b04 	str.w	r2, [lr], #4
 80099b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80099b6:	d2de      	bcs.n	8009976 <quorem+0x42>
 80099b8:	9b00      	ldr	r3, [sp, #0]
 80099ba:	58eb      	ldr	r3, [r5, r3]
 80099bc:	b92b      	cbnz	r3, 80099ca <quorem+0x96>
 80099be:	9b01      	ldr	r3, [sp, #4]
 80099c0:	3b04      	subs	r3, #4
 80099c2:	429d      	cmp	r5, r3
 80099c4:	461a      	mov	r2, r3
 80099c6:	d32f      	bcc.n	8009a28 <quorem+0xf4>
 80099c8:	613c      	str	r4, [r7, #16]
 80099ca:	4638      	mov	r0, r7
 80099cc:	f001 f9c4 	bl	800ad58 <__mcmp>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	db25      	blt.n	8009a20 <quorem+0xec>
 80099d4:	4629      	mov	r1, r5
 80099d6:	2000      	movs	r0, #0
 80099d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80099dc:	f8d1 c000 	ldr.w	ip, [r1]
 80099e0:	fa1f fe82 	uxth.w	lr, r2
 80099e4:	fa1f f38c 	uxth.w	r3, ip
 80099e8:	eba3 030e 	sub.w	r3, r3, lr
 80099ec:	4403      	add	r3, r0
 80099ee:	0c12      	lsrs	r2, r2, #16
 80099f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80099f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099fe:	45c1      	cmp	r9, r8
 8009a00:	f841 3b04 	str.w	r3, [r1], #4
 8009a04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009a08:	d2e6      	bcs.n	80099d8 <quorem+0xa4>
 8009a0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a12:	b922      	cbnz	r2, 8009a1e <quorem+0xea>
 8009a14:	3b04      	subs	r3, #4
 8009a16:	429d      	cmp	r5, r3
 8009a18:	461a      	mov	r2, r3
 8009a1a:	d30b      	bcc.n	8009a34 <quorem+0x100>
 8009a1c:	613c      	str	r4, [r7, #16]
 8009a1e:	3601      	adds	r6, #1
 8009a20:	4630      	mov	r0, r6
 8009a22:	b003      	add	sp, #12
 8009a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a28:	6812      	ldr	r2, [r2, #0]
 8009a2a:	3b04      	subs	r3, #4
 8009a2c:	2a00      	cmp	r2, #0
 8009a2e:	d1cb      	bne.n	80099c8 <quorem+0x94>
 8009a30:	3c01      	subs	r4, #1
 8009a32:	e7c6      	b.n	80099c2 <quorem+0x8e>
 8009a34:	6812      	ldr	r2, [r2, #0]
 8009a36:	3b04      	subs	r3, #4
 8009a38:	2a00      	cmp	r2, #0
 8009a3a:	d1ef      	bne.n	8009a1c <quorem+0xe8>
 8009a3c:	3c01      	subs	r4, #1
 8009a3e:	e7ea      	b.n	8009a16 <quorem+0xe2>
 8009a40:	2000      	movs	r0, #0
 8009a42:	e7ee      	b.n	8009a22 <quorem+0xee>
 8009a44:	0000      	movs	r0, r0
	...

08009a48 <_dtoa_r>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	69c7      	ldr	r7, [r0, #28]
 8009a4e:	b099      	sub	sp, #100	@ 0x64
 8009a50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a54:	ec55 4b10 	vmov	r4, r5, d0
 8009a58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009a5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a5c:	4683      	mov	fp, r0
 8009a5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a62:	b97f      	cbnz	r7, 8009a84 <_dtoa_r+0x3c>
 8009a64:	2010      	movs	r0, #16
 8009a66:	f000 fdfd 	bl	800a664 <malloc>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009a70:	b920      	cbnz	r0, 8009a7c <_dtoa_r+0x34>
 8009a72:	4ba7      	ldr	r3, [pc, #668]	@ (8009d10 <_dtoa_r+0x2c8>)
 8009a74:	21ef      	movs	r1, #239	@ 0xef
 8009a76:	48a7      	ldr	r0, [pc, #668]	@ (8009d14 <_dtoa_r+0x2cc>)
 8009a78:	f002 ffb6 	bl	800c9e8 <__assert_func>
 8009a7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a80:	6007      	str	r7, [r0, #0]
 8009a82:	60c7      	str	r7, [r0, #12]
 8009a84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a88:	6819      	ldr	r1, [r3, #0]
 8009a8a:	b159      	cbz	r1, 8009aa4 <_dtoa_r+0x5c>
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	604a      	str	r2, [r1, #4]
 8009a90:	2301      	movs	r3, #1
 8009a92:	4093      	lsls	r3, r2
 8009a94:	608b      	str	r3, [r1, #8]
 8009a96:	4658      	mov	r0, fp
 8009a98:	f000 feda 	bl	800a850 <_Bfree>
 8009a9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	1e2b      	subs	r3, r5, #0
 8009aa6:	bfb9      	ittee	lt
 8009aa8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009aac:	9303      	strlt	r3, [sp, #12]
 8009aae:	2300      	movge	r3, #0
 8009ab0:	6033      	strge	r3, [r6, #0]
 8009ab2:	9f03      	ldr	r7, [sp, #12]
 8009ab4:	4b98      	ldr	r3, [pc, #608]	@ (8009d18 <_dtoa_r+0x2d0>)
 8009ab6:	bfbc      	itt	lt
 8009ab8:	2201      	movlt	r2, #1
 8009aba:	6032      	strlt	r2, [r6, #0]
 8009abc:	43bb      	bics	r3, r7
 8009abe:	d112      	bne.n	8009ae6 <_dtoa_r+0x9e>
 8009ac0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ac2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009acc:	4323      	orrs	r3, r4
 8009ace:	f000 854d 	beq.w	800a56c <_dtoa_r+0xb24>
 8009ad2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ad4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009d2c <_dtoa_r+0x2e4>
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 854f 	beq.w	800a57c <_dtoa_r+0xb34>
 8009ade:	f10a 0303 	add.w	r3, sl, #3
 8009ae2:	f000 bd49 	b.w	800a578 <_dtoa_r+0xb30>
 8009ae6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009aea:	2200      	movs	r2, #0
 8009aec:	ec51 0b17 	vmov	r0, r1, d7
 8009af0:	2300      	movs	r3, #0
 8009af2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009af6:	f7f6 ffef 	bl	8000ad8 <__aeabi_dcmpeq>
 8009afa:	4680      	mov	r8, r0
 8009afc:	b158      	cbz	r0, 8009b16 <_dtoa_r+0xce>
 8009afe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009b00:	2301      	movs	r3, #1
 8009b02:	6013      	str	r3, [r2, #0]
 8009b04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b06:	b113      	cbz	r3, 8009b0e <_dtoa_r+0xc6>
 8009b08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009b0a:	4b84      	ldr	r3, [pc, #528]	@ (8009d1c <_dtoa_r+0x2d4>)
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009d30 <_dtoa_r+0x2e8>
 8009b12:	f000 bd33 	b.w	800a57c <_dtoa_r+0xb34>
 8009b16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009b1a:	aa16      	add	r2, sp, #88	@ 0x58
 8009b1c:	a917      	add	r1, sp, #92	@ 0x5c
 8009b1e:	4658      	mov	r0, fp
 8009b20:	f001 fa3a 	bl	800af98 <__d2b>
 8009b24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009b28:	4681      	mov	r9, r0
 8009b2a:	2e00      	cmp	r6, #0
 8009b2c:	d077      	beq.n	8009c1e <_dtoa_r+0x1d6>
 8009b2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009b40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009b44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009b48:	4619      	mov	r1, r3
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	4b74      	ldr	r3, [pc, #464]	@ (8009d20 <_dtoa_r+0x2d8>)
 8009b4e:	f7f6 fba3 	bl	8000298 <__aeabi_dsub>
 8009b52:	a369      	add	r3, pc, #420	@ (adr r3, 8009cf8 <_dtoa_r+0x2b0>)
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f7f6 fd56 	bl	8000608 <__aeabi_dmul>
 8009b5c:	a368      	add	r3, pc, #416	@ (adr r3, 8009d00 <_dtoa_r+0x2b8>)
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f7f6 fb9b 	bl	800029c <__adddf3>
 8009b66:	4604      	mov	r4, r0
 8009b68:	4630      	mov	r0, r6
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	f7f6 fce2 	bl	8000534 <__aeabi_i2d>
 8009b70:	a365      	add	r3, pc, #404	@ (adr r3, 8009d08 <_dtoa_r+0x2c0>)
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	f7f6 fd47 	bl	8000608 <__aeabi_dmul>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4620      	mov	r0, r4
 8009b80:	4629      	mov	r1, r5
 8009b82:	f7f6 fb8b 	bl	800029c <__adddf3>
 8009b86:	4604      	mov	r4, r0
 8009b88:	460d      	mov	r5, r1
 8009b8a:	f7f6 ffed 	bl	8000b68 <__aeabi_d2iz>
 8009b8e:	2200      	movs	r2, #0
 8009b90:	4607      	mov	r7, r0
 8009b92:	2300      	movs	r3, #0
 8009b94:	4620      	mov	r0, r4
 8009b96:	4629      	mov	r1, r5
 8009b98:	f7f6 ffa8 	bl	8000aec <__aeabi_dcmplt>
 8009b9c:	b140      	cbz	r0, 8009bb0 <_dtoa_r+0x168>
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	f7f6 fcc8 	bl	8000534 <__aeabi_i2d>
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	462b      	mov	r3, r5
 8009ba8:	f7f6 ff96 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bac:	b900      	cbnz	r0, 8009bb0 <_dtoa_r+0x168>
 8009bae:	3f01      	subs	r7, #1
 8009bb0:	2f16      	cmp	r7, #22
 8009bb2:	d851      	bhi.n	8009c58 <_dtoa_r+0x210>
 8009bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8009d24 <_dtoa_r+0x2dc>)
 8009bb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bc2:	f7f6 ff93 	bl	8000aec <__aeabi_dcmplt>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d048      	beq.n	8009c5c <_dtoa_r+0x214>
 8009bca:	3f01      	subs	r7, #1
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9312      	str	r3, [sp, #72]	@ 0x48
 8009bd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009bd2:	1b9b      	subs	r3, r3, r6
 8009bd4:	1e5a      	subs	r2, r3, #1
 8009bd6:	bf44      	itt	mi
 8009bd8:	f1c3 0801 	rsbmi	r8, r3, #1
 8009bdc:	2300      	movmi	r3, #0
 8009bde:	9208      	str	r2, [sp, #32]
 8009be0:	bf54      	ite	pl
 8009be2:	f04f 0800 	movpl.w	r8, #0
 8009be6:	9308      	strmi	r3, [sp, #32]
 8009be8:	2f00      	cmp	r7, #0
 8009bea:	db39      	blt.n	8009c60 <_dtoa_r+0x218>
 8009bec:	9b08      	ldr	r3, [sp, #32]
 8009bee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009bf0:	443b      	add	r3, r7
 8009bf2:	9308      	str	r3, [sp, #32]
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfa:	2b09      	cmp	r3, #9
 8009bfc:	d864      	bhi.n	8009cc8 <_dtoa_r+0x280>
 8009bfe:	2b05      	cmp	r3, #5
 8009c00:	bfc4      	itt	gt
 8009c02:	3b04      	subgt	r3, #4
 8009c04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c08:	f1a3 0302 	sub.w	r3, r3, #2
 8009c0c:	bfcc      	ite	gt
 8009c0e:	2400      	movgt	r4, #0
 8009c10:	2401      	movle	r4, #1
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	d863      	bhi.n	8009cde <_dtoa_r+0x296>
 8009c16:	e8df f003 	tbb	[pc, r3]
 8009c1a:	372a      	.short	0x372a
 8009c1c:	5535      	.short	0x5535
 8009c1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009c22:	441e      	add	r6, r3
 8009c24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009c28:	2b20      	cmp	r3, #32
 8009c2a:	bfc1      	itttt	gt
 8009c2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009c30:	409f      	lslgt	r7, r3
 8009c32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009c36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009c3a:	bfd6      	itet	le
 8009c3c:	f1c3 0320 	rsble	r3, r3, #32
 8009c40:	ea47 0003 	orrgt.w	r0, r7, r3
 8009c44:	fa04 f003 	lslle.w	r0, r4, r3
 8009c48:	f7f6 fc64 	bl	8000514 <__aeabi_ui2d>
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009c52:	3e01      	subs	r6, #1
 8009c54:	9214      	str	r2, [sp, #80]	@ 0x50
 8009c56:	e777      	b.n	8009b48 <_dtoa_r+0x100>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e7b8      	b.n	8009bce <_dtoa_r+0x186>
 8009c5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009c5e:	e7b7      	b.n	8009bd0 <_dtoa_r+0x188>
 8009c60:	427b      	negs	r3, r7
 8009c62:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c64:	2300      	movs	r3, #0
 8009c66:	eba8 0807 	sub.w	r8, r8, r7
 8009c6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c6c:	e7c4      	b.n	8009bf8 <_dtoa_r+0x1b0>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dc35      	bgt.n	8009ce4 <_dtoa_r+0x29c>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	9307      	str	r3, [sp, #28]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c82:	e00b      	b.n	8009c9c <_dtoa_r+0x254>
 8009c84:	2301      	movs	r3, #1
 8009c86:	e7f3      	b.n	8009c70 <_dtoa_r+0x228>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c8e:	18fb      	adds	r3, r7, r3
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	9307      	str	r3, [sp, #28]
 8009c98:	bfb8      	it	lt
 8009c9a:	2301      	movlt	r3, #1
 8009c9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	2204      	movs	r2, #4
 8009ca4:	f102 0514 	add.w	r5, r2, #20
 8009ca8:	429d      	cmp	r5, r3
 8009caa:	d91f      	bls.n	8009cec <_dtoa_r+0x2a4>
 8009cac:	6041      	str	r1, [r0, #4]
 8009cae:	4658      	mov	r0, fp
 8009cb0:	f000 fd8e 	bl	800a7d0 <_Balloc>
 8009cb4:	4682      	mov	sl, r0
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d13c      	bne.n	8009d34 <_dtoa_r+0x2ec>
 8009cba:	4b1b      	ldr	r3, [pc, #108]	@ (8009d28 <_dtoa_r+0x2e0>)
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8009cc2:	e6d8      	b.n	8009a76 <_dtoa_r+0x2e>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e7e0      	b.n	8009c8a <_dtoa_r+0x242>
 8009cc8:	2401      	movs	r4, #1
 8009cca:	2300      	movs	r3, #0
 8009ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	9307      	str	r3, [sp, #28]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2312      	movs	r3, #18
 8009cdc:	e7d0      	b.n	8009c80 <_dtoa_r+0x238>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ce2:	e7f5      	b.n	8009cd0 <_dtoa_r+0x288>
 8009ce4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	9307      	str	r3, [sp, #28]
 8009cea:	e7d7      	b.n	8009c9c <_dtoa_r+0x254>
 8009cec:	3101      	adds	r1, #1
 8009cee:	0052      	lsls	r2, r2, #1
 8009cf0:	e7d8      	b.n	8009ca4 <_dtoa_r+0x25c>
 8009cf2:	bf00      	nop
 8009cf4:	f3af 8000 	nop.w
 8009cf8:	636f4361 	.word	0x636f4361
 8009cfc:	3fd287a7 	.word	0x3fd287a7
 8009d00:	8b60c8b3 	.word	0x8b60c8b3
 8009d04:	3fc68a28 	.word	0x3fc68a28
 8009d08:	509f79fb 	.word	0x509f79fb
 8009d0c:	3fd34413 	.word	0x3fd34413
 8009d10:	0800da1c 	.word	0x0800da1c
 8009d14:	0800da33 	.word	0x0800da33
 8009d18:	7ff00000 	.word	0x7ff00000
 8009d1c:	0800dd79 	.word	0x0800dd79
 8009d20:	3ff80000 	.word	0x3ff80000
 8009d24:	0800db30 	.word	0x0800db30
 8009d28:	0800da8b 	.word	0x0800da8b
 8009d2c:	0800da18 	.word	0x0800da18
 8009d30:	0800dd78 	.word	0x0800dd78
 8009d34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d38:	6018      	str	r0, [r3, #0]
 8009d3a:	9b07      	ldr	r3, [sp, #28]
 8009d3c:	2b0e      	cmp	r3, #14
 8009d3e:	f200 80a4 	bhi.w	8009e8a <_dtoa_r+0x442>
 8009d42:	2c00      	cmp	r4, #0
 8009d44:	f000 80a1 	beq.w	8009e8a <_dtoa_r+0x442>
 8009d48:	2f00      	cmp	r7, #0
 8009d4a:	dd33      	ble.n	8009db4 <_dtoa_r+0x36c>
 8009d4c:	4bad      	ldr	r3, [pc, #692]	@ (800a004 <_dtoa_r+0x5bc>)
 8009d4e:	f007 020f 	and.w	r2, r7, #15
 8009d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d56:	ed93 7b00 	vldr	d7, [r3]
 8009d5a:	05f8      	lsls	r0, r7, #23
 8009d5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009d64:	d516      	bpl.n	8009d94 <_dtoa_r+0x34c>
 8009d66:	4ba8      	ldr	r3, [pc, #672]	@ (800a008 <_dtoa_r+0x5c0>)
 8009d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d70:	f7f6 fd74 	bl	800085c <__aeabi_ddiv>
 8009d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d78:	f004 040f 	and.w	r4, r4, #15
 8009d7c:	2603      	movs	r6, #3
 8009d7e:	4da2      	ldr	r5, [pc, #648]	@ (800a008 <_dtoa_r+0x5c0>)
 8009d80:	b954      	cbnz	r4, 8009d98 <_dtoa_r+0x350>
 8009d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d8a:	f7f6 fd67 	bl	800085c <__aeabi_ddiv>
 8009d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d92:	e028      	b.n	8009de6 <_dtoa_r+0x39e>
 8009d94:	2602      	movs	r6, #2
 8009d96:	e7f2      	b.n	8009d7e <_dtoa_r+0x336>
 8009d98:	07e1      	lsls	r1, r4, #31
 8009d9a:	d508      	bpl.n	8009dae <_dtoa_r+0x366>
 8009d9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009da0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009da4:	f7f6 fc30 	bl	8000608 <__aeabi_dmul>
 8009da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dac:	3601      	adds	r6, #1
 8009dae:	1064      	asrs	r4, r4, #1
 8009db0:	3508      	adds	r5, #8
 8009db2:	e7e5      	b.n	8009d80 <_dtoa_r+0x338>
 8009db4:	f000 80d2 	beq.w	8009f5c <_dtoa_r+0x514>
 8009db8:	427c      	negs	r4, r7
 8009dba:	4b92      	ldr	r3, [pc, #584]	@ (800a004 <_dtoa_r+0x5bc>)
 8009dbc:	4d92      	ldr	r5, [pc, #584]	@ (800a008 <_dtoa_r+0x5c0>)
 8009dbe:	f004 020f 	and.w	r2, r4, #15
 8009dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dce:	f7f6 fc1b 	bl	8000608 <__aeabi_dmul>
 8009dd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dd6:	1124      	asrs	r4, r4, #4
 8009dd8:	2300      	movs	r3, #0
 8009dda:	2602      	movs	r6, #2
 8009ddc:	2c00      	cmp	r4, #0
 8009dde:	f040 80b2 	bne.w	8009f46 <_dtoa_r+0x4fe>
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1d3      	bne.n	8009d8e <_dtoa_r+0x346>
 8009de6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009de8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 80b7 	beq.w	8009f60 <_dtoa_r+0x518>
 8009df2:	4b86      	ldr	r3, [pc, #536]	@ (800a00c <_dtoa_r+0x5c4>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	4620      	mov	r0, r4
 8009df8:	4629      	mov	r1, r5
 8009dfa:	f7f6 fe77 	bl	8000aec <__aeabi_dcmplt>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f000 80ae 	beq.w	8009f60 <_dtoa_r+0x518>
 8009e04:	9b07      	ldr	r3, [sp, #28]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 80aa 	beq.w	8009f60 <_dtoa_r+0x518>
 8009e0c:	9b00      	ldr	r3, [sp, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	dd37      	ble.n	8009e82 <_dtoa_r+0x43a>
 8009e12:	1e7b      	subs	r3, r7, #1
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	4620      	mov	r0, r4
 8009e18:	4b7d      	ldr	r3, [pc, #500]	@ (800a010 <_dtoa_r+0x5c8>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f7f6 fbf3 	bl	8000608 <__aeabi_dmul>
 8009e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e26:	9c00      	ldr	r4, [sp, #0]
 8009e28:	3601      	adds	r6, #1
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f7f6 fb82 	bl	8000534 <__aeabi_i2d>
 8009e30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e34:	f7f6 fbe8 	bl	8000608 <__aeabi_dmul>
 8009e38:	4b76      	ldr	r3, [pc, #472]	@ (800a014 <_dtoa_r+0x5cc>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f7f6 fa2e 	bl	800029c <__adddf3>
 8009e40:	4605      	mov	r5, r0
 8009e42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009e46:	2c00      	cmp	r4, #0
 8009e48:	f040 808d 	bne.w	8009f66 <_dtoa_r+0x51e>
 8009e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e50:	4b71      	ldr	r3, [pc, #452]	@ (800a018 <_dtoa_r+0x5d0>)
 8009e52:	2200      	movs	r2, #0
 8009e54:	f7f6 fa20 	bl	8000298 <__aeabi_dsub>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e60:	462a      	mov	r2, r5
 8009e62:	4633      	mov	r3, r6
 8009e64:	f7f6 fe60 	bl	8000b28 <__aeabi_dcmpgt>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	f040 828b 	bne.w	800a384 <_dtoa_r+0x93c>
 8009e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e72:	462a      	mov	r2, r5
 8009e74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009e78:	f7f6 fe38 	bl	8000aec <__aeabi_dcmplt>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	f040 8128 	bne.w	800a0d2 <_dtoa_r+0x68a>
 8009e82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009e86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009e8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f2c0 815a 	blt.w	800a146 <_dtoa_r+0x6fe>
 8009e92:	2f0e      	cmp	r7, #14
 8009e94:	f300 8157 	bgt.w	800a146 <_dtoa_r+0x6fe>
 8009e98:	4b5a      	ldr	r3, [pc, #360]	@ (800a004 <_dtoa_r+0x5bc>)
 8009e9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e9e:	ed93 7b00 	vldr	d7, [r3]
 8009ea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	ed8d 7b00 	vstr	d7, [sp]
 8009eaa:	da03      	bge.n	8009eb4 <_dtoa_r+0x46c>
 8009eac:	9b07      	ldr	r3, [sp, #28]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f340 8101 	ble.w	800a0b6 <_dtoa_r+0x66e>
 8009eb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009eb8:	4656      	mov	r6, sl
 8009eba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	f7f6 fccb 	bl	800085c <__aeabi_ddiv>
 8009ec6:	f7f6 fe4f 	bl	8000b68 <__aeabi_d2iz>
 8009eca:	4680      	mov	r8, r0
 8009ecc:	f7f6 fb32 	bl	8000534 <__aeabi_i2d>
 8009ed0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ed4:	f7f6 fb98 	bl	8000608 <__aeabi_dmul>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4620      	mov	r0, r4
 8009ede:	4629      	mov	r1, r5
 8009ee0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ee4:	f7f6 f9d8 	bl	8000298 <__aeabi_dsub>
 8009ee8:	f806 4b01 	strb.w	r4, [r6], #1
 8009eec:	9d07      	ldr	r5, [sp, #28]
 8009eee:	eba6 040a 	sub.w	r4, r6, sl
 8009ef2:	42a5      	cmp	r5, r4
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	f040 8117 	bne.w	800a12a <_dtoa_r+0x6e2>
 8009efc:	f7f6 f9ce 	bl	800029c <__adddf3>
 8009f00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f04:	4604      	mov	r4, r0
 8009f06:	460d      	mov	r5, r1
 8009f08:	f7f6 fe0e 	bl	8000b28 <__aeabi_dcmpgt>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f040 80f9 	bne.w	800a104 <_dtoa_r+0x6bc>
 8009f12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f16:	4620      	mov	r0, r4
 8009f18:	4629      	mov	r1, r5
 8009f1a:	f7f6 fddd 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f1e:	b118      	cbz	r0, 8009f28 <_dtoa_r+0x4e0>
 8009f20:	f018 0f01 	tst.w	r8, #1
 8009f24:	f040 80ee 	bne.w	800a104 <_dtoa_r+0x6bc>
 8009f28:	4649      	mov	r1, r9
 8009f2a:	4658      	mov	r0, fp
 8009f2c:	f000 fc90 	bl	800a850 <_Bfree>
 8009f30:	2300      	movs	r3, #0
 8009f32:	7033      	strb	r3, [r6, #0]
 8009f34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f36:	3701      	adds	r7, #1
 8009f38:	601f      	str	r7, [r3, #0]
 8009f3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 831d 	beq.w	800a57c <_dtoa_r+0xb34>
 8009f42:	601e      	str	r6, [r3, #0]
 8009f44:	e31a      	b.n	800a57c <_dtoa_r+0xb34>
 8009f46:	07e2      	lsls	r2, r4, #31
 8009f48:	d505      	bpl.n	8009f56 <_dtoa_r+0x50e>
 8009f4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f4e:	f7f6 fb5b 	bl	8000608 <__aeabi_dmul>
 8009f52:	3601      	adds	r6, #1
 8009f54:	2301      	movs	r3, #1
 8009f56:	1064      	asrs	r4, r4, #1
 8009f58:	3508      	adds	r5, #8
 8009f5a:	e73f      	b.n	8009ddc <_dtoa_r+0x394>
 8009f5c:	2602      	movs	r6, #2
 8009f5e:	e742      	b.n	8009de6 <_dtoa_r+0x39e>
 8009f60:	9c07      	ldr	r4, [sp, #28]
 8009f62:	9704      	str	r7, [sp, #16]
 8009f64:	e761      	b.n	8009e2a <_dtoa_r+0x3e2>
 8009f66:	4b27      	ldr	r3, [pc, #156]	@ (800a004 <_dtoa_r+0x5bc>)
 8009f68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f72:	4454      	add	r4, sl
 8009f74:	2900      	cmp	r1, #0
 8009f76:	d053      	beq.n	800a020 <_dtoa_r+0x5d8>
 8009f78:	4928      	ldr	r1, [pc, #160]	@ (800a01c <_dtoa_r+0x5d4>)
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	f7f6 fc6e 	bl	800085c <__aeabi_ddiv>
 8009f80:	4633      	mov	r3, r6
 8009f82:	462a      	mov	r2, r5
 8009f84:	f7f6 f988 	bl	8000298 <__aeabi_dsub>
 8009f88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f8c:	4656      	mov	r6, sl
 8009f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f92:	f7f6 fde9 	bl	8000b68 <__aeabi_d2iz>
 8009f96:	4605      	mov	r5, r0
 8009f98:	f7f6 facc 	bl	8000534 <__aeabi_i2d>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fa4:	f7f6 f978 	bl	8000298 <__aeabi_dsub>
 8009fa8:	3530      	adds	r5, #48	@ 0x30
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fb2:	f806 5b01 	strb.w	r5, [r6], #1
 8009fb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fba:	f7f6 fd97 	bl	8000aec <__aeabi_dcmplt>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d171      	bne.n	800a0a6 <_dtoa_r+0x65e>
 8009fc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fc6:	4911      	ldr	r1, [pc, #68]	@ (800a00c <_dtoa_r+0x5c4>)
 8009fc8:	2000      	movs	r0, #0
 8009fca:	f7f6 f965 	bl	8000298 <__aeabi_dsub>
 8009fce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fd2:	f7f6 fd8b 	bl	8000aec <__aeabi_dcmplt>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	f040 8095 	bne.w	800a106 <_dtoa_r+0x6be>
 8009fdc:	42a6      	cmp	r6, r4
 8009fde:	f43f af50 	beq.w	8009e82 <_dtoa_r+0x43a>
 8009fe2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fe6:	4b0a      	ldr	r3, [pc, #40]	@ (800a010 <_dtoa_r+0x5c8>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f7f6 fb0d 	bl	8000608 <__aeabi_dmul>
 8009fee:	4b08      	ldr	r3, [pc, #32]	@ (800a010 <_dtoa_r+0x5c8>)
 8009ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ffa:	f7f6 fb05 	bl	8000608 <__aeabi_dmul>
 8009ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a002:	e7c4      	b.n	8009f8e <_dtoa_r+0x546>
 800a004:	0800db30 	.word	0x0800db30
 800a008:	0800db08 	.word	0x0800db08
 800a00c:	3ff00000 	.word	0x3ff00000
 800a010:	40240000 	.word	0x40240000
 800a014:	401c0000 	.word	0x401c0000
 800a018:	40140000 	.word	0x40140000
 800a01c:	3fe00000 	.word	0x3fe00000
 800a020:	4631      	mov	r1, r6
 800a022:	4628      	mov	r0, r5
 800a024:	f7f6 faf0 	bl	8000608 <__aeabi_dmul>
 800a028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a02c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a02e:	4656      	mov	r6, sl
 800a030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a034:	f7f6 fd98 	bl	8000b68 <__aeabi_d2iz>
 800a038:	4605      	mov	r5, r0
 800a03a:	f7f6 fa7b 	bl	8000534 <__aeabi_i2d>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a046:	f7f6 f927 	bl	8000298 <__aeabi_dsub>
 800a04a:	3530      	adds	r5, #48	@ 0x30
 800a04c:	f806 5b01 	strb.w	r5, [r6], #1
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	42a6      	cmp	r6, r4
 800a056:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a05a:	f04f 0200 	mov.w	r2, #0
 800a05e:	d124      	bne.n	800a0aa <_dtoa_r+0x662>
 800a060:	4bac      	ldr	r3, [pc, #688]	@ (800a314 <_dtoa_r+0x8cc>)
 800a062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a066:	f7f6 f919 	bl	800029c <__adddf3>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a072:	f7f6 fd59 	bl	8000b28 <__aeabi_dcmpgt>
 800a076:	2800      	cmp	r0, #0
 800a078:	d145      	bne.n	800a106 <_dtoa_r+0x6be>
 800a07a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a07e:	49a5      	ldr	r1, [pc, #660]	@ (800a314 <_dtoa_r+0x8cc>)
 800a080:	2000      	movs	r0, #0
 800a082:	f7f6 f909 	bl	8000298 <__aeabi_dsub>
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08e:	f7f6 fd2d 	bl	8000aec <__aeabi_dcmplt>
 800a092:	2800      	cmp	r0, #0
 800a094:	f43f aef5 	beq.w	8009e82 <_dtoa_r+0x43a>
 800a098:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a09a:	1e73      	subs	r3, r6, #1
 800a09c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a09e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a0a2:	2b30      	cmp	r3, #48	@ 0x30
 800a0a4:	d0f8      	beq.n	800a098 <_dtoa_r+0x650>
 800a0a6:	9f04      	ldr	r7, [sp, #16]
 800a0a8:	e73e      	b.n	8009f28 <_dtoa_r+0x4e0>
 800a0aa:	4b9b      	ldr	r3, [pc, #620]	@ (800a318 <_dtoa_r+0x8d0>)
 800a0ac:	f7f6 faac 	bl	8000608 <__aeabi_dmul>
 800a0b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0b4:	e7bc      	b.n	800a030 <_dtoa_r+0x5e8>
 800a0b6:	d10c      	bne.n	800a0d2 <_dtoa_r+0x68a>
 800a0b8:	4b98      	ldr	r3, [pc, #608]	@ (800a31c <_dtoa_r+0x8d4>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0c0:	f7f6 faa2 	bl	8000608 <__aeabi_dmul>
 800a0c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0c8:	f7f6 fd24 	bl	8000b14 <__aeabi_dcmpge>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	f000 8157 	beq.w	800a380 <_dtoa_r+0x938>
 800a0d2:	2400      	movs	r4, #0
 800a0d4:	4625      	mov	r5, r4
 800a0d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0d8:	43db      	mvns	r3, r3
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	4656      	mov	r6, sl
 800a0de:	2700      	movs	r7, #0
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4658      	mov	r0, fp
 800a0e4:	f000 fbb4 	bl	800a850 <_Bfree>
 800a0e8:	2d00      	cmp	r5, #0
 800a0ea:	d0dc      	beq.n	800a0a6 <_dtoa_r+0x65e>
 800a0ec:	b12f      	cbz	r7, 800a0fa <_dtoa_r+0x6b2>
 800a0ee:	42af      	cmp	r7, r5
 800a0f0:	d003      	beq.n	800a0fa <_dtoa_r+0x6b2>
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	4658      	mov	r0, fp
 800a0f6:	f000 fbab 	bl	800a850 <_Bfree>
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	4658      	mov	r0, fp
 800a0fe:	f000 fba7 	bl	800a850 <_Bfree>
 800a102:	e7d0      	b.n	800a0a6 <_dtoa_r+0x65e>
 800a104:	9704      	str	r7, [sp, #16]
 800a106:	4633      	mov	r3, r6
 800a108:	461e      	mov	r6, r3
 800a10a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a10e:	2a39      	cmp	r2, #57	@ 0x39
 800a110:	d107      	bne.n	800a122 <_dtoa_r+0x6da>
 800a112:	459a      	cmp	sl, r3
 800a114:	d1f8      	bne.n	800a108 <_dtoa_r+0x6c0>
 800a116:	9a04      	ldr	r2, [sp, #16]
 800a118:	3201      	adds	r2, #1
 800a11a:	9204      	str	r2, [sp, #16]
 800a11c:	2230      	movs	r2, #48	@ 0x30
 800a11e:	f88a 2000 	strb.w	r2, [sl]
 800a122:	781a      	ldrb	r2, [r3, #0]
 800a124:	3201      	adds	r2, #1
 800a126:	701a      	strb	r2, [r3, #0]
 800a128:	e7bd      	b.n	800a0a6 <_dtoa_r+0x65e>
 800a12a:	4b7b      	ldr	r3, [pc, #492]	@ (800a318 <_dtoa_r+0x8d0>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	f7f6 fa6b 	bl	8000608 <__aeabi_dmul>
 800a132:	2200      	movs	r2, #0
 800a134:	2300      	movs	r3, #0
 800a136:	4604      	mov	r4, r0
 800a138:	460d      	mov	r5, r1
 800a13a:	f7f6 fccd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a13e:	2800      	cmp	r0, #0
 800a140:	f43f aebb 	beq.w	8009eba <_dtoa_r+0x472>
 800a144:	e6f0      	b.n	8009f28 <_dtoa_r+0x4e0>
 800a146:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a148:	2a00      	cmp	r2, #0
 800a14a:	f000 80db 	beq.w	800a304 <_dtoa_r+0x8bc>
 800a14e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a150:	2a01      	cmp	r2, #1
 800a152:	f300 80bf 	bgt.w	800a2d4 <_dtoa_r+0x88c>
 800a156:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a158:	2a00      	cmp	r2, #0
 800a15a:	f000 80b7 	beq.w	800a2cc <_dtoa_r+0x884>
 800a15e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a162:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a164:	4646      	mov	r6, r8
 800a166:	9a08      	ldr	r2, [sp, #32]
 800a168:	2101      	movs	r1, #1
 800a16a:	441a      	add	r2, r3
 800a16c:	4658      	mov	r0, fp
 800a16e:	4498      	add	r8, r3
 800a170:	9208      	str	r2, [sp, #32]
 800a172:	f000 fc6b 	bl	800aa4c <__i2b>
 800a176:	4605      	mov	r5, r0
 800a178:	b15e      	cbz	r6, 800a192 <_dtoa_r+0x74a>
 800a17a:	9b08      	ldr	r3, [sp, #32]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	dd08      	ble.n	800a192 <_dtoa_r+0x74a>
 800a180:	42b3      	cmp	r3, r6
 800a182:	9a08      	ldr	r2, [sp, #32]
 800a184:	bfa8      	it	ge
 800a186:	4633      	movge	r3, r6
 800a188:	eba8 0803 	sub.w	r8, r8, r3
 800a18c:	1af6      	subs	r6, r6, r3
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	9308      	str	r3, [sp, #32]
 800a192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a194:	b1f3      	cbz	r3, 800a1d4 <_dtoa_r+0x78c>
 800a196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 80b7 	beq.w	800a30c <_dtoa_r+0x8c4>
 800a19e:	b18c      	cbz	r4, 800a1c4 <_dtoa_r+0x77c>
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	4658      	mov	r0, fp
 800a1a6:	f000 fd11 	bl	800abcc <__pow5mult>
 800a1aa:	464a      	mov	r2, r9
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	4658      	mov	r0, fp
 800a1b2:	f000 fc61 	bl	800aa78 <__multiply>
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	9004      	str	r0, [sp, #16]
 800a1ba:	4658      	mov	r0, fp
 800a1bc:	f000 fb48 	bl	800a850 <_Bfree>
 800a1c0:	9b04      	ldr	r3, [sp, #16]
 800a1c2:	4699      	mov	r9, r3
 800a1c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1c6:	1b1a      	subs	r2, r3, r4
 800a1c8:	d004      	beq.n	800a1d4 <_dtoa_r+0x78c>
 800a1ca:	4649      	mov	r1, r9
 800a1cc:	4658      	mov	r0, fp
 800a1ce:	f000 fcfd 	bl	800abcc <__pow5mult>
 800a1d2:	4681      	mov	r9, r0
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	4658      	mov	r0, fp
 800a1d8:	f000 fc38 	bl	800aa4c <__i2b>
 800a1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1de:	4604      	mov	r4, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 81cf 	beq.w	800a584 <_dtoa_r+0xb3c>
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	4601      	mov	r1, r0
 800a1ea:	4658      	mov	r0, fp
 800a1ec:	f000 fcee 	bl	800abcc <__pow5mult>
 800a1f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	f300 8095 	bgt.w	800a324 <_dtoa_r+0x8dc>
 800a1fa:	9b02      	ldr	r3, [sp, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f040 8087 	bne.w	800a310 <_dtoa_r+0x8c8>
 800a202:	9b03      	ldr	r3, [sp, #12]
 800a204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f040 8089 	bne.w	800a320 <_dtoa_r+0x8d8>
 800a20e:	9b03      	ldr	r3, [sp, #12]
 800a210:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a214:	0d1b      	lsrs	r3, r3, #20
 800a216:	051b      	lsls	r3, r3, #20
 800a218:	b12b      	cbz	r3, 800a226 <_dtoa_r+0x7de>
 800a21a:	9b08      	ldr	r3, [sp, #32]
 800a21c:	3301      	adds	r3, #1
 800a21e:	9308      	str	r3, [sp, #32]
 800a220:	f108 0801 	add.w	r8, r8, #1
 800a224:	2301      	movs	r3, #1
 800a226:	930a      	str	r3, [sp, #40]	@ 0x28
 800a228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 81b0 	beq.w	800a590 <_dtoa_r+0xb48>
 800a230:	6923      	ldr	r3, [r4, #16]
 800a232:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a236:	6918      	ldr	r0, [r3, #16]
 800a238:	f000 fbbc 	bl	800a9b4 <__hi0bits>
 800a23c:	f1c0 0020 	rsb	r0, r0, #32
 800a240:	9b08      	ldr	r3, [sp, #32]
 800a242:	4418      	add	r0, r3
 800a244:	f010 001f 	ands.w	r0, r0, #31
 800a248:	d077      	beq.n	800a33a <_dtoa_r+0x8f2>
 800a24a:	f1c0 0320 	rsb	r3, r0, #32
 800a24e:	2b04      	cmp	r3, #4
 800a250:	dd6b      	ble.n	800a32a <_dtoa_r+0x8e2>
 800a252:	9b08      	ldr	r3, [sp, #32]
 800a254:	f1c0 001c 	rsb	r0, r0, #28
 800a258:	4403      	add	r3, r0
 800a25a:	4480      	add	r8, r0
 800a25c:	4406      	add	r6, r0
 800a25e:	9308      	str	r3, [sp, #32]
 800a260:	f1b8 0f00 	cmp.w	r8, #0
 800a264:	dd05      	ble.n	800a272 <_dtoa_r+0x82a>
 800a266:	4649      	mov	r1, r9
 800a268:	4642      	mov	r2, r8
 800a26a:	4658      	mov	r0, fp
 800a26c:	f000 fd08 	bl	800ac80 <__lshift>
 800a270:	4681      	mov	r9, r0
 800a272:	9b08      	ldr	r3, [sp, #32]
 800a274:	2b00      	cmp	r3, #0
 800a276:	dd05      	ble.n	800a284 <_dtoa_r+0x83c>
 800a278:	4621      	mov	r1, r4
 800a27a:	461a      	mov	r2, r3
 800a27c:	4658      	mov	r0, fp
 800a27e:	f000 fcff 	bl	800ac80 <__lshift>
 800a282:	4604      	mov	r4, r0
 800a284:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a286:	2b00      	cmp	r3, #0
 800a288:	d059      	beq.n	800a33e <_dtoa_r+0x8f6>
 800a28a:	4621      	mov	r1, r4
 800a28c:	4648      	mov	r0, r9
 800a28e:	f000 fd63 	bl	800ad58 <__mcmp>
 800a292:	2800      	cmp	r0, #0
 800a294:	da53      	bge.n	800a33e <_dtoa_r+0x8f6>
 800a296:	1e7b      	subs	r3, r7, #1
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	4649      	mov	r1, r9
 800a29c:	2300      	movs	r3, #0
 800a29e:	220a      	movs	r2, #10
 800a2a0:	4658      	mov	r0, fp
 800a2a2:	f000 faf7 	bl	800a894 <__multadd>
 800a2a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2a8:	4681      	mov	r9, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f000 8172 	beq.w	800a594 <_dtoa_r+0xb4c>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	220a      	movs	r2, #10
 800a2b6:	4658      	mov	r0, fp
 800a2b8:	f000 faec 	bl	800a894 <__multadd>
 800a2bc:	9b00      	ldr	r3, [sp, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	dc67      	bgt.n	800a394 <_dtoa_r+0x94c>
 800a2c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	dc41      	bgt.n	800a34e <_dtoa_r+0x906>
 800a2ca:	e063      	b.n	800a394 <_dtoa_r+0x94c>
 800a2cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a2ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a2d2:	e746      	b.n	800a162 <_dtoa_r+0x71a>
 800a2d4:	9b07      	ldr	r3, [sp, #28]
 800a2d6:	1e5c      	subs	r4, r3, #1
 800a2d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2da:	42a3      	cmp	r3, r4
 800a2dc:	bfbf      	itttt	lt
 800a2de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a2e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a2e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a2e4:	1ae3      	sublt	r3, r4, r3
 800a2e6:	bfb4      	ite	lt
 800a2e8:	18d2      	addlt	r2, r2, r3
 800a2ea:	1b1c      	subge	r4, r3, r4
 800a2ec:	9b07      	ldr	r3, [sp, #28]
 800a2ee:	bfbc      	itt	lt
 800a2f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a2f2:	2400      	movlt	r4, #0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	bfb5      	itete	lt
 800a2f8:	eba8 0603 	sublt.w	r6, r8, r3
 800a2fc:	9b07      	ldrge	r3, [sp, #28]
 800a2fe:	2300      	movlt	r3, #0
 800a300:	4646      	movge	r6, r8
 800a302:	e730      	b.n	800a166 <_dtoa_r+0x71e>
 800a304:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a306:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a308:	4646      	mov	r6, r8
 800a30a:	e735      	b.n	800a178 <_dtoa_r+0x730>
 800a30c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a30e:	e75c      	b.n	800a1ca <_dtoa_r+0x782>
 800a310:	2300      	movs	r3, #0
 800a312:	e788      	b.n	800a226 <_dtoa_r+0x7de>
 800a314:	3fe00000 	.word	0x3fe00000
 800a318:	40240000 	.word	0x40240000
 800a31c:	40140000 	.word	0x40140000
 800a320:	9b02      	ldr	r3, [sp, #8]
 800a322:	e780      	b.n	800a226 <_dtoa_r+0x7de>
 800a324:	2300      	movs	r3, #0
 800a326:	930a      	str	r3, [sp, #40]	@ 0x28
 800a328:	e782      	b.n	800a230 <_dtoa_r+0x7e8>
 800a32a:	d099      	beq.n	800a260 <_dtoa_r+0x818>
 800a32c:	9a08      	ldr	r2, [sp, #32]
 800a32e:	331c      	adds	r3, #28
 800a330:	441a      	add	r2, r3
 800a332:	4498      	add	r8, r3
 800a334:	441e      	add	r6, r3
 800a336:	9208      	str	r2, [sp, #32]
 800a338:	e792      	b.n	800a260 <_dtoa_r+0x818>
 800a33a:	4603      	mov	r3, r0
 800a33c:	e7f6      	b.n	800a32c <_dtoa_r+0x8e4>
 800a33e:	9b07      	ldr	r3, [sp, #28]
 800a340:	9704      	str	r7, [sp, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	dc20      	bgt.n	800a388 <_dtoa_r+0x940>
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	dd1e      	ble.n	800a38c <_dtoa_r+0x944>
 800a34e:	9b00      	ldr	r3, [sp, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	f47f aec0 	bne.w	800a0d6 <_dtoa_r+0x68e>
 800a356:	4621      	mov	r1, r4
 800a358:	2205      	movs	r2, #5
 800a35a:	4658      	mov	r0, fp
 800a35c:	f000 fa9a 	bl	800a894 <__multadd>
 800a360:	4601      	mov	r1, r0
 800a362:	4604      	mov	r4, r0
 800a364:	4648      	mov	r0, r9
 800a366:	f000 fcf7 	bl	800ad58 <__mcmp>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	f77f aeb3 	ble.w	800a0d6 <_dtoa_r+0x68e>
 800a370:	4656      	mov	r6, sl
 800a372:	2331      	movs	r3, #49	@ 0x31
 800a374:	f806 3b01 	strb.w	r3, [r6], #1
 800a378:	9b04      	ldr	r3, [sp, #16]
 800a37a:	3301      	adds	r3, #1
 800a37c:	9304      	str	r3, [sp, #16]
 800a37e:	e6ae      	b.n	800a0de <_dtoa_r+0x696>
 800a380:	9c07      	ldr	r4, [sp, #28]
 800a382:	9704      	str	r7, [sp, #16]
 800a384:	4625      	mov	r5, r4
 800a386:	e7f3      	b.n	800a370 <_dtoa_r+0x928>
 800a388:	9b07      	ldr	r3, [sp, #28]
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 8104 	beq.w	800a59c <_dtoa_r+0xb54>
 800a394:	2e00      	cmp	r6, #0
 800a396:	dd05      	ble.n	800a3a4 <_dtoa_r+0x95c>
 800a398:	4629      	mov	r1, r5
 800a39a:	4632      	mov	r2, r6
 800a39c:	4658      	mov	r0, fp
 800a39e:	f000 fc6f 	bl	800ac80 <__lshift>
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d05a      	beq.n	800a460 <_dtoa_r+0xa18>
 800a3aa:	6869      	ldr	r1, [r5, #4]
 800a3ac:	4658      	mov	r0, fp
 800a3ae:	f000 fa0f 	bl	800a7d0 <_Balloc>
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	b928      	cbnz	r0, 800a3c2 <_dtoa_r+0x97a>
 800a3b6:	4b84      	ldr	r3, [pc, #528]	@ (800a5c8 <_dtoa_r+0xb80>)
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a3be:	f7ff bb5a 	b.w	8009a76 <_dtoa_r+0x2e>
 800a3c2:	692a      	ldr	r2, [r5, #16]
 800a3c4:	3202      	adds	r2, #2
 800a3c6:	0092      	lsls	r2, r2, #2
 800a3c8:	f105 010c 	add.w	r1, r5, #12
 800a3cc:	300c      	adds	r0, #12
 800a3ce:	f7ff fa9c 	bl	800990a <memcpy>
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	4631      	mov	r1, r6
 800a3d6:	4658      	mov	r0, fp
 800a3d8:	f000 fc52 	bl	800ac80 <__lshift>
 800a3dc:	f10a 0301 	add.w	r3, sl, #1
 800a3e0:	9307      	str	r3, [sp, #28]
 800a3e2:	9b00      	ldr	r3, [sp, #0]
 800a3e4:	4453      	add	r3, sl
 800a3e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3e8:	9b02      	ldr	r3, [sp, #8]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	462f      	mov	r7, r5
 800a3f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	9b07      	ldr	r3, [sp, #28]
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	4648      	mov	r0, r9
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	f7ff fa99 	bl	8009934 <quorem>
 800a402:	4639      	mov	r1, r7
 800a404:	9002      	str	r0, [sp, #8]
 800a406:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a40a:	4648      	mov	r0, r9
 800a40c:	f000 fca4 	bl	800ad58 <__mcmp>
 800a410:	462a      	mov	r2, r5
 800a412:	9008      	str	r0, [sp, #32]
 800a414:	4621      	mov	r1, r4
 800a416:	4658      	mov	r0, fp
 800a418:	f000 fcba 	bl	800ad90 <__mdiff>
 800a41c:	68c2      	ldr	r2, [r0, #12]
 800a41e:	4606      	mov	r6, r0
 800a420:	bb02      	cbnz	r2, 800a464 <_dtoa_r+0xa1c>
 800a422:	4601      	mov	r1, r0
 800a424:	4648      	mov	r0, r9
 800a426:	f000 fc97 	bl	800ad58 <__mcmp>
 800a42a:	4602      	mov	r2, r0
 800a42c:	4631      	mov	r1, r6
 800a42e:	4658      	mov	r0, fp
 800a430:	920e      	str	r2, [sp, #56]	@ 0x38
 800a432:	f000 fa0d 	bl	800a850 <_Bfree>
 800a436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a438:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a43a:	9e07      	ldr	r6, [sp, #28]
 800a43c:	ea43 0102 	orr.w	r1, r3, r2
 800a440:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a442:	4319      	orrs	r1, r3
 800a444:	d110      	bne.n	800a468 <_dtoa_r+0xa20>
 800a446:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a44a:	d029      	beq.n	800a4a0 <_dtoa_r+0xa58>
 800a44c:	9b08      	ldr	r3, [sp, #32]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	dd02      	ble.n	800a458 <_dtoa_r+0xa10>
 800a452:	9b02      	ldr	r3, [sp, #8]
 800a454:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a458:	9b00      	ldr	r3, [sp, #0]
 800a45a:	f883 8000 	strb.w	r8, [r3]
 800a45e:	e63f      	b.n	800a0e0 <_dtoa_r+0x698>
 800a460:	4628      	mov	r0, r5
 800a462:	e7bb      	b.n	800a3dc <_dtoa_r+0x994>
 800a464:	2201      	movs	r2, #1
 800a466:	e7e1      	b.n	800a42c <_dtoa_r+0x9e4>
 800a468:	9b08      	ldr	r3, [sp, #32]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	db04      	blt.n	800a478 <_dtoa_r+0xa30>
 800a46e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a470:	430b      	orrs	r3, r1
 800a472:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a474:	430b      	orrs	r3, r1
 800a476:	d120      	bne.n	800a4ba <_dtoa_r+0xa72>
 800a478:	2a00      	cmp	r2, #0
 800a47a:	dded      	ble.n	800a458 <_dtoa_r+0xa10>
 800a47c:	4649      	mov	r1, r9
 800a47e:	2201      	movs	r2, #1
 800a480:	4658      	mov	r0, fp
 800a482:	f000 fbfd 	bl	800ac80 <__lshift>
 800a486:	4621      	mov	r1, r4
 800a488:	4681      	mov	r9, r0
 800a48a:	f000 fc65 	bl	800ad58 <__mcmp>
 800a48e:	2800      	cmp	r0, #0
 800a490:	dc03      	bgt.n	800a49a <_dtoa_r+0xa52>
 800a492:	d1e1      	bne.n	800a458 <_dtoa_r+0xa10>
 800a494:	f018 0f01 	tst.w	r8, #1
 800a498:	d0de      	beq.n	800a458 <_dtoa_r+0xa10>
 800a49a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a49e:	d1d8      	bne.n	800a452 <_dtoa_r+0xa0a>
 800a4a0:	9a00      	ldr	r2, [sp, #0]
 800a4a2:	2339      	movs	r3, #57	@ 0x39
 800a4a4:	7013      	strb	r3, [r2, #0]
 800a4a6:	4633      	mov	r3, r6
 800a4a8:	461e      	mov	r6, r3
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a4b0:	2a39      	cmp	r2, #57	@ 0x39
 800a4b2:	d052      	beq.n	800a55a <_dtoa_r+0xb12>
 800a4b4:	3201      	adds	r2, #1
 800a4b6:	701a      	strb	r2, [r3, #0]
 800a4b8:	e612      	b.n	800a0e0 <_dtoa_r+0x698>
 800a4ba:	2a00      	cmp	r2, #0
 800a4bc:	dd07      	ble.n	800a4ce <_dtoa_r+0xa86>
 800a4be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a4c2:	d0ed      	beq.n	800a4a0 <_dtoa_r+0xa58>
 800a4c4:	9a00      	ldr	r2, [sp, #0]
 800a4c6:	f108 0301 	add.w	r3, r8, #1
 800a4ca:	7013      	strb	r3, [r2, #0]
 800a4cc:	e608      	b.n	800a0e0 <_dtoa_r+0x698>
 800a4ce:	9b07      	ldr	r3, [sp, #28]
 800a4d0:	9a07      	ldr	r2, [sp, #28]
 800a4d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a4d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d028      	beq.n	800a52e <_dtoa_r+0xae6>
 800a4dc:	4649      	mov	r1, r9
 800a4de:	2300      	movs	r3, #0
 800a4e0:	220a      	movs	r2, #10
 800a4e2:	4658      	mov	r0, fp
 800a4e4:	f000 f9d6 	bl	800a894 <__multadd>
 800a4e8:	42af      	cmp	r7, r5
 800a4ea:	4681      	mov	r9, r0
 800a4ec:	f04f 0300 	mov.w	r3, #0
 800a4f0:	f04f 020a 	mov.w	r2, #10
 800a4f4:	4639      	mov	r1, r7
 800a4f6:	4658      	mov	r0, fp
 800a4f8:	d107      	bne.n	800a50a <_dtoa_r+0xac2>
 800a4fa:	f000 f9cb 	bl	800a894 <__multadd>
 800a4fe:	4607      	mov	r7, r0
 800a500:	4605      	mov	r5, r0
 800a502:	9b07      	ldr	r3, [sp, #28]
 800a504:	3301      	adds	r3, #1
 800a506:	9307      	str	r3, [sp, #28]
 800a508:	e774      	b.n	800a3f4 <_dtoa_r+0x9ac>
 800a50a:	f000 f9c3 	bl	800a894 <__multadd>
 800a50e:	4629      	mov	r1, r5
 800a510:	4607      	mov	r7, r0
 800a512:	2300      	movs	r3, #0
 800a514:	220a      	movs	r2, #10
 800a516:	4658      	mov	r0, fp
 800a518:	f000 f9bc 	bl	800a894 <__multadd>
 800a51c:	4605      	mov	r5, r0
 800a51e:	e7f0      	b.n	800a502 <_dtoa_r+0xaba>
 800a520:	9b00      	ldr	r3, [sp, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	bfcc      	ite	gt
 800a526:	461e      	movgt	r6, r3
 800a528:	2601      	movle	r6, #1
 800a52a:	4456      	add	r6, sl
 800a52c:	2700      	movs	r7, #0
 800a52e:	4649      	mov	r1, r9
 800a530:	2201      	movs	r2, #1
 800a532:	4658      	mov	r0, fp
 800a534:	f000 fba4 	bl	800ac80 <__lshift>
 800a538:	4621      	mov	r1, r4
 800a53a:	4681      	mov	r9, r0
 800a53c:	f000 fc0c 	bl	800ad58 <__mcmp>
 800a540:	2800      	cmp	r0, #0
 800a542:	dcb0      	bgt.n	800a4a6 <_dtoa_r+0xa5e>
 800a544:	d102      	bne.n	800a54c <_dtoa_r+0xb04>
 800a546:	f018 0f01 	tst.w	r8, #1
 800a54a:	d1ac      	bne.n	800a4a6 <_dtoa_r+0xa5e>
 800a54c:	4633      	mov	r3, r6
 800a54e:	461e      	mov	r6, r3
 800a550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a554:	2a30      	cmp	r2, #48	@ 0x30
 800a556:	d0fa      	beq.n	800a54e <_dtoa_r+0xb06>
 800a558:	e5c2      	b.n	800a0e0 <_dtoa_r+0x698>
 800a55a:	459a      	cmp	sl, r3
 800a55c:	d1a4      	bne.n	800a4a8 <_dtoa_r+0xa60>
 800a55e:	9b04      	ldr	r3, [sp, #16]
 800a560:	3301      	adds	r3, #1
 800a562:	9304      	str	r3, [sp, #16]
 800a564:	2331      	movs	r3, #49	@ 0x31
 800a566:	f88a 3000 	strb.w	r3, [sl]
 800a56a:	e5b9      	b.n	800a0e0 <_dtoa_r+0x698>
 800a56c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a56e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a5cc <_dtoa_r+0xb84>
 800a572:	b11b      	cbz	r3, 800a57c <_dtoa_r+0xb34>
 800a574:	f10a 0308 	add.w	r3, sl, #8
 800a578:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a57a:	6013      	str	r3, [r2, #0]
 800a57c:	4650      	mov	r0, sl
 800a57e:	b019      	add	sp, #100	@ 0x64
 800a580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a586:	2b01      	cmp	r3, #1
 800a588:	f77f ae37 	ble.w	800a1fa <_dtoa_r+0x7b2>
 800a58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a58e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a590:	2001      	movs	r0, #1
 800a592:	e655      	b.n	800a240 <_dtoa_r+0x7f8>
 800a594:	9b00      	ldr	r3, [sp, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	f77f aed6 	ble.w	800a348 <_dtoa_r+0x900>
 800a59c:	4656      	mov	r6, sl
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4648      	mov	r0, r9
 800a5a2:	f7ff f9c7 	bl	8009934 <quorem>
 800a5a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a5aa:	f806 8b01 	strb.w	r8, [r6], #1
 800a5ae:	9b00      	ldr	r3, [sp, #0]
 800a5b0:	eba6 020a 	sub.w	r2, r6, sl
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	ddb3      	ble.n	800a520 <_dtoa_r+0xad8>
 800a5b8:	4649      	mov	r1, r9
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	220a      	movs	r2, #10
 800a5be:	4658      	mov	r0, fp
 800a5c0:	f000 f968 	bl	800a894 <__multadd>
 800a5c4:	4681      	mov	r9, r0
 800a5c6:	e7ea      	b.n	800a59e <_dtoa_r+0xb56>
 800a5c8:	0800da8b 	.word	0x0800da8b
 800a5cc:	0800da0f 	.word	0x0800da0f

0800a5d0 <_free_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	2900      	cmp	r1, #0
 800a5d6:	d041      	beq.n	800a65c <_free_r+0x8c>
 800a5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5dc:	1f0c      	subs	r4, r1, #4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	bfb8      	it	lt
 800a5e2:	18e4      	addlt	r4, r4, r3
 800a5e4:	f000 f8e8 	bl	800a7b8 <__malloc_lock>
 800a5e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a660 <_free_r+0x90>)
 800a5ea:	6813      	ldr	r3, [r2, #0]
 800a5ec:	b933      	cbnz	r3, 800a5fc <_free_r+0x2c>
 800a5ee:	6063      	str	r3, [r4, #4]
 800a5f0:	6014      	str	r4, [r2, #0]
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5f8:	f000 b8e4 	b.w	800a7c4 <__malloc_unlock>
 800a5fc:	42a3      	cmp	r3, r4
 800a5fe:	d908      	bls.n	800a612 <_free_r+0x42>
 800a600:	6820      	ldr	r0, [r4, #0]
 800a602:	1821      	adds	r1, r4, r0
 800a604:	428b      	cmp	r3, r1
 800a606:	bf01      	itttt	eq
 800a608:	6819      	ldreq	r1, [r3, #0]
 800a60a:	685b      	ldreq	r3, [r3, #4]
 800a60c:	1809      	addeq	r1, r1, r0
 800a60e:	6021      	streq	r1, [r4, #0]
 800a610:	e7ed      	b.n	800a5ee <_free_r+0x1e>
 800a612:	461a      	mov	r2, r3
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	b10b      	cbz	r3, 800a61c <_free_r+0x4c>
 800a618:	42a3      	cmp	r3, r4
 800a61a:	d9fa      	bls.n	800a612 <_free_r+0x42>
 800a61c:	6811      	ldr	r1, [r2, #0]
 800a61e:	1850      	adds	r0, r2, r1
 800a620:	42a0      	cmp	r0, r4
 800a622:	d10b      	bne.n	800a63c <_free_r+0x6c>
 800a624:	6820      	ldr	r0, [r4, #0]
 800a626:	4401      	add	r1, r0
 800a628:	1850      	adds	r0, r2, r1
 800a62a:	4283      	cmp	r3, r0
 800a62c:	6011      	str	r1, [r2, #0]
 800a62e:	d1e0      	bne.n	800a5f2 <_free_r+0x22>
 800a630:	6818      	ldr	r0, [r3, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	6053      	str	r3, [r2, #4]
 800a636:	4408      	add	r0, r1
 800a638:	6010      	str	r0, [r2, #0]
 800a63a:	e7da      	b.n	800a5f2 <_free_r+0x22>
 800a63c:	d902      	bls.n	800a644 <_free_r+0x74>
 800a63e:	230c      	movs	r3, #12
 800a640:	602b      	str	r3, [r5, #0]
 800a642:	e7d6      	b.n	800a5f2 <_free_r+0x22>
 800a644:	6820      	ldr	r0, [r4, #0]
 800a646:	1821      	adds	r1, r4, r0
 800a648:	428b      	cmp	r3, r1
 800a64a:	bf04      	itt	eq
 800a64c:	6819      	ldreq	r1, [r3, #0]
 800a64e:	685b      	ldreq	r3, [r3, #4]
 800a650:	6063      	str	r3, [r4, #4]
 800a652:	bf04      	itt	eq
 800a654:	1809      	addeq	r1, r1, r0
 800a656:	6021      	streq	r1, [r4, #0]
 800a658:	6054      	str	r4, [r2, #4]
 800a65a:	e7ca      	b.n	800a5f2 <_free_r+0x22>
 800a65c:	bd38      	pop	{r3, r4, r5, pc}
 800a65e:	bf00      	nop
 800a660:	20004f5c 	.word	0x20004f5c

0800a664 <malloc>:
 800a664:	4b02      	ldr	r3, [pc, #8]	@ (800a670 <malloc+0xc>)
 800a666:	4601      	mov	r1, r0
 800a668:	6818      	ldr	r0, [r3, #0]
 800a66a:	f000 b825 	b.w	800a6b8 <_malloc_r>
 800a66e:	bf00      	nop
 800a670:	2000001c 	.word	0x2000001c

0800a674 <sbrk_aligned>:
 800a674:	b570      	push	{r4, r5, r6, lr}
 800a676:	4e0f      	ldr	r6, [pc, #60]	@ (800a6b4 <sbrk_aligned+0x40>)
 800a678:	460c      	mov	r4, r1
 800a67a:	6831      	ldr	r1, [r6, #0]
 800a67c:	4605      	mov	r5, r0
 800a67e:	b911      	cbnz	r1, 800a686 <sbrk_aligned+0x12>
 800a680:	f002 f99a 	bl	800c9b8 <_sbrk_r>
 800a684:	6030      	str	r0, [r6, #0]
 800a686:	4621      	mov	r1, r4
 800a688:	4628      	mov	r0, r5
 800a68a:	f002 f995 	bl	800c9b8 <_sbrk_r>
 800a68e:	1c43      	adds	r3, r0, #1
 800a690:	d103      	bne.n	800a69a <sbrk_aligned+0x26>
 800a692:	f04f 34ff 	mov.w	r4, #4294967295
 800a696:	4620      	mov	r0, r4
 800a698:	bd70      	pop	{r4, r5, r6, pc}
 800a69a:	1cc4      	adds	r4, r0, #3
 800a69c:	f024 0403 	bic.w	r4, r4, #3
 800a6a0:	42a0      	cmp	r0, r4
 800a6a2:	d0f8      	beq.n	800a696 <sbrk_aligned+0x22>
 800a6a4:	1a21      	subs	r1, r4, r0
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f002 f986 	bl	800c9b8 <_sbrk_r>
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	d1f2      	bne.n	800a696 <sbrk_aligned+0x22>
 800a6b0:	e7ef      	b.n	800a692 <sbrk_aligned+0x1e>
 800a6b2:	bf00      	nop
 800a6b4:	20004f58 	.word	0x20004f58

0800a6b8 <_malloc_r>:
 800a6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6bc:	1ccd      	adds	r5, r1, #3
 800a6be:	f025 0503 	bic.w	r5, r5, #3
 800a6c2:	3508      	adds	r5, #8
 800a6c4:	2d0c      	cmp	r5, #12
 800a6c6:	bf38      	it	cc
 800a6c8:	250c      	movcc	r5, #12
 800a6ca:	2d00      	cmp	r5, #0
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	db01      	blt.n	800a6d4 <_malloc_r+0x1c>
 800a6d0:	42a9      	cmp	r1, r5
 800a6d2:	d904      	bls.n	800a6de <_malloc_r+0x26>
 800a6d4:	230c      	movs	r3, #12
 800a6d6:	6033      	str	r3, [r6, #0]
 800a6d8:	2000      	movs	r0, #0
 800a6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7b4 <_malloc_r+0xfc>
 800a6e2:	f000 f869 	bl	800a7b8 <__malloc_lock>
 800a6e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ea:	461c      	mov	r4, r3
 800a6ec:	bb44      	cbnz	r4, 800a740 <_malloc_r+0x88>
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	f7ff ffbf 	bl	800a674 <sbrk_aligned>
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	d158      	bne.n	800a7ae <_malloc_r+0xf6>
 800a6fc:	f8d8 4000 	ldr.w	r4, [r8]
 800a700:	4627      	mov	r7, r4
 800a702:	2f00      	cmp	r7, #0
 800a704:	d143      	bne.n	800a78e <_malloc_r+0xd6>
 800a706:	2c00      	cmp	r4, #0
 800a708:	d04b      	beq.n	800a7a2 <_malloc_r+0xea>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	4639      	mov	r1, r7
 800a70e:	4630      	mov	r0, r6
 800a710:	eb04 0903 	add.w	r9, r4, r3
 800a714:	f002 f950 	bl	800c9b8 <_sbrk_r>
 800a718:	4581      	cmp	r9, r0
 800a71a:	d142      	bne.n	800a7a2 <_malloc_r+0xea>
 800a71c:	6821      	ldr	r1, [r4, #0]
 800a71e:	1a6d      	subs	r5, r5, r1
 800a720:	4629      	mov	r1, r5
 800a722:	4630      	mov	r0, r6
 800a724:	f7ff ffa6 	bl	800a674 <sbrk_aligned>
 800a728:	3001      	adds	r0, #1
 800a72a:	d03a      	beq.n	800a7a2 <_malloc_r+0xea>
 800a72c:	6823      	ldr	r3, [r4, #0]
 800a72e:	442b      	add	r3, r5
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	f8d8 3000 	ldr.w	r3, [r8]
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	bb62      	cbnz	r2, 800a794 <_malloc_r+0xdc>
 800a73a:	f8c8 7000 	str.w	r7, [r8]
 800a73e:	e00f      	b.n	800a760 <_malloc_r+0xa8>
 800a740:	6822      	ldr	r2, [r4, #0]
 800a742:	1b52      	subs	r2, r2, r5
 800a744:	d420      	bmi.n	800a788 <_malloc_r+0xd0>
 800a746:	2a0b      	cmp	r2, #11
 800a748:	d917      	bls.n	800a77a <_malloc_r+0xc2>
 800a74a:	1961      	adds	r1, r4, r5
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	6025      	str	r5, [r4, #0]
 800a750:	bf18      	it	ne
 800a752:	6059      	strne	r1, [r3, #4]
 800a754:	6863      	ldr	r3, [r4, #4]
 800a756:	bf08      	it	eq
 800a758:	f8c8 1000 	streq.w	r1, [r8]
 800a75c:	5162      	str	r2, [r4, r5]
 800a75e:	604b      	str	r3, [r1, #4]
 800a760:	4630      	mov	r0, r6
 800a762:	f000 f82f 	bl	800a7c4 <__malloc_unlock>
 800a766:	f104 000b 	add.w	r0, r4, #11
 800a76a:	1d23      	adds	r3, r4, #4
 800a76c:	f020 0007 	bic.w	r0, r0, #7
 800a770:	1ac2      	subs	r2, r0, r3
 800a772:	bf1c      	itt	ne
 800a774:	1a1b      	subne	r3, r3, r0
 800a776:	50a3      	strne	r3, [r4, r2]
 800a778:	e7af      	b.n	800a6da <_malloc_r+0x22>
 800a77a:	6862      	ldr	r2, [r4, #4]
 800a77c:	42a3      	cmp	r3, r4
 800a77e:	bf0c      	ite	eq
 800a780:	f8c8 2000 	streq.w	r2, [r8]
 800a784:	605a      	strne	r2, [r3, #4]
 800a786:	e7eb      	b.n	800a760 <_malloc_r+0xa8>
 800a788:	4623      	mov	r3, r4
 800a78a:	6864      	ldr	r4, [r4, #4]
 800a78c:	e7ae      	b.n	800a6ec <_malloc_r+0x34>
 800a78e:	463c      	mov	r4, r7
 800a790:	687f      	ldr	r7, [r7, #4]
 800a792:	e7b6      	b.n	800a702 <_malloc_r+0x4a>
 800a794:	461a      	mov	r2, r3
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	42a3      	cmp	r3, r4
 800a79a:	d1fb      	bne.n	800a794 <_malloc_r+0xdc>
 800a79c:	2300      	movs	r3, #0
 800a79e:	6053      	str	r3, [r2, #4]
 800a7a0:	e7de      	b.n	800a760 <_malloc_r+0xa8>
 800a7a2:	230c      	movs	r3, #12
 800a7a4:	6033      	str	r3, [r6, #0]
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f000 f80c 	bl	800a7c4 <__malloc_unlock>
 800a7ac:	e794      	b.n	800a6d8 <_malloc_r+0x20>
 800a7ae:	6005      	str	r5, [r0, #0]
 800a7b0:	e7d6      	b.n	800a760 <_malloc_r+0xa8>
 800a7b2:	bf00      	nop
 800a7b4:	20004f5c 	.word	0x20004f5c

0800a7b8 <__malloc_lock>:
 800a7b8:	4801      	ldr	r0, [pc, #4]	@ (800a7c0 <__malloc_lock+0x8>)
 800a7ba:	f7ff b8a4 	b.w	8009906 <__retarget_lock_acquire_recursive>
 800a7be:	bf00      	nop
 800a7c0:	20004f54 	.word	0x20004f54

0800a7c4 <__malloc_unlock>:
 800a7c4:	4801      	ldr	r0, [pc, #4]	@ (800a7cc <__malloc_unlock+0x8>)
 800a7c6:	f7ff b89f 	b.w	8009908 <__retarget_lock_release_recursive>
 800a7ca:	bf00      	nop
 800a7cc:	20004f54 	.word	0x20004f54

0800a7d0 <_Balloc>:
 800a7d0:	b570      	push	{r4, r5, r6, lr}
 800a7d2:	69c6      	ldr	r6, [r0, #28]
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	460d      	mov	r5, r1
 800a7d8:	b976      	cbnz	r6, 800a7f8 <_Balloc+0x28>
 800a7da:	2010      	movs	r0, #16
 800a7dc:	f7ff ff42 	bl	800a664 <malloc>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	61e0      	str	r0, [r4, #28]
 800a7e4:	b920      	cbnz	r0, 800a7f0 <_Balloc+0x20>
 800a7e6:	4b18      	ldr	r3, [pc, #96]	@ (800a848 <_Balloc+0x78>)
 800a7e8:	4818      	ldr	r0, [pc, #96]	@ (800a84c <_Balloc+0x7c>)
 800a7ea:	216b      	movs	r1, #107	@ 0x6b
 800a7ec:	f002 f8fc 	bl	800c9e8 <__assert_func>
 800a7f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7f4:	6006      	str	r6, [r0, #0]
 800a7f6:	60c6      	str	r6, [r0, #12]
 800a7f8:	69e6      	ldr	r6, [r4, #28]
 800a7fa:	68f3      	ldr	r3, [r6, #12]
 800a7fc:	b183      	cbz	r3, 800a820 <_Balloc+0x50>
 800a7fe:	69e3      	ldr	r3, [r4, #28]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a806:	b9b8      	cbnz	r0, 800a838 <_Balloc+0x68>
 800a808:	2101      	movs	r1, #1
 800a80a:	fa01 f605 	lsl.w	r6, r1, r5
 800a80e:	1d72      	adds	r2, r6, #5
 800a810:	0092      	lsls	r2, r2, #2
 800a812:	4620      	mov	r0, r4
 800a814:	f002 f906 	bl	800ca24 <_calloc_r>
 800a818:	b160      	cbz	r0, 800a834 <_Balloc+0x64>
 800a81a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a81e:	e00e      	b.n	800a83e <_Balloc+0x6e>
 800a820:	2221      	movs	r2, #33	@ 0x21
 800a822:	2104      	movs	r1, #4
 800a824:	4620      	mov	r0, r4
 800a826:	f002 f8fd 	bl	800ca24 <_calloc_r>
 800a82a:	69e3      	ldr	r3, [r4, #28]
 800a82c:	60f0      	str	r0, [r6, #12]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e4      	bne.n	800a7fe <_Balloc+0x2e>
 800a834:	2000      	movs	r0, #0
 800a836:	bd70      	pop	{r4, r5, r6, pc}
 800a838:	6802      	ldr	r2, [r0, #0]
 800a83a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a83e:	2300      	movs	r3, #0
 800a840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a844:	e7f7      	b.n	800a836 <_Balloc+0x66>
 800a846:	bf00      	nop
 800a848:	0800da1c 	.word	0x0800da1c
 800a84c:	0800da9c 	.word	0x0800da9c

0800a850 <_Bfree>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	69c6      	ldr	r6, [r0, #28]
 800a854:	4605      	mov	r5, r0
 800a856:	460c      	mov	r4, r1
 800a858:	b976      	cbnz	r6, 800a878 <_Bfree+0x28>
 800a85a:	2010      	movs	r0, #16
 800a85c:	f7ff ff02 	bl	800a664 <malloc>
 800a860:	4602      	mov	r2, r0
 800a862:	61e8      	str	r0, [r5, #28]
 800a864:	b920      	cbnz	r0, 800a870 <_Bfree+0x20>
 800a866:	4b09      	ldr	r3, [pc, #36]	@ (800a88c <_Bfree+0x3c>)
 800a868:	4809      	ldr	r0, [pc, #36]	@ (800a890 <_Bfree+0x40>)
 800a86a:	218f      	movs	r1, #143	@ 0x8f
 800a86c:	f002 f8bc 	bl	800c9e8 <__assert_func>
 800a870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a874:	6006      	str	r6, [r0, #0]
 800a876:	60c6      	str	r6, [r0, #12]
 800a878:	b13c      	cbz	r4, 800a88a <_Bfree+0x3a>
 800a87a:	69eb      	ldr	r3, [r5, #28]
 800a87c:	6862      	ldr	r2, [r4, #4]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a884:	6021      	str	r1, [r4, #0]
 800a886:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
 800a88c:	0800da1c 	.word	0x0800da1c
 800a890:	0800da9c 	.word	0x0800da9c

0800a894 <__multadd>:
 800a894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a898:	690d      	ldr	r5, [r1, #16]
 800a89a:	4607      	mov	r7, r0
 800a89c:	460c      	mov	r4, r1
 800a89e:	461e      	mov	r6, r3
 800a8a0:	f101 0c14 	add.w	ip, r1, #20
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a8aa:	b299      	uxth	r1, r3
 800a8ac:	fb02 6101 	mla	r1, r2, r1, r6
 800a8b0:	0c1e      	lsrs	r6, r3, #16
 800a8b2:	0c0b      	lsrs	r3, r1, #16
 800a8b4:	fb02 3306 	mla	r3, r2, r6, r3
 800a8b8:	b289      	uxth	r1, r1
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8c0:	4285      	cmp	r5, r0
 800a8c2:	f84c 1b04 	str.w	r1, [ip], #4
 800a8c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8ca:	dcec      	bgt.n	800a8a6 <__multadd+0x12>
 800a8cc:	b30e      	cbz	r6, 800a912 <__multadd+0x7e>
 800a8ce:	68a3      	ldr	r3, [r4, #8]
 800a8d0:	42ab      	cmp	r3, r5
 800a8d2:	dc19      	bgt.n	800a908 <__multadd+0x74>
 800a8d4:	6861      	ldr	r1, [r4, #4]
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	3101      	adds	r1, #1
 800a8da:	f7ff ff79 	bl	800a7d0 <_Balloc>
 800a8de:	4680      	mov	r8, r0
 800a8e0:	b928      	cbnz	r0, 800a8ee <__multadd+0x5a>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a918 <__multadd+0x84>)
 800a8e6:	480d      	ldr	r0, [pc, #52]	@ (800a91c <__multadd+0x88>)
 800a8e8:	21ba      	movs	r1, #186	@ 0xba
 800a8ea:	f002 f87d 	bl	800c9e8 <__assert_func>
 800a8ee:	6922      	ldr	r2, [r4, #16]
 800a8f0:	3202      	adds	r2, #2
 800a8f2:	f104 010c 	add.w	r1, r4, #12
 800a8f6:	0092      	lsls	r2, r2, #2
 800a8f8:	300c      	adds	r0, #12
 800a8fa:	f7ff f806 	bl	800990a <memcpy>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4638      	mov	r0, r7
 800a902:	f7ff ffa5 	bl	800a850 <_Bfree>
 800a906:	4644      	mov	r4, r8
 800a908:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a90c:	3501      	adds	r5, #1
 800a90e:	615e      	str	r6, [r3, #20]
 800a910:	6125      	str	r5, [r4, #16]
 800a912:	4620      	mov	r0, r4
 800a914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a918:	0800da8b 	.word	0x0800da8b
 800a91c:	0800da9c 	.word	0x0800da9c

0800a920 <__s2b>:
 800a920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a924:	460c      	mov	r4, r1
 800a926:	4615      	mov	r5, r2
 800a928:	461f      	mov	r7, r3
 800a92a:	2209      	movs	r2, #9
 800a92c:	3308      	adds	r3, #8
 800a92e:	4606      	mov	r6, r0
 800a930:	fb93 f3f2 	sdiv	r3, r3, r2
 800a934:	2100      	movs	r1, #0
 800a936:	2201      	movs	r2, #1
 800a938:	429a      	cmp	r2, r3
 800a93a:	db09      	blt.n	800a950 <__s2b+0x30>
 800a93c:	4630      	mov	r0, r6
 800a93e:	f7ff ff47 	bl	800a7d0 <_Balloc>
 800a942:	b940      	cbnz	r0, 800a956 <__s2b+0x36>
 800a944:	4602      	mov	r2, r0
 800a946:	4b19      	ldr	r3, [pc, #100]	@ (800a9ac <__s2b+0x8c>)
 800a948:	4819      	ldr	r0, [pc, #100]	@ (800a9b0 <__s2b+0x90>)
 800a94a:	21d3      	movs	r1, #211	@ 0xd3
 800a94c:	f002 f84c 	bl	800c9e8 <__assert_func>
 800a950:	0052      	lsls	r2, r2, #1
 800a952:	3101      	adds	r1, #1
 800a954:	e7f0      	b.n	800a938 <__s2b+0x18>
 800a956:	9b08      	ldr	r3, [sp, #32]
 800a958:	6143      	str	r3, [r0, #20]
 800a95a:	2d09      	cmp	r5, #9
 800a95c:	f04f 0301 	mov.w	r3, #1
 800a960:	6103      	str	r3, [r0, #16]
 800a962:	dd16      	ble.n	800a992 <__s2b+0x72>
 800a964:	f104 0909 	add.w	r9, r4, #9
 800a968:	46c8      	mov	r8, r9
 800a96a:	442c      	add	r4, r5
 800a96c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a970:	4601      	mov	r1, r0
 800a972:	3b30      	subs	r3, #48	@ 0x30
 800a974:	220a      	movs	r2, #10
 800a976:	4630      	mov	r0, r6
 800a978:	f7ff ff8c 	bl	800a894 <__multadd>
 800a97c:	45a0      	cmp	r8, r4
 800a97e:	d1f5      	bne.n	800a96c <__s2b+0x4c>
 800a980:	f1a5 0408 	sub.w	r4, r5, #8
 800a984:	444c      	add	r4, r9
 800a986:	1b2d      	subs	r5, r5, r4
 800a988:	1963      	adds	r3, r4, r5
 800a98a:	42bb      	cmp	r3, r7
 800a98c:	db04      	blt.n	800a998 <__s2b+0x78>
 800a98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a992:	340a      	adds	r4, #10
 800a994:	2509      	movs	r5, #9
 800a996:	e7f6      	b.n	800a986 <__s2b+0x66>
 800a998:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a99c:	4601      	mov	r1, r0
 800a99e:	3b30      	subs	r3, #48	@ 0x30
 800a9a0:	220a      	movs	r2, #10
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f7ff ff76 	bl	800a894 <__multadd>
 800a9a8:	e7ee      	b.n	800a988 <__s2b+0x68>
 800a9aa:	bf00      	nop
 800a9ac:	0800da8b 	.word	0x0800da8b
 800a9b0:	0800da9c 	.word	0x0800da9c

0800a9b4 <__hi0bits>:
 800a9b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	bf36      	itet	cc
 800a9bc:	0403      	lslcc	r3, r0, #16
 800a9be:	2000      	movcs	r0, #0
 800a9c0:	2010      	movcc	r0, #16
 800a9c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a9c6:	bf3c      	itt	cc
 800a9c8:	021b      	lslcc	r3, r3, #8
 800a9ca:	3008      	addcc	r0, #8
 800a9cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9d0:	bf3c      	itt	cc
 800a9d2:	011b      	lslcc	r3, r3, #4
 800a9d4:	3004      	addcc	r0, #4
 800a9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9da:	bf3c      	itt	cc
 800a9dc:	009b      	lslcc	r3, r3, #2
 800a9de:	3002      	addcc	r0, #2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	db05      	blt.n	800a9f0 <__hi0bits+0x3c>
 800a9e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a9e8:	f100 0001 	add.w	r0, r0, #1
 800a9ec:	bf08      	it	eq
 800a9ee:	2020      	moveq	r0, #32
 800a9f0:	4770      	bx	lr

0800a9f2 <__lo0bits>:
 800a9f2:	6803      	ldr	r3, [r0, #0]
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	f013 0007 	ands.w	r0, r3, #7
 800a9fa:	d00b      	beq.n	800aa14 <__lo0bits+0x22>
 800a9fc:	07d9      	lsls	r1, r3, #31
 800a9fe:	d421      	bmi.n	800aa44 <__lo0bits+0x52>
 800aa00:	0798      	lsls	r0, r3, #30
 800aa02:	bf49      	itett	mi
 800aa04:	085b      	lsrmi	r3, r3, #1
 800aa06:	089b      	lsrpl	r3, r3, #2
 800aa08:	2001      	movmi	r0, #1
 800aa0a:	6013      	strmi	r3, [r2, #0]
 800aa0c:	bf5c      	itt	pl
 800aa0e:	6013      	strpl	r3, [r2, #0]
 800aa10:	2002      	movpl	r0, #2
 800aa12:	4770      	bx	lr
 800aa14:	b299      	uxth	r1, r3
 800aa16:	b909      	cbnz	r1, 800aa1c <__lo0bits+0x2a>
 800aa18:	0c1b      	lsrs	r3, r3, #16
 800aa1a:	2010      	movs	r0, #16
 800aa1c:	b2d9      	uxtb	r1, r3
 800aa1e:	b909      	cbnz	r1, 800aa24 <__lo0bits+0x32>
 800aa20:	3008      	adds	r0, #8
 800aa22:	0a1b      	lsrs	r3, r3, #8
 800aa24:	0719      	lsls	r1, r3, #28
 800aa26:	bf04      	itt	eq
 800aa28:	091b      	lsreq	r3, r3, #4
 800aa2a:	3004      	addeq	r0, #4
 800aa2c:	0799      	lsls	r1, r3, #30
 800aa2e:	bf04      	itt	eq
 800aa30:	089b      	lsreq	r3, r3, #2
 800aa32:	3002      	addeq	r0, #2
 800aa34:	07d9      	lsls	r1, r3, #31
 800aa36:	d403      	bmi.n	800aa40 <__lo0bits+0x4e>
 800aa38:	085b      	lsrs	r3, r3, #1
 800aa3a:	f100 0001 	add.w	r0, r0, #1
 800aa3e:	d003      	beq.n	800aa48 <__lo0bits+0x56>
 800aa40:	6013      	str	r3, [r2, #0]
 800aa42:	4770      	bx	lr
 800aa44:	2000      	movs	r0, #0
 800aa46:	4770      	bx	lr
 800aa48:	2020      	movs	r0, #32
 800aa4a:	4770      	bx	lr

0800aa4c <__i2b>:
 800aa4c:	b510      	push	{r4, lr}
 800aa4e:	460c      	mov	r4, r1
 800aa50:	2101      	movs	r1, #1
 800aa52:	f7ff febd 	bl	800a7d0 <_Balloc>
 800aa56:	4602      	mov	r2, r0
 800aa58:	b928      	cbnz	r0, 800aa66 <__i2b+0x1a>
 800aa5a:	4b05      	ldr	r3, [pc, #20]	@ (800aa70 <__i2b+0x24>)
 800aa5c:	4805      	ldr	r0, [pc, #20]	@ (800aa74 <__i2b+0x28>)
 800aa5e:	f240 1145 	movw	r1, #325	@ 0x145
 800aa62:	f001 ffc1 	bl	800c9e8 <__assert_func>
 800aa66:	2301      	movs	r3, #1
 800aa68:	6144      	str	r4, [r0, #20]
 800aa6a:	6103      	str	r3, [r0, #16]
 800aa6c:	bd10      	pop	{r4, pc}
 800aa6e:	bf00      	nop
 800aa70:	0800da8b 	.word	0x0800da8b
 800aa74:	0800da9c 	.word	0x0800da9c

0800aa78 <__multiply>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	4614      	mov	r4, r2
 800aa7e:	690a      	ldr	r2, [r1, #16]
 800aa80:	6923      	ldr	r3, [r4, #16]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	bfa8      	it	ge
 800aa86:	4623      	movge	r3, r4
 800aa88:	460f      	mov	r7, r1
 800aa8a:	bfa4      	itt	ge
 800aa8c:	460c      	movge	r4, r1
 800aa8e:	461f      	movge	r7, r3
 800aa90:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aa94:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aa98:	68a3      	ldr	r3, [r4, #8]
 800aa9a:	6861      	ldr	r1, [r4, #4]
 800aa9c:	eb0a 0609 	add.w	r6, sl, r9
 800aaa0:	42b3      	cmp	r3, r6
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	bfb8      	it	lt
 800aaa6:	3101      	addlt	r1, #1
 800aaa8:	f7ff fe92 	bl	800a7d0 <_Balloc>
 800aaac:	b930      	cbnz	r0, 800aabc <__multiply+0x44>
 800aaae:	4602      	mov	r2, r0
 800aab0:	4b44      	ldr	r3, [pc, #272]	@ (800abc4 <__multiply+0x14c>)
 800aab2:	4845      	ldr	r0, [pc, #276]	@ (800abc8 <__multiply+0x150>)
 800aab4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aab8:	f001 ff96 	bl	800c9e8 <__assert_func>
 800aabc:	f100 0514 	add.w	r5, r0, #20
 800aac0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aac4:	462b      	mov	r3, r5
 800aac6:	2200      	movs	r2, #0
 800aac8:	4543      	cmp	r3, r8
 800aaca:	d321      	bcc.n	800ab10 <__multiply+0x98>
 800aacc:	f107 0114 	add.w	r1, r7, #20
 800aad0:	f104 0214 	add.w	r2, r4, #20
 800aad4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aad8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aadc:	9302      	str	r3, [sp, #8]
 800aade:	1b13      	subs	r3, r2, r4
 800aae0:	3b15      	subs	r3, #21
 800aae2:	f023 0303 	bic.w	r3, r3, #3
 800aae6:	3304      	adds	r3, #4
 800aae8:	f104 0715 	add.w	r7, r4, #21
 800aaec:	42ba      	cmp	r2, r7
 800aaee:	bf38      	it	cc
 800aaf0:	2304      	movcc	r3, #4
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	9b02      	ldr	r3, [sp, #8]
 800aaf6:	9103      	str	r1, [sp, #12]
 800aaf8:	428b      	cmp	r3, r1
 800aafa:	d80c      	bhi.n	800ab16 <__multiply+0x9e>
 800aafc:	2e00      	cmp	r6, #0
 800aafe:	dd03      	ble.n	800ab08 <__multiply+0x90>
 800ab00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d05b      	beq.n	800abc0 <__multiply+0x148>
 800ab08:	6106      	str	r6, [r0, #16]
 800ab0a:	b005      	add	sp, #20
 800ab0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab10:	f843 2b04 	str.w	r2, [r3], #4
 800ab14:	e7d8      	b.n	800aac8 <__multiply+0x50>
 800ab16:	f8b1 a000 	ldrh.w	sl, [r1]
 800ab1a:	f1ba 0f00 	cmp.w	sl, #0
 800ab1e:	d024      	beq.n	800ab6a <__multiply+0xf2>
 800ab20:	f104 0e14 	add.w	lr, r4, #20
 800ab24:	46a9      	mov	r9, r5
 800ab26:	f04f 0c00 	mov.w	ip, #0
 800ab2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab2e:	f8d9 3000 	ldr.w	r3, [r9]
 800ab32:	fa1f fb87 	uxth.w	fp, r7
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	fb0a 330b 	mla	r3, sl, fp, r3
 800ab3c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ab40:	f8d9 7000 	ldr.w	r7, [r9]
 800ab44:	4463      	add	r3, ip
 800ab46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ab4a:	fb0a c70b 	mla	r7, sl, fp, ip
 800ab4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ab58:	4572      	cmp	r2, lr
 800ab5a:	f849 3b04 	str.w	r3, [r9], #4
 800ab5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ab62:	d8e2      	bhi.n	800ab2a <__multiply+0xb2>
 800ab64:	9b01      	ldr	r3, [sp, #4]
 800ab66:	f845 c003 	str.w	ip, [r5, r3]
 800ab6a:	9b03      	ldr	r3, [sp, #12]
 800ab6c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ab70:	3104      	adds	r1, #4
 800ab72:	f1b9 0f00 	cmp.w	r9, #0
 800ab76:	d021      	beq.n	800abbc <__multiply+0x144>
 800ab78:	682b      	ldr	r3, [r5, #0]
 800ab7a:	f104 0c14 	add.w	ip, r4, #20
 800ab7e:	46ae      	mov	lr, r5
 800ab80:	f04f 0a00 	mov.w	sl, #0
 800ab84:	f8bc b000 	ldrh.w	fp, [ip]
 800ab88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ab8c:	fb09 770b 	mla	r7, r9, fp, r7
 800ab90:	4457      	add	r7, sl
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ab98:	f84e 3b04 	str.w	r3, [lr], #4
 800ab9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aba0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aba4:	f8be 3000 	ldrh.w	r3, [lr]
 800aba8:	fb09 330a 	mla	r3, r9, sl, r3
 800abac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800abb0:	4562      	cmp	r2, ip
 800abb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abb6:	d8e5      	bhi.n	800ab84 <__multiply+0x10c>
 800abb8:	9f01      	ldr	r7, [sp, #4]
 800abba:	51eb      	str	r3, [r5, r7]
 800abbc:	3504      	adds	r5, #4
 800abbe:	e799      	b.n	800aaf4 <__multiply+0x7c>
 800abc0:	3e01      	subs	r6, #1
 800abc2:	e79b      	b.n	800aafc <__multiply+0x84>
 800abc4:	0800da8b 	.word	0x0800da8b
 800abc8:	0800da9c 	.word	0x0800da9c

0800abcc <__pow5mult>:
 800abcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abd0:	4615      	mov	r5, r2
 800abd2:	f012 0203 	ands.w	r2, r2, #3
 800abd6:	4607      	mov	r7, r0
 800abd8:	460e      	mov	r6, r1
 800abda:	d007      	beq.n	800abec <__pow5mult+0x20>
 800abdc:	4c25      	ldr	r4, [pc, #148]	@ (800ac74 <__pow5mult+0xa8>)
 800abde:	3a01      	subs	r2, #1
 800abe0:	2300      	movs	r3, #0
 800abe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abe6:	f7ff fe55 	bl	800a894 <__multadd>
 800abea:	4606      	mov	r6, r0
 800abec:	10ad      	asrs	r5, r5, #2
 800abee:	d03d      	beq.n	800ac6c <__pow5mult+0xa0>
 800abf0:	69fc      	ldr	r4, [r7, #28]
 800abf2:	b97c      	cbnz	r4, 800ac14 <__pow5mult+0x48>
 800abf4:	2010      	movs	r0, #16
 800abf6:	f7ff fd35 	bl	800a664 <malloc>
 800abfa:	4602      	mov	r2, r0
 800abfc:	61f8      	str	r0, [r7, #28]
 800abfe:	b928      	cbnz	r0, 800ac0c <__pow5mult+0x40>
 800ac00:	4b1d      	ldr	r3, [pc, #116]	@ (800ac78 <__pow5mult+0xac>)
 800ac02:	481e      	ldr	r0, [pc, #120]	@ (800ac7c <__pow5mult+0xb0>)
 800ac04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ac08:	f001 feee 	bl	800c9e8 <__assert_func>
 800ac0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac10:	6004      	str	r4, [r0, #0]
 800ac12:	60c4      	str	r4, [r0, #12]
 800ac14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ac18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac1c:	b94c      	cbnz	r4, 800ac32 <__pow5mult+0x66>
 800ac1e:	f240 2171 	movw	r1, #625	@ 0x271
 800ac22:	4638      	mov	r0, r7
 800ac24:	f7ff ff12 	bl	800aa4c <__i2b>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac2e:	4604      	mov	r4, r0
 800ac30:	6003      	str	r3, [r0, #0]
 800ac32:	f04f 0900 	mov.w	r9, #0
 800ac36:	07eb      	lsls	r3, r5, #31
 800ac38:	d50a      	bpl.n	800ac50 <__pow5mult+0x84>
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	4622      	mov	r2, r4
 800ac3e:	4638      	mov	r0, r7
 800ac40:	f7ff ff1a 	bl	800aa78 <__multiply>
 800ac44:	4631      	mov	r1, r6
 800ac46:	4680      	mov	r8, r0
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f7ff fe01 	bl	800a850 <_Bfree>
 800ac4e:	4646      	mov	r6, r8
 800ac50:	106d      	asrs	r5, r5, #1
 800ac52:	d00b      	beq.n	800ac6c <__pow5mult+0xa0>
 800ac54:	6820      	ldr	r0, [r4, #0]
 800ac56:	b938      	cbnz	r0, 800ac68 <__pow5mult+0x9c>
 800ac58:	4622      	mov	r2, r4
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	4638      	mov	r0, r7
 800ac5e:	f7ff ff0b 	bl	800aa78 <__multiply>
 800ac62:	6020      	str	r0, [r4, #0]
 800ac64:	f8c0 9000 	str.w	r9, [r0]
 800ac68:	4604      	mov	r4, r0
 800ac6a:	e7e4      	b.n	800ac36 <__pow5mult+0x6a>
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac72:	bf00      	nop
 800ac74:	0800daf8 	.word	0x0800daf8
 800ac78:	0800da1c 	.word	0x0800da1c
 800ac7c:	0800da9c 	.word	0x0800da9c

0800ac80 <__lshift>:
 800ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac84:	460c      	mov	r4, r1
 800ac86:	6849      	ldr	r1, [r1, #4]
 800ac88:	6923      	ldr	r3, [r4, #16]
 800ac8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac8e:	68a3      	ldr	r3, [r4, #8]
 800ac90:	4607      	mov	r7, r0
 800ac92:	4691      	mov	r9, r2
 800ac94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac98:	f108 0601 	add.w	r6, r8, #1
 800ac9c:	42b3      	cmp	r3, r6
 800ac9e:	db0b      	blt.n	800acb8 <__lshift+0x38>
 800aca0:	4638      	mov	r0, r7
 800aca2:	f7ff fd95 	bl	800a7d0 <_Balloc>
 800aca6:	4605      	mov	r5, r0
 800aca8:	b948      	cbnz	r0, 800acbe <__lshift+0x3e>
 800acaa:	4602      	mov	r2, r0
 800acac:	4b28      	ldr	r3, [pc, #160]	@ (800ad50 <__lshift+0xd0>)
 800acae:	4829      	ldr	r0, [pc, #164]	@ (800ad54 <__lshift+0xd4>)
 800acb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800acb4:	f001 fe98 	bl	800c9e8 <__assert_func>
 800acb8:	3101      	adds	r1, #1
 800acba:	005b      	lsls	r3, r3, #1
 800acbc:	e7ee      	b.n	800ac9c <__lshift+0x1c>
 800acbe:	2300      	movs	r3, #0
 800acc0:	f100 0114 	add.w	r1, r0, #20
 800acc4:	f100 0210 	add.w	r2, r0, #16
 800acc8:	4618      	mov	r0, r3
 800acca:	4553      	cmp	r3, sl
 800accc:	db33      	blt.n	800ad36 <__lshift+0xb6>
 800acce:	6920      	ldr	r0, [r4, #16]
 800acd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acd4:	f104 0314 	add.w	r3, r4, #20
 800acd8:	f019 091f 	ands.w	r9, r9, #31
 800acdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ace0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ace4:	d02b      	beq.n	800ad3e <__lshift+0xbe>
 800ace6:	f1c9 0e20 	rsb	lr, r9, #32
 800acea:	468a      	mov	sl, r1
 800acec:	2200      	movs	r2, #0
 800acee:	6818      	ldr	r0, [r3, #0]
 800acf0:	fa00 f009 	lsl.w	r0, r0, r9
 800acf4:	4310      	orrs	r0, r2
 800acf6:	f84a 0b04 	str.w	r0, [sl], #4
 800acfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800acfe:	459c      	cmp	ip, r3
 800ad00:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad04:	d8f3      	bhi.n	800acee <__lshift+0x6e>
 800ad06:	ebac 0304 	sub.w	r3, ip, r4
 800ad0a:	3b15      	subs	r3, #21
 800ad0c:	f023 0303 	bic.w	r3, r3, #3
 800ad10:	3304      	adds	r3, #4
 800ad12:	f104 0015 	add.w	r0, r4, #21
 800ad16:	4584      	cmp	ip, r0
 800ad18:	bf38      	it	cc
 800ad1a:	2304      	movcc	r3, #4
 800ad1c:	50ca      	str	r2, [r1, r3]
 800ad1e:	b10a      	cbz	r2, 800ad24 <__lshift+0xa4>
 800ad20:	f108 0602 	add.w	r6, r8, #2
 800ad24:	3e01      	subs	r6, #1
 800ad26:	4638      	mov	r0, r7
 800ad28:	612e      	str	r6, [r5, #16]
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	f7ff fd90 	bl	800a850 <_Bfree>
 800ad30:	4628      	mov	r0, r5
 800ad32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad36:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	e7c5      	b.n	800acca <__lshift+0x4a>
 800ad3e:	3904      	subs	r1, #4
 800ad40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad44:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad48:	459c      	cmp	ip, r3
 800ad4a:	d8f9      	bhi.n	800ad40 <__lshift+0xc0>
 800ad4c:	e7ea      	b.n	800ad24 <__lshift+0xa4>
 800ad4e:	bf00      	nop
 800ad50:	0800da8b 	.word	0x0800da8b
 800ad54:	0800da9c 	.word	0x0800da9c

0800ad58 <__mcmp>:
 800ad58:	690a      	ldr	r2, [r1, #16]
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	6900      	ldr	r0, [r0, #16]
 800ad5e:	1a80      	subs	r0, r0, r2
 800ad60:	b530      	push	{r4, r5, lr}
 800ad62:	d10e      	bne.n	800ad82 <__mcmp+0x2a>
 800ad64:	3314      	adds	r3, #20
 800ad66:	3114      	adds	r1, #20
 800ad68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ad6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ad70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ad78:	4295      	cmp	r5, r2
 800ad7a:	d003      	beq.n	800ad84 <__mcmp+0x2c>
 800ad7c:	d205      	bcs.n	800ad8a <__mcmp+0x32>
 800ad7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad82:	bd30      	pop	{r4, r5, pc}
 800ad84:	42a3      	cmp	r3, r4
 800ad86:	d3f3      	bcc.n	800ad70 <__mcmp+0x18>
 800ad88:	e7fb      	b.n	800ad82 <__mcmp+0x2a>
 800ad8a:	2001      	movs	r0, #1
 800ad8c:	e7f9      	b.n	800ad82 <__mcmp+0x2a>
	...

0800ad90 <__mdiff>:
 800ad90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	4689      	mov	r9, r1
 800ad96:	4606      	mov	r6, r0
 800ad98:	4611      	mov	r1, r2
 800ad9a:	4648      	mov	r0, r9
 800ad9c:	4614      	mov	r4, r2
 800ad9e:	f7ff ffdb 	bl	800ad58 <__mcmp>
 800ada2:	1e05      	subs	r5, r0, #0
 800ada4:	d112      	bne.n	800adcc <__mdiff+0x3c>
 800ada6:	4629      	mov	r1, r5
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7ff fd11 	bl	800a7d0 <_Balloc>
 800adae:	4602      	mov	r2, r0
 800adb0:	b928      	cbnz	r0, 800adbe <__mdiff+0x2e>
 800adb2:	4b3f      	ldr	r3, [pc, #252]	@ (800aeb0 <__mdiff+0x120>)
 800adb4:	f240 2137 	movw	r1, #567	@ 0x237
 800adb8:	483e      	ldr	r0, [pc, #248]	@ (800aeb4 <__mdiff+0x124>)
 800adba:	f001 fe15 	bl	800c9e8 <__assert_func>
 800adbe:	2301      	movs	r3, #1
 800adc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adc4:	4610      	mov	r0, r2
 800adc6:	b003      	add	sp, #12
 800adc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adcc:	bfbc      	itt	lt
 800adce:	464b      	movlt	r3, r9
 800add0:	46a1      	movlt	r9, r4
 800add2:	4630      	mov	r0, r6
 800add4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800add8:	bfba      	itte	lt
 800adda:	461c      	movlt	r4, r3
 800addc:	2501      	movlt	r5, #1
 800adde:	2500      	movge	r5, #0
 800ade0:	f7ff fcf6 	bl	800a7d0 <_Balloc>
 800ade4:	4602      	mov	r2, r0
 800ade6:	b918      	cbnz	r0, 800adf0 <__mdiff+0x60>
 800ade8:	4b31      	ldr	r3, [pc, #196]	@ (800aeb0 <__mdiff+0x120>)
 800adea:	f240 2145 	movw	r1, #581	@ 0x245
 800adee:	e7e3      	b.n	800adb8 <__mdiff+0x28>
 800adf0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800adf4:	6926      	ldr	r6, [r4, #16]
 800adf6:	60c5      	str	r5, [r0, #12]
 800adf8:	f109 0310 	add.w	r3, r9, #16
 800adfc:	f109 0514 	add.w	r5, r9, #20
 800ae00:	f104 0e14 	add.w	lr, r4, #20
 800ae04:	f100 0b14 	add.w	fp, r0, #20
 800ae08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ae0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	46d9      	mov	r9, fp
 800ae14:	f04f 0c00 	mov.w	ip, #0
 800ae18:	9b01      	ldr	r3, [sp, #4]
 800ae1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ae1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ae22:	9301      	str	r3, [sp, #4]
 800ae24:	fa1f f38a 	uxth.w	r3, sl
 800ae28:	4619      	mov	r1, r3
 800ae2a:	b283      	uxth	r3, r0
 800ae2c:	1acb      	subs	r3, r1, r3
 800ae2e:	0c00      	lsrs	r0, r0, #16
 800ae30:	4463      	add	r3, ip
 800ae32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ae36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ae40:	4576      	cmp	r6, lr
 800ae42:	f849 3b04 	str.w	r3, [r9], #4
 800ae46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ae4a:	d8e5      	bhi.n	800ae18 <__mdiff+0x88>
 800ae4c:	1b33      	subs	r3, r6, r4
 800ae4e:	3b15      	subs	r3, #21
 800ae50:	f023 0303 	bic.w	r3, r3, #3
 800ae54:	3415      	adds	r4, #21
 800ae56:	3304      	adds	r3, #4
 800ae58:	42a6      	cmp	r6, r4
 800ae5a:	bf38      	it	cc
 800ae5c:	2304      	movcc	r3, #4
 800ae5e:	441d      	add	r5, r3
 800ae60:	445b      	add	r3, fp
 800ae62:	461e      	mov	r6, r3
 800ae64:	462c      	mov	r4, r5
 800ae66:	4544      	cmp	r4, r8
 800ae68:	d30e      	bcc.n	800ae88 <__mdiff+0xf8>
 800ae6a:	f108 0103 	add.w	r1, r8, #3
 800ae6e:	1b49      	subs	r1, r1, r5
 800ae70:	f021 0103 	bic.w	r1, r1, #3
 800ae74:	3d03      	subs	r5, #3
 800ae76:	45a8      	cmp	r8, r5
 800ae78:	bf38      	it	cc
 800ae7a:	2100      	movcc	r1, #0
 800ae7c:	440b      	add	r3, r1
 800ae7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae82:	b191      	cbz	r1, 800aeaa <__mdiff+0x11a>
 800ae84:	6117      	str	r7, [r2, #16]
 800ae86:	e79d      	b.n	800adc4 <__mdiff+0x34>
 800ae88:	f854 1b04 	ldr.w	r1, [r4], #4
 800ae8c:	46e6      	mov	lr, ip
 800ae8e:	0c08      	lsrs	r0, r1, #16
 800ae90:	fa1c fc81 	uxtah	ip, ip, r1
 800ae94:	4471      	add	r1, lr
 800ae96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ae9a:	b289      	uxth	r1, r1
 800ae9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aea0:	f846 1b04 	str.w	r1, [r6], #4
 800aea4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aea8:	e7dd      	b.n	800ae66 <__mdiff+0xd6>
 800aeaa:	3f01      	subs	r7, #1
 800aeac:	e7e7      	b.n	800ae7e <__mdiff+0xee>
 800aeae:	bf00      	nop
 800aeb0:	0800da8b 	.word	0x0800da8b
 800aeb4:	0800da9c 	.word	0x0800da9c

0800aeb8 <__ulp>:
 800aeb8:	b082      	sub	sp, #8
 800aeba:	ed8d 0b00 	vstr	d0, [sp]
 800aebe:	9a01      	ldr	r2, [sp, #4]
 800aec0:	4b0f      	ldr	r3, [pc, #60]	@ (800af00 <__ulp+0x48>)
 800aec2:	4013      	ands	r3, r2
 800aec4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	dc08      	bgt.n	800aede <__ulp+0x26>
 800aecc:	425b      	negs	r3, r3
 800aece:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aed2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aed6:	da04      	bge.n	800aee2 <__ulp+0x2a>
 800aed8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aedc:	4113      	asrs	r3, r2
 800aede:	2200      	movs	r2, #0
 800aee0:	e008      	b.n	800aef4 <__ulp+0x3c>
 800aee2:	f1a2 0314 	sub.w	r3, r2, #20
 800aee6:	2b1e      	cmp	r3, #30
 800aee8:	bfda      	itte	le
 800aeea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aeee:	40da      	lsrle	r2, r3
 800aef0:	2201      	movgt	r2, #1
 800aef2:	2300      	movs	r3, #0
 800aef4:	4619      	mov	r1, r3
 800aef6:	4610      	mov	r0, r2
 800aef8:	ec41 0b10 	vmov	d0, r0, r1
 800aefc:	b002      	add	sp, #8
 800aefe:	4770      	bx	lr
 800af00:	7ff00000 	.word	0x7ff00000

0800af04 <__b2d>:
 800af04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af08:	6906      	ldr	r6, [r0, #16]
 800af0a:	f100 0814 	add.w	r8, r0, #20
 800af0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800af12:	1f37      	subs	r7, r6, #4
 800af14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800af18:	4610      	mov	r0, r2
 800af1a:	f7ff fd4b 	bl	800a9b4 <__hi0bits>
 800af1e:	f1c0 0320 	rsb	r3, r0, #32
 800af22:	280a      	cmp	r0, #10
 800af24:	600b      	str	r3, [r1, #0]
 800af26:	491b      	ldr	r1, [pc, #108]	@ (800af94 <__b2d+0x90>)
 800af28:	dc15      	bgt.n	800af56 <__b2d+0x52>
 800af2a:	f1c0 0c0b 	rsb	ip, r0, #11
 800af2e:	fa22 f30c 	lsr.w	r3, r2, ip
 800af32:	45b8      	cmp	r8, r7
 800af34:	ea43 0501 	orr.w	r5, r3, r1
 800af38:	bf34      	ite	cc
 800af3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af3e:	2300      	movcs	r3, #0
 800af40:	3015      	adds	r0, #21
 800af42:	fa02 f000 	lsl.w	r0, r2, r0
 800af46:	fa23 f30c 	lsr.w	r3, r3, ip
 800af4a:	4303      	orrs	r3, r0
 800af4c:	461c      	mov	r4, r3
 800af4e:	ec45 4b10 	vmov	d0, r4, r5
 800af52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af56:	45b8      	cmp	r8, r7
 800af58:	bf3a      	itte	cc
 800af5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af5e:	f1a6 0708 	subcc.w	r7, r6, #8
 800af62:	2300      	movcs	r3, #0
 800af64:	380b      	subs	r0, #11
 800af66:	d012      	beq.n	800af8e <__b2d+0x8a>
 800af68:	f1c0 0120 	rsb	r1, r0, #32
 800af6c:	fa23 f401 	lsr.w	r4, r3, r1
 800af70:	4082      	lsls	r2, r0
 800af72:	4322      	orrs	r2, r4
 800af74:	4547      	cmp	r7, r8
 800af76:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800af7a:	bf8c      	ite	hi
 800af7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800af80:	2200      	movls	r2, #0
 800af82:	4083      	lsls	r3, r0
 800af84:	40ca      	lsrs	r2, r1
 800af86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800af8a:	4313      	orrs	r3, r2
 800af8c:	e7de      	b.n	800af4c <__b2d+0x48>
 800af8e:	ea42 0501 	orr.w	r5, r2, r1
 800af92:	e7db      	b.n	800af4c <__b2d+0x48>
 800af94:	3ff00000 	.word	0x3ff00000

0800af98 <__d2b>:
 800af98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af9c:	460f      	mov	r7, r1
 800af9e:	2101      	movs	r1, #1
 800afa0:	ec59 8b10 	vmov	r8, r9, d0
 800afa4:	4616      	mov	r6, r2
 800afa6:	f7ff fc13 	bl	800a7d0 <_Balloc>
 800afaa:	4604      	mov	r4, r0
 800afac:	b930      	cbnz	r0, 800afbc <__d2b+0x24>
 800afae:	4602      	mov	r2, r0
 800afb0:	4b23      	ldr	r3, [pc, #140]	@ (800b040 <__d2b+0xa8>)
 800afb2:	4824      	ldr	r0, [pc, #144]	@ (800b044 <__d2b+0xac>)
 800afb4:	f240 310f 	movw	r1, #783	@ 0x30f
 800afb8:	f001 fd16 	bl	800c9e8 <__assert_func>
 800afbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800afc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afc4:	b10d      	cbz	r5, 800afca <__d2b+0x32>
 800afc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afca:	9301      	str	r3, [sp, #4]
 800afcc:	f1b8 0300 	subs.w	r3, r8, #0
 800afd0:	d023      	beq.n	800b01a <__d2b+0x82>
 800afd2:	4668      	mov	r0, sp
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	f7ff fd0c 	bl	800a9f2 <__lo0bits>
 800afda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800afde:	b1d0      	cbz	r0, 800b016 <__d2b+0x7e>
 800afe0:	f1c0 0320 	rsb	r3, r0, #32
 800afe4:	fa02 f303 	lsl.w	r3, r2, r3
 800afe8:	430b      	orrs	r3, r1
 800afea:	40c2      	lsrs	r2, r0
 800afec:	6163      	str	r3, [r4, #20]
 800afee:	9201      	str	r2, [sp, #4]
 800aff0:	9b01      	ldr	r3, [sp, #4]
 800aff2:	61a3      	str	r3, [r4, #24]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	bf0c      	ite	eq
 800aff8:	2201      	moveq	r2, #1
 800affa:	2202      	movne	r2, #2
 800affc:	6122      	str	r2, [r4, #16]
 800affe:	b1a5      	cbz	r5, 800b02a <__d2b+0x92>
 800b000:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b004:	4405      	add	r5, r0
 800b006:	603d      	str	r5, [r7, #0]
 800b008:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b00c:	6030      	str	r0, [r6, #0]
 800b00e:	4620      	mov	r0, r4
 800b010:	b003      	add	sp, #12
 800b012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b016:	6161      	str	r1, [r4, #20]
 800b018:	e7ea      	b.n	800aff0 <__d2b+0x58>
 800b01a:	a801      	add	r0, sp, #4
 800b01c:	f7ff fce9 	bl	800a9f2 <__lo0bits>
 800b020:	9b01      	ldr	r3, [sp, #4]
 800b022:	6163      	str	r3, [r4, #20]
 800b024:	3020      	adds	r0, #32
 800b026:	2201      	movs	r2, #1
 800b028:	e7e8      	b.n	800affc <__d2b+0x64>
 800b02a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b02e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b032:	6038      	str	r0, [r7, #0]
 800b034:	6918      	ldr	r0, [r3, #16]
 800b036:	f7ff fcbd 	bl	800a9b4 <__hi0bits>
 800b03a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b03e:	e7e5      	b.n	800b00c <__d2b+0x74>
 800b040:	0800da8b 	.word	0x0800da8b
 800b044:	0800da9c 	.word	0x0800da9c

0800b048 <__ratio>:
 800b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	b085      	sub	sp, #20
 800b04e:	e9cd 1000 	strd	r1, r0, [sp]
 800b052:	a902      	add	r1, sp, #8
 800b054:	f7ff ff56 	bl	800af04 <__b2d>
 800b058:	9800      	ldr	r0, [sp, #0]
 800b05a:	a903      	add	r1, sp, #12
 800b05c:	ec55 4b10 	vmov	r4, r5, d0
 800b060:	f7ff ff50 	bl	800af04 <__b2d>
 800b064:	9b01      	ldr	r3, [sp, #4]
 800b066:	6919      	ldr	r1, [r3, #16]
 800b068:	9b00      	ldr	r3, [sp, #0]
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	1ac9      	subs	r1, r1, r3
 800b06e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b072:	1a9b      	subs	r3, r3, r2
 800b074:	ec5b ab10 	vmov	sl, fp, d0
 800b078:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	bfce      	itee	gt
 800b080:	462a      	movgt	r2, r5
 800b082:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b086:	465a      	movle	r2, fp
 800b088:	462f      	mov	r7, r5
 800b08a:	46d9      	mov	r9, fp
 800b08c:	bfcc      	ite	gt
 800b08e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b092:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b096:	464b      	mov	r3, r9
 800b098:	4652      	mov	r2, sl
 800b09a:	4620      	mov	r0, r4
 800b09c:	4639      	mov	r1, r7
 800b09e:	f7f5 fbdd 	bl	800085c <__aeabi_ddiv>
 800b0a2:	ec41 0b10 	vmov	d0, r0, r1
 800b0a6:	b005      	add	sp, #20
 800b0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0ac <__copybits>:
 800b0ac:	3901      	subs	r1, #1
 800b0ae:	b570      	push	{r4, r5, r6, lr}
 800b0b0:	1149      	asrs	r1, r1, #5
 800b0b2:	6914      	ldr	r4, [r2, #16]
 800b0b4:	3101      	adds	r1, #1
 800b0b6:	f102 0314 	add.w	r3, r2, #20
 800b0ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b0be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0c2:	1f05      	subs	r5, r0, #4
 800b0c4:	42a3      	cmp	r3, r4
 800b0c6:	d30c      	bcc.n	800b0e2 <__copybits+0x36>
 800b0c8:	1aa3      	subs	r3, r4, r2
 800b0ca:	3b11      	subs	r3, #17
 800b0cc:	f023 0303 	bic.w	r3, r3, #3
 800b0d0:	3211      	adds	r2, #17
 800b0d2:	42a2      	cmp	r2, r4
 800b0d4:	bf88      	it	hi
 800b0d6:	2300      	movhi	r3, #0
 800b0d8:	4418      	add	r0, r3
 800b0da:	2300      	movs	r3, #0
 800b0dc:	4288      	cmp	r0, r1
 800b0de:	d305      	bcc.n	800b0ec <__copybits+0x40>
 800b0e0:	bd70      	pop	{r4, r5, r6, pc}
 800b0e2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b0e6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b0ea:	e7eb      	b.n	800b0c4 <__copybits+0x18>
 800b0ec:	f840 3b04 	str.w	r3, [r0], #4
 800b0f0:	e7f4      	b.n	800b0dc <__copybits+0x30>

0800b0f2 <__any_on>:
 800b0f2:	f100 0214 	add.w	r2, r0, #20
 800b0f6:	6900      	ldr	r0, [r0, #16]
 800b0f8:	114b      	asrs	r3, r1, #5
 800b0fa:	4298      	cmp	r0, r3
 800b0fc:	b510      	push	{r4, lr}
 800b0fe:	db11      	blt.n	800b124 <__any_on+0x32>
 800b100:	dd0a      	ble.n	800b118 <__any_on+0x26>
 800b102:	f011 011f 	ands.w	r1, r1, #31
 800b106:	d007      	beq.n	800b118 <__any_on+0x26>
 800b108:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b10c:	fa24 f001 	lsr.w	r0, r4, r1
 800b110:	fa00 f101 	lsl.w	r1, r0, r1
 800b114:	428c      	cmp	r4, r1
 800b116:	d10b      	bne.n	800b130 <__any_on+0x3e>
 800b118:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d803      	bhi.n	800b128 <__any_on+0x36>
 800b120:	2000      	movs	r0, #0
 800b122:	bd10      	pop	{r4, pc}
 800b124:	4603      	mov	r3, r0
 800b126:	e7f7      	b.n	800b118 <__any_on+0x26>
 800b128:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b12c:	2900      	cmp	r1, #0
 800b12e:	d0f5      	beq.n	800b11c <__any_on+0x2a>
 800b130:	2001      	movs	r0, #1
 800b132:	e7f6      	b.n	800b122 <__any_on+0x30>

0800b134 <sulp>:
 800b134:	b570      	push	{r4, r5, r6, lr}
 800b136:	4604      	mov	r4, r0
 800b138:	460d      	mov	r5, r1
 800b13a:	ec45 4b10 	vmov	d0, r4, r5
 800b13e:	4616      	mov	r6, r2
 800b140:	f7ff feba 	bl	800aeb8 <__ulp>
 800b144:	ec51 0b10 	vmov	r0, r1, d0
 800b148:	b17e      	cbz	r6, 800b16a <sulp+0x36>
 800b14a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b14e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b152:	2b00      	cmp	r3, #0
 800b154:	dd09      	ble.n	800b16a <sulp+0x36>
 800b156:	051b      	lsls	r3, r3, #20
 800b158:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b15c:	2400      	movs	r4, #0
 800b15e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b162:	4622      	mov	r2, r4
 800b164:	462b      	mov	r3, r5
 800b166:	f7f5 fa4f 	bl	8000608 <__aeabi_dmul>
 800b16a:	ec41 0b10 	vmov	d0, r0, r1
 800b16e:	bd70      	pop	{r4, r5, r6, pc}

0800b170 <_strtod_l>:
 800b170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b174:	b09f      	sub	sp, #124	@ 0x7c
 800b176:	460c      	mov	r4, r1
 800b178:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b17a:	2200      	movs	r2, #0
 800b17c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b17e:	9005      	str	r0, [sp, #20]
 800b180:	f04f 0a00 	mov.w	sl, #0
 800b184:	f04f 0b00 	mov.w	fp, #0
 800b188:	460a      	mov	r2, r1
 800b18a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b18c:	7811      	ldrb	r1, [r2, #0]
 800b18e:	292b      	cmp	r1, #43	@ 0x2b
 800b190:	d04a      	beq.n	800b228 <_strtod_l+0xb8>
 800b192:	d838      	bhi.n	800b206 <_strtod_l+0x96>
 800b194:	290d      	cmp	r1, #13
 800b196:	d832      	bhi.n	800b1fe <_strtod_l+0x8e>
 800b198:	2908      	cmp	r1, #8
 800b19a:	d832      	bhi.n	800b202 <_strtod_l+0x92>
 800b19c:	2900      	cmp	r1, #0
 800b19e:	d03b      	beq.n	800b218 <_strtod_l+0xa8>
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b1a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b1a6:	782a      	ldrb	r2, [r5, #0]
 800b1a8:	2a30      	cmp	r2, #48	@ 0x30
 800b1aa:	f040 80b3 	bne.w	800b314 <_strtod_l+0x1a4>
 800b1ae:	786a      	ldrb	r2, [r5, #1]
 800b1b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b1b4:	2a58      	cmp	r2, #88	@ 0x58
 800b1b6:	d16e      	bne.n	800b296 <_strtod_l+0x126>
 800b1b8:	9302      	str	r3, [sp, #8]
 800b1ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1bc:	9301      	str	r3, [sp, #4]
 800b1be:	ab1a      	add	r3, sp, #104	@ 0x68
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	4a8e      	ldr	r2, [pc, #568]	@ (800b3fc <_strtod_l+0x28c>)
 800b1c4:	9805      	ldr	r0, [sp, #20]
 800b1c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b1c8:	a919      	add	r1, sp, #100	@ 0x64
 800b1ca:	f001 fca7 	bl	800cb1c <__gethex>
 800b1ce:	f010 060f 	ands.w	r6, r0, #15
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	d005      	beq.n	800b1e2 <_strtod_l+0x72>
 800b1d6:	2e06      	cmp	r6, #6
 800b1d8:	d128      	bne.n	800b22c <_strtod_l+0xbc>
 800b1da:	3501      	adds	r5, #1
 800b1dc:	2300      	movs	r3, #0
 800b1de:	9519      	str	r5, [sp, #100]	@ 0x64
 800b1e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f040 858e 	bne.w	800bd06 <_strtod_l+0xb96>
 800b1ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1ec:	b1cb      	cbz	r3, 800b222 <_strtod_l+0xb2>
 800b1ee:	4652      	mov	r2, sl
 800b1f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b1f4:	ec43 2b10 	vmov	d0, r2, r3
 800b1f8:	b01f      	add	sp, #124	@ 0x7c
 800b1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fe:	2920      	cmp	r1, #32
 800b200:	d1ce      	bne.n	800b1a0 <_strtod_l+0x30>
 800b202:	3201      	adds	r2, #1
 800b204:	e7c1      	b.n	800b18a <_strtod_l+0x1a>
 800b206:	292d      	cmp	r1, #45	@ 0x2d
 800b208:	d1ca      	bne.n	800b1a0 <_strtod_l+0x30>
 800b20a:	2101      	movs	r1, #1
 800b20c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b20e:	1c51      	adds	r1, r2, #1
 800b210:	9119      	str	r1, [sp, #100]	@ 0x64
 800b212:	7852      	ldrb	r2, [r2, #1]
 800b214:	2a00      	cmp	r2, #0
 800b216:	d1c5      	bne.n	800b1a4 <_strtod_l+0x34>
 800b218:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b21a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f040 8570 	bne.w	800bd02 <_strtod_l+0xb92>
 800b222:	4652      	mov	r2, sl
 800b224:	465b      	mov	r3, fp
 800b226:	e7e5      	b.n	800b1f4 <_strtod_l+0x84>
 800b228:	2100      	movs	r1, #0
 800b22a:	e7ef      	b.n	800b20c <_strtod_l+0x9c>
 800b22c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b22e:	b13a      	cbz	r2, 800b240 <_strtod_l+0xd0>
 800b230:	2135      	movs	r1, #53	@ 0x35
 800b232:	a81c      	add	r0, sp, #112	@ 0x70
 800b234:	f7ff ff3a 	bl	800b0ac <__copybits>
 800b238:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b23a:	9805      	ldr	r0, [sp, #20]
 800b23c:	f7ff fb08 	bl	800a850 <_Bfree>
 800b240:	3e01      	subs	r6, #1
 800b242:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b244:	2e04      	cmp	r6, #4
 800b246:	d806      	bhi.n	800b256 <_strtod_l+0xe6>
 800b248:	e8df f006 	tbb	[pc, r6]
 800b24c:	201d0314 	.word	0x201d0314
 800b250:	14          	.byte	0x14
 800b251:	00          	.byte	0x00
 800b252:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b256:	05e1      	lsls	r1, r4, #23
 800b258:	bf48      	it	mi
 800b25a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b25e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b262:	0d1b      	lsrs	r3, r3, #20
 800b264:	051b      	lsls	r3, r3, #20
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1bb      	bne.n	800b1e2 <_strtod_l+0x72>
 800b26a:	f7fe fb21 	bl	80098b0 <__errno>
 800b26e:	2322      	movs	r3, #34	@ 0x22
 800b270:	6003      	str	r3, [r0, #0]
 800b272:	e7b6      	b.n	800b1e2 <_strtod_l+0x72>
 800b274:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b278:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b27c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b280:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b284:	e7e7      	b.n	800b256 <_strtod_l+0xe6>
 800b286:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b404 <_strtod_l+0x294>
 800b28a:	e7e4      	b.n	800b256 <_strtod_l+0xe6>
 800b28c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b290:	f04f 3aff 	mov.w	sl, #4294967295
 800b294:	e7df      	b.n	800b256 <_strtod_l+0xe6>
 800b296:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b29c:	785b      	ldrb	r3, [r3, #1]
 800b29e:	2b30      	cmp	r3, #48	@ 0x30
 800b2a0:	d0f9      	beq.n	800b296 <_strtod_l+0x126>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d09d      	beq.n	800b1e2 <_strtod_l+0x72>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b2ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9308      	str	r3, [sp, #32]
 800b2b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2b4:	461f      	mov	r7, r3
 800b2b6:	220a      	movs	r2, #10
 800b2b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b2ba:	7805      	ldrb	r5, [r0, #0]
 800b2bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b2c0:	b2d9      	uxtb	r1, r3
 800b2c2:	2909      	cmp	r1, #9
 800b2c4:	d928      	bls.n	800b318 <_strtod_l+0x1a8>
 800b2c6:	494e      	ldr	r1, [pc, #312]	@ (800b400 <_strtod_l+0x290>)
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f001 fb62 	bl	800c992 <strncmp>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d032      	beq.n	800b338 <_strtod_l+0x1c8>
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	462a      	mov	r2, r5
 800b2d6:	4681      	mov	r9, r0
 800b2d8:	463d      	mov	r5, r7
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2a65      	cmp	r2, #101	@ 0x65
 800b2de:	d001      	beq.n	800b2e4 <_strtod_l+0x174>
 800b2e0:	2a45      	cmp	r2, #69	@ 0x45
 800b2e2:	d114      	bne.n	800b30e <_strtod_l+0x19e>
 800b2e4:	b91d      	cbnz	r5, 800b2ee <_strtod_l+0x17e>
 800b2e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2e8:	4302      	orrs	r2, r0
 800b2ea:	d095      	beq.n	800b218 <_strtod_l+0xa8>
 800b2ec:	2500      	movs	r5, #0
 800b2ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b2f0:	1c62      	adds	r2, r4, #1
 800b2f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2f4:	7862      	ldrb	r2, [r4, #1]
 800b2f6:	2a2b      	cmp	r2, #43	@ 0x2b
 800b2f8:	d077      	beq.n	800b3ea <_strtod_l+0x27a>
 800b2fa:	2a2d      	cmp	r2, #45	@ 0x2d
 800b2fc:	d07b      	beq.n	800b3f6 <_strtod_l+0x286>
 800b2fe:	f04f 0c00 	mov.w	ip, #0
 800b302:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b306:	2909      	cmp	r1, #9
 800b308:	f240 8082 	bls.w	800b410 <_strtod_l+0x2a0>
 800b30c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b30e:	f04f 0800 	mov.w	r8, #0
 800b312:	e0a2      	b.n	800b45a <_strtod_l+0x2ea>
 800b314:	2300      	movs	r3, #0
 800b316:	e7c7      	b.n	800b2a8 <_strtod_l+0x138>
 800b318:	2f08      	cmp	r7, #8
 800b31a:	bfd5      	itete	le
 800b31c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b31e:	9908      	ldrgt	r1, [sp, #32]
 800b320:	fb02 3301 	mlale	r3, r2, r1, r3
 800b324:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b328:	f100 0001 	add.w	r0, r0, #1
 800b32c:	bfd4      	ite	le
 800b32e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b330:	9308      	strgt	r3, [sp, #32]
 800b332:	3701      	adds	r7, #1
 800b334:	9019      	str	r0, [sp, #100]	@ 0x64
 800b336:	e7bf      	b.n	800b2b8 <_strtod_l+0x148>
 800b338:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b33a:	1c5a      	adds	r2, r3, #1
 800b33c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b33e:	785a      	ldrb	r2, [r3, #1]
 800b340:	b37f      	cbz	r7, 800b3a2 <_strtod_l+0x232>
 800b342:	4681      	mov	r9, r0
 800b344:	463d      	mov	r5, r7
 800b346:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b34a:	2b09      	cmp	r3, #9
 800b34c:	d912      	bls.n	800b374 <_strtod_l+0x204>
 800b34e:	2301      	movs	r3, #1
 800b350:	e7c4      	b.n	800b2dc <_strtod_l+0x16c>
 800b352:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b354:	1c5a      	adds	r2, r3, #1
 800b356:	9219      	str	r2, [sp, #100]	@ 0x64
 800b358:	785a      	ldrb	r2, [r3, #1]
 800b35a:	3001      	adds	r0, #1
 800b35c:	2a30      	cmp	r2, #48	@ 0x30
 800b35e:	d0f8      	beq.n	800b352 <_strtod_l+0x1e2>
 800b360:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b364:	2b08      	cmp	r3, #8
 800b366:	f200 84d3 	bhi.w	800bd10 <_strtod_l+0xba0>
 800b36a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b36c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b36e:	4681      	mov	r9, r0
 800b370:	2000      	movs	r0, #0
 800b372:	4605      	mov	r5, r0
 800b374:	3a30      	subs	r2, #48	@ 0x30
 800b376:	f100 0301 	add.w	r3, r0, #1
 800b37a:	d02a      	beq.n	800b3d2 <_strtod_l+0x262>
 800b37c:	4499      	add	r9, r3
 800b37e:	eb00 0c05 	add.w	ip, r0, r5
 800b382:	462b      	mov	r3, r5
 800b384:	210a      	movs	r1, #10
 800b386:	4563      	cmp	r3, ip
 800b388:	d10d      	bne.n	800b3a6 <_strtod_l+0x236>
 800b38a:	1c69      	adds	r1, r5, #1
 800b38c:	4401      	add	r1, r0
 800b38e:	4428      	add	r0, r5
 800b390:	2808      	cmp	r0, #8
 800b392:	dc16      	bgt.n	800b3c2 <_strtod_l+0x252>
 800b394:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b396:	230a      	movs	r3, #10
 800b398:	fb03 2300 	mla	r3, r3, r0, r2
 800b39c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e018      	b.n	800b3d4 <_strtod_l+0x264>
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	e7da      	b.n	800b35c <_strtod_l+0x1ec>
 800b3a6:	2b08      	cmp	r3, #8
 800b3a8:	f103 0301 	add.w	r3, r3, #1
 800b3ac:	dc03      	bgt.n	800b3b6 <_strtod_l+0x246>
 800b3ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b3b0:	434e      	muls	r6, r1
 800b3b2:	960a      	str	r6, [sp, #40]	@ 0x28
 800b3b4:	e7e7      	b.n	800b386 <_strtod_l+0x216>
 800b3b6:	2b10      	cmp	r3, #16
 800b3b8:	bfde      	ittt	le
 800b3ba:	9e08      	ldrle	r6, [sp, #32]
 800b3bc:	434e      	mulle	r6, r1
 800b3be:	9608      	strle	r6, [sp, #32]
 800b3c0:	e7e1      	b.n	800b386 <_strtod_l+0x216>
 800b3c2:	280f      	cmp	r0, #15
 800b3c4:	dceb      	bgt.n	800b39e <_strtod_l+0x22e>
 800b3c6:	9808      	ldr	r0, [sp, #32]
 800b3c8:	230a      	movs	r3, #10
 800b3ca:	fb03 2300 	mla	r3, r3, r0, r2
 800b3ce:	9308      	str	r3, [sp, #32]
 800b3d0:	e7e5      	b.n	800b39e <_strtod_l+0x22e>
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b3d6:	1c50      	adds	r0, r2, #1
 800b3d8:	9019      	str	r0, [sp, #100]	@ 0x64
 800b3da:	7852      	ldrb	r2, [r2, #1]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	460d      	mov	r5, r1
 800b3e0:	e7b1      	b.n	800b346 <_strtod_l+0x1d6>
 800b3e2:	f04f 0900 	mov.w	r9, #0
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e77d      	b.n	800b2e6 <_strtod_l+0x176>
 800b3ea:	f04f 0c00 	mov.w	ip, #0
 800b3ee:	1ca2      	adds	r2, r4, #2
 800b3f0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3f2:	78a2      	ldrb	r2, [r4, #2]
 800b3f4:	e785      	b.n	800b302 <_strtod_l+0x192>
 800b3f6:	f04f 0c01 	mov.w	ip, #1
 800b3fa:	e7f8      	b.n	800b3ee <_strtod_l+0x27e>
 800b3fc:	0800dc10 	.word	0x0800dc10
 800b400:	0800dbf8 	.word	0x0800dbf8
 800b404:	7ff00000 	.word	0x7ff00000
 800b408:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b40a:	1c51      	adds	r1, r2, #1
 800b40c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b40e:	7852      	ldrb	r2, [r2, #1]
 800b410:	2a30      	cmp	r2, #48	@ 0x30
 800b412:	d0f9      	beq.n	800b408 <_strtod_l+0x298>
 800b414:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b418:	2908      	cmp	r1, #8
 800b41a:	f63f af78 	bhi.w	800b30e <_strtod_l+0x19e>
 800b41e:	3a30      	subs	r2, #48	@ 0x30
 800b420:	920e      	str	r2, [sp, #56]	@ 0x38
 800b422:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b424:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b426:	f04f 080a 	mov.w	r8, #10
 800b42a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b42c:	1c56      	adds	r6, r2, #1
 800b42e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b430:	7852      	ldrb	r2, [r2, #1]
 800b432:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b436:	f1be 0f09 	cmp.w	lr, #9
 800b43a:	d939      	bls.n	800b4b0 <_strtod_l+0x340>
 800b43c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b43e:	1a76      	subs	r6, r6, r1
 800b440:	2e08      	cmp	r6, #8
 800b442:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b446:	dc03      	bgt.n	800b450 <_strtod_l+0x2e0>
 800b448:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b44a:	4588      	cmp	r8, r1
 800b44c:	bfa8      	it	ge
 800b44e:	4688      	movge	r8, r1
 800b450:	f1bc 0f00 	cmp.w	ip, #0
 800b454:	d001      	beq.n	800b45a <_strtod_l+0x2ea>
 800b456:	f1c8 0800 	rsb	r8, r8, #0
 800b45a:	2d00      	cmp	r5, #0
 800b45c:	d14e      	bne.n	800b4fc <_strtod_l+0x38c>
 800b45e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b460:	4308      	orrs	r0, r1
 800b462:	f47f aebe 	bne.w	800b1e2 <_strtod_l+0x72>
 800b466:	2b00      	cmp	r3, #0
 800b468:	f47f aed6 	bne.w	800b218 <_strtod_l+0xa8>
 800b46c:	2a69      	cmp	r2, #105	@ 0x69
 800b46e:	d028      	beq.n	800b4c2 <_strtod_l+0x352>
 800b470:	dc25      	bgt.n	800b4be <_strtod_l+0x34e>
 800b472:	2a49      	cmp	r2, #73	@ 0x49
 800b474:	d025      	beq.n	800b4c2 <_strtod_l+0x352>
 800b476:	2a4e      	cmp	r2, #78	@ 0x4e
 800b478:	f47f aece 	bne.w	800b218 <_strtod_l+0xa8>
 800b47c:	499b      	ldr	r1, [pc, #620]	@ (800b6ec <_strtod_l+0x57c>)
 800b47e:	a819      	add	r0, sp, #100	@ 0x64
 800b480:	f001 fd6e 	bl	800cf60 <__match>
 800b484:	2800      	cmp	r0, #0
 800b486:	f43f aec7 	beq.w	800b218 <_strtod_l+0xa8>
 800b48a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	2b28      	cmp	r3, #40	@ 0x28
 800b490:	d12e      	bne.n	800b4f0 <_strtod_l+0x380>
 800b492:	4997      	ldr	r1, [pc, #604]	@ (800b6f0 <_strtod_l+0x580>)
 800b494:	aa1c      	add	r2, sp, #112	@ 0x70
 800b496:	a819      	add	r0, sp, #100	@ 0x64
 800b498:	f001 fd76 	bl	800cf88 <__hexnan>
 800b49c:	2805      	cmp	r0, #5
 800b49e:	d127      	bne.n	800b4f0 <_strtod_l+0x380>
 800b4a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b4a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b4a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b4aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b4ae:	e698      	b.n	800b1e2 <_strtod_l+0x72>
 800b4b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b4b2:	fb08 2101 	mla	r1, r8, r1, r2
 800b4b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b4ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800b4bc:	e7b5      	b.n	800b42a <_strtod_l+0x2ba>
 800b4be:	2a6e      	cmp	r2, #110	@ 0x6e
 800b4c0:	e7da      	b.n	800b478 <_strtod_l+0x308>
 800b4c2:	498c      	ldr	r1, [pc, #560]	@ (800b6f4 <_strtod_l+0x584>)
 800b4c4:	a819      	add	r0, sp, #100	@ 0x64
 800b4c6:	f001 fd4b 	bl	800cf60 <__match>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	f43f aea4 	beq.w	800b218 <_strtod_l+0xa8>
 800b4d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4d2:	4989      	ldr	r1, [pc, #548]	@ (800b6f8 <_strtod_l+0x588>)
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	a819      	add	r0, sp, #100	@ 0x64
 800b4d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b4da:	f001 fd41 	bl	800cf60 <__match>
 800b4de:	b910      	cbnz	r0, 800b4e6 <_strtod_l+0x376>
 800b4e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b4e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b708 <_strtod_l+0x598>
 800b4ea:	f04f 0a00 	mov.w	sl, #0
 800b4ee:	e678      	b.n	800b1e2 <_strtod_l+0x72>
 800b4f0:	4882      	ldr	r0, [pc, #520]	@ (800b6fc <_strtod_l+0x58c>)
 800b4f2:	f001 fa71 	bl	800c9d8 <nan>
 800b4f6:	ec5b ab10 	vmov	sl, fp, d0
 800b4fa:	e672      	b.n	800b1e2 <_strtod_l+0x72>
 800b4fc:	eba8 0309 	sub.w	r3, r8, r9
 800b500:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b502:	9309      	str	r3, [sp, #36]	@ 0x24
 800b504:	2f00      	cmp	r7, #0
 800b506:	bf08      	it	eq
 800b508:	462f      	moveq	r7, r5
 800b50a:	2d10      	cmp	r5, #16
 800b50c:	462c      	mov	r4, r5
 800b50e:	bfa8      	it	ge
 800b510:	2410      	movge	r4, #16
 800b512:	f7f4 ffff 	bl	8000514 <__aeabi_ui2d>
 800b516:	2d09      	cmp	r5, #9
 800b518:	4682      	mov	sl, r0
 800b51a:	468b      	mov	fp, r1
 800b51c:	dc13      	bgt.n	800b546 <_strtod_l+0x3d6>
 800b51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b520:	2b00      	cmp	r3, #0
 800b522:	f43f ae5e 	beq.w	800b1e2 <_strtod_l+0x72>
 800b526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b528:	dd78      	ble.n	800b61c <_strtod_l+0x4ac>
 800b52a:	2b16      	cmp	r3, #22
 800b52c:	dc5f      	bgt.n	800b5ee <_strtod_l+0x47e>
 800b52e:	4974      	ldr	r1, [pc, #464]	@ (800b700 <_strtod_l+0x590>)
 800b530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b534:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b538:	4652      	mov	r2, sl
 800b53a:	465b      	mov	r3, fp
 800b53c:	f7f5 f864 	bl	8000608 <__aeabi_dmul>
 800b540:	4682      	mov	sl, r0
 800b542:	468b      	mov	fp, r1
 800b544:	e64d      	b.n	800b1e2 <_strtod_l+0x72>
 800b546:	4b6e      	ldr	r3, [pc, #440]	@ (800b700 <_strtod_l+0x590>)
 800b548:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b54c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b550:	f7f5 f85a 	bl	8000608 <__aeabi_dmul>
 800b554:	4682      	mov	sl, r0
 800b556:	9808      	ldr	r0, [sp, #32]
 800b558:	468b      	mov	fp, r1
 800b55a:	f7f4 ffdb 	bl	8000514 <__aeabi_ui2d>
 800b55e:	4602      	mov	r2, r0
 800b560:	460b      	mov	r3, r1
 800b562:	4650      	mov	r0, sl
 800b564:	4659      	mov	r1, fp
 800b566:	f7f4 fe99 	bl	800029c <__adddf3>
 800b56a:	2d0f      	cmp	r5, #15
 800b56c:	4682      	mov	sl, r0
 800b56e:	468b      	mov	fp, r1
 800b570:	ddd5      	ble.n	800b51e <_strtod_l+0x3ae>
 800b572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b574:	1b2c      	subs	r4, r5, r4
 800b576:	441c      	add	r4, r3
 800b578:	2c00      	cmp	r4, #0
 800b57a:	f340 8096 	ble.w	800b6aa <_strtod_l+0x53a>
 800b57e:	f014 030f 	ands.w	r3, r4, #15
 800b582:	d00a      	beq.n	800b59a <_strtod_l+0x42a>
 800b584:	495e      	ldr	r1, [pc, #376]	@ (800b700 <_strtod_l+0x590>)
 800b586:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b58a:	4652      	mov	r2, sl
 800b58c:	465b      	mov	r3, fp
 800b58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b592:	f7f5 f839 	bl	8000608 <__aeabi_dmul>
 800b596:	4682      	mov	sl, r0
 800b598:	468b      	mov	fp, r1
 800b59a:	f034 040f 	bics.w	r4, r4, #15
 800b59e:	d073      	beq.n	800b688 <_strtod_l+0x518>
 800b5a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b5a4:	dd48      	ble.n	800b638 <_strtod_l+0x4c8>
 800b5a6:	2400      	movs	r4, #0
 800b5a8:	46a0      	mov	r8, r4
 800b5aa:	940a      	str	r4, [sp, #40]	@ 0x28
 800b5ac:	46a1      	mov	r9, r4
 800b5ae:	9a05      	ldr	r2, [sp, #20]
 800b5b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b708 <_strtod_l+0x598>
 800b5b4:	2322      	movs	r3, #34	@ 0x22
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	f04f 0a00 	mov.w	sl, #0
 800b5bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f43f ae0f 	beq.w	800b1e2 <_strtod_l+0x72>
 800b5c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5c6:	9805      	ldr	r0, [sp, #20]
 800b5c8:	f7ff f942 	bl	800a850 <_Bfree>
 800b5cc:	9805      	ldr	r0, [sp, #20]
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	f7ff f93e 	bl	800a850 <_Bfree>
 800b5d4:	9805      	ldr	r0, [sp, #20]
 800b5d6:	4641      	mov	r1, r8
 800b5d8:	f7ff f93a 	bl	800a850 <_Bfree>
 800b5dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5de:	9805      	ldr	r0, [sp, #20]
 800b5e0:	f7ff f936 	bl	800a850 <_Bfree>
 800b5e4:	9805      	ldr	r0, [sp, #20]
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	f7ff f932 	bl	800a850 <_Bfree>
 800b5ec:	e5f9      	b.n	800b1e2 <_strtod_l+0x72>
 800b5ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	dbbc      	blt.n	800b572 <_strtod_l+0x402>
 800b5f8:	4c41      	ldr	r4, [pc, #260]	@ (800b700 <_strtod_l+0x590>)
 800b5fa:	f1c5 050f 	rsb	r5, r5, #15
 800b5fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b602:	4652      	mov	r2, sl
 800b604:	465b      	mov	r3, fp
 800b606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b60a:	f7f4 fffd 	bl	8000608 <__aeabi_dmul>
 800b60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b610:	1b5d      	subs	r5, r3, r5
 800b612:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b616:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b61a:	e78f      	b.n	800b53c <_strtod_l+0x3cc>
 800b61c:	3316      	adds	r3, #22
 800b61e:	dba8      	blt.n	800b572 <_strtod_l+0x402>
 800b620:	4b37      	ldr	r3, [pc, #220]	@ (800b700 <_strtod_l+0x590>)
 800b622:	eba9 0808 	sub.w	r8, r9, r8
 800b626:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b62a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b62e:	4650      	mov	r0, sl
 800b630:	4659      	mov	r1, fp
 800b632:	f7f5 f913 	bl	800085c <__aeabi_ddiv>
 800b636:	e783      	b.n	800b540 <_strtod_l+0x3d0>
 800b638:	4b32      	ldr	r3, [pc, #200]	@ (800b704 <_strtod_l+0x594>)
 800b63a:	9308      	str	r3, [sp, #32]
 800b63c:	2300      	movs	r3, #0
 800b63e:	1124      	asrs	r4, r4, #4
 800b640:	4650      	mov	r0, sl
 800b642:	4659      	mov	r1, fp
 800b644:	461e      	mov	r6, r3
 800b646:	2c01      	cmp	r4, #1
 800b648:	dc21      	bgt.n	800b68e <_strtod_l+0x51e>
 800b64a:	b10b      	cbz	r3, 800b650 <_strtod_l+0x4e0>
 800b64c:	4682      	mov	sl, r0
 800b64e:	468b      	mov	fp, r1
 800b650:	492c      	ldr	r1, [pc, #176]	@ (800b704 <_strtod_l+0x594>)
 800b652:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b656:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b65a:	4652      	mov	r2, sl
 800b65c:	465b      	mov	r3, fp
 800b65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b662:	f7f4 ffd1 	bl	8000608 <__aeabi_dmul>
 800b666:	4b28      	ldr	r3, [pc, #160]	@ (800b708 <_strtod_l+0x598>)
 800b668:	460a      	mov	r2, r1
 800b66a:	400b      	ands	r3, r1
 800b66c:	4927      	ldr	r1, [pc, #156]	@ (800b70c <_strtod_l+0x59c>)
 800b66e:	428b      	cmp	r3, r1
 800b670:	4682      	mov	sl, r0
 800b672:	d898      	bhi.n	800b5a6 <_strtod_l+0x436>
 800b674:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b678:	428b      	cmp	r3, r1
 800b67a:	bf86      	itte	hi
 800b67c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b710 <_strtod_l+0x5a0>
 800b680:	f04f 3aff 	movhi.w	sl, #4294967295
 800b684:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b688:	2300      	movs	r3, #0
 800b68a:	9308      	str	r3, [sp, #32]
 800b68c:	e07a      	b.n	800b784 <_strtod_l+0x614>
 800b68e:	07e2      	lsls	r2, r4, #31
 800b690:	d505      	bpl.n	800b69e <_strtod_l+0x52e>
 800b692:	9b08      	ldr	r3, [sp, #32]
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	f7f4 ffb6 	bl	8000608 <__aeabi_dmul>
 800b69c:	2301      	movs	r3, #1
 800b69e:	9a08      	ldr	r2, [sp, #32]
 800b6a0:	3208      	adds	r2, #8
 800b6a2:	3601      	adds	r6, #1
 800b6a4:	1064      	asrs	r4, r4, #1
 800b6a6:	9208      	str	r2, [sp, #32]
 800b6a8:	e7cd      	b.n	800b646 <_strtod_l+0x4d6>
 800b6aa:	d0ed      	beq.n	800b688 <_strtod_l+0x518>
 800b6ac:	4264      	negs	r4, r4
 800b6ae:	f014 020f 	ands.w	r2, r4, #15
 800b6b2:	d00a      	beq.n	800b6ca <_strtod_l+0x55a>
 800b6b4:	4b12      	ldr	r3, [pc, #72]	@ (800b700 <_strtod_l+0x590>)
 800b6b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ba:	4650      	mov	r0, sl
 800b6bc:	4659      	mov	r1, fp
 800b6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c2:	f7f5 f8cb 	bl	800085c <__aeabi_ddiv>
 800b6c6:	4682      	mov	sl, r0
 800b6c8:	468b      	mov	fp, r1
 800b6ca:	1124      	asrs	r4, r4, #4
 800b6cc:	d0dc      	beq.n	800b688 <_strtod_l+0x518>
 800b6ce:	2c1f      	cmp	r4, #31
 800b6d0:	dd20      	ble.n	800b714 <_strtod_l+0x5a4>
 800b6d2:	2400      	movs	r4, #0
 800b6d4:	46a0      	mov	r8, r4
 800b6d6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b6d8:	46a1      	mov	r9, r4
 800b6da:	9a05      	ldr	r2, [sp, #20]
 800b6dc:	2322      	movs	r3, #34	@ 0x22
 800b6de:	f04f 0a00 	mov.w	sl, #0
 800b6e2:	f04f 0b00 	mov.w	fp, #0
 800b6e6:	6013      	str	r3, [r2, #0]
 800b6e8:	e768      	b.n	800b5bc <_strtod_l+0x44c>
 800b6ea:	bf00      	nop
 800b6ec:	0800d9e5 	.word	0x0800d9e5
 800b6f0:	0800dbfc 	.word	0x0800dbfc
 800b6f4:	0800d9dd 	.word	0x0800d9dd
 800b6f8:	0800da12 	.word	0x0800da12
 800b6fc:	0800ddc0 	.word	0x0800ddc0
 800b700:	0800db30 	.word	0x0800db30
 800b704:	0800db08 	.word	0x0800db08
 800b708:	7ff00000 	.word	0x7ff00000
 800b70c:	7ca00000 	.word	0x7ca00000
 800b710:	7fefffff 	.word	0x7fefffff
 800b714:	f014 0310 	ands.w	r3, r4, #16
 800b718:	bf18      	it	ne
 800b71a:	236a      	movne	r3, #106	@ 0x6a
 800b71c:	4ea9      	ldr	r6, [pc, #676]	@ (800b9c4 <_strtod_l+0x854>)
 800b71e:	9308      	str	r3, [sp, #32]
 800b720:	4650      	mov	r0, sl
 800b722:	4659      	mov	r1, fp
 800b724:	2300      	movs	r3, #0
 800b726:	07e2      	lsls	r2, r4, #31
 800b728:	d504      	bpl.n	800b734 <_strtod_l+0x5c4>
 800b72a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b72e:	f7f4 ff6b 	bl	8000608 <__aeabi_dmul>
 800b732:	2301      	movs	r3, #1
 800b734:	1064      	asrs	r4, r4, #1
 800b736:	f106 0608 	add.w	r6, r6, #8
 800b73a:	d1f4      	bne.n	800b726 <_strtod_l+0x5b6>
 800b73c:	b10b      	cbz	r3, 800b742 <_strtod_l+0x5d2>
 800b73e:	4682      	mov	sl, r0
 800b740:	468b      	mov	fp, r1
 800b742:	9b08      	ldr	r3, [sp, #32]
 800b744:	b1b3      	cbz	r3, 800b774 <_strtod_l+0x604>
 800b746:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b74a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b74e:	2b00      	cmp	r3, #0
 800b750:	4659      	mov	r1, fp
 800b752:	dd0f      	ble.n	800b774 <_strtod_l+0x604>
 800b754:	2b1f      	cmp	r3, #31
 800b756:	dd55      	ble.n	800b804 <_strtod_l+0x694>
 800b758:	2b34      	cmp	r3, #52	@ 0x34
 800b75a:	bfde      	ittt	le
 800b75c:	f04f 33ff 	movle.w	r3, #4294967295
 800b760:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b764:	4093      	lslle	r3, r2
 800b766:	f04f 0a00 	mov.w	sl, #0
 800b76a:	bfcc      	ite	gt
 800b76c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b770:	ea03 0b01 	andle.w	fp, r3, r1
 800b774:	2200      	movs	r2, #0
 800b776:	2300      	movs	r3, #0
 800b778:	4650      	mov	r0, sl
 800b77a:	4659      	mov	r1, fp
 800b77c:	f7f5 f9ac 	bl	8000ad8 <__aeabi_dcmpeq>
 800b780:	2800      	cmp	r0, #0
 800b782:	d1a6      	bne.n	800b6d2 <_strtod_l+0x562>
 800b784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b78a:	9805      	ldr	r0, [sp, #20]
 800b78c:	462b      	mov	r3, r5
 800b78e:	463a      	mov	r2, r7
 800b790:	f7ff f8c6 	bl	800a920 <__s2b>
 800b794:	900a      	str	r0, [sp, #40]	@ 0x28
 800b796:	2800      	cmp	r0, #0
 800b798:	f43f af05 	beq.w	800b5a6 <_strtod_l+0x436>
 800b79c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b79e:	2a00      	cmp	r2, #0
 800b7a0:	eba9 0308 	sub.w	r3, r9, r8
 800b7a4:	bfa8      	it	ge
 800b7a6:	2300      	movge	r3, #0
 800b7a8:	9312      	str	r3, [sp, #72]	@ 0x48
 800b7aa:	2400      	movs	r4, #0
 800b7ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b7b0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b7b2:	46a0      	mov	r8, r4
 800b7b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7b6:	9805      	ldr	r0, [sp, #20]
 800b7b8:	6859      	ldr	r1, [r3, #4]
 800b7ba:	f7ff f809 	bl	800a7d0 <_Balloc>
 800b7be:	4681      	mov	r9, r0
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	f43f aef4 	beq.w	800b5ae <_strtod_l+0x43e>
 800b7c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7c8:	691a      	ldr	r2, [r3, #16]
 800b7ca:	3202      	adds	r2, #2
 800b7cc:	f103 010c 	add.w	r1, r3, #12
 800b7d0:	0092      	lsls	r2, r2, #2
 800b7d2:	300c      	adds	r0, #12
 800b7d4:	f7fe f899 	bl	800990a <memcpy>
 800b7d8:	ec4b ab10 	vmov	d0, sl, fp
 800b7dc:	9805      	ldr	r0, [sp, #20]
 800b7de:	aa1c      	add	r2, sp, #112	@ 0x70
 800b7e0:	a91b      	add	r1, sp, #108	@ 0x6c
 800b7e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b7e6:	f7ff fbd7 	bl	800af98 <__d2b>
 800b7ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	f43f aede 	beq.w	800b5ae <_strtod_l+0x43e>
 800b7f2:	9805      	ldr	r0, [sp, #20]
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	f7ff f929 	bl	800aa4c <__i2b>
 800b7fa:	4680      	mov	r8, r0
 800b7fc:	b948      	cbnz	r0, 800b812 <_strtod_l+0x6a2>
 800b7fe:	f04f 0800 	mov.w	r8, #0
 800b802:	e6d4      	b.n	800b5ae <_strtod_l+0x43e>
 800b804:	f04f 32ff 	mov.w	r2, #4294967295
 800b808:	fa02 f303 	lsl.w	r3, r2, r3
 800b80c:	ea03 0a0a 	and.w	sl, r3, sl
 800b810:	e7b0      	b.n	800b774 <_strtod_l+0x604>
 800b812:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b814:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b816:	2d00      	cmp	r5, #0
 800b818:	bfab      	itete	ge
 800b81a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b81c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b81e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b820:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b822:	bfac      	ite	ge
 800b824:	18ef      	addge	r7, r5, r3
 800b826:	1b5e      	sublt	r6, r3, r5
 800b828:	9b08      	ldr	r3, [sp, #32]
 800b82a:	1aed      	subs	r5, r5, r3
 800b82c:	4415      	add	r5, r2
 800b82e:	4b66      	ldr	r3, [pc, #408]	@ (800b9c8 <_strtod_l+0x858>)
 800b830:	3d01      	subs	r5, #1
 800b832:	429d      	cmp	r5, r3
 800b834:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b838:	da50      	bge.n	800b8dc <_strtod_l+0x76c>
 800b83a:	1b5b      	subs	r3, r3, r5
 800b83c:	2b1f      	cmp	r3, #31
 800b83e:	eba2 0203 	sub.w	r2, r2, r3
 800b842:	f04f 0101 	mov.w	r1, #1
 800b846:	dc3d      	bgt.n	800b8c4 <_strtod_l+0x754>
 800b848:	fa01 f303 	lsl.w	r3, r1, r3
 800b84c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b84e:	2300      	movs	r3, #0
 800b850:	9310      	str	r3, [sp, #64]	@ 0x40
 800b852:	18bd      	adds	r5, r7, r2
 800b854:	9b08      	ldr	r3, [sp, #32]
 800b856:	42af      	cmp	r7, r5
 800b858:	4416      	add	r6, r2
 800b85a:	441e      	add	r6, r3
 800b85c:	463b      	mov	r3, r7
 800b85e:	bfa8      	it	ge
 800b860:	462b      	movge	r3, r5
 800b862:	42b3      	cmp	r3, r6
 800b864:	bfa8      	it	ge
 800b866:	4633      	movge	r3, r6
 800b868:	2b00      	cmp	r3, #0
 800b86a:	bfc2      	ittt	gt
 800b86c:	1aed      	subgt	r5, r5, r3
 800b86e:	1af6      	subgt	r6, r6, r3
 800b870:	1aff      	subgt	r7, r7, r3
 800b872:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b874:	2b00      	cmp	r3, #0
 800b876:	dd16      	ble.n	800b8a6 <_strtod_l+0x736>
 800b878:	4641      	mov	r1, r8
 800b87a:	9805      	ldr	r0, [sp, #20]
 800b87c:	461a      	mov	r2, r3
 800b87e:	f7ff f9a5 	bl	800abcc <__pow5mult>
 800b882:	4680      	mov	r8, r0
 800b884:	2800      	cmp	r0, #0
 800b886:	d0ba      	beq.n	800b7fe <_strtod_l+0x68e>
 800b888:	4601      	mov	r1, r0
 800b88a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b88c:	9805      	ldr	r0, [sp, #20]
 800b88e:	f7ff f8f3 	bl	800aa78 <__multiply>
 800b892:	900e      	str	r0, [sp, #56]	@ 0x38
 800b894:	2800      	cmp	r0, #0
 800b896:	f43f ae8a 	beq.w	800b5ae <_strtod_l+0x43e>
 800b89a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b89c:	9805      	ldr	r0, [sp, #20]
 800b89e:	f7fe ffd7 	bl	800a850 <_Bfree>
 800b8a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8a6:	2d00      	cmp	r5, #0
 800b8a8:	dc1d      	bgt.n	800b8e6 <_strtod_l+0x776>
 800b8aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	dd23      	ble.n	800b8f8 <_strtod_l+0x788>
 800b8b0:	4649      	mov	r1, r9
 800b8b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b8b4:	9805      	ldr	r0, [sp, #20]
 800b8b6:	f7ff f989 	bl	800abcc <__pow5mult>
 800b8ba:	4681      	mov	r9, r0
 800b8bc:	b9e0      	cbnz	r0, 800b8f8 <_strtod_l+0x788>
 800b8be:	f04f 0900 	mov.w	r9, #0
 800b8c2:	e674      	b.n	800b5ae <_strtod_l+0x43e>
 800b8c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b8c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b8cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b8d0:	35e2      	adds	r5, #226	@ 0xe2
 800b8d2:	fa01 f305 	lsl.w	r3, r1, r5
 800b8d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b8d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b8da:	e7ba      	b.n	800b852 <_strtod_l+0x6e2>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	9310      	str	r3, [sp, #64]	@ 0x40
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8e4:	e7b5      	b.n	800b852 <_strtod_l+0x6e2>
 800b8e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8e8:	9805      	ldr	r0, [sp, #20]
 800b8ea:	462a      	mov	r2, r5
 800b8ec:	f7ff f9c8 	bl	800ac80 <__lshift>
 800b8f0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d1d9      	bne.n	800b8aa <_strtod_l+0x73a>
 800b8f6:	e65a      	b.n	800b5ae <_strtod_l+0x43e>
 800b8f8:	2e00      	cmp	r6, #0
 800b8fa:	dd07      	ble.n	800b90c <_strtod_l+0x79c>
 800b8fc:	4649      	mov	r1, r9
 800b8fe:	9805      	ldr	r0, [sp, #20]
 800b900:	4632      	mov	r2, r6
 800b902:	f7ff f9bd 	bl	800ac80 <__lshift>
 800b906:	4681      	mov	r9, r0
 800b908:	2800      	cmp	r0, #0
 800b90a:	d0d8      	beq.n	800b8be <_strtod_l+0x74e>
 800b90c:	2f00      	cmp	r7, #0
 800b90e:	dd08      	ble.n	800b922 <_strtod_l+0x7b2>
 800b910:	4641      	mov	r1, r8
 800b912:	9805      	ldr	r0, [sp, #20]
 800b914:	463a      	mov	r2, r7
 800b916:	f7ff f9b3 	bl	800ac80 <__lshift>
 800b91a:	4680      	mov	r8, r0
 800b91c:	2800      	cmp	r0, #0
 800b91e:	f43f ae46 	beq.w	800b5ae <_strtod_l+0x43e>
 800b922:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b924:	9805      	ldr	r0, [sp, #20]
 800b926:	464a      	mov	r2, r9
 800b928:	f7ff fa32 	bl	800ad90 <__mdiff>
 800b92c:	4604      	mov	r4, r0
 800b92e:	2800      	cmp	r0, #0
 800b930:	f43f ae3d 	beq.w	800b5ae <_strtod_l+0x43e>
 800b934:	68c3      	ldr	r3, [r0, #12]
 800b936:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b938:	2300      	movs	r3, #0
 800b93a:	60c3      	str	r3, [r0, #12]
 800b93c:	4641      	mov	r1, r8
 800b93e:	f7ff fa0b 	bl	800ad58 <__mcmp>
 800b942:	2800      	cmp	r0, #0
 800b944:	da46      	bge.n	800b9d4 <_strtod_l+0x864>
 800b946:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b948:	ea53 030a 	orrs.w	r3, r3, sl
 800b94c:	d16c      	bne.n	800ba28 <_strtod_l+0x8b8>
 800b94e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b952:	2b00      	cmp	r3, #0
 800b954:	d168      	bne.n	800ba28 <_strtod_l+0x8b8>
 800b956:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b95a:	0d1b      	lsrs	r3, r3, #20
 800b95c:	051b      	lsls	r3, r3, #20
 800b95e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b962:	d961      	bls.n	800ba28 <_strtod_l+0x8b8>
 800b964:	6963      	ldr	r3, [r4, #20]
 800b966:	b913      	cbnz	r3, 800b96e <_strtod_l+0x7fe>
 800b968:	6923      	ldr	r3, [r4, #16]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	dd5c      	ble.n	800ba28 <_strtod_l+0x8b8>
 800b96e:	4621      	mov	r1, r4
 800b970:	2201      	movs	r2, #1
 800b972:	9805      	ldr	r0, [sp, #20]
 800b974:	f7ff f984 	bl	800ac80 <__lshift>
 800b978:	4641      	mov	r1, r8
 800b97a:	4604      	mov	r4, r0
 800b97c:	f7ff f9ec 	bl	800ad58 <__mcmp>
 800b980:	2800      	cmp	r0, #0
 800b982:	dd51      	ble.n	800ba28 <_strtod_l+0x8b8>
 800b984:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b988:	9a08      	ldr	r2, [sp, #32]
 800b98a:	0d1b      	lsrs	r3, r3, #20
 800b98c:	051b      	lsls	r3, r3, #20
 800b98e:	2a00      	cmp	r2, #0
 800b990:	d06b      	beq.n	800ba6a <_strtod_l+0x8fa>
 800b992:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b996:	d868      	bhi.n	800ba6a <_strtod_l+0x8fa>
 800b998:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b99c:	f67f ae9d 	bls.w	800b6da <_strtod_l+0x56a>
 800b9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9cc <_strtod_l+0x85c>)
 800b9a2:	4650      	mov	r0, sl
 800b9a4:	4659      	mov	r1, fp
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f7f4 fe2e 	bl	8000608 <__aeabi_dmul>
 800b9ac:	4b08      	ldr	r3, [pc, #32]	@ (800b9d0 <_strtod_l+0x860>)
 800b9ae:	400b      	ands	r3, r1
 800b9b0:	4682      	mov	sl, r0
 800b9b2:	468b      	mov	fp, r1
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f47f ae05 	bne.w	800b5c4 <_strtod_l+0x454>
 800b9ba:	9a05      	ldr	r2, [sp, #20]
 800b9bc:	2322      	movs	r3, #34	@ 0x22
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	e600      	b.n	800b5c4 <_strtod_l+0x454>
 800b9c2:	bf00      	nop
 800b9c4:	0800dc28 	.word	0x0800dc28
 800b9c8:	fffffc02 	.word	0xfffffc02
 800b9cc:	39500000 	.word	0x39500000
 800b9d0:	7ff00000 	.word	0x7ff00000
 800b9d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b9d8:	d165      	bne.n	800baa6 <_strtod_l+0x936>
 800b9da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b9dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9e0:	b35a      	cbz	r2, 800ba3a <_strtod_l+0x8ca>
 800b9e2:	4a9f      	ldr	r2, [pc, #636]	@ (800bc60 <_strtod_l+0xaf0>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d12b      	bne.n	800ba40 <_strtod_l+0x8d0>
 800b9e8:	9b08      	ldr	r3, [sp, #32]
 800b9ea:	4651      	mov	r1, sl
 800b9ec:	b303      	cbz	r3, 800ba30 <_strtod_l+0x8c0>
 800b9ee:	4b9d      	ldr	r3, [pc, #628]	@ (800bc64 <_strtod_l+0xaf4>)
 800b9f0:	465a      	mov	r2, fp
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9fc:	d81b      	bhi.n	800ba36 <_strtod_l+0x8c6>
 800b9fe:	0d1b      	lsrs	r3, r3, #20
 800ba00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ba04:	fa02 f303 	lsl.w	r3, r2, r3
 800ba08:	4299      	cmp	r1, r3
 800ba0a:	d119      	bne.n	800ba40 <_strtod_l+0x8d0>
 800ba0c:	4b96      	ldr	r3, [pc, #600]	@ (800bc68 <_strtod_l+0xaf8>)
 800ba0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d102      	bne.n	800ba1a <_strtod_l+0x8aa>
 800ba14:	3101      	adds	r1, #1
 800ba16:	f43f adca 	beq.w	800b5ae <_strtod_l+0x43e>
 800ba1a:	4b92      	ldr	r3, [pc, #584]	@ (800bc64 <_strtod_l+0xaf4>)
 800ba1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba1e:	401a      	ands	r2, r3
 800ba20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ba24:	f04f 0a00 	mov.w	sl, #0
 800ba28:	9b08      	ldr	r3, [sp, #32]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1b8      	bne.n	800b9a0 <_strtod_l+0x830>
 800ba2e:	e5c9      	b.n	800b5c4 <_strtod_l+0x454>
 800ba30:	f04f 33ff 	mov.w	r3, #4294967295
 800ba34:	e7e8      	b.n	800ba08 <_strtod_l+0x898>
 800ba36:	4613      	mov	r3, r2
 800ba38:	e7e6      	b.n	800ba08 <_strtod_l+0x898>
 800ba3a:	ea53 030a 	orrs.w	r3, r3, sl
 800ba3e:	d0a1      	beq.n	800b984 <_strtod_l+0x814>
 800ba40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba42:	b1db      	cbz	r3, 800ba7c <_strtod_l+0x90c>
 800ba44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba46:	4213      	tst	r3, r2
 800ba48:	d0ee      	beq.n	800ba28 <_strtod_l+0x8b8>
 800ba4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba4c:	9a08      	ldr	r2, [sp, #32]
 800ba4e:	4650      	mov	r0, sl
 800ba50:	4659      	mov	r1, fp
 800ba52:	b1bb      	cbz	r3, 800ba84 <_strtod_l+0x914>
 800ba54:	f7ff fb6e 	bl	800b134 <sulp>
 800ba58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba5c:	ec53 2b10 	vmov	r2, r3, d0
 800ba60:	f7f4 fc1c 	bl	800029c <__adddf3>
 800ba64:	4682      	mov	sl, r0
 800ba66:	468b      	mov	fp, r1
 800ba68:	e7de      	b.n	800ba28 <_strtod_l+0x8b8>
 800ba6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ba6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ba72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ba76:	f04f 3aff 	mov.w	sl, #4294967295
 800ba7a:	e7d5      	b.n	800ba28 <_strtod_l+0x8b8>
 800ba7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ba7e:	ea13 0f0a 	tst.w	r3, sl
 800ba82:	e7e1      	b.n	800ba48 <_strtod_l+0x8d8>
 800ba84:	f7ff fb56 	bl	800b134 <sulp>
 800ba88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba8c:	ec53 2b10 	vmov	r2, r3, d0
 800ba90:	f7f4 fc02 	bl	8000298 <__aeabi_dsub>
 800ba94:	2200      	movs	r2, #0
 800ba96:	2300      	movs	r3, #0
 800ba98:	4682      	mov	sl, r0
 800ba9a:	468b      	mov	fp, r1
 800ba9c:	f7f5 f81c 	bl	8000ad8 <__aeabi_dcmpeq>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d0c1      	beq.n	800ba28 <_strtod_l+0x8b8>
 800baa4:	e619      	b.n	800b6da <_strtod_l+0x56a>
 800baa6:	4641      	mov	r1, r8
 800baa8:	4620      	mov	r0, r4
 800baaa:	f7ff facd 	bl	800b048 <__ratio>
 800baae:	ec57 6b10 	vmov	r6, r7, d0
 800bab2:	2200      	movs	r2, #0
 800bab4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bab8:	4630      	mov	r0, r6
 800baba:	4639      	mov	r1, r7
 800babc:	f7f5 f820 	bl	8000b00 <__aeabi_dcmple>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d06f      	beq.n	800bba4 <_strtod_l+0xa34>
 800bac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d17a      	bne.n	800bbc0 <_strtod_l+0xa50>
 800baca:	f1ba 0f00 	cmp.w	sl, #0
 800bace:	d158      	bne.n	800bb82 <_strtod_l+0xa12>
 800bad0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bad2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d15a      	bne.n	800bb90 <_strtod_l+0xa20>
 800bada:	4b64      	ldr	r3, [pc, #400]	@ (800bc6c <_strtod_l+0xafc>)
 800badc:	2200      	movs	r2, #0
 800bade:	4630      	mov	r0, r6
 800bae0:	4639      	mov	r1, r7
 800bae2:	f7f5 f803 	bl	8000aec <__aeabi_dcmplt>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d159      	bne.n	800bb9e <_strtod_l+0xa2e>
 800baea:	4630      	mov	r0, r6
 800baec:	4639      	mov	r1, r7
 800baee:	4b60      	ldr	r3, [pc, #384]	@ (800bc70 <_strtod_l+0xb00>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	f7f4 fd89 	bl	8000608 <__aeabi_dmul>
 800baf6:	4606      	mov	r6, r0
 800baf8:	460f      	mov	r7, r1
 800bafa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bafe:	9606      	str	r6, [sp, #24]
 800bb00:	9307      	str	r3, [sp, #28]
 800bb02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb06:	4d57      	ldr	r5, [pc, #348]	@ (800bc64 <_strtod_l+0xaf4>)
 800bb08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bb0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb0e:	401d      	ands	r5, r3
 800bb10:	4b58      	ldr	r3, [pc, #352]	@ (800bc74 <_strtod_l+0xb04>)
 800bb12:	429d      	cmp	r5, r3
 800bb14:	f040 80b2 	bne.w	800bc7c <_strtod_l+0xb0c>
 800bb18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bb1e:	ec4b ab10 	vmov	d0, sl, fp
 800bb22:	f7ff f9c9 	bl	800aeb8 <__ulp>
 800bb26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb2a:	ec51 0b10 	vmov	r0, r1, d0
 800bb2e:	f7f4 fd6b 	bl	8000608 <__aeabi_dmul>
 800bb32:	4652      	mov	r2, sl
 800bb34:	465b      	mov	r3, fp
 800bb36:	f7f4 fbb1 	bl	800029c <__adddf3>
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	4949      	ldr	r1, [pc, #292]	@ (800bc64 <_strtod_l+0xaf4>)
 800bb3e:	4a4e      	ldr	r2, [pc, #312]	@ (800bc78 <_strtod_l+0xb08>)
 800bb40:	4019      	ands	r1, r3
 800bb42:	4291      	cmp	r1, r2
 800bb44:	4682      	mov	sl, r0
 800bb46:	d942      	bls.n	800bbce <_strtod_l+0xa5e>
 800bb48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb4a:	4b47      	ldr	r3, [pc, #284]	@ (800bc68 <_strtod_l+0xaf8>)
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d103      	bne.n	800bb58 <_strtod_l+0x9e8>
 800bb50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb52:	3301      	adds	r3, #1
 800bb54:	f43f ad2b 	beq.w	800b5ae <_strtod_l+0x43e>
 800bb58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bc68 <_strtod_l+0xaf8>
 800bb5c:	f04f 3aff 	mov.w	sl, #4294967295
 800bb60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb62:	9805      	ldr	r0, [sp, #20]
 800bb64:	f7fe fe74 	bl	800a850 <_Bfree>
 800bb68:	9805      	ldr	r0, [sp, #20]
 800bb6a:	4649      	mov	r1, r9
 800bb6c:	f7fe fe70 	bl	800a850 <_Bfree>
 800bb70:	9805      	ldr	r0, [sp, #20]
 800bb72:	4641      	mov	r1, r8
 800bb74:	f7fe fe6c 	bl	800a850 <_Bfree>
 800bb78:	9805      	ldr	r0, [sp, #20]
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	f7fe fe68 	bl	800a850 <_Bfree>
 800bb80:	e618      	b.n	800b7b4 <_strtod_l+0x644>
 800bb82:	f1ba 0f01 	cmp.w	sl, #1
 800bb86:	d103      	bne.n	800bb90 <_strtod_l+0xa20>
 800bb88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f43f ada5 	beq.w	800b6da <_strtod_l+0x56a>
 800bb90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bc40 <_strtod_l+0xad0>
 800bb94:	4f35      	ldr	r7, [pc, #212]	@ (800bc6c <_strtod_l+0xafc>)
 800bb96:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb9a:	2600      	movs	r6, #0
 800bb9c:	e7b1      	b.n	800bb02 <_strtod_l+0x992>
 800bb9e:	4f34      	ldr	r7, [pc, #208]	@ (800bc70 <_strtod_l+0xb00>)
 800bba0:	2600      	movs	r6, #0
 800bba2:	e7aa      	b.n	800bafa <_strtod_l+0x98a>
 800bba4:	4b32      	ldr	r3, [pc, #200]	@ (800bc70 <_strtod_l+0xb00>)
 800bba6:	4630      	mov	r0, r6
 800bba8:	4639      	mov	r1, r7
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f7f4 fd2c 	bl	8000608 <__aeabi_dmul>
 800bbb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	460f      	mov	r7, r1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d09f      	beq.n	800bafa <_strtod_l+0x98a>
 800bbba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bbbe:	e7a0      	b.n	800bb02 <_strtod_l+0x992>
 800bbc0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bc48 <_strtod_l+0xad8>
 800bbc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bbc8:	ec57 6b17 	vmov	r6, r7, d7
 800bbcc:	e799      	b.n	800bb02 <_strtod_l+0x992>
 800bbce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bbd2:	9b08      	ldr	r3, [sp, #32]
 800bbd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1c1      	bne.n	800bb60 <_strtod_l+0x9f0>
 800bbdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bbe0:	0d1b      	lsrs	r3, r3, #20
 800bbe2:	051b      	lsls	r3, r3, #20
 800bbe4:	429d      	cmp	r5, r3
 800bbe6:	d1bb      	bne.n	800bb60 <_strtod_l+0x9f0>
 800bbe8:	4630      	mov	r0, r6
 800bbea:	4639      	mov	r1, r7
 800bbec:	f7f5 f86c 	bl	8000cc8 <__aeabi_d2lz>
 800bbf0:	f7f4 fcdc 	bl	80005ac <__aeabi_l2d>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	4639      	mov	r1, r7
 800bbfc:	f7f4 fb4c 	bl	8000298 <__aeabi_dsub>
 800bc00:	460b      	mov	r3, r1
 800bc02:	4602      	mov	r2, r0
 800bc04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bc08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bc0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc0e:	ea46 060a 	orr.w	r6, r6, sl
 800bc12:	431e      	orrs	r6, r3
 800bc14:	d06f      	beq.n	800bcf6 <_strtod_l+0xb86>
 800bc16:	a30e      	add	r3, pc, #56	@ (adr r3, 800bc50 <_strtod_l+0xae0>)
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	f7f4 ff66 	bl	8000aec <__aeabi_dcmplt>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	f47f accf 	bne.w	800b5c4 <_strtod_l+0x454>
 800bc26:	a30c      	add	r3, pc, #48	@ (adr r3, 800bc58 <_strtod_l+0xae8>)
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc30:	f7f4 ff7a 	bl	8000b28 <__aeabi_dcmpgt>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d093      	beq.n	800bb60 <_strtod_l+0x9f0>
 800bc38:	e4c4      	b.n	800b5c4 <_strtod_l+0x454>
 800bc3a:	bf00      	nop
 800bc3c:	f3af 8000 	nop.w
 800bc40:	00000000 	.word	0x00000000
 800bc44:	bff00000 	.word	0xbff00000
 800bc48:	00000000 	.word	0x00000000
 800bc4c:	3ff00000 	.word	0x3ff00000
 800bc50:	94a03595 	.word	0x94a03595
 800bc54:	3fdfffff 	.word	0x3fdfffff
 800bc58:	35afe535 	.word	0x35afe535
 800bc5c:	3fe00000 	.word	0x3fe00000
 800bc60:	000fffff 	.word	0x000fffff
 800bc64:	7ff00000 	.word	0x7ff00000
 800bc68:	7fefffff 	.word	0x7fefffff
 800bc6c:	3ff00000 	.word	0x3ff00000
 800bc70:	3fe00000 	.word	0x3fe00000
 800bc74:	7fe00000 	.word	0x7fe00000
 800bc78:	7c9fffff 	.word	0x7c9fffff
 800bc7c:	9b08      	ldr	r3, [sp, #32]
 800bc7e:	b323      	cbz	r3, 800bcca <_strtod_l+0xb5a>
 800bc80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bc84:	d821      	bhi.n	800bcca <_strtod_l+0xb5a>
 800bc86:	a328      	add	r3, pc, #160	@ (adr r3, 800bd28 <_strtod_l+0xbb8>)
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	4639      	mov	r1, r7
 800bc90:	f7f4 ff36 	bl	8000b00 <__aeabi_dcmple>
 800bc94:	b1a0      	cbz	r0, 800bcc0 <_strtod_l+0xb50>
 800bc96:	4639      	mov	r1, r7
 800bc98:	4630      	mov	r0, r6
 800bc9a:	f7f4 ff8d 	bl	8000bb8 <__aeabi_d2uiz>
 800bc9e:	2801      	cmp	r0, #1
 800bca0:	bf38      	it	cc
 800bca2:	2001      	movcc	r0, #1
 800bca4:	f7f4 fc36 	bl	8000514 <__aeabi_ui2d>
 800bca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcaa:	4606      	mov	r6, r0
 800bcac:	460f      	mov	r7, r1
 800bcae:	b9fb      	cbnz	r3, 800bcf0 <_strtod_l+0xb80>
 800bcb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bcb4:	9014      	str	r0, [sp, #80]	@ 0x50
 800bcb6:	9315      	str	r3, [sp, #84]	@ 0x54
 800bcb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bcbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bcc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bcc2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bcc6:	1b5b      	subs	r3, r3, r5
 800bcc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bcca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bcce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bcd2:	f7ff f8f1 	bl	800aeb8 <__ulp>
 800bcd6:	4650      	mov	r0, sl
 800bcd8:	ec53 2b10 	vmov	r2, r3, d0
 800bcdc:	4659      	mov	r1, fp
 800bcde:	f7f4 fc93 	bl	8000608 <__aeabi_dmul>
 800bce2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bce6:	f7f4 fad9 	bl	800029c <__adddf3>
 800bcea:	4682      	mov	sl, r0
 800bcec:	468b      	mov	fp, r1
 800bcee:	e770      	b.n	800bbd2 <_strtod_l+0xa62>
 800bcf0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bcf4:	e7e0      	b.n	800bcb8 <_strtod_l+0xb48>
 800bcf6:	a30e      	add	r3, pc, #56	@ (adr r3, 800bd30 <_strtod_l+0xbc0>)
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	f7f4 fef6 	bl	8000aec <__aeabi_dcmplt>
 800bd00:	e798      	b.n	800bc34 <_strtod_l+0xac4>
 800bd02:	2300      	movs	r3, #0
 800bd04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bd08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	f7ff ba6d 	b.w	800b1ea <_strtod_l+0x7a>
 800bd10:	2a65      	cmp	r2, #101	@ 0x65
 800bd12:	f43f ab66 	beq.w	800b3e2 <_strtod_l+0x272>
 800bd16:	2a45      	cmp	r2, #69	@ 0x45
 800bd18:	f43f ab63 	beq.w	800b3e2 <_strtod_l+0x272>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	f7ff bb9e 	b.w	800b45e <_strtod_l+0x2ee>
 800bd22:	bf00      	nop
 800bd24:	f3af 8000 	nop.w
 800bd28:	ffc00000 	.word	0xffc00000
 800bd2c:	41dfffff 	.word	0x41dfffff
 800bd30:	94a03595 	.word	0x94a03595
 800bd34:	3fcfffff 	.word	0x3fcfffff

0800bd38 <_strtod_r>:
 800bd38:	4b01      	ldr	r3, [pc, #4]	@ (800bd40 <_strtod_r+0x8>)
 800bd3a:	f7ff ba19 	b.w	800b170 <_strtod_l>
 800bd3e:	bf00      	nop
 800bd40:	2000006c 	.word	0x2000006c

0800bd44 <_strtol_l.constprop.0>:
 800bd44:	2b24      	cmp	r3, #36	@ 0x24
 800bd46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd4a:	4686      	mov	lr, r0
 800bd4c:	4690      	mov	r8, r2
 800bd4e:	d801      	bhi.n	800bd54 <_strtol_l.constprop.0+0x10>
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d106      	bne.n	800bd62 <_strtol_l.constprop.0+0x1e>
 800bd54:	f7fd fdac 	bl	80098b0 <__errno>
 800bd58:	2316      	movs	r3, #22
 800bd5a:	6003      	str	r3, [r0, #0]
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd62:	4834      	ldr	r0, [pc, #208]	@ (800be34 <_strtol_l.constprop.0+0xf0>)
 800bd64:	460d      	mov	r5, r1
 800bd66:	462a      	mov	r2, r5
 800bd68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd6c:	5d06      	ldrb	r6, [r0, r4]
 800bd6e:	f016 0608 	ands.w	r6, r6, #8
 800bd72:	d1f8      	bne.n	800bd66 <_strtol_l.constprop.0+0x22>
 800bd74:	2c2d      	cmp	r4, #45	@ 0x2d
 800bd76:	d12d      	bne.n	800bdd4 <_strtol_l.constprop.0+0x90>
 800bd78:	782c      	ldrb	r4, [r5, #0]
 800bd7a:	2601      	movs	r6, #1
 800bd7c:	1c95      	adds	r5, r2, #2
 800bd7e:	f033 0210 	bics.w	r2, r3, #16
 800bd82:	d109      	bne.n	800bd98 <_strtol_l.constprop.0+0x54>
 800bd84:	2c30      	cmp	r4, #48	@ 0x30
 800bd86:	d12a      	bne.n	800bdde <_strtol_l.constprop.0+0x9a>
 800bd88:	782a      	ldrb	r2, [r5, #0]
 800bd8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd8e:	2a58      	cmp	r2, #88	@ 0x58
 800bd90:	d125      	bne.n	800bdde <_strtol_l.constprop.0+0x9a>
 800bd92:	786c      	ldrb	r4, [r5, #1]
 800bd94:	2310      	movs	r3, #16
 800bd96:	3502      	adds	r5, #2
 800bd98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bd9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bda0:	2200      	movs	r2, #0
 800bda2:	fbbc f9f3 	udiv	r9, ip, r3
 800bda6:	4610      	mov	r0, r2
 800bda8:	fb03 ca19 	mls	sl, r3, r9, ip
 800bdac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bdb0:	2f09      	cmp	r7, #9
 800bdb2:	d81b      	bhi.n	800bdec <_strtol_l.constprop.0+0xa8>
 800bdb4:	463c      	mov	r4, r7
 800bdb6:	42a3      	cmp	r3, r4
 800bdb8:	dd27      	ble.n	800be0a <_strtol_l.constprop.0+0xc6>
 800bdba:	1c57      	adds	r7, r2, #1
 800bdbc:	d007      	beq.n	800bdce <_strtol_l.constprop.0+0x8a>
 800bdbe:	4581      	cmp	r9, r0
 800bdc0:	d320      	bcc.n	800be04 <_strtol_l.constprop.0+0xc0>
 800bdc2:	d101      	bne.n	800bdc8 <_strtol_l.constprop.0+0x84>
 800bdc4:	45a2      	cmp	sl, r4
 800bdc6:	db1d      	blt.n	800be04 <_strtol_l.constprop.0+0xc0>
 800bdc8:	fb00 4003 	mla	r0, r0, r3, r4
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bdd2:	e7eb      	b.n	800bdac <_strtol_l.constprop.0+0x68>
 800bdd4:	2c2b      	cmp	r4, #43	@ 0x2b
 800bdd6:	bf04      	itt	eq
 800bdd8:	782c      	ldrbeq	r4, [r5, #0]
 800bdda:	1c95      	addeq	r5, r2, #2
 800bddc:	e7cf      	b.n	800bd7e <_strtol_l.constprop.0+0x3a>
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1da      	bne.n	800bd98 <_strtol_l.constprop.0+0x54>
 800bde2:	2c30      	cmp	r4, #48	@ 0x30
 800bde4:	bf0c      	ite	eq
 800bde6:	2308      	moveq	r3, #8
 800bde8:	230a      	movne	r3, #10
 800bdea:	e7d5      	b.n	800bd98 <_strtol_l.constprop.0+0x54>
 800bdec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bdf0:	2f19      	cmp	r7, #25
 800bdf2:	d801      	bhi.n	800bdf8 <_strtol_l.constprop.0+0xb4>
 800bdf4:	3c37      	subs	r4, #55	@ 0x37
 800bdf6:	e7de      	b.n	800bdb6 <_strtol_l.constprop.0+0x72>
 800bdf8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bdfc:	2f19      	cmp	r7, #25
 800bdfe:	d804      	bhi.n	800be0a <_strtol_l.constprop.0+0xc6>
 800be00:	3c57      	subs	r4, #87	@ 0x57
 800be02:	e7d8      	b.n	800bdb6 <_strtol_l.constprop.0+0x72>
 800be04:	f04f 32ff 	mov.w	r2, #4294967295
 800be08:	e7e1      	b.n	800bdce <_strtol_l.constprop.0+0x8a>
 800be0a:	1c53      	adds	r3, r2, #1
 800be0c:	d108      	bne.n	800be20 <_strtol_l.constprop.0+0xdc>
 800be0e:	2322      	movs	r3, #34	@ 0x22
 800be10:	f8ce 3000 	str.w	r3, [lr]
 800be14:	4660      	mov	r0, ip
 800be16:	f1b8 0f00 	cmp.w	r8, #0
 800be1a:	d0a0      	beq.n	800bd5e <_strtol_l.constprop.0+0x1a>
 800be1c:	1e69      	subs	r1, r5, #1
 800be1e:	e006      	b.n	800be2e <_strtol_l.constprop.0+0xea>
 800be20:	b106      	cbz	r6, 800be24 <_strtol_l.constprop.0+0xe0>
 800be22:	4240      	negs	r0, r0
 800be24:	f1b8 0f00 	cmp.w	r8, #0
 800be28:	d099      	beq.n	800bd5e <_strtol_l.constprop.0+0x1a>
 800be2a:	2a00      	cmp	r2, #0
 800be2c:	d1f6      	bne.n	800be1c <_strtol_l.constprop.0+0xd8>
 800be2e:	f8c8 1000 	str.w	r1, [r8]
 800be32:	e794      	b.n	800bd5e <_strtol_l.constprop.0+0x1a>
 800be34:	0800dc51 	.word	0x0800dc51

0800be38 <_strtol_r>:
 800be38:	f7ff bf84 	b.w	800bd44 <_strtol_l.constprop.0>

0800be3c <__ssputs_r>:
 800be3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be40:	688e      	ldr	r6, [r1, #8]
 800be42:	461f      	mov	r7, r3
 800be44:	42be      	cmp	r6, r7
 800be46:	680b      	ldr	r3, [r1, #0]
 800be48:	4682      	mov	sl, r0
 800be4a:	460c      	mov	r4, r1
 800be4c:	4690      	mov	r8, r2
 800be4e:	d82d      	bhi.n	800beac <__ssputs_r+0x70>
 800be50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800be58:	d026      	beq.n	800bea8 <__ssputs_r+0x6c>
 800be5a:	6965      	ldr	r5, [r4, #20]
 800be5c:	6909      	ldr	r1, [r1, #16]
 800be5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be62:	eba3 0901 	sub.w	r9, r3, r1
 800be66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be6a:	1c7b      	adds	r3, r7, #1
 800be6c:	444b      	add	r3, r9
 800be6e:	106d      	asrs	r5, r5, #1
 800be70:	429d      	cmp	r5, r3
 800be72:	bf38      	it	cc
 800be74:	461d      	movcc	r5, r3
 800be76:	0553      	lsls	r3, r2, #21
 800be78:	d527      	bpl.n	800beca <__ssputs_r+0x8e>
 800be7a:	4629      	mov	r1, r5
 800be7c:	f7fe fc1c 	bl	800a6b8 <_malloc_r>
 800be80:	4606      	mov	r6, r0
 800be82:	b360      	cbz	r0, 800bede <__ssputs_r+0xa2>
 800be84:	6921      	ldr	r1, [r4, #16]
 800be86:	464a      	mov	r2, r9
 800be88:	f7fd fd3f 	bl	800990a <memcpy>
 800be8c:	89a3      	ldrh	r3, [r4, #12]
 800be8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be96:	81a3      	strh	r3, [r4, #12]
 800be98:	6126      	str	r6, [r4, #16]
 800be9a:	6165      	str	r5, [r4, #20]
 800be9c:	444e      	add	r6, r9
 800be9e:	eba5 0509 	sub.w	r5, r5, r9
 800bea2:	6026      	str	r6, [r4, #0]
 800bea4:	60a5      	str	r5, [r4, #8]
 800bea6:	463e      	mov	r6, r7
 800bea8:	42be      	cmp	r6, r7
 800beaa:	d900      	bls.n	800beae <__ssputs_r+0x72>
 800beac:	463e      	mov	r6, r7
 800beae:	6820      	ldr	r0, [r4, #0]
 800beb0:	4632      	mov	r2, r6
 800beb2:	4641      	mov	r1, r8
 800beb4:	f000 fd53 	bl	800c95e <memmove>
 800beb8:	68a3      	ldr	r3, [r4, #8]
 800beba:	1b9b      	subs	r3, r3, r6
 800bebc:	60a3      	str	r3, [r4, #8]
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	4433      	add	r3, r6
 800bec2:	6023      	str	r3, [r4, #0]
 800bec4:	2000      	movs	r0, #0
 800bec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beca:	462a      	mov	r2, r5
 800becc:	f001 f909 	bl	800d0e2 <_realloc_r>
 800bed0:	4606      	mov	r6, r0
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d1e0      	bne.n	800be98 <__ssputs_r+0x5c>
 800bed6:	6921      	ldr	r1, [r4, #16]
 800bed8:	4650      	mov	r0, sl
 800beda:	f7fe fb79 	bl	800a5d0 <_free_r>
 800bede:	230c      	movs	r3, #12
 800bee0:	f8ca 3000 	str.w	r3, [sl]
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	f04f 30ff 	mov.w	r0, #4294967295
 800bef0:	e7e9      	b.n	800bec6 <__ssputs_r+0x8a>
	...

0800bef4 <_svfiprintf_r>:
 800bef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef8:	4698      	mov	r8, r3
 800befa:	898b      	ldrh	r3, [r1, #12]
 800befc:	061b      	lsls	r3, r3, #24
 800befe:	b09d      	sub	sp, #116	@ 0x74
 800bf00:	4607      	mov	r7, r0
 800bf02:	460d      	mov	r5, r1
 800bf04:	4614      	mov	r4, r2
 800bf06:	d510      	bpl.n	800bf2a <_svfiprintf_r+0x36>
 800bf08:	690b      	ldr	r3, [r1, #16]
 800bf0a:	b973      	cbnz	r3, 800bf2a <_svfiprintf_r+0x36>
 800bf0c:	2140      	movs	r1, #64	@ 0x40
 800bf0e:	f7fe fbd3 	bl	800a6b8 <_malloc_r>
 800bf12:	6028      	str	r0, [r5, #0]
 800bf14:	6128      	str	r0, [r5, #16]
 800bf16:	b930      	cbnz	r0, 800bf26 <_svfiprintf_r+0x32>
 800bf18:	230c      	movs	r3, #12
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf20:	b01d      	add	sp, #116	@ 0x74
 800bf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf26:	2340      	movs	r3, #64	@ 0x40
 800bf28:	616b      	str	r3, [r5, #20]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf2e:	2320      	movs	r3, #32
 800bf30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf34:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf38:	2330      	movs	r3, #48	@ 0x30
 800bf3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c0d8 <_svfiprintf_r+0x1e4>
 800bf3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf42:	f04f 0901 	mov.w	r9, #1
 800bf46:	4623      	mov	r3, r4
 800bf48:	469a      	mov	sl, r3
 800bf4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf4e:	b10a      	cbz	r2, 800bf54 <_svfiprintf_r+0x60>
 800bf50:	2a25      	cmp	r2, #37	@ 0x25
 800bf52:	d1f9      	bne.n	800bf48 <_svfiprintf_r+0x54>
 800bf54:	ebba 0b04 	subs.w	fp, sl, r4
 800bf58:	d00b      	beq.n	800bf72 <_svfiprintf_r+0x7e>
 800bf5a:	465b      	mov	r3, fp
 800bf5c:	4622      	mov	r2, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	4638      	mov	r0, r7
 800bf62:	f7ff ff6b 	bl	800be3c <__ssputs_r>
 800bf66:	3001      	adds	r0, #1
 800bf68:	f000 80a7 	beq.w	800c0ba <_svfiprintf_r+0x1c6>
 800bf6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf6e:	445a      	add	r2, fp
 800bf70:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf72:	f89a 3000 	ldrb.w	r3, [sl]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 809f 	beq.w	800c0ba <_svfiprintf_r+0x1c6>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf86:	f10a 0a01 	add.w	sl, sl, #1
 800bf8a:	9304      	str	r3, [sp, #16]
 800bf8c:	9307      	str	r3, [sp, #28]
 800bf8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf92:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf94:	4654      	mov	r4, sl
 800bf96:	2205      	movs	r2, #5
 800bf98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf9c:	484e      	ldr	r0, [pc, #312]	@ (800c0d8 <_svfiprintf_r+0x1e4>)
 800bf9e:	f7f4 f91f 	bl	80001e0 <memchr>
 800bfa2:	9a04      	ldr	r2, [sp, #16]
 800bfa4:	b9d8      	cbnz	r0, 800bfde <_svfiprintf_r+0xea>
 800bfa6:	06d0      	lsls	r0, r2, #27
 800bfa8:	bf44      	itt	mi
 800bfaa:	2320      	movmi	r3, #32
 800bfac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfb0:	0711      	lsls	r1, r2, #28
 800bfb2:	bf44      	itt	mi
 800bfb4:	232b      	movmi	r3, #43	@ 0x2b
 800bfb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfba:	f89a 3000 	ldrb.w	r3, [sl]
 800bfbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfc0:	d015      	beq.n	800bfee <_svfiprintf_r+0xfa>
 800bfc2:	9a07      	ldr	r2, [sp, #28]
 800bfc4:	4654      	mov	r4, sl
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	f04f 0c0a 	mov.w	ip, #10
 800bfcc:	4621      	mov	r1, r4
 800bfce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfd2:	3b30      	subs	r3, #48	@ 0x30
 800bfd4:	2b09      	cmp	r3, #9
 800bfd6:	d94b      	bls.n	800c070 <_svfiprintf_r+0x17c>
 800bfd8:	b1b0      	cbz	r0, 800c008 <_svfiprintf_r+0x114>
 800bfda:	9207      	str	r2, [sp, #28]
 800bfdc:	e014      	b.n	800c008 <_svfiprintf_r+0x114>
 800bfde:	eba0 0308 	sub.w	r3, r0, r8
 800bfe2:	fa09 f303 	lsl.w	r3, r9, r3
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	9304      	str	r3, [sp, #16]
 800bfea:	46a2      	mov	sl, r4
 800bfec:	e7d2      	b.n	800bf94 <_svfiprintf_r+0xa0>
 800bfee:	9b03      	ldr	r3, [sp, #12]
 800bff0:	1d19      	adds	r1, r3, #4
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	9103      	str	r1, [sp, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	bfbb      	ittet	lt
 800bffa:	425b      	neglt	r3, r3
 800bffc:	f042 0202 	orrlt.w	r2, r2, #2
 800c000:	9307      	strge	r3, [sp, #28]
 800c002:	9307      	strlt	r3, [sp, #28]
 800c004:	bfb8      	it	lt
 800c006:	9204      	strlt	r2, [sp, #16]
 800c008:	7823      	ldrb	r3, [r4, #0]
 800c00a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c00c:	d10a      	bne.n	800c024 <_svfiprintf_r+0x130>
 800c00e:	7863      	ldrb	r3, [r4, #1]
 800c010:	2b2a      	cmp	r3, #42	@ 0x2a
 800c012:	d132      	bne.n	800c07a <_svfiprintf_r+0x186>
 800c014:	9b03      	ldr	r3, [sp, #12]
 800c016:	1d1a      	adds	r2, r3, #4
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	9203      	str	r2, [sp, #12]
 800c01c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c020:	3402      	adds	r4, #2
 800c022:	9305      	str	r3, [sp, #20]
 800c024:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c0e8 <_svfiprintf_r+0x1f4>
 800c028:	7821      	ldrb	r1, [r4, #0]
 800c02a:	2203      	movs	r2, #3
 800c02c:	4650      	mov	r0, sl
 800c02e:	f7f4 f8d7 	bl	80001e0 <memchr>
 800c032:	b138      	cbz	r0, 800c044 <_svfiprintf_r+0x150>
 800c034:	9b04      	ldr	r3, [sp, #16]
 800c036:	eba0 000a 	sub.w	r0, r0, sl
 800c03a:	2240      	movs	r2, #64	@ 0x40
 800c03c:	4082      	lsls	r2, r0
 800c03e:	4313      	orrs	r3, r2
 800c040:	3401      	adds	r4, #1
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c048:	4824      	ldr	r0, [pc, #144]	@ (800c0dc <_svfiprintf_r+0x1e8>)
 800c04a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c04e:	2206      	movs	r2, #6
 800c050:	f7f4 f8c6 	bl	80001e0 <memchr>
 800c054:	2800      	cmp	r0, #0
 800c056:	d036      	beq.n	800c0c6 <_svfiprintf_r+0x1d2>
 800c058:	4b21      	ldr	r3, [pc, #132]	@ (800c0e0 <_svfiprintf_r+0x1ec>)
 800c05a:	bb1b      	cbnz	r3, 800c0a4 <_svfiprintf_r+0x1b0>
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	3307      	adds	r3, #7
 800c060:	f023 0307 	bic.w	r3, r3, #7
 800c064:	3308      	adds	r3, #8
 800c066:	9303      	str	r3, [sp, #12]
 800c068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c06a:	4433      	add	r3, r6
 800c06c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c06e:	e76a      	b.n	800bf46 <_svfiprintf_r+0x52>
 800c070:	fb0c 3202 	mla	r2, ip, r2, r3
 800c074:	460c      	mov	r4, r1
 800c076:	2001      	movs	r0, #1
 800c078:	e7a8      	b.n	800bfcc <_svfiprintf_r+0xd8>
 800c07a:	2300      	movs	r3, #0
 800c07c:	3401      	adds	r4, #1
 800c07e:	9305      	str	r3, [sp, #20]
 800c080:	4619      	mov	r1, r3
 800c082:	f04f 0c0a 	mov.w	ip, #10
 800c086:	4620      	mov	r0, r4
 800c088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c08c:	3a30      	subs	r2, #48	@ 0x30
 800c08e:	2a09      	cmp	r2, #9
 800c090:	d903      	bls.n	800c09a <_svfiprintf_r+0x1a6>
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0c6      	beq.n	800c024 <_svfiprintf_r+0x130>
 800c096:	9105      	str	r1, [sp, #20]
 800c098:	e7c4      	b.n	800c024 <_svfiprintf_r+0x130>
 800c09a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c09e:	4604      	mov	r4, r0
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e7f0      	b.n	800c086 <_svfiprintf_r+0x192>
 800c0a4:	ab03      	add	r3, sp, #12
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	4b0e      	ldr	r3, [pc, #56]	@ (800c0e4 <_svfiprintf_r+0x1f0>)
 800c0ac:	a904      	add	r1, sp, #16
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	f7fc fbe2 	bl	8008878 <_printf_float>
 800c0b4:	1c42      	adds	r2, r0, #1
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	d1d6      	bne.n	800c068 <_svfiprintf_r+0x174>
 800c0ba:	89ab      	ldrh	r3, [r5, #12]
 800c0bc:	065b      	lsls	r3, r3, #25
 800c0be:	f53f af2d 	bmi.w	800bf1c <_svfiprintf_r+0x28>
 800c0c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0c4:	e72c      	b.n	800bf20 <_svfiprintf_r+0x2c>
 800c0c6:	ab03      	add	r3, sp, #12
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	462a      	mov	r2, r5
 800c0cc:	4b05      	ldr	r3, [pc, #20]	@ (800c0e4 <_svfiprintf_r+0x1f0>)
 800c0ce:	a904      	add	r1, sp, #16
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	f7fc fe69 	bl	8008da8 <_printf_i>
 800c0d6:	e7ed      	b.n	800c0b4 <_svfiprintf_r+0x1c0>
 800c0d8:	0800dd51 	.word	0x0800dd51
 800c0dc:	0800dd5b 	.word	0x0800dd5b
 800c0e0:	08008879 	.word	0x08008879
 800c0e4:	0800be3d 	.word	0x0800be3d
 800c0e8:	0800dd57 	.word	0x0800dd57

0800c0ec <_sungetc_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	1c4b      	adds	r3, r1, #1
 800c0f0:	4614      	mov	r4, r2
 800c0f2:	d103      	bne.n	800c0fc <_sungetc_r+0x10>
 800c0f4:	f04f 35ff 	mov.w	r5, #4294967295
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	bd38      	pop	{r3, r4, r5, pc}
 800c0fc:	8993      	ldrh	r3, [r2, #12]
 800c0fe:	f023 0320 	bic.w	r3, r3, #32
 800c102:	8193      	strh	r3, [r2, #12]
 800c104:	6853      	ldr	r3, [r2, #4]
 800c106:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c108:	b2cd      	uxtb	r5, r1
 800c10a:	b18a      	cbz	r2, 800c130 <_sungetc_r+0x44>
 800c10c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c10e:	429a      	cmp	r2, r3
 800c110:	dd08      	ble.n	800c124 <_sungetc_r+0x38>
 800c112:	6823      	ldr	r3, [r4, #0]
 800c114:	1e5a      	subs	r2, r3, #1
 800c116:	6022      	str	r2, [r4, #0]
 800c118:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c11c:	6863      	ldr	r3, [r4, #4]
 800c11e:	3301      	adds	r3, #1
 800c120:	6063      	str	r3, [r4, #4]
 800c122:	e7e9      	b.n	800c0f8 <_sungetc_r+0xc>
 800c124:	4621      	mov	r1, r4
 800c126:	f000 fbe0 	bl	800c8ea <__submore>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	d0f1      	beq.n	800c112 <_sungetc_r+0x26>
 800c12e:	e7e1      	b.n	800c0f4 <_sungetc_r+0x8>
 800c130:	6921      	ldr	r1, [r4, #16]
 800c132:	6822      	ldr	r2, [r4, #0]
 800c134:	b141      	cbz	r1, 800c148 <_sungetc_r+0x5c>
 800c136:	4291      	cmp	r1, r2
 800c138:	d206      	bcs.n	800c148 <_sungetc_r+0x5c>
 800c13a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c13e:	42a9      	cmp	r1, r5
 800c140:	d102      	bne.n	800c148 <_sungetc_r+0x5c>
 800c142:	3a01      	subs	r2, #1
 800c144:	6022      	str	r2, [r4, #0]
 800c146:	e7ea      	b.n	800c11e <_sungetc_r+0x32>
 800c148:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800c14c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c150:	6363      	str	r3, [r4, #52]	@ 0x34
 800c152:	2303      	movs	r3, #3
 800c154:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c156:	4623      	mov	r3, r4
 800c158:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	2301      	movs	r3, #1
 800c160:	e7de      	b.n	800c120 <_sungetc_r+0x34>

0800c162 <__ssrefill_r>:
 800c162:	b510      	push	{r4, lr}
 800c164:	460c      	mov	r4, r1
 800c166:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c168:	b169      	cbz	r1, 800c186 <__ssrefill_r+0x24>
 800c16a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c16e:	4299      	cmp	r1, r3
 800c170:	d001      	beq.n	800c176 <__ssrefill_r+0x14>
 800c172:	f7fe fa2d 	bl	800a5d0 <_free_r>
 800c176:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c178:	6063      	str	r3, [r4, #4]
 800c17a:	2000      	movs	r0, #0
 800c17c:	6360      	str	r0, [r4, #52]	@ 0x34
 800c17e:	b113      	cbz	r3, 800c186 <__ssrefill_r+0x24>
 800c180:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c182:	6023      	str	r3, [r4, #0]
 800c184:	bd10      	pop	{r4, pc}
 800c186:	6923      	ldr	r3, [r4, #16]
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	2300      	movs	r3, #0
 800c18c:	6063      	str	r3, [r4, #4]
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	f043 0320 	orr.w	r3, r3, #32
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	f04f 30ff 	mov.w	r0, #4294967295
 800c19a:	e7f3      	b.n	800c184 <__ssrefill_r+0x22>

0800c19c <__ssvfiscanf_r>:
 800c19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c1ac:	49a5      	ldr	r1, [pc, #660]	@ (800c444 <__ssvfiscanf_r+0x2a8>)
 800c1ae:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c1b0:	f10d 0804 	add.w	r8, sp, #4
 800c1b4:	49a4      	ldr	r1, [pc, #656]	@ (800c448 <__ssvfiscanf_r+0x2ac>)
 800c1b6:	4fa5      	ldr	r7, [pc, #660]	@ (800c44c <__ssvfiscanf_r+0x2b0>)
 800c1b8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c1bc:	4606      	mov	r6, r0
 800c1be:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	7813      	ldrb	r3, [r2, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f000 8158 	beq.w	800c47a <__ssvfiscanf_r+0x2de>
 800c1ca:	5cf9      	ldrb	r1, [r7, r3]
 800c1cc:	f011 0108 	ands.w	r1, r1, #8
 800c1d0:	f102 0501 	add.w	r5, r2, #1
 800c1d4:	d019      	beq.n	800c20a <__ssvfiscanf_r+0x6e>
 800c1d6:	6863      	ldr	r3, [r4, #4]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	dd0f      	ble.n	800c1fc <__ssvfiscanf_r+0x60>
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	781a      	ldrb	r2, [r3, #0]
 800c1e0:	5cba      	ldrb	r2, [r7, r2]
 800c1e2:	0712      	lsls	r2, r2, #28
 800c1e4:	d401      	bmi.n	800c1ea <__ssvfiscanf_r+0x4e>
 800c1e6:	462a      	mov	r2, r5
 800c1e8:	e7eb      	b.n	800c1c2 <__ssvfiscanf_r+0x26>
 800c1ea:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c1ec:	3201      	adds	r2, #1
 800c1ee:	9245      	str	r2, [sp, #276]	@ 0x114
 800c1f0:	6862      	ldr	r2, [r4, #4]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	3a01      	subs	r2, #1
 800c1f6:	6062      	str	r2, [r4, #4]
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	e7ec      	b.n	800c1d6 <__ssvfiscanf_r+0x3a>
 800c1fc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c1fe:	4621      	mov	r1, r4
 800c200:	4630      	mov	r0, r6
 800c202:	4798      	blx	r3
 800c204:	2800      	cmp	r0, #0
 800c206:	d0e9      	beq.n	800c1dc <__ssvfiscanf_r+0x40>
 800c208:	e7ed      	b.n	800c1e6 <__ssvfiscanf_r+0x4a>
 800c20a:	2b25      	cmp	r3, #37	@ 0x25
 800c20c:	d012      	beq.n	800c234 <__ssvfiscanf_r+0x98>
 800c20e:	4699      	mov	r9, r3
 800c210:	6863      	ldr	r3, [r4, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	f340 8093 	ble.w	800c33e <__ssvfiscanf_r+0x1a2>
 800c218:	6822      	ldr	r2, [r4, #0]
 800c21a:	7813      	ldrb	r3, [r2, #0]
 800c21c:	454b      	cmp	r3, r9
 800c21e:	f040 812c 	bne.w	800c47a <__ssvfiscanf_r+0x2de>
 800c222:	6863      	ldr	r3, [r4, #4]
 800c224:	3b01      	subs	r3, #1
 800c226:	6063      	str	r3, [r4, #4]
 800c228:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c22a:	3201      	adds	r2, #1
 800c22c:	3301      	adds	r3, #1
 800c22e:	6022      	str	r2, [r4, #0]
 800c230:	9345      	str	r3, [sp, #276]	@ 0x114
 800c232:	e7d8      	b.n	800c1e6 <__ssvfiscanf_r+0x4a>
 800c234:	9141      	str	r1, [sp, #260]	@ 0x104
 800c236:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c238:	7853      	ldrb	r3, [r2, #1]
 800c23a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c23c:	bf02      	ittt	eq
 800c23e:	2310      	moveq	r3, #16
 800c240:	1c95      	addeq	r5, r2, #2
 800c242:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c244:	220a      	movs	r2, #10
 800c246:	46a9      	mov	r9, r5
 800c248:	f819 1b01 	ldrb.w	r1, [r9], #1
 800c24c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c250:	2b09      	cmp	r3, #9
 800c252:	d91e      	bls.n	800c292 <__ssvfiscanf_r+0xf6>
 800c254:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800c450 <__ssvfiscanf_r+0x2b4>
 800c258:	2203      	movs	r2, #3
 800c25a:	4650      	mov	r0, sl
 800c25c:	f7f3 ffc0 	bl	80001e0 <memchr>
 800c260:	b138      	cbz	r0, 800c272 <__ssvfiscanf_r+0xd6>
 800c262:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c264:	eba0 000a 	sub.w	r0, r0, sl
 800c268:	2301      	movs	r3, #1
 800c26a:	4083      	lsls	r3, r0
 800c26c:	4313      	orrs	r3, r2
 800c26e:	9341      	str	r3, [sp, #260]	@ 0x104
 800c270:	464d      	mov	r5, r9
 800c272:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c276:	2b78      	cmp	r3, #120	@ 0x78
 800c278:	d806      	bhi.n	800c288 <__ssvfiscanf_r+0xec>
 800c27a:	2b57      	cmp	r3, #87	@ 0x57
 800c27c:	d810      	bhi.n	800c2a0 <__ssvfiscanf_r+0x104>
 800c27e:	2b25      	cmp	r3, #37	@ 0x25
 800c280:	d0c5      	beq.n	800c20e <__ssvfiscanf_r+0x72>
 800c282:	d857      	bhi.n	800c334 <__ssvfiscanf_r+0x198>
 800c284:	2b00      	cmp	r3, #0
 800c286:	d065      	beq.n	800c354 <__ssvfiscanf_r+0x1b8>
 800c288:	2303      	movs	r3, #3
 800c28a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c28c:	230a      	movs	r3, #10
 800c28e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c290:	e078      	b.n	800c384 <__ssvfiscanf_r+0x1e8>
 800c292:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c294:	fb02 1103 	mla	r1, r2, r3, r1
 800c298:	3930      	subs	r1, #48	@ 0x30
 800c29a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c29c:	464d      	mov	r5, r9
 800c29e:	e7d2      	b.n	800c246 <__ssvfiscanf_r+0xaa>
 800c2a0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c2a4:	2a20      	cmp	r2, #32
 800c2a6:	d8ef      	bhi.n	800c288 <__ssvfiscanf_r+0xec>
 800c2a8:	a101      	add	r1, pc, #4	@ (adr r1, 800c2b0 <__ssvfiscanf_r+0x114>)
 800c2aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c2ae:	bf00      	nop
 800c2b0:	0800c363 	.word	0x0800c363
 800c2b4:	0800c289 	.word	0x0800c289
 800c2b8:	0800c289 	.word	0x0800c289
 800c2bc:	0800c3bd 	.word	0x0800c3bd
 800c2c0:	0800c289 	.word	0x0800c289
 800c2c4:	0800c289 	.word	0x0800c289
 800c2c8:	0800c289 	.word	0x0800c289
 800c2cc:	0800c289 	.word	0x0800c289
 800c2d0:	0800c289 	.word	0x0800c289
 800c2d4:	0800c289 	.word	0x0800c289
 800c2d8:	0800c289 	.word	0x0800c289
 800c2dc:	0800c3d3 	.word	0x0800c3d3
 800c2e0:	0800c3b9 	.word	0x0800c3b9
 800c2e4:	0800c33b 	.word	0x0800c33b
 800c2e8:	0800c33b 	.word	0x0800c33b
 800c2ec:	0800c33b 	.word	0x0800c33b
 800c2f0:	0800c289 	.word	0x0800c289
 800c2f4:	0800c375 	.word	0x0800c375
 800c2f8:	0800c289 	.word	0x0800c289
 800c2fc:	0800c289 	.word	0x0800c289
 800c300:	0800c289 	.word	0x0800c289
 800c304:	0800c289 	.word	0x0800c289
 800c308:	0800c3e3 	.word	0x0800c3e3
 800c30c:	0800c37d 	.word	0x0800c37d
 800c310:	0800c35b 	.word	0x0800c35b
 800c314:	0800c289 	.word	0x0800c289
 800c318:	0800c289 	.word	0x0800c289
 800c31c:	0800c3df 	.word	0x0800c3df
 800c320:	0800c289 	.word	0x0800c289
 800c324:	0800c3b9 	.word	0x0800c3b9
 800c328:	0800c289 	.word	0x0800c289
 800c32c:	0800c289 	.word	0x0800c289
 800c330:	0800c363 	.word	0x0800c363
 800c334:	3b45      	subs	r3, #69	@ 0x45
 800c336:	2b02      	cmp	r3, #2
 800c338:	d8a6      	bhi.n	800c288 <__ssvfiscanf_r+0xec>
 800c33a:	2305      	movs	r3, #5
 800c33c:	e021      	b.n	800c382 <__ssvfiscanf_r+0x1e6>
 800c33e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c340:	4621      	mov	r1, r4
 800c342:	4630      	mov	r0, r6
 800c344:	4798      	blx	r3
 800c346:	2800      	cmp	r0, #0
 800c348:	f43f af66 	beq.w	800c218 <__ssvfiscanf_r+0x7c>
 800c34c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c34e:	2800      	cmp	r0, #0
 800c350:	f040 808b 	bne.w	800c46a <__ssvfiscanf_r+0x2ce>
 800c354:	f04f 30ff 	mov.w	r0, #4294967295
 800c358:	e08b      	b.n	800c472 <__ssvfiscanf_r+0x2d6>
 800c35a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c35c:	f042 0220 	orr.w	r2, r2, #32
 800c360:	9241      	str	r2, [sp, #260]	@ 0x104
 800c362:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c368:	9241      	str	r2, [sp, #260]	@ 0x104
 800c36a:	2210      	movs	r2, #16
 800c36c:	2b6e      	cmp	r3, #110	@ 0x6e
 800c36e:	9242      	str	r2, [sp, #264]	@ 0x108
 800c370:	d902      	bls.n	800c378 <__ssvfiscanf_r+0x1dc>
 800c372:	e005      	b.n	800c380 <__ssvfiscanf_r+0x1e4>
 800c374:	2300      	movs	r3, #0
 800c376:	9342      	str	r3, [sp, #264]	@ 0x108
 800c378:	2303      	movs	r3, #3
 800c37a:	e002      	b.n	800c382 <__ssvfiscanf_r+0x1e6>
 800c37c:	2308      	movs	r3, #8
 800c37e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c380:	2304      	movs	r3, #4
 800c382:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c384:	6863      	ldr	r3, [r4, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	dd39      	ble.n	800c3fe <__ssvfiscanf_r+0x262>
 800c38a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c38c:	0659      	lsls	r1, r3, #25
 800c38e:	d404      	bmi.n	800c39a <__ssvfiscanf_r+0x1fe>
 800c390:	6823      	ldr	r3, [r4, #0]
 800c392:	781a      	ldrb	r2, [r3, #0]
 800c394:	5cba      	ldrb	r2, [r7, r2]
 800c396:	0712      	lsls	r2, r2, #28
 800c398:	d438      	bmi.n	800c40c <__ssvfiscanf_r+0x270>
 800c39a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	dc47      	bgt.n	800c430 <__ssvfiscanf_r+0x294>
 800c3a0:	466b      	mov	r3, sp
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	a941      	add	r1, sp, #260	@ 0x104
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f000 f86c 	bl	800c484 <_scanf_chars>
 800c3ac:	2801      	cmp	r0, #1
 800c3ae:	d064      	beq.n	800c47a <__ssvfiscanf_r+0x2de>
 800c3b0:	2802      	cmp	r0, #2
 800c3b2:	f47f af18 	bne.w	800c1e6 <__ssvfiscanf_r+0x4a>
 800c3b6:	e7c9      	b.n	800c34c <__ssvfiscanf_r+0x1b0>
 800c3b8:	220a      	movs	r2, #10
 800c3ba:	e7d7      	b.n	800c36c <__ssvfiscanf_r+0x1d0>
 800c3bc:	4629      	mov	r1, r5
 800c3be:	4640      	mov	r0, r8
 800c3c0:	f000 fa5a 	bl	800c878 <__sccl>
 800c3c4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c3c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3ca:	9341      	str	r3, [sp, #260]	@ 0x104
 800c3cc:	4605      	mov	r5, r0
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e7d7      	b.n	800c382 <__ssvfiscanf_r+0x1e6>
 800c3d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c3d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3d8:	9341      	str	r3, [sp, #260]	@ 0x104
 800c3da:	2300      	movs	r3, #0
 800c3dc:	e7d1      	b.n	800c382 <__ssvfiscanf_r+0x1e6>
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e7cf      	b.n	800c382 <__ssvfiscanf_r+0x1e6>
 800c3e2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c3e4:	06c3      	lsls	r3, r0, #27
 800c3e6:	f53f aefe 	bmi.w	800c1e6 <__ssvfiscanf_r+0x4a>
 800c3ea:	9b00      	ldr	r3, [sp, #0]
 800c3ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c3ee:	1d19      	adds	r1, r3, #4
 800c3f0:	9100      	str	r1, [sp, #0]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	07c0      	lsls	r0, r0, #31
 800c3f6:	bf4c      	ite	mi
 800c3f8:	801a      	strhmi	r2, [r3, #0]
 800c3fa:	601a      	strpl	r2, [r3, #0]
 800c3fc:	e6f3      	b.n	800c1e6 <__ssvfiscanf_r+0x4a>
 800c3fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c400:	4621      	mov	r1, r4
 800c402:	4630      	mov	r0, r6
 800c404:	4798      	blx	r3
 800c406:	2800      	cmp	r0, #0
 800c408:	d0bf      	beq.n	800c38a <__ssvfiscanf_r+0x1ee>
 800c40a:	e79f      	b.n	800c34c <__ssvfiscanf_r+0x1b0>
 800c40c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c40e:	3201      	adds	r2, #1
 800c410:	9245      	str	r2, [sp, #276]	@ 0x114
 800c412:	6862      	ldr	r2, [r4, #4]
 800c414:	3a01      	subs	r2, #1
 800c416:	2a00      	cmp	r2, #0
 800c418:	6062      	str	r2, [r4, #4]
 800c41a:	dd02      	ble.n	800c422 <__ssvfiscanf_r+0x286>
 800c41c:	3301      	adds	r3, #1
 800c41e:	6023      	str	r3, [r4, #0]
 800c420:	e7b6      	b.n	800c390 <__ssvfiscanf_r+0x1f4>
 800c422:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c424:	4621      	mov	r1, r4
 800c426:	4630      	mov	r0, r6
 800c428:	4798      	blx	r3
 800c42a:	2800      	cmp	r0, #0
 800c42c:	d0b0      	beq.n	800c390 <__ssvfiscanf_r+0x1f4>
 800c42e:	e78d      	b.n	800c34c <__ssvfiscanf_r+0x1b0>
 800c430:	2b04      	cmp	r3, #4
 800c432:	dc0f      	bgt.n	800c454 <__ssvfiscanf_r+0x2b8>
 800c434:	466b      	mov	r3, sp
 800c436:	4622      	mov	r2, r4
 800c438:	a941      	add	r1, sp, #260	@ 0x104
 800c43a:	4630      	mov	r0, r6
 800c43c:	f000 f87c 	bl	800c538 <_scanf_i>
 800c440:	e7b4      	b.n	800c3ac <__ssvfiscanf_r+0x210>
 800c442:	bf00      	nop
 800c444:	0800c0ed 	.word	0x0800c0ed
 800c448:	0800c163 	.word	0x0800c163
 800c44c:	0800dc51 	.word	0x0800dc51
 800c450:	0800dd57 	.word	0x0800dd57
 800c454:	4b0a      	ldr	r3, [pc, #40]	@ (800c480 <__ssvfiscanf_r+0x2e4>)
 800c456:	2b00      	cmp	r3, #0
 800c458:	f43f aec5 	beq.w	800c1e6 <__ssvfiscanf_r+0x4a>
 800c45c:	466b      	mov	r3, sp
 800c45e:	4622      	mov	r2, r4
 800c460:	a941      	add	r1, sp, #260	@ 0x104
 800c462:	4630      	mov	r0, r6
 800c464:	f7fc fdc0 	bl	8008fe8 <_scanf_float>
 800c468:	e7a0      	b.n	800c3ac <__ssvfiscanf_r+0x210>
 800c46a:	89a3      	ldrh	r3, [r4, #12]
 800c46c:	065b      	lsls	r3, r3, #25
 800c46e:	f53f af71 	bmi.w	800c354 <__ssvfiscanf_r+0x1b8>
 800c472:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c47a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c47c:	e7f9      	b.n	800c472 <__ssvfiscanf_r+0x2d6>
 800c47e:	bf00      	nop
 800c480:	08008fe9 	.word	0x08008fe9

0800c484 <_scanf_chars>:
 800c484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c488:	4615      	mov	r5, r2
 800c48a:	688a      	ldr	r2, [r1, #8]
 800c48c:	4680      	mov	r8, r0
 800c48e:	460c      	mov	r4, r1
 800c490:	b932      	cbnz	r2, 800c4a0 <_scanf_chars+0x1c>
 800c492:	698a      	ldr	r2, [r1, #24]
 800c494:	2a00      	cmp	r2, #0
 800c496:	bf14      	ite	ne
 800c498:	f04f 32ff 	movne.w	r2, #4294967295
 800c49c:	2201      	moveq	r2, #1
 800c49e:	608a      	str	r2, [r1, #8]
 800c4a0:	6822      	ldr	r2, [r4, #0]
 800c4a2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c534 <_scanf_chars+0xb0>
 800c4a6:	06d1      	lsls	r1, r2, #27
 800c4a8:	bf5f      	itttt	pl
 800c4aa:	681a      	ldrpl	r2, [r3, #0]
 800c4ac:	1d11      	addpl	r1, r2, #4
 800c4ae:	6019      	strpl	r1, [r3, #0]
 800c4b0:	6816      	ldrpl	r6, [r2, #0]
 800c4b2:	2700      	movs	r7, #0
 800c4b4:	69a0      	ldr	r0, [r4, #24]
 800c4b6:	b188      	cbz	r0, 800c4dc <_scanf_chars+0x58>
 800c4b8:	2801      	cmp	r0, #1
 800c4ba:	d107      	bne.n	800c4cc <_scanf_chars+0x48>
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	781a      	ldrb	r2, [r3, #0]
 800c4c0:	6963      	ldr	r3, [r4, #20]
 800c4c2:	5c9b      	ldrb	r3, [r3, r2]
 800c4c4:	b953      	cbnz	r3, 800c4dc <_scanf_chars+0x58>
 800c4c6:	2f00      	cmp	r7, #0
 800c4c8:	d031      	beq.n	800c52e <_scanf_chars+0xaa>
 800c4ca:	e022      	b.n	800c512 <_scanf_chars+0x8e>
 800c4cc:	2802      	cmp	r0, #2
 800c4ce:	d120      	bne.n	800c512 <_scanf_chars+0x8e>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c4d8:	071b      	lsls	r3, r3, #28
 800c4da:	d41a      	bmi.n	800c512 <_scanf_chars+0x8e>
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	06da      	lsls	r2, r3, #27
 800c4e0:	bf5e      	ittt	pl
 800c4e2:	682b      	ldrpl	r3, [r5, #0]
 800c4e4:	781b      	ldrbpl	r3, [r3, #0]
 800c4e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c4ea:	682a      	ldr	r2, [r5, #0]
 800c4ec:	686b      	ldr	r3, [r5, #4]
 800c4ee:	3201      	adds	r2, #1
 800c4f0:	602a      	str	r2, [r5, #0]
 800c4f2:	68a2      	ldr	r2, [r4, #8]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	3a01      	subs	r2, #1
 800c4f8:	606b      	str	r3, [r5, #4]
 800c4fa:	3701      	adds	r7, #1
 800c4fc:	60a2      	str	r2, [r4, #8]
 800c4fe:	b142      	cbz	r2, 800c512 <_scanf_chars+0x8e>
 800c500:	2b00      	cmp	r3, #0
 800c502:	dcd7      	bgt.n	800c4b4 <_scanf_chars+0x30>
 800c504:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c508:	4629      	mov	r1, r5
 800c50a:	4640      	mov	r0, r8
 800c50c:	4798      	blx	r3
 800c50e:	2800      	cmp	r0, #0
 800c510:	d0d0      	beq.n	800c4b4 <_scanf_chars+0x30>
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	f013 0310 	ands.w	r3, r3, #16
 800c518:	d105      	bne.n	800c526 <_scanf_chars+0xa2>
 800c51a:	68e2      	ldr	r2, [r4, #12]
 800c51c:	3201      	adds	r2, #1
 800c51e:	60e2      	str	r2, [r4, #12]
 800c520:	69a2      	ldr	r2, [r4, #24]
 800c522:	b102      	cbz	r2, 800c526 <_scanf_chars+0xa2>
 800c524:	7033      	strb	r3, [r6, #0]
 800c526:	6923      	ldr	r3, [r4, #16]
 800c528:	443b      	add	r3, r7
 800c52a:	6123      	str	r3, [r4, #16]
 800c52c:	2000      	movs	r0, #0
 800c52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c532:	bf00      	nop
 800c534:	0800dc51 	.word	0x0800dc51

0800c538 <_scanf_i>:
 800c538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	4698      	mov	r8, r3
 800c53e:	4b74      	ldr	r3, [pc, #464]	@ (800c710 <_scanf_i+0x1d8>)
 800c540:	460c      	mov	r4, r1
 800c542:	4682      	mov	sl, r0
 800c544:	4616      	mov	r6, r2
 800c546:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c54a:	b087      	sub	sp, #28
 800c54c:	ab03      	add	r3, sp, #12
 800c54e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c552:	4b70      	ldr	r3, [pc, #448]	@ (800c714 <_scanf_i+0x1dc>)
 800c554:	69a1      	ldr	r1, [r4, #24]
 800c556:	4a70      	ldr	r2, [pc, #448]	@ (800c718 <_scanf_i+0x1e0>)
 800c558:	2903      	cmp	r1, #3
 800c55a:	bf08      	it	eq
 800c55c:	461a      	moveq	r2, r3
 800c55e:	68a3      	ldr	r3, [r4, #8]
 800c560:	9201      	str	r2, [sp, #4]
 800c562:	1e5a      	subs	r2, r3, #1
 800c564:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c568:	bf88      	it	hi
 800c56a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c56e:	4627      	mov	r7, r4
 800c570:	bf82      	ittt	hi
 800c572:	eb03 0905 	addhi.w	r9, r3, r5
 800c576:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c57a:	60a3      	strhi	r3, [r4, #8]
 800c57c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c580:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c584:	bf98      	it	ls
 800c586:	f04f 0900 	movls.w	r9, #0
 800c58a:	6023      	str	r3, [r4, #0]
 800c58c:	463d      	mov	r5, r7
 800c58e:	f04f 0b00 	mov.w	fp, #0
 800c592:	6831      	ldr	r1, [r6, #0]
 800c594:	ab03      	add	r3, sp, #12
 800c596:	7809      	ldrb	r1, [r1, #0]
 800c598:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c59c:	2202      	movs	r2, #2
 800c59e:	f7f3 fe1f 	bl	80001e0 <memchr>
 800c5a2:	b328      	cbz	r0, 800c5f0 <_scanf_i+0xb8>
 800c5a4:	f1bb 0f01 	cmp.w	fp, #1
 800c5a8:	d159      	bne.n	800c65e <_scanf_i+0x126>
 800c5aa:	6862      	ldr	r2, [r4, #4]
 800c5ac:	b92a      	cbnz	r2, 800c5ba <_scanf_i+0x82>
 800c5ae:	6822      	ldr	r2, [r4, #0]
 800c5b0:	2108      	movs	r1, #8
 800c5b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c5b6:	6061      	str	r1, [r4, #4]
 800c5b8:	6022      	str	r2, [r4, #0]
 800c5ba:	6822      	ldr	r2, [r4, #0]
 800c5bc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c5c0:	6022      	str	r2, [r4, #0]
 800c5c2:	68a2      	ldr	r2, [r4, #8]
 800c5c4:	1e51      	subs	r1, r2, #1
 800c5c6:	60a1      	str	r1, [r4, #8]
 800c5c8:	b192      	cbz	r2, 800c5f0 <_scanf_i+0xb8>
 800c5ca:	6832      	ldr	r2, [r6, #0]
 800c5cc:	1c51      	adds	r1, r2, #1
 800c5ce:	6031      	str	r1, [r6, #0]
 800c5d0:	7812      	ldrb	r2, [r2, #0]
 800c5d2:	f805 2b01 	strb.w	r2, [r5], #1
 800c5d6:	6872      	ldr	r2, [r6, #4]
 800c5d8:	3a01      	subs	r2, #1
 800c5da:	2a00      	cmp	r2, #0
 800c5dc:	6072      	str	r2, [r6, #4]
 800c5de:	dc07      	bgt.n	800c5f0 <_scanf_i+0xb8>
 800c5e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c5e4:	4631      	mov	r1, r6
 800c5e6:	4650      	mov	r0, sl
 800c5e8:	4790      	blx	r2
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	f040 8085 	bne.w	800c6fa <_scanf_i+0x1c2>
 800c5f0:	f10b 0b01 	add.w	fp, fp, #1
 800c5f4:	f1bb 0f03 	cmp.w	fp, #3
 800c5f8:	d1cb      	bne.n	800c592 <_scanf_i+0x5a>
 800c5fa:	6863      	ldr	r3, [r4, #4]
 800c5fc:	b90b      	cbnz	r3, 800c602 <_scanf_i+0xca>
 800c5fe:	230a      	movs	r3, #10
 800c600:	6063      	str	r3, [r4, #4]
 800c602:	6863      	ldr	r3, [r4, #4]
 800c604:	4945      	ldr	r1, [pc, #276]	@ (800c71c <_scanf_i+0x1e4>)
 800c606:	6960      	ldr	r0, [r4, #20]
 800c608:	1ac9      	subs	r1, r1, r3
 800c60a:	f000 f935 	bl	800c878 <__sccl>
 800c60e:	f04f 0b00 	mov.w	fp, #0
 800c612:	68a3      	ldr	r3, [r4, #8]
 800c614:	6822      	ldr	r2, [r4, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d03d      	beq.n	800c696 <_scanf_i+0x15e>
 800c61a:	6831      	ldr	r1, [r6, #0]
 800c61c:	6960      	ldr	r0, [r4, #20]
 800c61e:	f891 c000 	ldrb.w	ip, [r1]
 800c622:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c626:	2800      	cmp	r0, #0
 800c628:	d035      	beq.n	800c696 <_scanf_i+0x15e>
 800c62a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c62e:	d124      	bne.n	800c67a <_scanf_i+0x142>
 800c630:	0510      	lsls	r0, r2, #20
 800c632:	d522      	bpl.n	800c67a <_scanf_i+0x142>
 800c634:	f10b 0b01 	add.w	fp, fp, #1
 800c638:	f1b9 0f00 	cmp.w	r9, #0
 800c63c:	d003      	beq.n	800c646 <_scanf_i+0x10e>
 800c63e:	3301      	adds	r3, #1
 800c640:	f109 39ff 	add.w	r9, r9, #4294967295
 800c644:	60a3      	str	r3, [r4, #8]
 800c646:	6873      	ldr	r3, [r6, #4]
 800c648:	3b01      	subs	r3, #1
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	6073      	str	r3, [r6, #4]
 800c64e:	dd1b      	ble.n	800c688 <_scanf_i+0x150>
 800c650:	6833      	ldr	r3, [r6, #0]
 800c652:	3301      	adds	r3, #1
 800c654:	6033      	str	r3, [r6, #0]
 800c656:	68a3      	ldr	r3, [r4, #8]
 800c658:	3b01      	subs	r3, #1
 800c65a:	60a3      	str	r3, [r4, #8]
 800c65c:	e7d9      	b.n	800c612 <_scanf_i+0xda>
 800c65e:	f1bb 0f02 	cmp.w	fp, #2
 800c662:	d1ae      	bne.n	800c5c2 <_scanf_i+0x8a>
 800c664:	6822      	ldr	r2, [r4, #0]
 800c666:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c66a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c66e:	d1bf      	bne.n	800c5f0 <_scanf_i+0xb8>
 800c670:	2110      	movs	r1, #16
 800c672:	6061      	str	r1, [r4, #4]
 800c674:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c678:	e7a2      	b.n	800c5c0 <_scanf_i+0x88>
 800c67a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c67e:	6022      	str	r2, [r4, #0]
 800c680:	780b      	ldrb	r3, [r1, #0]
 800c682:	f805 3b01 	strb.w	r3, [r5], #1
 800c686:	e7de      	b.n	800c646 <_scanf_i+0x10e>
 800c688:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c68c:	4631      	mov	r1, r6
 800c68e:	4650      	mov	r0, sl
 800c690:	4798      	blx	r3
 800c692:	2800      	cmp	r0, #0
 800c694:	d0df      	beq.n	800c656 <_scanf_i+0x11e>
 800c696:	6823      	ldr	r3, [r4, #0]
 800c698:	05d9      	lsls	r1, r3, #23
 800c69a:	d50d      	bpl.n	800c6b8 <_scanf_i+0x180>
 800c69c:	42bd      	cmp	r5, r7
 800c69e:	d909      	bls.n	800c6b4 <_scanf_i+0x17c>
 800c6a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c6a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6a8:	4632      	mov	r2, r6
 800c6aa:	4650      	mov	r0, sl
 800c6ac:	4798      	blx	r3
 800c6ae:	f105 39ff 	add.w	r9, r5, #4294967295
 800c6b2:	464d      	mov	r5, r9
 800c6b4:	42bd      	cmp	r5, r7
 800c6b6:	d028      	beq.n	800c70a <_scanf_i+0x1d2>
 800c6b8:	6822      	ldr	r2, [r4, #0]
 800c6ba:	f012 0210 	ands.w	r2, r2, #16
 800c6be:	d113      	bne.n	800c6e8 <_scanf_i+0x1b0>
 800c6c0:	702a      	strb	r2, [r5, #0]
 800c6c2:	6863      	ldr	r3, [r4, #4]
 800c6c4:	9e01      	ldr	r6, [sp, #4]
 800c6c6:	4639      	mov	r1, r7
 800c6c8:	4650      	mov	r0, sl
 800c6ca:	47b0      	blx	r6
 800c6cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c6d0:	6821      	ldr	r1, [r4, #0]
 800c6d2:	1d1a      	adds	r2, r3, #4
 800c6d4:	f8c8 2000 	str.w	r2, [r8]
 800c6d8:	f011 0f20 	tst.w	r1, #32
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	d00f      	beq.n	800c700 <_scanf_i+0x1c8>
 800c6e0:	6018      	str	r0, [r3, #0]
 800c6e2:	68e3      	ldr	r3, [r4, #12]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	60e3      	str	r3, [r4, #12]
 800c6e8:	6923      	ldr	r3, [r4, #16]
 800c6ea:	1bed      	subs	r5, r5, r7
 800c6ec:	445d      	add	r5, fp
 800c6ee:	442b      	add	r3, r5
 800c6f0:	6123      	str	r3, [r4, #16]
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	b007      	add	sp, #28
 800c6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fa:	f04f 0b00 	mov.w	fp, #0
 800c6fe:	e7ca      	b.n	800c696 <_scanf_i+0x15e>
 800c700:	07ca      	lsls	r2, r1, #31
 800c702:	bf4c      	ite	mi
 800c704:	8018      	strhmi	r0, [r3, #0]
 800c706:	6018      	strpl	r0, [r3, #0]
 800c708:	e7eb      	b.n	800c6e2 <_scanf_i+0x1aa>
 800c70a:	2001      	movs	r0, #1
 800c70c:	e7f2      	b.n	800c6f4 <_scanf_i+0x1bc>
 800c70e:	bf00      	nop
 800c710:	0800d96c 	.word	0x0800d96c
 800c714:	0800be39 	.word	0x0800be39
 800c718:	0800d21d 	.word	0x0800d21d
 800c71c:	0800dd72 	.word	0x0800dd72

0800c720 <__sflush_r>:
 800c720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c728:	0716      	lsls	r6, r2, #28
 800c72a:	4605      	mov	r5, r0
 800c72c:	460c      	mov	r4, r1
 800c72e:	d454      	bmi.n	800c7da <__sflush_r+0xba>
 800c730:	684b      	ldr	r3, [r1, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	dc02      	bgt.n	800c73c <__sflush_r+0x1c>
 800c736:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c738:	2b00      	cmp	r3, #0
 800c73a:	dd48      	ble.n	800c7ce <__sflush_r+0xae>
 800c73c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c73e:	2e00      	cmp	r6, #0
 800c740:	d045      	beq.n	800c7ce <__sflush_r+0xae>
 800c742:	2300      	movs	r3, #0
 800c744:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c748:	682f      	ldr	r7, [r5, #0]
 800c74a:	6a21      	ldr	r1, [r4, #32]
 800c74c:	602b      	str	r3, [r5, #0]
 800c74e:	d030      	beq.n	800c7b2 <__sflush_r+0x92>
 800c750:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c752:	89a3      	ldrh	r3, [r4, #12]
 800c754:	0759      	lsls	r1, r3, #29
 800c756:	d505      	bpl.n	800c764 <__sflush_r+0x44>
 800c758:	6863      	ldr	r3, [r4, #4]
 800c75a:	1ad2      	subs	r2, r2, r3
 800c75c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c75e:	b10b      	cbz	r3, 800c764 <__sflush_r+0x44>
 800c760:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c762:	1ad2      	subs	r2, r2, r3
 800c764:	2300      	movs	r3, #0
 800c766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c768:	6a21      	ldr	r1, [r4, #32]
 800c76a:	4628      	mov	r0, r5
 800c76c:	47b0      	blx	r6
 800c76e:	1c43      	adds	r3, r0, #1
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	d106      	bne.n	800c782 <__sflush_r+0x62>
 800c774:	6829      	ldr	r1, [r5, #0]
 800c776:	291d      	cmp	r1, #29
 800c778:	d82b      	bhi.n	800c7d2 <__sflush_r+0xb2>
 800c77a:	4a2a      	ldr	r2, [pc, #168]	@ (800c824 <__sflush_r+0x104>)
 800c77c:	410a      	asrs	r2, r1
 800c77e:	07d6      	lsls	r6, r2, #31
 800c780:	d427      	bmi.n	800c7d2 <__sflush_r+0xb2>
 800c782:	2200      	movs	r2, #0
 800c784:	6062      	str	r2, [r4, #4]
 800c786:	04d9      	lsls	r1, r3, #19
 800c788:	6922      	ldr	r2, [r4, #16]
 800c78a:	6022      	str	r2, [r4, #0]
 800c78c:	d504      	bpl.n	800c798 <__sflush_r+0x78>
 800c78e:	1c42      	adds	r2, r0, #1
 800c790:	d101      	bne.n	800c796 <__sflush_r+0x76>
 800c792:	682b      	ldr	r3, [r5, #0]
 800c794:	b903      	cbnz	r3, 800c798 <__sflush_r+0x78>
 800c796:	6560      	str	r0, [r4, #84]	@ 0x54
 800c798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c79a:	602f      	str	r7, [r5, #0]
 800c79c:	b1b9      	cbz	r1, 800c7ce <__sflush_r+0xae>
 800c79e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c7a2:	4299      	cmp	r1, r3
 800c7a4:	d002      	beq.n	800c7ac <__sflush_r+0x8c>
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	f7fd ff12 	bl	800a5d0 <_free_r>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7b0:	e00d      	b.n	800c7ce <__sflush_r+0xae>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	47b0      	blx	r6
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	1c50      	adds	r0, r2, #1
 800c7bc:	d1c9      	bne.n	800c752 <__sflush_r+0x32>
 800c7be:	682b      	ldr	r3, [r5, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d0c6      	beq.n	800c752 <__sflush_r+0x32>
 800c7c4:	2b1d      	cmp	r3, #29
 800c7c6:	d001      	beq.n	800c7cc <__sflush_r+0xac>
 800c7c8:	2b16      	cmp	r3, #22
 800c7ca:	d11e      	bne.n	800c80a <__sflush_r+0xea>
 800c7cc:	602f      	str	r7, [r5, #0]
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	e022      	b.n	800c818 <__sflush_r+0xf8>
 800c7d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7d6:	b21b      	sxth	r3, r3
 800c7d8:	e01b      	b.n	800c812 <__sflush_r+0xf2>
 800c7da:	690f      	ldr	r7, [r1, #16]
 800c7dc:	2f00      	cmp	r7, #0
 800c7de:	d0f6      	beq.n	800c7ce <__sflush_r+0xae>
 800c7e0:	0793      	lsls	r3, r2, #30
 800c7e2:	680e      	ldr	r6, [r1, #0]
 800c7e4:	bf08      	it	eq
 800c7e6:	694b      	ldreq	r3, [r1, #20]
 800c7e8:	600f      	str	r7, [r1, #0]
 800c7ea:	bf18      	it	ne
 800c7ec:	2300      	movne	r3, #0
 800c7ee:	eba6 0807 	sub.w	r8, r6, r7
 800c7f2:	608b      	str	r3, [r1, #8]
 800c7f4:	f1b8 0f00 	cmp.w	r8, #0
 800c7f8:	dde9      	ble.n	800c7ce <__sflush_r+0xae>
 800c7fa:	6a21      	ldr	r1, [r4, #32]
 800c7fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c7fe:	4643      	mov	r3, r8
 800c800:	463a      	mov	r2, r7
 800c802:	4628      	mov	r0, r5
 800c804:	47b0      	blx	r6
 800c806:	2800      	cmp	r0, #0
 800c808:	dc08      	bgt.n	800c81c <__sflush_r+0xfc>
 800c80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c812:	81a3      	strh	r3, [r4, #12]
 800c814:	f04f 30ff 	mov.w	r0, #4294967295
 800c818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c81c:	4407      	add	r7, r0
 800c81e:	eba8 0800 	sub.w	r8, r8, r0
 800c822:	e7e7      	b.n	800c7f4 <__sflush_r+0xd4>
 800c824:	dfbffffe 	.word	0xdfbffffe

0800c828 <_fflush_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	690b      	ldr	r3, [r1, #16]
 800c82c:	4605      	mov	r5, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	b913      	cbnz	r3, 800c838 <_fflush_r+0x10>
 800c832:	2500      	movs	r5, #0
 800c834:	4628      	mov	r0, r5
 800c836:	bd38      	pop	{r3, r4, r5, pc}
 800c838:	b118      	cbz	r0, 800c842 <_fflush_r+0x1a>
 800c83a:	6a03      	ldr	r3, [r0, #32]
 800c83c:	b90b      	cbnz	r3, 800c842 <_fflush_r+0x1a>
 800c83e:	f7fc fe73 	bl	8009528 <__sinit>
 800c842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d0f3      	beq.n	800c832 <_fflush_r+0xa>
 800c84a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c84c:	07d0      	lsls	r0, r2, #31
 800c84e:	d404      	bmi.n	800c85a <_fflush_r+0x32>
 800c850:	0599      	lsls	r1, r3, #22
 800c852:	d402      	bmi.n	800c85a <_fflush_r+0x32>
 800c854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c856:	f7fd f856 	bl	8009906 <__retarget_lock_acquire_recursive>
 800c85a:	4628      	mov	r0, r5
 800c85c:	4621      	mov	r1, r4
 800c85e:	f7ff ff5f 	bl	800c720 <__sflush_r>
 800c862:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c864:	07da      	lsls	r2, r3, #31
 800c866:	4605      	mov	r5, r0
 800c868:	d4e4      	bmi.n	800c834 <_fflush_r+0xc>
 800c86a:	89a3      	ldrh	r3, [r4, #12]
 800c86c:	059b      	lsls	r3, r3, #22
 800c86e:	d4e1      	bmi.n	800c834 <_fflush_r+0xc>
 800c870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c872:	f7fd f849 	bl	8009908 <__retarget_lock_release_recursive>
 800c876:	e7dd      	b.n	800c834 <_fflush_r+0xc>

0800c878 <__sccl>:
 800c878:	b570      	push	{r4, r5, r6, lr}
 800c87a:	780b      	ldrb	r3, [r1, #0]
 800c87c:	4604      	mov	r4, r0
 800c87e:	2b5e      	cmp	r3, #94	@ 0x5e
 800c880:	bf0b      	itete	eq
 800c882:	784b      	ldrbeq	r3, [r1, #1]
 800c884:	1c4a      	addne	r2, r1, #1
 800c886:	1c8a      	addeq	r2, r1, #2
 800c888:	2100      	movne	r1, #0
 800c88a:	bf08      	it	eq
 800c88c:	2101      	moveq	r1, #1
 800c88e:	3801      	subs	r0, #1
 800c890:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c894:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c898:	42a8      	cmp	r0, r5
 800c89a:	d1fb      	bne.n	800c894 <__sccl+0x1c>
 800c89c:	b90b      	cbnz	r3, 800c8a2 <__sccl+0x2a>
 800c89e:	1e50      	subs	r0, r2, #1
 800c8a0:	bd70      	pop	{r4, r5, r6, pc}
 800c8a2:	f081 0101 	eor.w	r1, r1, #1
 800c8a6:	54e1      	strb	r1, [r4, r3]
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c8b0:	2d2d      	cmp	r5, #45	@ 0x2d
 800c8b2:	d005      	beq.n	800c8c0 <__sccl+0x48>
 800c8b4:	2d5d      	cmp	r5, #93	@ 0x5d
 800c8b6:	d016      	beq.n	800c8e6 <__sccl+0x6e>
 800c8b8:	2d00      	cmp	r5, #0
 800c8ba:	d0f1      	beq.n	800c8a0 <__sccl+0x28>
 800c8bc:	462b      	mov	r3, r5
 800c8be:	e7f2      	b.n	800c8a6 <__sccl+0x2e>
 800c8c0:	7846      	ldrb	r6, [r0, #1]
 800c8c2:	2e5d      	cmp	r6, #93	@ 0x5d
 800c8c4:	d0fa      	beq.n	800c8bc <__sccl+0x44>
 800c8c6:	42b3      	cmp	r3, r6
 800c8c8:	dcf8      	bgt.n	800c8bc <__sccl+0x44>
 800c8ca:	3002      	adds	r0, #2
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	3201      	adds	r2, #1
 800c8d0:	4296      	cmp	r6, r2
 800c8d2:	54a1      	strb	r1, [r4, r2]
 800c8d4:	dcfb      	bgt.n	800c8ce <__sccl+0x56>
 800c8d6:	1af2      	subs	r2, r6, r3
 800c8d8:	3a01      	subs	r2, #1
 800c8da:	1c5d      	adds	r5, r3, #1
 800c8dc:	42b3      	cmp	r3, r6
 800c8de:	bfa8      	it	ge
 800c8e0:	2200      	movge	r2, #0
 800c8e2:	18ab      	adds	r3, r5, r2
 800c8e4:	e7e1      	b.n	800c8aa <__sccl+0x32>
 800c8e6:	4610      	mov	r0, r2
 800c8e8:	e7da      	b.n	800c8a0 <__sccl+0x28>

0800c8ea <__submore>:
 800c8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c8f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8f6:	4299      	cmp	r1, r3
 800c8f8:	d11d      	bne.n	800c936 <__submore+0x4c>
 800c8fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c8fe:	f7fd fedb 	bl	800a6b8 <_malloc_r>
 800c902:	b918      	cbnz	r0, 800c90c <__submore+0x22>
 800c904:	f04f 30ff 	mov.w	r0, #4294967295
 800c908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c90c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c910:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c912:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c916:	6360      	str	r0, [r4, #52]	@ 0x34
 800c918:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c91c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c920:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c924:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c928:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c92c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c930:	6020      	str	r0, [r4, #0]
 800c932:	2000      	movs	r0, #0
 800c934:	e7e8      	b.n	800c908 <__submore+0x1e>
 800c936:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c938:	0077      	lsls	r7, r6, #1
 800c93a:	463a      	mov	r2, r7
 800c93c:	f000 fbd1 	bl	800d0e2 <_realloc_r>
 800c940:	4605      	mov	r5, r0
 800c942:	2800      	cmp	r0, #0
 800c944:	d0de      	beq.n	800c904 <__submore+0x1a>
 800c946:	eb00 0806 	add.w	r8, r0, r6
 800c94a:	4601      	mov	r1, r0
 800c94c:	4632      	mov	r2, r6
 800c94e:	4640      	mov	r0, r8
 800c950:	f7fc ffdb 	bl	800990a <memcpy>
 800c954:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c958:	f8c4 8000 	str.w	r8, [r4]
 800c95c:	e7e9      	b.n	800c932 <__submore+0x48>

0800c95e <memmove>:
 800c95e:	4288      	cmp	r0, r1
 800c960:	b510      	push	{r4, lr}
 800c962:	eb01 0402 	add.w	r4, r1, r2
 800c966:	d902      	bls.n	800c96e <memmove+0x10>
 800c968:	4284      	cmp	r4, r0
 800c96a:	4623      	mov	r3, r4
 800c96c:	d807      	bhi.n	800c97e <memmove+0x20>
 800c96e:	1e43      	subs	r3, r0, #1
 800c970:	42a1      	cmp	r1, r4
 800c972:	d008      	beq.n	800c986 <memmove+0x28>
 800c974:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c978:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c97c:	e7f8      	b.n	800c970 <memmove+0x12>
 800c97e:	4402      	add	r2, r0
 800c980:	4601      	mov	r1, r0
 800c982:	428a      	cmp	r2, r1
 800c984:	d100      	bne.n	800c988 <memmove+0x2a>
 800c986:	bd10      	pop	{r4, pc}
 800c988:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c98c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c990:	e7f7      	b.n	800c982 <memmove+0x24>

0800c992 <strncmp>:
 800c992:	b510      	push	{r4, lr}
 800c994:	b16a      	cbz	r2, 800c9b2 <strncmp+0x20>
 800c996:	3901      	subs	r1, #1
 800c998:	1884      	adds	r4, r0, r2
 800c99a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c99e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d103      	bne.n	800c9ae <strncmp+0x1c>
 800c9a6:	42a0      	cmp	r0, r4
 800c9a8:	d001      	beq.n	800c9ae <strncmp+0x1c>
 800c9aa:	2a00      	cmp	r2, #0
 800c9ac:	d1f5      	bne.n	800c99a <strncmp+0x8>
 800c9ae:	1ad0      	subs	r0, r2, r3
 800c9b0:	bd10      	pop	{r4, pc}
 800c9b2:	4610      	mov	r0, r2
 800c9b4:	e7fc      	b.n	800c9b0 <strncmp+0x1e>
	...

0800c9b8 <_sbrk_r>:
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	4d06      	ldr	r5, [pc, #24]	@ (800c9d4 <_sbrk_r+0x1c>)
 800c9bc:	2300      	movs	r3, #0
 800c9be:	4604      	mov	r4, r0
 800c9c0:	4608      	mov	r0, r1
 800c9c2:	602b      	str	r3, [r5, #0]
 800c9c4:	f7f5 f926 	bl	8001c14 <_sbrk>
 800c9c8:	1c43      	adds	r3, r0, #1
 800c9ca:	d102      	bne.n	800c9d2 <_sbrk_r+0x1a>
 800c9cc:	682b      	ldr	r3, [r5, #0]
 800c9ce:	b103      	cbz	r3, 800c9d2 <_sbrk_r+0x1a>
 800c9d0:	6023      	str	r3, [r4, #0]
 800c9d2:	bd38      	pop	{r3, r4, r5, pc}
 800c9d4:	20004f50 	.word	0x20004f50

0800c9d8 <nan>:
 800c9d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c9e0 <nan+0x8>
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	00000000 	.word	0x00000000
 800c9e4:	7ff80000 	.word	0x7ff80000

0800c9e8 <__assert_func>:
 800c9e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9ea:	4614      	mov	r4, r2
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	4b09      	ldr	r3, [pc, #36]	@ (800ca14 <__assert_func+0x2c>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	68d8      	ldr	r0, [r3, #12]
 800c9f6:	b954      	cbnz	r4, 800ca0e <__assert_func+0x26>
 800c9f8:	4b07      	ldr	r3, [pc, #28]	@ (800ca18 <__assert_func+0x30>)
 800c9fa:	461c      	mov	r4, r3
 800c9fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca00:	9100      	str	r1, [sp, #0]
 800ca02:	462b      	mov	r3, r5
 800ca04:	4905      	ldr	r1, [pc, #20]	@ (800ca1c <__assert_func+0x34>)
 800ca06:	f000 fc19 	bl	800d23c <fiprintf>
 800ca0a:	f000 fc29 	bl	800d260 <abort>
 800ca0e:	4b04      	ldr	r3, [pc, #16]	@ (800ca20 <__assert_func+0x38>)
 800ca10:	e7f4      	b.n	800c9fc <__assert_func+0x14>
 800ca12:	bf00      	nop
 800ca14:	2000001c 	.word	0x2000001c
 800ca18:	0800ddc0 	.word	0x0800ddc0
 800ca1c:	0800dd92 	.word	0x0800dd92
 800ca20:	0800dd85 	.word	0x0800dd85

0800ca24 <_calloc_r>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	fba1 5402 	umull	r5, r4, r1, r2
 800ca2a:	b93c      	cbnz	r4, 800ca3c <_calloc_r+0x18>
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	f7fd fe43 	bl	800a6b8 <_malloc_r>
 800ca32:	4606      	mov	r6, r0
 800ca34:	b928      	cbnz	r0, 800ca42 <_calloc_r+0x1e>
 800ca36:	2600      	movs	r6, #0
 800ca38:	4630      	mov	r0, r6
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}
 800ca3c:	220c      	movs	r2, #12
 800ca3e:	6002      	str	r2, [r0, #0]
 800ca40:	e7f9      	b.n	800ca36 <_calloc_r+0x12>
 800ca42:	462a      	mov	r2, r5
 800ca44:	4621      	mov	r1, r4
 800ca46:	f7fc fe68 	bl	800971a <memset>
 800ca4a:	e7f5      	b.n	800ca38 <_calloc_r+0x14>

0800ca4c <rshift>:
 800ca4c:	6903      	ldr	r3, [r0, #16]
 800ca4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca5a:	f100 0414 	add.w	r4, r0, #20
 800ca5e:	dd45      	ble.n	800caec <rshift+0xa0>
 800ca60:	f011 011f 	ands.w	r1, r1, #31
 800ca64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ca68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca6c:	d10c      	bne.n	800ca88 <rshift+0x3c>
 800ca6e:	f100 0710 	add.w	r7, r0, #16
 800ca72:	4629      	mov	r1, r5
 800ca74:	42b1      	cmp	r1, r6
 800ca76:	d334      	bcc.n	800cae2 <rshift+0x96>
 800ca78:	1a9b      	subs	r3, r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	1eea      	subs	r2, r5, #3
 800ca7e:	4296      	cmp	r6, r2
 800ca80:	bf38      	it	cc
 800ca82:	2300      	movcc	r3, #0
 800ca84:	4423      	add	r3, r4
 800ca86:	e015      	b.n	800cab4 <rshift+0x68>
 800ca88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca8c:	f1c1 0820 	rsb	r8, r1, #32
 800ca90:	40cf      	lsrs	r7, r1
 800ca92:	f105 0e04 	add.w	lr, r5, #4
 800ca96:	46a1      	mov	r9, r4
 800ca98:	4576      	cmp	r6, lr
 800ca9a:	46f4      	mov	ip, lr
 800ca9c:	d815      	bhi.n	800caca <rshift+0x7e>
 800ca9e:	1a9a      	subs	r2, r3, r2
 800caa0:	0092      	lsls	r2, r2, #2
 800caa2:	3a04      	subs	r2, #4
 800caa4:	3501      	adds	r5, #1
 800caa6:	42ae      	cmp	r6, r5
 800caa8:	bf38      	it	cc
 800caaa:	2200      	movcc	r2, #0
 800caac:	18a3      	adds	r3, r4, r2
 800caae:	50a7      	str	r7, [r4, r2]
 800cab0:	b107      	cbz	r7, 800cab4 <rshift+0x68>
 800cab2:	3304      	adds	r3, #4
 800cab4:	1b1a      	subs	r2, r3, r4
 800cab6:	42a3      	cmp	r3, r4
 800cab8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cabc:	bf08      	it	eq
 800cabe:	2300      	moveq	r3, #0
 800cac0:	6102      	str	r2, [r0, #16]
 800cac2:	bf08      	it	eq
 800cac4:	6143      	streq	r3, [r0, #20]
 800cac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caca:	f8dc c000 	ldr.w	ip, [ip]
 800cace:	fa0c fc08 	lsl.w	ip, ip, r8
 800cad2:	ea4c 0707 	orr.w	r7, ip, r7
 800cad6:	f849 7b04 	str.w	r7, [r9], #4
 800cada:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cade:	40cf      	lsrs	r7, r1
 800cae0:	e7da      	b.n	800ca98 <rshift+0x4c>
 800cae2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cae6:	f847 cf04 	str.w	ip, [r7, #4]!
 800caea:	e7c3      	b.n	800ca74 <rshift+0x28>
 800caec:	4623      	mov	r3, r4
 800caee:	e7e1      	b.n	800cab4 <rshift+0x68>

0800caf0 <__hexdig_fun>:
 800caf0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800caf4:	2b09      	cmp	r3, #9
 800caf6:	d802      	bhi.n	800cafe <__hexdig_fun+0xe>
 800caf8:	3820      	subs	r0, #32
 800cafa:	b2c0      	uxtb	r0, r0
 800cafc:	4770      	bx	lr
 800cafe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cb02:	2b05      	cmp	r3, #5
 800cb04:	d801      	bhi.n	800cb0a <__hexdig_fun+0x1a>
 800cb06:	3847      	subs	r0, #71	@ 0x47
 800cb08:	e7f7      	b.n	800cafa <__hexdig_fun+0xa>
 800cb0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cb0e:	2b05      	cmp	r3, #5
 800cb10:	d801      	bhi.n	800cb16 <__hexdig_fun+0x26>
 800cb12:	3827      	subs	r0, #39	@ 0x27
 800cb14:	e7f1      	b.n	800cafa <__hexdig_fun+0xa>
 800cb16:	2000      	movs	r0, #0
 800cb18:	4770      	bx	lr
	...

0800cb1c <__gethex>:
 800cb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb20:	b085      	sub	sp, #20
 800cb22:	468a      	mov	sl, r1
 800cb24:	9302      	str	r3, [sp, #8]
 800cb26:	680b      	ldr	r3, [r1, #0]
 800cb28:	9001      	str	r0, [sp, #4]
 800cb2a:	4690      	mov	r8, r2
 800cb2c:	1c9c      	adds	r4, r3, #2
 800cb2e:	46a1      	mov	r9, r4
 800cb30:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cb34:	2830      	cmp	r0, #48	@ 0x30
 800cb36:	d0fa      	beq.n	800cb2e <__gethex+0x12>
 800cb38:	eba9 0303 	sub.w	r3, r9, r3
 800cb3c:	f1a3 0b02 	sub.w	fp, r3, #2
 800cb40:	f7ff ffd6 	bl	800caf0 <__hexdig_fun>
 800cb44:	4605      	mov	r5, r0
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d168      	bne.n	800cc1c <__gethex+0x100>
 800cb4a:	49a0      	ldr	r1, [pc, #640]	@ (800cdcc <__gethex+0x2b0>)
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	4648      	mov	r0, r9
 800cb50:	f7ff ff1f 	bl	800c992 <strncmp>
 800cb54:	4607      	mov	r7, r0
 800cb56:	2800      	cmp	r0, #0
 800cb58:	d167      	bne.n	800cc2a <__gethex+0x10e>
 800cb5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cb5e:	4626      	mov	r6, r4
 800cb60:	f7ff ffc6 	bl	800caf0 <__hexdig_fun>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d062      	beq.n	800cc2e <__gethex+0x112>
 800cb68:	4623      	mov	r3, r4
 800cb6a:	7818      	ldrb	r0, [r3, #0]
 800cb6c:	2830      	cmp	r0, #48	@ 0x30
 800cb6e:	4699      	mov	r9, r3
 800cb70:	f103 0301 	add.w	r3, r3, #1
 800cb74:	d0f9      	beq.n	800cb6a <__gethex+0x4e>
 800cb76:	f7ff ffbb 	bl	800caf0 <__hexdig_fun>
 800cb7a:	fab0 f580 	clz	r5, r0
 800cb7e:	096d      	lsrs	r5, r5, #5
 800cb80:	f04f 0b01 	mov.w	fp, #1
 800cb84:	464a      	mov	r2, r9
 800cb86:	4616      	mov	r6, r2
 800cb88:	3201      	adds	r2, #1
 800cb8a:	7830      	ldrb	r0, [r6, #0]
 800cb8c:	f7ff ffb0 	bl	800caf0 <__hexdig_fun>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d1f8      	bne.n	800cb86 <__gethex+0x6a>
 800cb94:	498d      	ldr	r1, [pc, #564]	@ (800cdcc <__gethex+0x2b0>)
 800cb96:	2201      	movs	r2, #1
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f7ff fefa 	bl	800c992 <strncmp>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d13f      	bne.n	800cc22 <__gethex+0x106>
 800cba2:	b944      	cbnz	r4, 800cbb6 <__gethex+0x9a>
 800cba4:	1c74      	adds	r4, r6, #1
 800cba6:	4622      	mov	r2, r4
 800cba8:	4616      	mov	r6, r2
 800cbaa:	3201      	adds	r2, #1
 800cbac:	7830      	ldrb	r0, [r6, #0]
 800cbae:	f7ff ff9f 	bl	800caf0 <__hexdig_fun>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d1f8      	bne.n	800cba8 <__gethex+0x8c>
 800cbb6:	1ba4      	subs	r4, r4, r6
 800cbb8:	00a7      	lsls	r7, r4, #2
 800cbba:	7833      	ldrb	r3, [r6, #0]
 800cbbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cbc0:	2b50      	cmp	r3, #80	@ 0x50
 800cbc2:	d13e      	bne.n	800cc42 <__gethex+0x126>
 800cbc4:	7873      	ldrb	r3, [r6, #1]
 800cbc6:	2b2b      	cmp	r3, #43	@ 0x2b
 800cbc8:	d033      	beq.n	800cc32 <__gethex+0x116>
 800cbca:	2b2d      	cmp	r3, #45	@ 0x2d
 800cbcc:	d034      	beq.n	800cc38 <__gethex+0x11c>
 800cbce:	1c71      	adds	r1, r6, #1
 800cbd0:	2400      	movs	r4, #0
 800cbd2:	7808      	ldrb	r0, [r1, #0]
 800cbd4:	f7ff ff8c 	bl	800caf0 <__hexdig_fun>
 800cbd8:	1e43      	subs	r3, r0, #1
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	2b18      	cmp	r3, #24
 800cbde:	d830      	bhi.n	800cc42 <__gethex+0x126>
 800cbe0:	f1a0 0210 	sub.w	r2, r0, #16
 800cbe4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cbe8:	f7ff ff82 	bl	800caf0 <__hexdig_fun>
 800cbec:	f100 3cff 	add.w	ip, r0, #4294967295
 800cbf0:	fa5f fc8c 	uxtb.w	ip, ip
 800cbf4:	f1bc 0f18 	cmp.w	ip, #24
 800cbf8:	f04f 030a 	mov.w	r3, #10
 800cbfc:	d91e      	bls.n	800cc3c <__gethex+0x120>
 800cbfe:	b104      	cbz	r4, 800cc02 <__gethex+0xe6>
 800cc00:	4252      	negs	r2, r2
 800cc02:	4417      	add	r7, r2
 800cc04:	f8ca 1000 	str.w	r1, [sl]
 800cc08:	b1ed      	cbz	r5, 800cc46 <__gethex+0x12a>
 800cc0a:	f1bb 0f00 	cmp.w	fp, #0
 800cc0e:	bf0c      	ite	eq
 800cc10:	2506      	moveq	r5, #6
 800cc12:	2500      	movne	r5, #0
 800cc14:	4628      	mov	r0, r5
 800cc16:	b005      	add	sp, #20
 800cc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1c:	2500      	movs	r5, #0
 800cc1e:	462c      	mov	r4, r5
 800cc20:	e7b0      	b.n	800cb84 <__gethex+0x68>
 800cc22:	2c00      	cmp	r4, #0
 800cc24:	d1c7      	bne.n	800cbb6 <__gethex+0x9a>
 800cc26:	4627      	mov	r7, r4
 800cc28:	e7c7      	b.n	800cbba <__gethex+0x9e>
 800cc2a:	464e      	mov	r6, r9
 800cc2c:	462f      	mov	r7, r5
 800cc2e:	2501      	movs	r5, #1
 800cc30:	e7c3      	b.n	800cbba <__gethex+0x9e>
 800cc32:	2400      	movs	r4, #0
 800cc34:	1cb1      	adds	r1, r6, #2
 800cc36:	e7cc      	b.n	800cbd2 <__gethex+0xb6>
 800cc38:	2401      	movs	r4, #1
 800cc3a:	e7fb      	b.n	800cc34 <__gethex+0x118>
 800cc3c:	fb03 0002 	mla	r0, r3, r2, r0
 800cc40:	e7ce      	b.n	800cbe0 <__gethex+0xc4>
 800cc42:	4631      	mov	r1, r6
 800cc44:	e7de      	b.n	800cc04 <__gethex+0xe8>
 800cc46:	eba6 0309 	sub.w	r3, r6, r9
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	2b07      	cmp	r3, #7
 800cc50:	dc0a      	bgt.n	800cc68 <__gethex+0x14c>
 800cc52:	9801      	ldr	r0, [sp, #4]
 800cc54:	f7fd fdbc 	bl	800a7d0 <_Balloc>
 800cc58:	4604      	mov	r4, r0
 800cc5a:	b940      	cbnz	r0, 800cc6e <__gethex+0x152>
 800cc5c:	4b5c      	ldr	r3, [pc, #368]	@ (800cdd0 <__gethex+0x2b4>)
 800cc5e:	4602      	mov	r2, r0
 800cc60:	21e4      	movs	r1, #228	@ 0xe4
 800cc62:	485c      	ldr	r0, [pc, #368]	@ (800cdd4 <__gethex+0x2b8>)
 800cc64:	f7ff fec0 	bl	800c9e8 <__assert_func>
 800cc68:	3101      	adds	r1, #1
 800cc6a:	105b      	asrs	r3, r3, #1
 800cc6c:	e7ef      	b.n	800cc4e <__gethex+0x132>
 800cc6e:	f100 0a14 	add.w	sl, r0, #20
 800cc72:	2300      	movs	r3, #0
 800cc74:	4655      	mov	r5, sl
 800cc76:	469b      	mov	fp, r3
 800cc78:	45b1      	cmp	r9, r6
 800cc7a:	d337      	bcc.n	800ccec <__gethex+0x1d0>
 800cc7c:	f845 bb04 	str.w	fp, [r5], #4
 800cc80:	eba5 050a 	sub.w	r5, r5, sl
 800cc84:	10ad      	asrs	r5, r5, #2
 800cc86:	6125      	str	r5, [r4, #16]
 800cc88:	4658      	mov	r0, fp
 800cc8a:	f7fd fe93 	bl	800a9b4 <__hi0bits>
 800cc8e:	016d      	lsls	r5, r5, #5
 800cc90:	f8d8 6000 	ldr.w	r6, [r8]
 800cc94:	1a2d      	subs	r5, r5, r0
 800cc96:	42b5      	cmp	r5, r6
 800cc98:	dd54      	ble.n	800cd44 <__gethex+0x228>
 800cc9a:	1bad      	subs	r5, r5, r6
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f7fe fa27 	bl	800b0f2 <__any_on>
 800cca4:	4681      	mov	r9, r0
 800cca6:	b178      	cbz	r0, 800ccc8 <__gethex+0x1ac>
 800cca8:	1e6b      	subs	r3, r5, #1
 800ccaa:	1159      	asrs	r1, r3, #5
 800ccac:	f003 021f 	and.w	r2, r3, #31
 800ccb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ccb4:	f04f 0901 	mov.w	r9, #1
 800ccb8:	fa09 f202 	lsl.w	r2, r9, r2
 800ccbc:	420a      	tst	r2, r1
 800ccbe:	d003      	beq.n	800ccc8 <__gethex+0x1ac>
 800ccc0:	454b      	cmp	r3, r9
 800ccc2:	dc36      	bgt.n	800cd32 <__gethex+0x216>
 800ccc4:	f04f 0902 	mov.w	r9, #2
 800ccc8:	4629      	mov	r1, r5
 800ccca:	4620      	mov	r0, r4
 800cccc:	f7ff febe 	bl	800ca4c <rshift>
 800ccd0:	442f      	add	r7, r5
 800ccd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ccd6:	42bb      	cmp	r3, r7
 800ccd8:	da42      	bge.n	800cd60 <__gethex+0x244>
 800ccda:	9801      	ldr	r0, [sp, #4]
 800ccdc:	4621      	mov	r1, r4
 800ccde:	f7fd fdb7 	bl	800a850 <_Bfree>
 800cce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cce4:	2300      	movs	r3, #0
 800cce6:	6013      	str	r3, [r2, #0]
 800cce8:	25a3      	movs	r5, #163	@ 0xa3
 800ccea:	e793      	b.n	800cc14 <__gethex+0xf8>
 800ccec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ccf0:	2a2e      	cmp	r2, #46	@ 0x2e
 800ccf2:	d012      	beq.n	800cd1a <__gethex+0x1fe>
 800ccf4:	2b20      	cmp	r3, #32
 800ccf6:	d104      	bne.n	800cd02 <__gethex+0x1e6>
 800ccf8:	f845 bb04 	str.w	fp, [r5], #4
 800ccfc:	f04f 0b00 	mov.w	fp, #0
 800cd00:	465b      	mov	r3, fp
 800cd02:	7830      	ldrb	r0, [r6, #0]
 800cd04:	9303      	str	r3, [sp, #12]
 800cd06:	f7ff fef3 	bl	800caf0 <__hexdig_fun>
 800cd0a:	9b03      	ldr	r3, [sp, #12]
 800cd0c:	f000 000f 	and.w	r0, r0, #15
 800cd10:	4098      	lsls	r0, r3
 800cd12:	ea4b 0b00 	orr.w	fp, fp, r0
 800cd16:	3304      	adds	r3, #4
 800cd18:	e7ae      	b.n	800cc78 <__gethex+0x15c>
 800cd1a:	45b1      	cmp	r9, r6
 800cd1c:	d8ea      	bhi.n	800ccf4 <__gethex+0x1d8>
 800cd1e:	492b      	ldr	r1, [pc, #172]	@ (800cdcc <__gethex+0x2b0>)
 800cd20:	9303      	str	r3, [sp, #12]
 800cd22:	2201      	movs	r2, #1
 800cd24:	4630      	mov	r0, r6
 800cd26:	f7ff fe34 	bl	800c992 <strncmp>
 800cd2a:	9b03      	ldr	r3, [sp, #12]
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d1e1      	bne.n	800ccf4 <__gethex+0x1d8>
 800cd30:	e7a2      	b.n	800cc78 <__gethex+0x15c>
 800cd32:	1ea9      	subs	r1, r5, #2
 800cd34:	4620      	mov	r0, r4
 800cd36:	f7fe f9dc 	bl	800b0f2 <__any_on>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d0c2      	beq.n	800ccc4 <__gethex+0x1a8>
 800cd3e:	f04f 0903 	mov.w	r9, #3
 800cd42:	e7c1      	b.n	800ccc8 <__gethex+0x1ac>
 800cd44:	da09      	bge.n	800cd5a <__gethex+0x23e>
 800cd46:	1b75      	subs	r5, r6, r5
 800cd48:	4621      	mov	r1, r4
 800cd4a:	9801      	ldr	r0, [sp, #4]
 800cd4c:	462a      	mov	r2, r5
 800cd4e:	f7fd ff97 	bl	800ac80 <__lshift>
 800cd52:	1b7f      	subs	r7, r7, r5
 800cd54:	4604      	mov	r4, r0
 800cd56:	f100 0a14 	add.w	sl, r0, #20
 800cd5a:	f04f 0900 	mov.w	r9, #0
 800cd5e:	e7b8      	b.n	800ccd2 <__gethex+0x1b6>
 800cd60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd64:	42bd      	cmp	r5, r7
 800cd66:	dd6f      	ble.n	800ce48 <__gethex+0x32c>
 800cd68:	1bed      	subs	r5, r5, r7
 800cd6a:	42ae      	cmp	r6, r5
 800cd6c:	dc34      	bgt.n	800cdd8 <__gethex+0x2bc>
 800cd6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d022      	beq.n	800cdbc <__gethex+0x2a0>
 800cd76:	2b03      	cmp	r3, #3
 800cd78:	d024      	beq.n	800cdc4 <__gethex+0x2a8>
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d115      	bne.n	800cdaa <__gethex+0x28e>
 800cd7e:	42ae      	cmp	r6, r5
 800cd80:	d113      	bne.n	800cdaa <__gethex+0x28e>
 800cd82:	2e01      	cmp	r6, #1
 800cd84:	d10b      	bne.n	800cd9e <__gethex+0x282>
 800cd86:	9a02      	ldr	r2, [sp, #8]
 800cd88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd8c:	6013      	str	r3, [r2, #0]
 800cd8e:	2301      	movs	r3, #1
 800cd90:	6123      	str	r3, [r4, #16]
 800cd92:	f8ca 3000 	str.w	r3, [sl]
 800cd96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd98:	2562      	movs	r5, #98	@ 0x62
 800cd9a:	601c      	str	r4, [r3, #0]
 800cd9c:	e73a      	b.n	800cc14 <__gethex+0xf8>
 800cd9e:	1e71      	subs	r1, r6, #1
 800cda0:	4620      	mov	r0, r4
 800cda2:	f7fe f9a6 	bl	800b0f2 <__any_on>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	d1ed      	bne.n	800cd86 <__gethex+0x26a>
 800cdaa:	9801      	ldr	r0, [sp, #4]
 800cdac:	4621      	mov	r1, r4
 800cdae:	f7fd fd4f 	bl	800a850 <_Bfree>
 800cdb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	6013      	str	r3, [r2, #0]
 800cdb8:	2550      	movs	r5, #80	@ 0x50
 800cdba:	e72b      	b.n	800cc14 <__gethex+0xf8>
 800cdbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1f3      	bne.n	800cdaa <__gethex+0x28e>
 800cdc2:	e7e0      	b.n	800cd86 <__gethex+0x26a>
 800cdc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1dd      	bne.n	800cd86 <__gethex+0x26a>
 800cdca:	e7ee      	b.n	800cdaa <__gethex+0x28e>
 800cdcc:	0800dbf8 	.word	0x0800dbf8
 800cdd0:	0800da8b 	.word	0x0800da8b
 800cdd4:	0800ddc1 	.word	0x0800ddc1
 800cdd8:	1e6f      	subs	r7, r5, #1
 800cdda:	f1b9 0f00 	cmp.w	r9, #0
 800cdde:	d130      	bne.n	800ce42 <__gethex+0x326>
 800cde0:	b127      	cbz	r7, 800cdec <__gethex+0x2d0>
 800cde2:	4639      	mov	r1, r7
 800cde4:	4620      	mov	r0, r4
 800cde6:	f7fe f984 	bl	800b0f2 <__any_on>
 800cdea:	4681      	mov	r9, r0
 800cdec:	117a      	asrs	r2, r7, #5
 800cdee:	2301      	movs	r3, #1
 800cdf0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cdf4:	f007 071f 	and.w	r7, r7, #31
 800cdf8:	40bb      	lsls	r3, r7
 800cdfa:	4213      	tst	r3, r2
 800cdfc:	4629      	mov	r1, r5
 800cdfe:	4620      	mov	r0, r4
 800ce00:	bf18      	it	ne
 800ce02:	f049 0902 	orrne.w	r9, r9, #2
 800ce06:	f7ff fe21 	bl	800ca4c <rshift>
 800ce0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ce0e:	1b76      	subs	r6, r6, r5
 800ce10:	2502      	movs	r5, #2
 800ce12:	f1b9 0f00 	cmp.w	r9, #0
 800ce16:	d047      	beq.n	800cea8 <__gethex+0x38c>
 800ce18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d015      	beq.n	800ce4c <__gethex+0x330>
 800ce20:	2b03      	cmp	r3, #3
 800ce22:	d017      	beq.n	800ce54 <__gethex+0x338>
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d109      	bne.n	800ce3c <__gethex+0x320>
 800ce28:	f019 0f02 	tst.w	r9, #2
 800ce2c:	d006      	beq.n	800ce3c <__gethex+0x320>
 800ce2e:	f8da 3000 	ldr.w	r3, [sl]
 800ce32:	ea49 0903 	orr.w	r9, r9, r3
 800ce36:	f019 0f01 	tst.w	r9, #1
 800ce3a:	d10e      	bne.n	800ce5a <__gethex+0x33e>
 800ce3c:	f045 0510 	orr.w	r5, r5, #16
 800ce40:	e032      	b.n	800cea8 <__gethex+0x38c>
 800ce42:	f04f 0901 	mov.w	r9, #1
 800ce46:	e7d1      	b.n	800cdec <__gethex+0x2d0>
 800ce48:	2501      	movs	r5, #1
 800ce4a:	e7e2      	b.n	800ce12 <__gethex+0x2f6>
 800ce4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce4e:	f1c3 0301 	rsb	r3, r3, #1
 800ce52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d0f0      	beq.n	800ce3c <__gethex+0x320>
 800ce5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce5e:	f104 0314 	add.w	r3, r4, #20
 800ce62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ce66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ce6a:	f04f 0c00 	mov.w	ip, #0
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce74:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ce78:	d01b      	beq.n	800ceb2 <__gethex+0x396>
 800ce7a:	3201      	adds	r2, #1
 800ce7c:	6002      	str	r2, [r0, #0]
 800ce7e:	2d02      	cmp	r5, #2
 800ce80:	f104 0314 	add.w	r3, r4, #20
 800ce84:	d13c      	bne.n	800cf00 <__gethex+0x3e4>
 800ce86:	f8d8 2000 	ldr.w	r2, [r8]
 800ce8a:	3a01      	subs	r2, #1
 800ce8c:	42b2      	cmp	r2, r6
 800ce8e:	d109      	bne.n	800cea4 <__gethex+0x388>
 800ce90:	1171      	asrs	r1, r6, #5
 800ce92:	2201      	movs	r2, #1
 800ce94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce98:	f006 061f 	and.w	r6, r6, #31
 800ce9c:	fa02 f606 	lsl.w	r6, r2, r6
 800cea0:	421e      	tst	r6, r3
 800cea2:	d13a      	bne.n	800cf1a <__gethex+0x3fe>
 800cea4:	f045 0520 	orr.w	r5, r5, #32
 800cea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ceaa:	601c      	str	r4, [r3, #0]
 800ceac:	9b02      	ldr	r3, [sp, #8]
 800ceae:	601f      	str	r7, [r3, #0]
 800ceb0:	e6b0      	b.n	800cc14 <__gethex+0xf8>
 800ceb2:	4299      	cmp	r1, r3
 800ceb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800ceb8:	d8d9      	bhi.n	800ce6e <__gethex+0x352>
 800ceba:	68a3      	ldr	r3, [r4, #8]
 800cebc:	459b      	cmp	fp, r3
 800cebe:	db17      	blt.n	800cef0 <__gethex+0x3d4>
 800cec0:	6861      	ldr	r1, [r4, #4]
 800cec2:	9801      	ldr	r0, [sp, #4]
 800cec4:	3101      	adds	r1, #1
 800cec6:	f7fd fc83 	bl	800a7d0 <_Balloc>
 800ceca:	4681      	mov	r9, r0
 800cecc:	b918      	cbnz	r0, 800ced6 <__gethex+0x3ba>
 800cece:	4b1a      	ldr	r3, [pc, #104]	@ (800cf38 <__gethex+0x41c>)
 800ced0:	4602      	mov	r2, r0
 800ced2:	2184      	movs	r1, #132	@ 0x84
 800ced4:	e6c5      	b.n	800cc62 <__gethex+0x146>
 800ced6:	6922      	ldr	r2, [r4, #16]
 800ced8:	3202      	adds	r2, #2
 800ceda:	f104 010c 	add.w	r1, r4, #12
 800cede:	0092      	lsls	r2, r2, #2
 800cee0:	300c      	adds	r0, #12
 800cee2:	f7fc fd12 	bl	800990a <memcpy>
 800cee6:	4621      	mov	r1, r4
 800cee8:	9801      	ldr	r0, [sp, #4]
 800ceea:	f7fd fcb1 	bl	800a850 <_Bfree>
 800ceee:	464c      	mov	r4, r9
 800cef0:	6923      	ldr	r3, [r4, #16]
 800cef2:	1c5a      	adds	r2, r3, #1
 800cef4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cef8:	6122      	str	r2, [r4, #16]
 800cefa:	2201      	movs	r2, #1
 800cefc:	615a      	str	r2, [r3, #20]
 800cefe:	e7be      	b.n	800ce7e <__gethex+0x362>
 800cf00:	6922      	ldr	r2, [r4, #16]
 800cf02:	455a      	cmp	r2, fp
 800cf04:	dd0b      	ble.n	800cf1e <__gethex+0x402>
 800cf06:	2101      	movs	r1, #1
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f7ff fd9f 	bl	800ca4c <rshift>
 800cf0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf12:	3701      	adds	r7, #1
 800cf14:	42bb      	cmp	r3, r7
 800cf16:	f6ff aee0 	blt.w	800ccda <__gethex+0x1be>
 800cf1a:	2501      	movs	r5, #1
 800cf1c:	e7c2      	b.n	800cea4 <__gethex+0x388>
 800cf1e:	f016 061f 	ands.w	r6, r6, #31
 800cf22:	d0fa      	beq.n	800cf1a <__gethex+0x3fe>
 800cf24:	4453      	add	r3, sl
 800cf26:	f1c6 0620 	rsb	r6, r6, #32
 800cf2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cf2e:	f7fd fd41 	bl	800a9b4 <__hi0bits>
 800cf32:	42b0      	cmp	r0, r6
 800cf34:	dbe7      	blt.n	800cf06 <__gethex+0x3ea>
 800cf36:	e7f0      	b.n	800cf1a <__gethex+0x3fe>
 800cf38:	0800da8b 	.word	0x0800da8b

0800cf3c <L_shift>:
 800cf3c:	f1c2 0208 	rsb	r2, r2, #8
 800cf40:	0092      	lsls	r2, r2, #2
 800cf42:	b570      	push	{r4, r5, r6, lr}
 800cf44:	f1c2 0620 	rsb	r6, r2, #32
 800cf48:	6843      	ldr	r3, [r0, #4]
 800cf4a:	6804      	ldr	r4, [r0, #0]
 800cf4c:	fa03 f506 	lsl.w	r5, r3, r6
 800cf50:	432c      	orrs	r4, r5
 800cf52:	40d3      	lsrs	r3, r2
 800cf54:	6004      	str	r4, [r0, #0]
 800cf56:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf5a:	4288      	cmp	r0, r1
 800cf5c:	d3f4      	bcc.n	800cf48 <L_shift+0xc>
 800cf5e:	bd70      	pop	{r4, r5, r6, pc}

0800cf60 <__match>:
 800cf60:	b530      	push	{r4, r5, lr}
 800cf62:	6803      	ldr	r3, [r0, #0]
 800cf64:	3301      	adds	r3, #1
 800cf66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf6a:	b914      	cbnz	r4, 800cf72 <__match+0x12>
 800cf6c:	6003      	str	r3, [r0, #0]
 800cf6e:	2001      	movs	r0, #1
 800cf70:	bd30      	pop	{r4, r5, pc}
 800cf72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cf7a:	2d19      	cmp	r5, #25
 800cf7c:	bf98      	it	ls
 800cf7e:	3220      	addls	r2, #32
 800cf80:	42a2      	cmp	r2, r4
 800cf82:	d0f0      	beq.n	800cf66 <__match+0x6>
 800cf84:	2000      	movs	r0, #0
 800cf86:	e7f3      	b.n	800cf70 <__match+0x10>

0800cf88 <__hexnan>:
 800cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8c:	680b      	ldr	r3, [r1, #0]
 800cf8e:	6801      	ldr	r1, [r0, #0]
 800cf90:	115e      	asrs	r6, r3, #5
 800cf92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf96:	f013 031f 	ands.w	r3, r3, #31
 800cf9a:	b087      	sub	sp, #28
 800cf9c:	bf18      	it	ne
 800cf9e:	3604      	addne	r6, #4
 800cfa0:	2500      	movs	r5, #0
 800cfa2:	1f37      	subs	r7, r6, #4
 800cfa4:	4682      	mov	sl, r0
 800cfa6:	4690      	mov	r8, r2
 800cfa8:	9301      	str	r3, [sp, #4]
 800cfaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800cfae:	46b9      	mov	r9, r7
 800cfb0:	463c      	mov	r4, r7
 800cfb2:	9502      	str	r5, [sp, #8]
 800cfb4:	46ab      	mov	fp, r5
 800cfb6:	784a      	ldrb	r2, [r1, #1]
 800cfb8:	1c4b      	adds	r3, r1, #1
 800cfba:	9303      	str	r3, [sp, #12]
 800cfbc:	b342      	cbz	r2, 800d010 <__hexnan+0x88>
 800cfbe:	4610      	mov	r0, r2
 800cfc0:	9105      	str	r1, [sp, #20]
 800cfc2:	9204      	str	r2, [sp, #16]
 800cfc4:	f7ff fd94 	bl	800caf0 <__hexdig_fun>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d151      	bne.n	800d070 <__hexnan+0xe8>
 800cfcc:	9a04      	ldr	r2, [sp, #16]
 800cfce:	9905      	ldr	r1, [sp, #20]
 800cfd0:	2a20      	cmp	r2, #32
 800cfd2:	d818      	bhi.n	800d006 <__hexnan+0x7e>
 800cfd4:	9b02      	ldr	r3, [sp, #8]
 800cfd6:	459b      	cmp	fp, r3
 800cfd8:	dd13      	ble.n	800d002 <__hexnan+0x7a>
 800cfda:	454c      	cmp	r4, r9
 800cfdc:	d206      	bcs.n	800cfec <__hexnan+0x64>
 800cfde:	2d07      	cmp	r5, #7
 800cfe0:	dc04      	bgt.n	800cfec <__hexnan+0x64>
 800cfe2:	462a      	mov	r2, r5
 800cfe4:	4649      	mov	r1, r9
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f7ff ffa8 	bl	800cf3c <L_shift>
 800cfec:	4544      	cmp	r4, r8
 800cfee:	d952      	bls.n	800d096 <__hexnan+0x10e>
 800cff0:	2300      	movs	r3, #0
 800cff2:	f1a4 0904 	sub.w	r9, r4, #4
 800cff6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cffa:	f8cd b008 	str.w	fp, [sp, #8]
 800cffe:	464c      	mov	r4, r9
 800d000:	461d      	mov	r5, r3
 800d002:	9903      	ldr	r1, [sp, #12]
 800d004:	e7d7      	b.n	800cfb6 <__hexnan+0x2e>
 800d006:	2a29      	cmp	r2, #41	@ 0x29
 800d008:	d157      	bne.n	800d0ba <__hexnan+0x132>
 800d00a:	3102      	adds	r1, #2
 800d00c:	f8ca 1000 	str.w	r1, [sl]
 800d010:	f1bb 0f00 	cmp.w	fp, #0
 800d014:	d051      	beq.n	800d0ba <__hexnan+0x132>
 800d016:	454c      	cmp	r4, r9
 800d018:	d206      	bcs.n	800d028 <__hexnan+0xa0>
 800d01a:	2d07      	cmp	r5, #7
 800d01c:	dc04      	bgt.n	800d028 <__hexnan+0xa0>
 800d01e:	462a      	mov	r2, r5
 800d020:	4649      	mov	r1, r9
 800d022:	4620      	mov	r0, r4
 800d024:	f7ff ff8a 	bl	800cf3c <L_shift>
 800d028:	4544      	cmp	r4, r8
 800d02a:	d936      	bls.n	800d09a <__hexnan+0x112>
 800d02c:	f1a8 0204 	sub.w	r2, r8, #4
 800d030:	4623      	mov	r3, r4
 800d032:	f853 1b04 	ldr.w	r1, [r3], #4
 800d036:	f842 1f04 	str.w	r1, [r2, #4]!
 800d03a:	429f      	cmp	r7, r3
 800d03c:	d2f9      	bcs.n	800d032 <__hexnan+0xaa>
 800d03e:	1b3b      	subs	r3, r7, r4
 800d040:	f023 0303 	bic.w	r3, r3, #3
 800d044:	3304      	adds	r3, #4
 800d046:	3401      	adds	r4, #1
 800d048:	3e03      	subs	r6, #3
 800d04a:	42b4      	cmp	r4, r6
 800d04c:	bf88      	it	hi
 800d04e:	2304      	movhi	r3, #4
 800d050:	4443      	add	r3, r8
 800d052:	2200      	movs	r2, #0
 800d054:	f843 2b04 	str.w	r2, [r3], #4
 800d058:	429f      	cmp	r7, r3
 800d05a:	d2fb      	bcs.n	800d054 <__hexnan+0xcc>
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	b91b      	cbnz	r3, 800d068 <__hexnan+0xe0>
 800d060:	4547      	cmp	r7, r8
 800d062:	d128      	bne.n	800d0b6 <__hexnan+0x12e>
 800d064:	2301      	movs	r3, #1
 800d066:	603b      	str	r3, [r7, #0]
 800d068:	2005      	movs	r0, #5
 800d06a:	b007      	add	sp, #28
 800d06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d070:	3501      	adds	r5, #1
 800d072:	2d08      	cmp	r5, #8
 800d074:	f10b 0b01 	add.w	fp, fp, #1
 800d078:	dd06      	ble.n	800d088 <__hexnan+0x100>
 800d07a:	4544      	cmp	r4, r8
 800d07c:	d9c1      	bls.n	800d002 <__hexnan+0x7a>
 800d07e:	2300      	movs	r3, #0
 800d080:	f844 3c04 	str.w	r3, [r4, #-4]
 800d084:	2501      	movs	r5, #1
 800d086:	3c04      	subs	r4, #4
 800d088:	6822      	ldr	r2, [r4, #0]
 800d08a:	f000 000f 	and.w	r0, r0, #15
 800d08e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d092:	6020      	str	r0, [r4, #0]
 800d094:	e7b5      	b.n	800d002 <__hexnan+0x7a>
 800d096:	2508      	movs	r5, #8
 800d098:	e7b3      	b.n	800d002 <__hexnan+0x7a>
 800d09a:	9b01      	ldr	r3, [sp, #4]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d0dd      	beq.n	800d05c <__hexnan+0xd4>
 800d0a0:	f1c3 0320 	rsb	r3, r3, #32
 800d0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a8:	40da      	lsrs	r2, r3
 800d0aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d0b4:	e7d2      	b.n	800d05c <__hexnan+0xd4>
 800d0b6:	3f04      	subs	r7, #4
 800d0b8:	e7d0      	b.n	800d05c <__hexnan+0xd4>
 800d0ba:	2004      	movs	r0, #4
 800d0bc:	e7d5      	b.n	800d06a <__hexnan+0xe2>

0800d0be <__ascii_mbtowc>:
 800d0be:	b082      	sub	sp, #8
 800d0c0:	b901      	cbnz	r1, 800d0c4 <__ascii_mbtowc+0x6>
 800d0c2:	a901      	add	r1, sp, #4
 800d0c4:	b142      	cbz	r2, 800d0d8 <__ascii_mbtowc+0x1a>
 800d0c6:	b14b      	cbz	r3, 800d0dc <__ascii_mbtowc+0x1e>
 800d0c8:	7813      	ldrb	r3, [r2, #0]
 800d0ca:	600b      	str	r3, [r1, #0]
 800d0cc:	7812      	ldrb	r2, [r2, #0]
 800d0ce:	1e10      	subs	r0, r2, #0
 800d0d0:	bf18      	it	ne
 800d0d2:	2001      	movne	r0, #1
 800d0d4:	b002      	add	sp, #8
 800d0d6:	4770      	bx	lr
 800d0d8:	4610      	mov	r0, r2
 800d0da:	e7fb      	b.n	800d0d4 <__ascii_mbtowc+0x16>
 800d0dc:	f06f 0001 	mvn.w	r0, #1
 800d0e0:	e7f8      	b.n	800d0d4 <__ascii_mbtowc+0x16>

0800d0e2 <_realloc_r>:
 800d0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e6:	4680      	mov	r8, r0
 800d0e8:	4615      	mov	r5, r2
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	b921      	cbnz	r1, 800d0f8 <_realloc_r+0x16>
 800d0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	f7fd bae0 	b.w	800a6b8 <_malloc_r>
 800d0f8:	b92a      	cbnz	r2, 800d106 <_realloc_r+0x24>
 800d0fa:	f7fd fa69 	bl	800a5d0 <_free_r>
 800d0fe:	2400      	movs	r4, #0
 800d100:	4620      	mov	r0, r4
 800d102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d106:	f000 f8b2 	bl	800d26e <_malloc_usable_size_r>
 800d10a:	4285      	cmp	r5, r0
 800d10c:	4606      	mov	r6, r0
 800d10e:	d802      	bhi.n	800d116 <_realloc_r+0x34>
 800d110:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d114:	d8f4      	bhi.n	800d100 <_realloc_r+0x1e>
 800d116:	4629      	mov	r1, r5
 800d118:	4640      	mov	r0, r8
 800d11a:	f7fd facd 	bl	800a6b8 <_malloc_r>
 800d11e:	4607      	mov	r7, r0
 800d120:	2800      	cmp	r0, #0
 800d122:	d0ec      	beq.n	800d0fe <_realloc_r+0x1c>
 800d124:	42b5      	cmp	r5, r6
 800d126:	462a      	mov	r2, r5
 800d128:	4621      	mov	r1, r4
 800d12a:	bf28      	it	cs
 800d12c:	4632      	movcs	r2, r6
 800d12e:	f7fc fbec 	bl	800990a <memcpy>
 800d132:	4621      	mov	r1, r4
 800d134:	4640      	mov	r0, r8
 800d136:	f7fd fa4b 	bl	800a5d0 <_free_r>
 800d13a:	463c      	mov	r4, r7
 800d13c:	e7e0      	b.n	800d100 <_realloc_r+0x1e>
	...

0800d140 <_strtoul_l.constprop.0>:
 800d140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d144:	4e34      	ldr	r6, [pc, #208]	@ (800d218 <_strtoul_l.constprop.0+0xd8>)
 800d146:	4686      	mov	lr, r0
 800d148:	460d      	mov	r5, r1
 800d14a:	4628      	mov	r0, r5
 800d14c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d150:	5d37      	ldrb	r7, [r6, r4]
 800d152:	f017 0708 	ands.w	r7, r7, #8
 800d156:	d1f8      	bne.n	800d14a <_strtoul_l.constprop.0+0xa>
 800d158:	2c2d      	cmp	r4, #45	@ 0x2d
 800d15a:	d12f      	bne.n	800d1bc <_strtoul_l.constprop.0+0x7c>
 800d15c:	782c      	ldrb	r4, [r5, #0]
 800d15e:	2701      	movs	r7, #1
 800d160:	1c85      	adds	r5, r0, #2
 800d162:	f033 0010 	bics.w	r0, r3, #16
 800d166:	d109      	bne.n	800d17c <_strtoul_l.constprop.0+0x3c>
 800d168:	2c30      	cmp	r4, #48	@ 0x30
 800d16a:	d12c      	bne.n	800d1c6 <_strtoul_l.constprop.0+0x86>
 800d16c:	7828      	ldrb	r0, [r5, #0]
 800d16e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d172:	2858      	cmp	r0, #88	@ 0x58
 800d174:	d127      	bne.n	800d1c6 <_strtoul_l.constprop.0+0x86>
 800d176:	786c      	ldrb	r4, [r5, #1]
 800d178:	2310      	movs	r3, #16
 800d17a:	3502      	adds	r5, #2
 800d17c:	f04f 38ff 	mov.w	r8, #4294967295
 800d180:	2600      	movs	r6, #0
 800d182:	fbb8 f8f3 	udiv	r8, r8, r3
 800d186:	fb03 f908 	mul.w	r9, r3, r8
 800d18a:	ea6f 0909 	mvn.w	r9, r9
 800d18e:	4630      	mov	r0, r6
 800d190:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d194:	f1bc 0f09 	cmp.w	ip, #9
 800d198:	d81c      	bhi.n	800d1d4 <_strtoul_l.constprop.0+0x94>
 800d19a:	4664      	mov	r4, ip
 800d19c:	42a3      	cmp	r3, r4
 800d19e:	dd2a      	ble.n	800d1f6 <_strtoul_l.constprop.0+0xb6>
 800d1a0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d1a4:	d007      	beq.n	800d1b6 <_strtoul_l.constprop.0+0x76>
 800d1a6:	4580      	cmp	r8, r0
 800d1a8:	d322      	bcc.n	800d1f0 <_strtoul_l.constprop.0+0xb0>
 800d1aa:	d101      	bne.n	800d1b0 <_strtoul_l.constprop.0+0x70>
 800d1ac:	45a1      	cmp	r9, r4
 800d1ae:	db1f      	blt.n	800d1f0 <_strtoul_l.constprop.0+0xb0>
 800d1b0:	fb00 4003 	mla	r0, r0, r3, r4
 800d1b4:	2601      	movs	r6, #1
 800d1b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1ba:	e7e9      	b.n	800d190 <_strtoul_l.constprop.0+0x50>
 800d1bc:	2c2b      	cmp	r4, #43	@ 0x2b
 800d1be:	bf04      	itt	eq
 800d1c0:	782c      	ldrbeq	r4, [r5, #0]
 800d1c2:	1c85      	addeq	r5, r0, #2
 800d1c4:	e7cd      	b.n	800d162 <_strtoul_l.constprop.0+0x22>
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1d8      	bne.n	800d17c <_strtoul_l.constprop.0+0x3c>
 800d1ca:	2c30      	cmp	r4, #48	@ 0x30
 800d1cc:	bf0c      	ite	eq
 800d1ce:	2308      	moveq	r3, #8
 800d1d0:	230a      	movne	r3, #10
 800d1d2:	e7d3      	b.n	800d17c <_strtoul_l.constprop.0+0x3c>
 800d1d4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d1d8:	f1bc 0f19 	cmp.w	ip, #25
 800d1dc:	d801      	bhi.n	800d1e2 <_strtoul_l.constprop.0+0xa2>
 800d1de:	3c37      	subs	r4, #55	@ 0x37
 800d1e0:	e7dc      	b.n	800d19c <_strtoul_l.constprop.0+0x5c>
 800d1e2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d1e6:	f1bc 0f19 	cmp.w	ip, #25
 800d1ea:	d804      	bhi.n	800d1f6 <_strtoul_l.constprop.0+0xb6>
 800d1ec:	3c57      	subs	r4, #87	@ 0x57
 800d1ee:	e7d5      	b.n	800d19c <_strtoul_l.constprop.0+0x5c>
 800d1f0:	f04f 36ff 	mov.w	r6, #4294967295
 800d1f4:	e7df      	b.n	800d1b6 <_strtoul_l.constprop.0+0x76>
 800d1f6:	1c73      	adds	r3, r6, #1
 800d1f8:	d106      	bne.n	800d208 <_strtoul_l.constprop.0+0xc8>
 800d1fa:	2322      	movs	r3, #34	@ 0x22
 800d1fc:	f8ce 3000 	str.w	r3, [lr]
 800d200:	4630      	mov	r0, r6
 800d202:	b932      	cbnz	r2, 800d212 <_strtoul_l.constprop.0+0xd2>
 800d204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d208:	b107      	cbz	r7, 800d20c <_strtoul_l.constprop.0+0xcc>
 800d20a:	4240      	negs	r0, r0
 800d20c:	2a00      	cmp	r2, #0
 800d20e:	d0f9      	beq.n	800d204 <_strtoul_l.constprop.0+0xc4>
 800d210:	b106      	cbz	r6, 800d214 <_strtoul_l.constprop.0+0xd4>
 800d212:	1e69      	subs	r1, r5, #1
 800d214:	6011      	str	r1, [r2, #0]
 800d216:	e7f5      	b.n	800d204 <_strtoul_l.constprop.0+0xc4>
 800d218:	0800dc51 	.word	0x0800dc51

0800d21c <_strtoul_r>:
 800d21c:	f7ff bf90 	b.w	800d140 <_strtoul_l.constprop.0>

0800d220 <__ascii_wctomb>:
 800d220:	4603      	mov	r3, r0
 800d222:	4608      	mov	r0, r1
 800d224:	b141      	cbz	r1, 800d238 <__ascii_wctomb+0x18>
 800d226:	2aff      	cmp	r2, #255	@ 0xff
 800d228:	d904      	bls.n	800d234 <__ascii_wctomb+0x14>
 800d22a:	228a      	movs	r2, #138	@ 0x8a
 800d22c:	601a      	str	r2, [r3, #0]
 800d22e:	f04f 30ff 	mov.w	r0, #4294967295
 800d232:	4770      	bx	lr
 800d234:	700a      	strb	r2, [r1, #0]
 800d236:	2001      	movs	r0, #1
 800d238:	4770      	bx	lr
	...

0800d23c <fiprintf>:
 800d23c:	b40e      	push	{r1, r2, r3}
 800d23e:	b503      	push	{r0, r1, lr}
 800d240:	4601      	mov	r1, r0
 800d242:	ab03      	add	r3, sp, #12
 800d244:	4805      	ldr	r0, [pc, #20]	@ (800d25c <fiprintf+0x20>)
 800d246:	f853 2b04 	ldr.w	r2, [r3], #4
 800d24a:	6800      	ldr	r0, [r0, #0]
 800d24c:	9301      	str	r3, [sp, #4]
 800d24e:	f000 f83f 	bl	800d2d0 <_vfiprintf_r>
 800d252:	b002      	add	sp, #8
 800d254:	f85d eb04 	ldr.w	lr, [sp], #4
 800d258:	b003      	add	sp, #12
 800d25a:	4770      	bx	lr
 800d25c:	2000001c 	.word	0x2000001c

0800d260 <abort>:
 800d260:	b508      	push	{r3, lr}
 800d262:	2006      	movs	r0, #6
 800d264:	f000 fa08 	bl	800d678 <raise>
 800d268:	2001      	movs	r0, #1
 800d26a:	f7f4 fc5b 	bl	8001b24 <_exit>

0800d26e <_malloc_usable_size_r>:
 800d26e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d272:	1f18      	subs	r0, r3, #4
 800d274:	2b00      	cmp	r3, #0
 800d276:	bfbc      	itt	lt
 800d278:	580b      	ldrlt	r3, [r1, r0]
 800d27a:	18c0      	addlt	r0, r0, r3
 800d27c:	4770      	bx	lr

0800d27e <__sfputc_r>:
 800d27e:	6893      	ldr	r3, [r2, #8]
 800d280:	3b01      	subs	r3, #1
 800d282:	2b00      	cmp	r3, #0
 800d284:	b410      	push	{r4}
 800d286:	6093      	str	r3, [r2, #8]
 800d288:	da08      	bge.n	800d29c <__sfputc_r+0x1e>
 800d28a:	6994      	ldr	r4, [r2, #24]
 800d28c:	42a3      	cmp	r3, r4
 800d28e:	db01      	blt.n	800d294 <__sfputc_r+0x16>
 800d290:	290a      	cmp	r1, #10
 800d292:	d103      	bne.n	800d29c <__sfputc_r+0x1e>
 800d294:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d298:	f000 b932 	b.w	800d500 <__swbuf_r>
 800d29c:	6813      	ldr	r3, [r2, #0]
 800d29e:	1c58      	adds	r0, r3, #1
 800d2a0:	6010      	str	r0, [r2, #0]
 800d2a2:	7019      	strb	r1, [r3, #0]
 800d2a4:	4608      	mov	r0, r1
 800d2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <__sfputs_r>:
 800d2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ae:	4606      	mov	r6, r0
 800d2b0:	460f      	mov	r7, r1
 800d2b2:	4614      	mov	r4, r2
 800d2b4:	18d5      	adds	r5, r2, r3
 800d2b6:	42ac      	cmp	r4, r5
 800d2b8:	d101      	bne.n	800d2be <__sfputs_r+0x12>
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	e007      	b.n	800d2ce <__sfputs_r+0x22>
 800d2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2c2:	463a      	mov	r2, r7
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f7ff ffda 	bl	800d27e <__sfputc_r>
 800d2ca:	1c43      	adds	r3, r0, #1
 800d2cc:	d1f3      	bne.n	800d2b6 <__sfputs_r+0xa>
 800d2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d2d0 <_vfiprintf_r>:
 800d2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d4:	460d      	mov	r5, r1
 800d2d6:	b09d      	sub	sp, #116	@ 0x74
 800d2d8:	4614      	mov	r4, r2
 800d2da:	4698      	mov	r8, r3
 800d2dc:	4606      	mov	r6, r0
 800d2de:	b118      	cbz	r0, 800d2e8 <_vfiprintf_r+0x18>
 800d2e0:	6a03      	ldr	r3, [r0, #32]
 800d2e2:	b90b      	cbnz	r3, 800d2e8 <_vfiprintf_r+0x18>
 800d2e4:	f7fc f920 	bl	8009528 <__sinit>
 800d2e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2ea:	07d9      	lsls	r1, r3, #31
 800d2ec:	d405      	bmi.n	800d2fa <_vfiprintf_r+0x2a>
 800d2ee:	89ab      	ldrh	r3, [r5, #12]
 800d2f0:	059a      	lsls	r2, r3, #22
 800d2f2:	d402      	bmi.n	800d2fa <_vfiprintf_r+0x2a>
 800d2f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2f6:	f7fc fb06 	bl	8009906 <__retarget_lock_acquire_recursive>
 800d2fa:	89ab      	ldrh	r3, [r5, #12]
 800d2fc:	071b      	lsls	r3, r3, #28
 800d2fe:	d501      	bpl.n	800d304 <_vfiprintf_r+0x34>
 800d300:	692b      	ldr	r3, [r5, #16]
 800d302:	b99b      	cbnz	r3, 800d32c <_vfiprintf_r+0x5c>
 800d304:	4629      	mov	r1, r5
 800d306:	4630      	mov	r0, r6
 800d308:	f000 f938 	bl	800d57c <__swsetup_r>
 800d30c:	b170      	cbz	r0, 800d32c <_vfiprintf_r+0x5c>
 800d30e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d310:	07dc      	lsls	r4, r3, #31
 800d312:	d504      	bpl.n	800d31e <_vfiprintf_r+0x4e>
 800d314:	f04f 30ff 	mov.w	r0, #4294967295
 800d318:	b01d      	add	sp, #116	@ 0x74
 800d31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d31e:	89ab      	ldrh	r3, [r5, #12]
 800d320:	0598      	lsls	r0, r3, #22
 800d322:	d4f7      	bmi.n	800d314 <_vfiprintf_r+0x44>
 800d324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d326:	f7fc faef 	bl	8009908 <__retarget_lock_release_recursive>
 800d32a:	e7f3      	b.n	800d314 <_vfiprintf_r+0x44>
 800d32c:	2300      	movs	r3, #0
 800d32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d330:	2320      	movs	r3, #32
 800d332:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d336:	f8cd 800c 	str.w	r8, [sp, #12]
 800d33a:	2330      	movs	r3, #48	@ 0x30
 800d33c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d4ec <_vfiprintf_r+0x21c>
 800d340:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d344:	f04f 0901 	mov.w	r9, #1
 800d348:	4623      	mov	r3, r4
 800d34a:	469a      	mov	sl, r3
 800d34c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d350:	b10a      	cbz	r2, 800d356 <_vfiprintf_r+0x86>
 800d352:	2a25      	cmp	r2, #37	@ 0x25
 800d354:	d1f9      	bne.n	800d34a <_vfiprintf_r+0x7a>
 800d356:	ebba 0b04 	subs.w	fp, sl, r4
 800d35a:	d00b      	beq.n	800d374 <_vfiprintf_r+0xa4>
 800d35c:	465b      	mov	r3, fp
 800d35e:	4622      	mov	r2, r4
 800d360:	4629      	mov	r1, r5
 800d362:	4630      	mov	r0, r6
 800d364:	f7ff ffa2 	bl	800d2ac <__sfputs_r>
 800d368:	3001      	adds	r0, #1
 800d36a:	f000 80a7 	beq.w	800d4bc <_vfiprintf_r+0x1ec>
 800d36e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d370:	445a      	add	r2, fp
 800d372:	9209      	str	r2, [sp, #36]	@ 0x24
 800d374:	f89a 3000 	ldrb.w	r3, [sl]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f000 809f 	beq.w	800d4bc <_vfiprintf_r+0x1ec>
 800d37e:	2300      	movs	r3, #0
 800d380:	f04f 32ff 	mov.w	r2, #4294967295
 800d384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d388:	f10a 0a01 	add.w	sl, sl, #1
 800d38c:	9304      	str	r3, [sp, #16]
 800d38e:	9307      	str	r3, [sp, #28]
 800d390:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d394:	931a      	str	r3, [sp, #104]	@ 0x68
 800d396:	4654      	mov	r4, sl
 800d398:	2205      	movs	r2, #5
 800d39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d39e:	4853      	ldr	r0, [pc, #332]	@ (800d4ec <_vfiprintf_r+0x21c>)
 800d3a0:	f7f2 ff1e 	bl	80001e0 <memchr>
 800d3a4:	9a04      	ldr	r2, [sp, #16]
 800d3a6:	b9d8      	cbnz	r0, 800d3e0 <_vfiprintf_r+0x110>
 800d3a8:	06d1      	lsls	r1, r2, #27
 800d3aa:	bf44      	itt	mi
 800d3ac:	2320      	movmi	r3, #32
 800d3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3b2:	0713      	lsls	r3, r2, #28
 800d3b4:	bf44      	itt	mi
 800d3b6:	232b      	movmi	r3, #43	@ 0x2b
 800d3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d3c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3c2:	d015      	beq.n	800d3f0 <_vfiprintf_r+0x120>
 800d3c4:	9a07      	ldr	r2, [sp, #28]
 800d3c6:	4654      	mov	r4, sl
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	f04f 0c0a 	mov.w	ip, #10
 800d3ce:	4621      	mov	r1, r4
 800d3d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3d4:	3b30      	subs	r3, #48	@ 0x30
 800d3d6:	2b09      	cmp	r3, #9
 800d3d8:	d94b      	bls.n	800d472 <_vfiprintf_r+0x1a2>
 800d3da:	b1b0      	cbz	r0, 800d40a <_vfiprintf_r+0x13a>
 800d3dc:	9207      	str	r2, [sp, #28]
 800d3de:	e014      	b.n	800d40a <_vfiprintf_r+0x13a>
 800d3e0:	eba0 0308 	sub.w	r3, r0, r8
 800d3e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	9304      	str	r3, [sp, #16]
 800d3ec:	46a2      	mov	sl, r4
 800d3ee:	e7d2      	b.n	800d396 <_vfiprintf_r+0xc6>
 800d3f0:	9b03      	ldr	r3, [sp, #12]
 800d3f2:	1d19      	adds	r1, r3, #4
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	9103      	str	r1, [sp, #12]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	bfbb      	ittet	lt
 800d3fc:	425b      	neglt	r3, r3
 800d3fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d402:	9307      	strge	r3, [sp, #28]
 800d404:	9307      	strlt	r3, [sp, #28]
 800d406:	bfb8      	it	lt
 800d408:	9204      	strlt	r2, [sp, #16]
 800d40a:	7823      	ldrb	r3, [r4, #0]
 800d40c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d40e:	d10a      	bne.n	800d426 <_vfiprintf_r+0x156>
 800d410:	7863      	ldrb	r3, [r4, #1]
 800d412:	2b2a      	cmp	r3, #42	@ 0x2a
 800d414:	d132      	bne.n	800d47c <_vfiprintf_r+0x1ac>
 800d416:	9b03      	ldr	r3, [sp, #12]
 800d418:	1d1a      	adds	r2, r3, #4
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	9203      	str	r2, [sp, #12]
 800d41e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d422:	3402      	adds	r4, #2
 800d424:	9305      	str	r3, [sp, #20]
 800d426:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d4fc <_vfiprintf_r+0x22c>
 800d42a:	7821      	ldrb	r1, [r4, #0]
 800d42c:	2203      	movs	r2, #3
 800d42e:	4650      	mov	r0, sl
 800d430:	f7f2 fed6 	bl	80001e0 <memchr>
 800d434:	b138      	cbz	r0, 800d446 <_vfiprintf_r+0x176>
 800d436:	9b04      	ldr	r3, [sp, #16]
 800d438:	eba0 000a 	sub.w	r0, r0, sl
 800d43c:	2240      	movs	r2, #64	@ 0x40
 800d43e:	4082      	lsls	r2, r0
 800d440:	4313      	orrs	r3, r2
 800d442:	3401      	adds	r4, #1
 800d444:	9304      	str	r3, [sp, #16]
 800d446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d44a:	4829      	ldr	r0, [pc, #164]	@ (800d4f0 <_vfiprintf_r+0x220>)
 800d44c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d450:	2206      	movs	r2, #6
 800d452:	f7f2 fec5 	bl	80001e0 <memchr>
 800d456:	2800      	cmp	r0, #0
 800d458:	d03f      	beq.n	800d4da <_vfiprintf_r+0x20a>
 800d45a:	4b26      	ldr	r3, [pc, #152]	@ (800d4f4 <_vfiprintf_r+0x224>)
 800d45c:	bb1b      	cbnz	r3, 800d4a6 <_vfiprintf_r+0x1d6>
 800d45e:	9b03      	ldr	r3, [sp, #12]
 800d460:	3307      	adds	r3, #7
 800d462:	f023 0307 	bic.w	r3, r3, #7
 800d466:	3308      	adds	r3, #8
 800d468:	9303      	str	r3, [sp, #12]
 800d46a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d46c:	443b      	add	r3, r7
 800d46e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d470:	e76a      	b.n	800d348 <_vfiprintf_r+0x78>
 800d472:	fb0c 3202 	mla	r2, ip, r2, r3
 800d476:	460c      	mov	r4, r1
 800d478:	2001      	movs	r0, #1
 800d47a:	e7a8      	b.n	800d3ce <_vfiprintf_r+0xfe>
 800d47c:	2300      	movs	r3, #0
 800d47e:	3401      	adds	r4, #1
 800d480:	9305      	str	r3, [sp, #20]
 800d482:	4619      	mov	r1, r3
 800d484:	f04f 0c0a 	mov.w	ip, #10
 800d488:	4620      	mov	r0, r4
 800d48a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d48e:	3a30      	subs	r2, #48	@ 0x30
 800d490:	2a09      	cmp	r2, #9
 800d492:	d903      	bls.n	800d49c <_vfiprintf_r+0x1cc>
 800d494:	2b00      	cmp	r3, #0
 800d496:	d0c6      	beq.n	800d426 <_vfiprintf_r+0x156>
 800d498:	9105      	str	r1, [sp, #20]
 800d49a:	e7c4      	b.n	800d426 <_vfiprintf_r+0x156>
 800d49c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e7f0      	b.n	800d488 <_vfiprintf_r+0x1b8>
 800d4a6:	ab03      	add	r3, sp, #12
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	462a      	mov	r2, r5
 800d4ac:	4b12      	ldr	r3, [pc, #72]	@ (800d4f8 <_vfiprintf_r+0x228>)
 800d4ae:	a904      	add	r1, sp, #16
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	f7fb f9e1 	bl	8008878 <_printf_float>
 800d4b6:	4607      	mov	r7, r0
 800d4b8:	1c78      	adds	r0, r7, #1
 800d4ba:	d1d6      	bne.n	800d46a <_vfiprintf_r+0x19a>
 800d4bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4be:	07d9      	lsls	r1, r3, #31
 800d4c0:	d405      	bmi.n	800d4ce <_vfiprintf_r+0x1fe>
 800d4c2:	89ab      	ldrh	r3, [r5, #12]
 800d4c4:	059a      	lsls	r2, r3, #22
 800d4c6:	d402      	bmi.n	800d4ce <_vfiprintf_r+0x1fe>
 800d4c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4ca:	f7fc fa1d 	bl	8009908 <__retarget_lock_release_recursive>
 800d4ce:	89ab      	ldrh	r3, [r5, #12]
 800d4d0:	065b      	lsls	r3, r3, #25
 800d4d2:	f53f af1f 	bmi.w	800d314 <_vfiprintf_r+0x44>
 800d4d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4d8:	e71e      	b.n	800d318 <_vfiprintf_r+0x48>
 800d4da:	ab03      	add	r3, sp, #12
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	462a      	mov	r2, r5
 800d4e0:	4b05      	ldr	r3, [pc, #20]	@ (800d4f8 <_vfiprintf_r+0x228>)
 800d4e2:	a904      	add	r1, sp, #16
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f7fb fc5f 	bl	8008da8 <_printf_i>
 800d4ea:	e7e4      	b.n	800d4b6 <_vfiprintf_r+0x1e6>
 800d4ec:	0800dd51 	.word	0x0800dd51
 800d4f0:	0800dd5b 	.word	0x0800dd5b
 800d4f4:	08008879 	.word	0x08008879
 800d4f8:	0800d2ad 	.word	0x0800d2ad
 800d4fc:	0800dd57 	.word	0x0800dd57

0800d500 <__swbuf_r>:
 800d500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d502:	460e      	mov	r6, r1
 800d504:	4614      	mov	r4, r2
 800d506:	4605      	mov	r5, r0
 800d508:	b118      	cbz	r0, 800d512 <__swbuf_r+0x12>
 800d50a:	6a03      	ldr	r3, [r0, #32]
 800d50c:	b90b      	cbnz	r3, 800d512 <__swbuf_r+0x12>
 800d50e:	f7fc f80b 	bl	8009528 <__sinit>
 800d512:	69a3      	ldr	r3, [r4, #24]
 800d514:	60a3      	str	r3, [r4, #8]
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	071a      	lsls	r2, r3, #28
 800d51a:	d501      	bpl.n	800d520 <__swbuf_r+0x20>
 800d51c:	6923      	ldr	r3, [r4, #16]
 800d51e:	b943      	cbnz	r3, 800d532 <__swbuf_r+0x32>
 800d520:	4621      	mov	r1, r4
 800d522:	4628      	mov	r0, r5
 800d524:	f000 f82a 	bl	800d57c <__swsetup_r>
 800d528:	b118      	cbz	r0, 800d532 <__swbuf_r+0x32>
 800d52a:	f04f 37ff 	mov.w	r7, #4294967295
 800d52e:	4638      	mov	r0, r7
 800d530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d532:	6823      	ldr	r3, [r4, #0]
 800d534:	6922      	ldr	r2, [r4, #16]
 800d536:	1a98      	subs	r0, r3, r2
 800d538:	6963      	ldr	r3, [r4, #20]
 800d53a:	b2f6      	uxtb	r6, r6
 800d53c:	4283      	cmp	r3, r0
 800d53e:	4637      	mov	r7, r6
 800d540:	dc05      	bgt.n	800d54e <__swbuf_r+0x4e>
 800d542:	4621      	mov	r1, r4
 800d544:	4628      	mov	r0, r5
 800d546:	f7ff f96f 	bl	800c828 <_fflush_r>
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d1ed      	bne.n	800d52a <__swbuf_r+0x2a>
 800d54e:	68a3      	ldr	r3, [r4, #8]
 800d550:	3b01      	subs	r3, #1
 800d552:	60a3      	str	r3, [r4, #8]
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	1c5a      	adds	r2, r3, #1
 800d558:	6022      	str	r2, [r4, #0]
 800d55a:	701e      	strb	r6, [r3, #0]
 800d55c:	6962      	ldr	r2, [r4, #20]
 800d55e:	1c43      	adds	r3, r0, #1
 800d560:	429a      	cmp	r2, r3
 800d562:	d004      	beq.n	800d56e <__swbuf_r+0x6e>
 800d564:	89a3      	ldrh	r3, [r4, #12]
 800d566:	07db      	lsls	r3, r3, #31
 800d568:	d5e1      	bpl.n	800d52e <__swbuf_r+0x2e>
 800d56a:	2e0a      	cmp	r6, #10
 800d56c:	d1df      	bne.n	800d52e <__swbuf_r+0x2e>
 800d56e:	4621      	mov	r1, r4
 800d570:	4628      	mov	r0, r5
 800d572:	f7ff f959 	bl	800c828 <_fflush_r>
 800d576:	2800      	cmp	r0, #0
 800d578:	d0d9      	beq.n	800d52e <__swbuf_r+0x2e>
 800d57a:	e7d6      	b.n	800d52a <__swbuf_r+0x2a>

0800d57c <__swsetup_r>:
 800d57c:	b538      	push	{r3, r4, r5, lr}
 800d57e:	4b29      	ldr	r3, [pc, #164]	@ (800d624 <__swsetup_r+0xa8>)
 800d580:	4605      	mov	r5, r0
 800d582:	6818      	ldr	r0, [r3, #0]
 800d584:	460c      	mov	r4, r1
 800d586:	b118      	cbz	r0, 800d590 <__swsetup_r+0x14>
 800d588:	6a03      	ldr	r3, [r0, #32]
 800d58a:	b90b      	cbnz	r3, 800d590 <__swsetup_r+0x14>
 800d58c:	f7fb ffcc 	bl	8009528 <__sinit>
 800d590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d594:	0719      	lsls	r1, r3, #28
 800d596:	d422      	bmi.n	800d5de <__swsetup_r+0x62>
 800d598:	06da      	lsls	r2, r3, #27
 800d59a:	d407      	bmi.n	800d5ac <__swsetup_r+0x30>
 800d59c:	2209      	movs	r2, #9
 800d59e:	602a      	str	r2, [r5, #0]
 800d5a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5a4:	81a3      	strh	r3, [r4, #12]
 800d5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5aa:	e033      	b.n	800d614 <__swsetup_r+0x98>
 800d5ac:	0758      	lsls	r0, r3, #29
 800d5ae:	d512      	bpl.n	800d5d6 <__swsetup_r+0x5a>
 800d5b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5b2:	b141      	cbz	r1, 800d5c6 <__swsetup_r+0x4a>
 800d5b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5b8:	4299      	cmp	r1, r3
 800d5ba:	d002      	beq.n	800d5c2 <__swsetup_r+0x46>
 800d5bc:	4628      	mov	r0, r5
 800d5be:	f7fd f807 	bl	800a5d0 <_free_r>
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d5c6:	89a3      	ldrh	r3, [r4, #12]
 800d5c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d5cc:	81a3      	strh	r3, [r4, #12]
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	6063      	str	r3, [r4, #4]
 800d5d2:	6923      	ldr	r3, [r4, #16]
 800d5d4:	6023      	str	r3, [r4, #0]
 800d5d6:	89a3      	ldrh	r3, [r4, #12]
 800d5d8:	f043 0308 	orr.w	r3, r3, #8
 800d5dc:	81a3      	strh	r3, [r4, #12]
 800d5de:	6923      	ldr	r3, [r4, #16]
 800d5e0:	b94b      	cbnz	r3, 800d5f6 <__swsetup_r+0x7a>
 800d5e2:	89a3      	ldrh	r3, [r4, #12]
 800d5e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d5e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5ec:	d003      	beq.n	800d5f6 <__swsetup_r+0x7a>
 800d5ee:	4621      	mov	r1, r4
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	f000 f883 	bl	800d6fc <__smakebuf_r>
 800d5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5fa:	f013 0201 	ands.w	r2, r3, #1
 800d5fe:	d00a      	beq.n	800d616 <__swsetup_r+0x9a>
 800d600:	2200      	movs	r2, #0
 800d602:	60a2      	str	r2, [r4, #8]
 800d604:	6962      	ldr	r2, [r4, #20]
 800d606:	4252      	negs	r2, r2
 800d608:	61a2      	str	r2, [r4, #24]
 800d60a:	6922      	ldr	r2, [r4, #16]
 800d60c:	b942      	cbnz	r2, 800d620 <__swsetup_r+0xa4>
 800d60e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d612:	d1c5      	bne.n	800d5a0 <__swsetup_r+0x24>
 800d614:	bd38      	pop	{r3, r4, r5, pc}
 800d616:	0799      	lsls	r1, r3, #30
 800d618:	bf58      	it	pl
 800d61a:	6962      	ldrpl	r2, [r4, #20]
 800d61c:	60a2      	str	r2, [r4, #8]
 800d61e:	e7f4      	b.n	800d60a <__swsetup_r+0x8e>
 800d620:	2000      	movs	r0, #0
 800d622:	e7f7      	b.n	800d614 <__swsetup_r+0x98>
 800d624:	2000001c 	.word	0x2000001c

0800d628 <_raise_r>:
 800d628:	291f      	cmp	r1, #31
 800d62a:	b538      	push	{r3, r4, r5, lr}
 800d62c:	4605      	mov	r5, r0
 800d62e:	460c      	mov	r4, r1
 800d630:	d904      	bls.n	800d63c <_raise_r+0x14>
 800d632:	2316      	movs	r3, #22
 800d634:	6003      	str	r3, [r0, #0]
 800d636:	f04f 30ff 	mov.w	r0, #4294967295
 800d63a:	bd38      	pop	{r3, r4, r5, pc}
 800d63c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d63e:	b112      	cbz	r2, 800d646 <_raise_r+0x1e>
 800d640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d644:	b94b      	cbnz	r3, 800d65a <_raise_r+0x32>
 800d646:	4628      	mov	r0, r5
 800d648:	f000 f830 	bl	800d6ac <_getpid_r>
 800d64c:	4622      	mov	r2, r4
 800d64e:	4601      	mov	r1, r0
 800d650:	4628      	mov	r0, r5
 800d652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d656:	f000 b817 	b.w	800d688 <_kill_r>
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d00a      	beq.n	800d674 <_raise_r+0x4c>
 800d65e:	1c59      	adds	r1, r3, #1
 800d660:	d103      	bne.n	800d66a <_raise_r+0x42>
 800d662:	2316      	movs	r3, #22
 800d664:	6003      	str	r3, [r0, #0]
 800d666:	2001      	movs	r0, #1
 800d668:	e7e7      	b.n	800d63a <_raise_r+0x12>
 800d66a:	2100      	movs	r1, #0
 800d66c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d670:	4620      	mov	r0, r4
 800d672:	4798      	blx	r3
 800d674:	2000      	movs	r0, #0
 800d676:	e7e0      	b.n	800d63a <_raise_r+0x12>

0800d678 <raise>:
 800d678:	4b02      	ldr	r3, [pc, #8]	@ (800d684 <raise+0xc>)
 800d67a:	4601      	mov	r1, r0
 800d67c:	6818      	ldr	r0, [r3, #0]
 800d67e:	f7ff bfd3 	b.w	800d628 <_raise_r>
 800d682:	bf00      	nop
 800d684:	2000001c 	.word	0x2000001c

0800d688 <_kill_r>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	4d07      	ldr	r5, [pc, #28]	@ (800d6a8 <_kill_r+0x20>)
 800d68c:	2300      	movs	r3, #0
 800d68e:	4604      	mov	r4, r0
 800d690:	4608      	mov	r0, r1
 800d692:	4611      	mov	r1, r2
 800d694:	602b      	str	r3, [r5, #0]
 800d696:	f7f4 fa35 	bl	8001b04 <_kill>
 800d69a:	1c43      	adds	r3, r0, #1
 800d69c:	d102      	bne.n	800d6a4 <_kill_r+0x1c>
 800d69e:	682b      	ldr	r3, [r5, #0]
 800d6a0:	b103      	cbz	r3, 800d6a4 <_kill_r+0x1c>
 800d6a2:	6023      	str	r3, [r4, #0]
 800d6a4:	bd38      	pop	{r3, r4, r5, pc}
 800d6a6:	bf00      	nop
 800d6a8:	20004f50 	.word	0x20004f50

0800d6ac <_getpid_r>:
 800d6ac:	f7f4 ba22 	b.w	8001af4 <_getpid>

0800d6b0 <__swhatbuf_r>:
 800d6b0:	b570      	push	{r4, r5, r6, lr}
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6b8:	2900      	cmp	r1, #0
 800d6ba:	b096      	sub	sp, #88	@ 0x58
 800d6bc:	4615      	mov	r5, r2
 800d6be:	461e      	mov	r6, r3
 800d6c0:	da0d      	bge.n	800d6de <__swhatbuf_r+0x2e>
 800d6c2:	89a3      	ldrh	r3, [r4, #12]
 800d6c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d6c8:	f04f 0100 	mov.w	r1, #0
 800d6cc:	bf14      	ite	ne
 800d6ce:	2340      	movne	r3, #64	@ 0x40
 800d6d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	6031      	str	r1, [r6, #0]
 800d6d8:	602b      	str	r3, [r5, #0]
 800d6da:	b016      	add	sp, #88	@ 0x58
 800d6dc:	bd70      	pop	{r4, r5, r6, pc}
 800d6de:	466a      	mov	r2, sp
 800d6e0:	f000 f848 	bl	800d774 <_fstat_r>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	dbec      	blt.n	800d6c2 <__swhatbuf_r+0x12>
 800d6e8:	9901      	ldr	r1, [sp, #4]
 800d6ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d6ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d6f2:	4259      	negs	r1, r3
 800d6f4:	4159      	adcs	r1, r3
 800d6f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6fa:	e7eb      	b.n	800d6d4 <__swhatbuf_r+0x24>

0800d6fc <__smakebuf_r>:
 800d6fc:	898b      	ldrh	r3, [r1, #12]
 800d6fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d700:	079d      	lsls	r5, r3, #30
 800d702:	4606      	mov	r6, r0
 800d704:	460c      	mov	r4, r1
 800d706:	d507      	bpl.n	800d718 <__smakebuf_r+0x1c>
 800d708:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d70c:	6023      	str	r3, [r4, #0]
 800d70e:	6123      	str	r3, [r4, #16]
 800d710:	2301      	movs	r3, #1
 800d712:	6163      	str	r3, [r4, #20]
 800d714:	b003      	add	sp, #12
 800d716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d718:	ab01      	add	r3, sp, #4
 800d71a:	466a      	mov	r2, sp
 800d71c:	f7ff ffc8 	bl	800d6b0 <__swhatbuf_r>
 800d720:	9f00      	ldr	r7, [sp, #0]
 800d722:	4605      	mov	r5, r0
 800d724:	4639      	mov	r1, r7
 800d726:	4630      	mov	r0, r6
 800d728:	f7fc ffc6 	bl	800a6b8 <_malloc_r>
 800d72c:	b948      	cbnz	r0, 800d742 <__smakebuf_r+0x46>
 800d72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d732:	059a      	lsls	r2, r3, #22
 800d734:	d4ee      	bmi.n	800d714 <__smakebuf_r+0x18>
 800d736:	f023 0303 	bic.w	r3, r3, #3
 800d73a:	f043 0302 	orr.w	r3, r3, #2
 800d73e:	81a3      	strh	r3, [r4, #12]
 800d740:	e7e2      	b.n	800d708 <__smakebuf_r+0xc>
 800d742:	89a3      	ldrh	r3, [r4, #12]
 800d744:	6020      	str	r0, [r4, #0]
 800d746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d74a:	81a3      	strh	r3, [r4, #12]
 800d74c:	9b01      	ldr	r3, [sp, #4]
 800d74e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d752:	b15b      	cbz	r3, 800d76c <__smakebuf_r+0x70>
 800d754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d758:	4630      	mov	r0, r6
 800d75a:	f000 f81d 	bl	800d798 <_isatty_r>
 800d75e:	b128      	cbz	r0, 800d76c <__smakebuf_r+0x70>
 800d760:	89a3      	ldrh	r3, [r4, #12]
 800d762:	f023 0303 	bic.w	r3, r3, #3
 800d766:	f043 0301 	orr.w	r3, r3, #1
 800d76a:	81a3      	strh	r3, [r4, #12]
 800d76c:	89a3      	ldrh	r3, [r4, #12]
 800d76e:	431d      	orrs	r5, r3
 800d770:	81a5      	strh	r5, [r4, #12]
 800d772:	e7cf      	b.n	800d714 <__smakebuf_r+0x18>

0800d774 <_fstat_r>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	4d07      	ldr	r5, [pc, #28]	@ (800d794 <_fstat_r+0x20>)
 800d778:	2300      	movs	r3, #0
 800d77a:	4604      	mov	r4, r0
 800d77c:	4608      	mov	r0, r1
 800d77e:	4611      	mov	r1, r2
 800d780:	602b      	str	r3, [r5, #0]
 800d782:	f7f4 fa1f 	bl	8001bc4 <_fstat>
 800d786:	1c43      	adds	r3, r0, #1
 800d788:	d102      	bne.n	800d790 <_fstat_r+0x1c>
 800d78a:	682b      	ldr	r3, [r5, #0]
 800d78c:	b103      	cbz	r3, 800d790 <_fstat_r+0x1c>
 800d78e:	6023      	str	r3, [r4, #0]
 800d790:	bd38      	pop	{r3, r4, r5, pc}
 800d792:	bf00      	nop
 800d794:	20004f50 	.word	0x20004f50

0800d798 <_isatty_r>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	4d06      	ldr	r5, [pc, #24]	@ (800d7b4 <_isatty_r+0x1c>)
 800d79c:	2300      	movs	r3, #0
 800d79e:	4604      	mov	r4, r0
 800d7a0:	4608      	mov	r0, r1
 800d7a2:	602b      	str	r3, [r5, #0]
 800d7a4:	f7f4 fa1e 	bl	8001be4 <_isatty>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	d102      	bne.n	800d7b2 <_isatty_r+0x1a>
 800d7ac:	682b      	ldr	r3, [r5, #0]
 800d7ae:	b103      	cbz	r3, 800d7b2 <_isatty_r+0x1a>
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	20004f50 	.word	0x20004f50

0800d7b8 <floor>:
 800d7b8:	ec51 0b10 	vmov	r0, r1, d0
 800d7bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d7c8:	2e13      	cmp	r6, #19
 800d7ca:	460c      	mov	r4, r1
 800d7cc:	4605      	mov	r5, r0
 800d7ce:	4680      	mov	r8, r0
 800d7d0:	dc34      	bgt.n	800d83c <floor+0x84>
 800d7d2:	2e00      	cmp	r6, #0
 800d7d4:	da17      	bge.n	800d806 <floor+0x4e>
 800d7d6:	a332      	add	r3, pc, #200	@ (adr r3, 800d8a0 <floor+0xe8>)
 800d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7dc:	f7f2 fd5e 	bl	800029c <__adddf3>
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f7f3 f9a0 	bl	8000b28 <__aeabi_dcmpgt>
 800d7e8:	b150      	cbz	r0, 800d800 <floor+0x48>
 800d7ea:	2c00      	cmp	r4, #0
 800d7ec:	da55      	bge.n	800d89a <floor+0xe2>
 800d7ee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d7f2:	432c      	orrs	r4, r5
 800d7f4:	2500      	movs	r5, #0
 800d7f6:	42ac      	cmp	r4, r5
 800d7f8:	4c2b      	ldr	r4, [pc, #172]	@ (800d8a8 <floor+0xf0>)
 800d7fa:	bf08      	it	eq
 800d7fc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d800:	4621      	mov	r1, r4
 800d802:	4628      	mov	r0, r5
 800d804:	e023      	b.n	800d84e <floor+0x96>
 800d806:	4f29      	ldr	r7, [pc, #164]	@ (800d8ac <floor+0xf4>)
 800d808:	4137      	asrs	r7, r6
 800d80a:	ea01 0307 	and.w	r3, r1, r7
 800d80e:	4303      	orrs	r3, r0
 800d810:	d01d      	beq.n	800d84e <floor+0x96>
 800d812:	a323      	add	r3, pc, #140	@ (adr r3, 800d8a0 <floor+0xe8>)
 800d814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d818:	f7f2 fd40 	bl	800029c <__adddf3>
 800d81c:	2200      	movs	r2, #0
 800d81e:	2300      	movs	r3, #0
 800d820:	f7f3 f982 	bl	8000b28 <__aeabi_dcmpgt>
 800d824:	2800      	cmp	r0, #0
 800d826:	d0eb      	beq.n	800d800 <floor+0x48>
 800d828:	2c00      	cmp	r4, #0
 800d82a:	bfbe      	ittt	lt
 800d82c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d830:	4133      	asrlt	r3, r6
 800d832:	18e4      	addlt	r4, r4, r3
 800d834:	ea24 0407 	bic.w	r4, r4, r7
 800d838:	2500      	movs	r5, #0
 800d83a:	e7e1      	b.n	800d800 <floor+0x48>
 800d83c:	2e33      	cmp	r6, #51	@ 0x33
 800d83e:	dd0a      	ble.n	800d856 <floor+0x9e>
 800d840:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d844:	d103      	bne.n	800d84e <floor+0x96>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	f7f2 fd27 	bl	800029c <__adddf3>
 800d84e:	ec41 0b10 	vmov	d0, r0, r1
 800d852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d856:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d85a:	f04f 37ff 	mov.w	r7, #4294967295
 800d85e:	40df      	lsrs	r7, r3
 800d860:	4207      	tst	r7, r0
 800d862:	d0f4      	beq.n	800d84e <floor+0x96>
 800d864:	a30e      	add	r3, pc, #56	@ (adr r3, 800d8a0 <floor+0xe8>)
 800d866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86a:	f7f2 fd17 	bl	800029c <__adddf3>
 800d86e:	2200      	movs	r2, #0
 800d870:	2300      	movs	r3, #0
 800d872:	f7f3 f959 	bl	8000b28 <__aeabi_dcmpgt>
 800d876:	2800      	cmp	r0, #0
 800d878:	d0c2      	beq.n	800d800 <floor+0x48>
 800d87a:	2c00      	cmp	r4, #0
 800d87c:	da0a      	bge.n	800d894 <floor+0xdc>
 800d87e:	2e14      	cmp	r6, #20
 800d880:	d101      	bne.n	800d886 <floor+0xce>
 800d882:	3401      	adds	r4, #1
 800d884:	e006      	b.n	800d894 <floor+0xdc>
 800d886:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d88a:	2301      	movs	r3, #1
 800d88c:	40b3      	lsls	r3, r6
 800d88e:	441d      	add	r5, r3
 800d890:	4545      	cmp	r5, r8
 800d892:	d3f6      	bcc.n	800d882 <floor+0xca>
 800d894:	ea25 0507 	bic.w	r5, r5, r7
 800d898:	e7b2      	b.n	800d800 <floor+0x48>
 800d89a:	2500      	movs	r5, #0
 800d89c:	462c      	mov	r4, r5
 800d89e:	e7af      	b.n	800d800 <floor+0x48>
 800d8a0:	8800759c 	.word	0x8800759c
 800d8a4:	7e37e43c 	.word	0x7e37e43c
 800d8a8:	bff00000 	.word	0xbff00000
 800d8ac:	000fffff 	.word	0x000fffff

0800d8b0 <_init>:
 800d8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b2:	bf00      	nop
 800d8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8b6:	bc08      	pop	{r3}
 800d8b8:	469e      	mov	lr, r3
 800d8ba:	4770      	bx	lr

0800d8bc <_fini>:
 800d8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8be:	bf00      	nop
 800d8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8c2:	bc08      	pop	{r3}
 800d8c4:	469e      	mov	lr, r3
 800d8c6:	4770      	bx	lr
