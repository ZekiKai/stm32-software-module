
IIC_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b548  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  0800b6e8  0800b6e8  0000c6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beb0  0800beb0  0000d1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800beb0  0800beb0  0000ceb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800beb8  0800beb8  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beb8  0800beb8  0000ceb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bebc  0800bebc  0000cebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800bec0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200001f0  0800c0b0  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800c0b0  0000d4d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c43  00000000  00000000  0000d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264f  00000000  00000000  0001de63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  000204b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca1  00000000  00000000  000214d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e7  00000000  00000000  00022171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001430d  00000000  00000000  0003a558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092b20  00000000  00000000  0004e865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1385  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc0  00000000  00000000  000e13c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000e7088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b6d0 	.word	0x0800b6d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800b6d0 	.word	0x0800b6d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a2c      	ldr	r2, [pc, #176]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a25      	ldr	r2, [pc, #148]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a1e      	ldr	r2, [pc, #120]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2120      	movs	r1, #32
 800107e:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <MX_GPIO_Init+0xd4>)
 8001080:	f001 fc64 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001084:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800108a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	480c      	ldr	r0, [pc, #48]	@ (80010cc <MX_GPIO_Init+0xd8>)
 800109c:	f001 fad2 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010a0:	2320      	movs	r3, #32
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <MX_GPIO_Init+0xd4>)
 80010b8:	f001 fac4 	bl	8002644 <HAL_GPIO_Init>

}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	@ 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020800 	.word	0x40020800

080010d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010d6:	4a13      	ldr	r2, [pc, #76]	@ (8001124 <MX_I2C1_Init+0x54>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010dc:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <MX_I2C1_Init+0x58>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001100:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <MX_I2C1_Init+0x50>)
 800110e:	f001 fc37 	bl	8002980 <HAL_I2C_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001118:	f000 f974 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000020c 	.word	0x2000020c
 8001124:	40005400 	.word	0x40005400
 8001128:	000186a0 	.word	0x000186a0

0800112c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <HAL_I2C_MspInit+0x84>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d12b      	bne.n	80011a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a17      	ldr	r2, [pc, #92]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800116a:	23c0      	movs	r3, #192	@ 0xc0
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117a:	2304      	movs	r3, #4
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <HAL_I2C_MspInit+0x8c>)
 8001186:	f001 fa5d 	bl	8002644 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 8001194:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_I2C_MspInit+0x88>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	@ 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40005400 	.word	0x40005400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400

080011bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	b09e      	sub	sp, #120	@ 0x78
 80011c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c2:	f001 f8c3 	bl	800234c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c6:	f000 f8b1 	bl	800132c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ca:	f7ff ff13 	bl	8000ff4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011ce:	f001 f821 	bl	8002214 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011d2:	f7ff ff7d 	bl	80010d0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80011d6:	f000 ffa9 	bl	800212c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  AngleProcessor_Init(&angle_processer, 0.005, 0.05);
 80011da:	eddf 0a48 	vldr	s1, [pc, #288]	@ 80012fc <main+0x140>
 80011de:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8001300 <main+0x144>
 80011e2:	4848      	ldr	r0, [pc, #288]	@ (8001304 <main+0x148>)
 80011e4:	f000 fc60 	bl	8001aa8 <AngleProcessor_Init>
  MPU_Init();
 80011e8:	f000 f912 	bl	8001410 <MPU_Init>

  MPU_Calibrate_Accel_Data(accel_bias);
 80011ec:	4846      	ldr	r0, [pc, #280]	@ (8001308 <main+0x14c>)
 80011ee:	f000 fb05 	bl	80017fc <MPU_Calibrate_Accel_Data>

  char calibrate_accel_data[50] = "";
 80011f2:	2300      	movs	r3, #0
 80011f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80011f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011fa:	222e      	movs	r2, #46	@ 0x2e
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f005 f865 	bl	80062ce <memset>
  sprintf(calibrate_accel_data, "ax:%d, ay:%d, az:%d;", accel_bias[0], accel_bias[1], accel_bias[2]);
 8001204:	4b40      	ldr	r3, [pc, #256]	@ (8001308 <main+0x14c>)
 8001206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120a:	461a      	mov	r2, r3
 800120c:	4b3e      	ldr	r3, [pc, #248]	@ (8001308 <main+0x14c>)
 800120e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001212:	4619      	mov	r1, r3
 8001214:	4b3c      	ldr	r3, [pc, #240]	@ (8001308 <main+0x14c>)
 8001216:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800121a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	460b      	mov	r3, r1
 8001222:	493a      	ldr	r1, [pc, #232]	@ (800130c <main+0x150>)
 8001224:	f004 fff0 	bl	8006208 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)calibrate_accel_data , strlen(calibrate_accel_data), HAL_MAX_DELAY);
 8001228:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f827 	bl	8000280 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	b29a      	uxth	r2, r3
 8001236:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	4834      	ldr	r0, [pc, #208]	@ (8001310 <main+0x154>)
 8001240:	f003 fce6 	bl	8004c10 <HAL_UART_Transmit>

  MPU_Calibrate_Gyro_Data(gyro_bias);
 8001244:	4833      	ldr	r0, [pc, #204]	@ (8001314 <main+0x158>)
 8001246:	f000 fb32 	bl	80018ae <MPU_Calibrate_Gyro_Data>

  char calibrate_gyro_data[50] = "";
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	222e      	movs	r2, #46	@ 0x2e
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f005 f83a 	bl	80062ce <memset>
  sprintf(calibrate_gyro_data, "gx:%d, gy:%d, gz:%d;", gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 800125a:	4b2e      	ldr	r3, [pc, #184]	@ (8001314 <main+0x158>)
 800125c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001260:	461a      	mov	r2, r3
 8001262:	4b2c      	ldr	r3, [pc, #176]	@ (8001314 <main+0x158>)
 8001264:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001268:	4619      	mov	r1, r3
 800126a:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <main+0x158>)
 800126c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001270:	4638      	mov	r0, r7
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	460b      	mov	r3, r1
 8001276:	4928      	ldr	r1, [pc, #160]	@ (8001318 <main+0x15c>)
 8001278:	f004 ffc6 	bl	8006208 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)calibrate_gyro_data , strlen(calibrate_gyro_data), HAL_MAX_DELAY);
 800127c:	463b      	mov	r3, r7
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe fffe 	bl	8000280 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	4639      	mov	r1, r7
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	4820      	ldr	r0, [pc, #128]	@ (8001310 <main+0x154>)
 8001290:	f003 fcbe 	bl	8004c10 <HAL_UART_Transmit>

  HAL_TIM_Base_Start_IT(&htim1);
 8001294:	4821      	ldr	r0, [pc, #132]	@ (800131c <main+0x160>)
 8001296:	f003 f9ad 	bl	80045f4 <HAL_TIM_Base_Start_IT>
	  HAL_UART_Transmit(&huart2, (uint8_t*) message, strlen(message), HAL_MAX_DELAY);

	  HAL_Delay(500);
*/
//---------------------------------------------------------
	  MPU_Get_Angle_KalmanFilter(accel_bias, gyro_bias, &angle_processer, time_interval);
 800129a:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <main+0x164>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	eeb0 0a67 	vmov.f32	s0, s15
 80012a4:	4a17      	ldr	r2, [pc, #92]	@ (8001304 <main+0x148>)
 80012a6:	491b      	ldr	r1, [pc, #108]	@ (8001314 <main+0x158>)
 80012a8:	4817      	ldr	r0, [pc, #92]	@ (8001308 <main+0x14c>)
 80012aa:	f000 fc21 	bl	8001af0 <MPU_Get_Angle_KalmanFilter>
	  float roll = angle_processer.roll_hat;
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <main+0x148>)
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  float pitch = angle_processer.pitch_hat;
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <main+0x148>)
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	66bb      	str	r3, [r7, #104]	@ 0x68
	  sprintf(message, "roll:%.1f, pitch:%.1f\n ", roll, pitch);
 80012ba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80012bc:	f7ff f94c 	bl	8000558 <__aeabi_f2d>
 80012c0:	4604      	mov	r4, r0
 80012c2:	460d      	mov	r5, r1
 80012c4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80012c6:	f7ff f947 	bl	8000558 <__aeabi_f2d>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	e9cd 2300 	strd	r2, r3, [sp]
 80012d2:	4622      	mov	r2, r4
 80012d4:	462b      	mov	r3, r5
 80012d6:	4913      	ldr	r1, [pc, #76]	@ (8001324 <main+0x168>)
 80012d8:	4813      	ldr	r0, [pc, #76]	@ (8001328 <main+0x16c>)
 80012da:	f004 ff95 	bl	8006208 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) message, strlen(message), 50);
 80012de:	4812      	ldr	r0, [pc, #72]	@ (8001328 <main+0x16c>)
 80012e0:	f7fe ffce 	bl	8000280 <strlen>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	2332      	movs	r3, #50	@ 0x32
 80012ea:	490f      	ldr	r1, [pc, #60]	@ (8001328 <main+0x16c>)
 80012ec:	4808      	ldr	r0, [pc, #32]	@ (8001310 <main+0x154>)
 80012ee:	f003 fc8f 	bl	8004c10 <HAL_UART_Transmit>

	  HAL_Delay(50);
 80012f2:	2032      	movs	r0, #50	@ 0x32
 80012f4:	f001 f89c 	bl	8002430 <HAL_Delay>
  {
 80012f8:	bf00      	nop
 80012fa:	e7ce      	b.n	800129a <main+0xde>
 80012fc:	3d4ccccd 	.word	0x3d4ccccd
 8001300:	3ba3d70a 	.word	0x3ba3d70a
 8001304:	20000270 	.word	0x20000270
 8001308:	20000260 	.word	0x20000260
 800130c:	0800b6e8 	.word	0x0800b6e8
 8001310:	20000338 	.word	0x20000338
 8001314:	20000268 	.word	0x20000268
 8001318:	0800b700 	.word	0x0800b700
 800131c:	200002f0 	.word	0x200002f0
 8001320:	20000000 	.word	0x20000000
 8001324:	0800b718 	.word	0x0800b718
 8001328:	20000288 	.word	0x20000288

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b094      	sub	sp, #80	@ 0x50
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0320 	add.w	r3, r7, #32
 8001336:	2230      	movs	r2, #48	@ 0x30
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f004 ffc7 	bl	80062ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	4b29      	ldr	r3, [pc, #164]	@ (80013fc <SystemClock_Config+0xd0>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001358:	4a28      	ldr	r2, [pc, #160]	@ (80013fc <SystemClock_Config+0xd0>)
 800135a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001360:	4b26      	ldr	r3, [pc, #152]	@ (80013fc <SystemClock_Config+0xd0>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800136c:	2300      	movs	r3, #0
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <SystemClock_Config+0xd4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001378:	4a21      	ldr	r2, [pc, #132]	@ (8001400 <SystemClock_Config+0xd4>)
 800137a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <SystemClock_Config+0xd4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800138c:	2302      	movs	r3, #2
 800138e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001390:	2301      	movs	r3, #1
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001394:	2310      	movs	r3, #16
 8001396:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001398:	2302      	movs	r3, #2
 800139a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800139c:	2300      	movs	r3, #0
 800139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013a0:	2310      	movs	r3, #16
 80013a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013aa:	2304      	movs	r3, #4
 80013ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ae:	2307      	movs	r3, #7
 80013b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 fc34 	bl	8003c24 <HAL_RCC_OscConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013c2:	f000 f81f 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c6:	230f      	movs	r3, #15
 80013c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ca:	2302      	movs	r3, #2
 80013cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2102      	movs	r1, #2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 fe96 	bl	8004114 <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013ee:	f000 f809 	bl	8001404 <Error_Handler>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3750      	adds	r7, #80	@ 0x50
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <Error_Handler+0x8>

08001410 <MPU_Init>:
	mpu_i2c_handlePtr = hi2cPtr;
}

//初始化MPU6050 --Return: 0 -> Success; Other -> False;

uint8_t MPU_Init(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

	uint8_t *templete_data = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
	HAL_StatusTypeDef ret;
    HAL_I2C_Init(mpu_i2c_handlePtr);
 800141a:	4b42      	ldr	r3, [pc, #264]	@ (8001524 <MPU_Init+0x114>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f001 faae 	bl	8002980 <HAL_I2C_Init>

    ret = HAL_I2C_IsDeviceReady(mpu_i2c_handlePtr, MPU_WRITE, 1, 100);
 8001424:	4b3f      	ldr	r3, [pc, #252]	@ (8001524 <MPU_Init+0x114>)
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	2364      	movs	r3, #100	@ 0x64
 800142a:	2201      	movs	r2, #1
 800142c:	21d0      	movs	r1, #208	@ 0xd0
 800142e:	f001 ff17 	bl	8003260 <HAL_I2C_IsDeviceReady>
 8001432:	4603      	mov	r3, r0
 8001434:	70fb      	strb	r3, [r7, #3]
    if (ret == HAL_OK){
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d104      	bne.n	8001446 <MPU_Init+0x36>
    	SendMessage(&huart2, "The device is ready \n");
 800143c:	493a      	ldr	r1, [pc, #232]	@ (8001528 <MPU_Init+0x118>)
 800143e:	483b      	ldr	r0, [pc, #236]	@ (800152c <MPU_Init+0x11c>)
 8001440:	f000 fd28 	bl	8001e94 <SendMessage>
 8001444:	e003      	b.n	800144e <MPU_Init+0x3e>
    } else {
    	SendMessage(&huart2, "The device is not ready \n");
 8001446:	493a      	ldr	r1, [pc, #232]	@ (8001530 <MPU_Init+0x120>)
 8001448:	4838      	ldr	r0, [pc, #224]	@ (800152c <MPU_Init+0x11c>)
 800144a:	f000 fd23 	bl	8001e94 <SendMessage>
    }

    MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X80);	//复位MPU6050
 800144e:	2180      	movs	r1, #128	@ 0x80
 8001450:	206b      	movs	r0, #107	@ 0x6b
 8001452:	f000 f8a1 	bl	8001598 <MPU_Write_Byte>

    ret = MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X00);	//Exiting from the Sleeping mode
 8001456:	2100      	movs	r1, #0
 8001458:	206b      	movs	r0, #107	@ 0x6b
 800145a:	f000 f89d 	bl	8001598 <MPU_Write_Byte>
 800145e:	4603      	mov	r3, r0
 8001460:	70fb      	strb	r3, [r7, #3]
    if (ret == HAL_OK){
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d104      	bne.n	8001472 <MPU_Init+0x62>
    	SendMessage(&huart2, "Exiting from the Sleep \n");
 8001468:	4932      	ldr	r1, [pc, #200]	@ (8001534 <MPU_Init+0x124>)
 800146a:	4830      	ldr	r0, [pc, #192]	@ (800152c <MPU_Init+0x11c>)
 800146c:	f000 fd12 	bl	8001e94 <SendMessage>
 8001470:	e003      	b.n	800147a <MPU_Init+0x6a>
    } else {
    	SendMessage(&huart2, "Not exiting from the Sleep \n");
 8001472:	4931      	ldr	r1, [pc, #196]	@ (8001538 <MPU_Init+0x128>)
 8001474:	482d      	ldr	r0, [pc, #180]	@ (800152c <MPU_Init+0x11c>)
 8001476:	f000 fd0d 	bl	8001e94 <SendMessage>
    }

    ret = MPU_Set_Gyro_Fsr(3);	//Configuring Accelerometer
 800147a:	2003      	movs	r0, #3
 800147c:	f000 f8dc 	bl	8001638 <MPU_Set_Gyro_Fsr>
 8001480:	4603      	mov	r3, r0
 8001482:	70fb      	strb	r3, [r7, #3]
    if (ret == HAL_OK){
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d104      	bne.n	8001494 <MPU_Init+0x84>
    	SendMessage(&huart2, "Configuring Accelerometer \n");
 800148a:	492c      	ldr	r1, [pc, #176]	@ (800153c <MPU_Init+0x12c>)
 800148c:	4827      	ldr	r0, [pc, #156]	@ (800152c <MPU_Init+0x11c>)
 800148e:	f000 fd01 	bl	8001e94 <SendMessage>
 8001492:	e003      	b.n	800149c <MPU_Init+0x8c>
    } else {
    	SendMessage(&huart2, "Not Configuring Accelerometer \n");
 8001494:	492a      	ldr	r1, [pc, #168]	@ (8001540 <MPU_Init+0x130>)
 8001496:	4825      	ldr	r0, [pc, #148]	@ (800152c <MPU_Init+0x11c>)
 8001498:	f000 fcfc 	bl	8001e94 <SendMessage>
    }

    ret = MPU_Set_Accel_Fsr(0);	//Configuring Gyroscope
 800149c:	2000      	movs	r0, #0
 800149e:	f000 f8dc 	bl	800165a <MPU_Set_Accel_Fsr>
 80014a2:	4603      	mov	r3, r0
 80014a4:	70fb      	strb	r3, [r7, #3]
    if (ret == HAL_OK){
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d104      	bne.n	80014b6 <MPU_Init+0xa6>
    	SendMessage(&huart2, "Configuring Gyroscope \n");
 80014ac:	4925      	ldr	r1, [pc, #148]	@ (8001544 <MPU_Init+0x134>)
 80014ae:	481f      	ldr	r0, [pc, #124]	@ (800152c <MPU_Init+0x11c>)
 80014b0:	f000 fcf0 	bl	8001e94 <SendMessage>
 80014b4:	e003      	b.n	80014be <MPU_Init+0xae>
    } else {
    	SendMessage(&huart2, "Not Configuring Gyroscope \n");
 80014b6:	4924      	ldr	r1, [pc, #144]	@ (8001548 <MPU_Init+0x138>)
 80014b8:	481c      	ldr	r0, [pc, #112]	@ (800152c <MPU_Init+0x11c>)
 80014ba:	f000 fceb 	bl	8001e94 <SendMessage>
    }

    MPU_Set_Rate(50);						//设置采样率--50Hz
 80014be:	2032      	movs	r0, #50	@ 0x32
 80014c0:	f000 f90d 	bl	80016de <MPU_Set_Rate>
    MPU_Write_Byte(MPU_INT_EN_REG,0X00);	//关闭所有中断
 80014c4:	2100      	movs	r1, #0
 80014c6:	2038      	movs	r0, #56	@ 0x38
 80014c8:	f000 f866 	bl	8001598 <MPU_Write_Byte>
    MPU_Write_Byte(MPU_USER_CTRL_REG,0X00);	//I2C主模式关闭
 80014cc:	2100      	movs	r1, #0
 80014ce:	206a      	movs	r0, #106	@ 0x6a
 80014d0:	f000 f862 	bl	8001598 <MPU_Write_Byte>
    MPU_Write_Byte(MPU_FIFO_EN_REG,0X00);	//关闭FIFO
 80014d4:	2100      	movs	r1, #0
 80014d6:	2023      	movs	r0, #35	@ 0x23
 80014d8:	f000 f85e 	bl	8001598 <MPU_Write_Byte>
    MPU_Write_Byte(MPU_INTBP_CFG_REG,0X80);	//INT引脚低电平有效
 80014dc:	2180      	movs	r1, #128	@ 0x80
 80014de:	2037      	movs	r0, #55	@ 0x37
 80014e0:	f000 f85a 	bl	8001598 <MPU_Write_Byte>

    ret = MPU_Read_Byte(MPU_DEVICE_ID_REG, templete_data);
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	2075      	movs	r0, #117	@ 0x75
 80014e8:	f000 f87e 	bl	80015e8 <MPU_Read_Byte>
 80014ec:	4603      	mov	r3, r0
 80014ee:	70fb      	strb	r3, [r7, #3]
	printf("\r\nMPU6050:0x%2x\r\n", *templete_data);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4815      	ldr	r0, [pc, #84]	@ (800154c <MPU_Init+0x13c>)
 80014f8:	f004 fe74 	bl	80061e4 <iprintf>
    if(*templete_data == MPU_ADDR)//器件ID正确
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b68      	cmp	r3, #104	@ 0x68
 8001502:	d109      	bne.n	8001518 <MPU_Init+0x108>
    {
    	MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X01);	//设置CLKSEL--PLL|X轴为参考
 8001504:	2101      	movs	r1, #1
 8001506:	206b      	movs	r0, #107	@ 0x6b
 8001508:	f000 f846 	bl	8001598 <MPU_Write_Byte>
    	MPU_Write_Byte(MPU_PWR_MGMT2_REG,0X00);	//加速度与陀螺仪都工作
 800150c:	2100      	movs	r1, #0
 800150e:	206c      	movs	r0, #108	@ 0x6c
 8001510:	f000 f842 	bl	8001598 <MPU_Write_Byte>
    } else {
    	return 0;
    }
    return 1;
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <MPU_Init+0x10a>
    	return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000004 	.word	0x20000004
 8001528:	0800b730 	.word	0x0800b730
 800152c:	20000338 	.word	0x20000338
 8001530:	0800b748 	.word	0x0800b748
 8001534:	0800b764 	.word	0x0800b764
 8001538:	0800b780 	.word	0x0800b780
 800153c:	0800b7a0 	.word	0x0800b7a0
 8001540:	0800b7bc 	.word	0x0800b7bc
 8001544:	0800b7dc 	.word	0x0800b7dc
 8001548:	0800b7f4 	.word	0x0800b7f4
 800154c:	0800b810 	.word	0x0800b810

08001550 <MPU_Read_Len>:
    HAL_Delay(100);

    return ret;
}

HAL_StatusTypeDef MPU_Read_Len(uint8_t reg,uint8_t len,uint8_t *buf){
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af04      	add	r7, sp, #16
 8001556:	4603      	mov	r3, r0
 8001558:	603a      	str	r2, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
 800155c:	460b      	mov	r3, r1
 800155e:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef ret;
    ret = HAL_I2C_Mem_Read(mpu_i2c_handlePtr, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 0xfff);
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <MPU_Read_Len+0x44>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	b29a      	uxth	r2, r3
 8001568:	79bb      	ldrb	r3, [r7, #6]
 800156a:	b29b      	uxth	r3, r3
 800156c:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8001570:	9102      	str	r1, [sp, #8]
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	21d1      	movs	r1, #209	@ 0xd1
 800157c:	f001 fc3e 	bl	8002dfc <HAL_I2C_Mem_Read>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(100);
 8001584:	2064      	movs	r0, #100	@ 0x64
 8001586:	f000 ff53 	bl	8002430 <HAL_Delay>

    return ret;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000004 	.word	0x20000004

08001598 <MPU_Write_Byte>:

HAL_StatusTypeDef MPU_Write_Byte(uint8_t reg,uint8_t data){
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	4603      	mov	r3, r0
 80015a0:	460a      	mov	r2, r1
 80015a2:	71fb      	strb	r3, [r7, #7]
 80015a4:	4613      	mov	r3, r2
 80015a6:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef ret;
    unsigned char W_Data=0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73bb      	strb	r3, [r7, #14]
    W_Data = data;
 80015ac:	79bb      	ldrb	r3, [r7, #6]
 80015ae:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(mpu_i2c_handlePtr, MPU_WRITE, reg, I2C_MEMADD_SIZE_8BIT, &W_Data, 1, 0xfff);
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MPU_Write_Byte+0x4c>)
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80015bc:	9302      	str	r3, [sp, #8]
 80015be:	2301      	movs	r3, #1
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	f107 030e 	add.w	r3, r7, #14
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2301      	movs	r3, #1
 80015ca:	21d0      	movs	r1, #208	@ 0xd0
 80015cc:	f001 fb1c 	bl	8002c08 <HAL_I2C_Mem_Write>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(100);
 80015d4:	2064      	movs	r0, #100	@ 0x64
 80015d6:	f000 ff2b 	bl	8002430 <HAL_Delay>

    return ret;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000004 	.word	0x20000004

080015e8 <MPU_Read_Byte>:

HAL_StatusTypeDef MPU_Read_Byte(uint8_t reg,uint8_t *data){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af04      	add	r7, sp, #16
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef ret;
    unsigned char R_Data=0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Read(mpu_i2c_handlePtr, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, &R_Data, 1, 0xfff);
 80015f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <MPU_Read_Byte+0x4c>)
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001604:	9302      	str	r3, [sp, #8]
 8001606:	2301      	movs	r3, #1
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	f107 030e 	add.w	r3, r7, #14
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	21d1      	movs	r1, #209	@ 0xd1
 8001614:	f001 fbf2 	bl	8002dfc <HAL_I2C_Mem_Read>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
    *data = R_Data;
 800161c:	7bba      	ldrb	r2, [r7, #14]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	701a      	strb	r2, [r3, #0]
    HAL_Delay(100);
 8001622:	2064      	movs	r0, #100	@ 0x64
 8001624:	f000 ff04 	bl	8002430 <HAL_Delay>

    return ret;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000004 	.word	0x20000004

08001638 <MPU_Set_Gyro_Fsr>:

/*-------------------------------------------------------------*/

HAL_StatusTypeDef MPU_Set_Gyro_Fsr(uint8_t fsr){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]

	return MPU_Write_Byte(MPU_GYRO_CFG_REG,fsr<<3);  //设置陀螺仪满量程范围
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	4619      	mov	r1, r3
 800164a:	201b      	movs	r0, #27
 800164c:	f7ff ffa4 	bl	8001598 <MPU_Write_Byte>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <MPU_Set_Accel_Fsr>:

HAL_StatusTypeDef MPU_Set_Accel_Fsr(uint8_t fsr){
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]

	return MPU_Write_Byte(MPU_ACCEL_CFG_REG,fsr<<3);  //设置加速度传感器满量程范围
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4619      	mov	r1, r3
 800166c:	201c      	movs	r0, #28
 800166e:	f7ff ff93 	bl	8001598 <MPU_Write_Byte>
 8001672:	4603      	mov	r3, r0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <MPU_Set_LPF>:

HAL_StatusTypeDef MPU_Set_LPF(uint16_t lpf){
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]

	uint8_t data=0;
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
	if(lpf>=188)data=1;
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	2bbb      	cmp	r3, #187	@ 0xbb
 800168e:	d902      	bls.n	8001696 <MPU_Set_LPF+0x1a>
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e019      	b.n	80016ca <MPU_Set_LPF+0x4e>
	else if(lpf>=98)data=2;
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	2b61      	cmp	r3, #97	@ 0x61
 800169a:	d902      	bls.n	80016a2 <MPU_Set_LPF+0x26>
 800169c:	2302      	movs	r3, #2
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e013      	b.n	80016ca <MPU_Set_LPF+0x4e>
	else if(lpf>=42)data=3;
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	2b29      	cmp	r3, #41	@ 0x29
 80016a6:	d902      	bls.n	80016ae <MPU_Set_LPF+0x32>
 80016a8:	2303      	movs	r3, #3
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e00d      	b.n	80016ca <MPU_Set_LPF+0x4e>
	else if(lpf>=20)data=4;
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	2b13      	cmp	r3, #19
 80016b2:	d902      	bls.n	80016ba <MPU_Set_LPF+0x3e>
 80016b4:	2304      	movs	r3, #4
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e007      	b.n	80016ca <MPU_Set_LPF+0x4e>
	else if(lpf>=10)data=5;
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	2b09      	cmp	r3, #9
 80016be:	d902      	bls.n	80016c6 <MPU_Set_LPF+0x4a>
 80016c0:	2305      	movs	r3, #5
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e001      	b.n	80016ca <MPU_Set_LPF+0x4e>
	else data=6;
 80016c6:	2306      	movs	r3, #6
 80016c8:	73fb      	strb	r3, [r7, #15]
	return MPU_Write_Byte(MPU_CFG_REG,data);  //设置数字低通滤波器
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	4619      	mov	r1, r3
 80016ce:	201a      	movs	r0, #26
 80016d0:	f7ff ff62 	bl	8001598 <MPU_Write_Byte>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <MPU_Set_Rate>:

HAL_StatusTypeDef MPU_Set_Rate(uint16_t rate){
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	80fb      	strh	r3, [r7, #6]

	uint8_t data;
	if(rate>1000)rate=1000;
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016ee:	d902      	bls.n	80016f6 <MPU_Set_Rate+0x18>
 80016f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f4:	80fb      	strh	r3, [r7, #6]
	if(rate<4)rate=4;
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d801      	bhi.n	8001700 <MPU_Set_Rate+0x22>
 80016fc:	2304      	movs	r3, #4
 80016fe:	80fb      	strh	r3, [r7, #6]
	data=1000/rate-1;
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001706:	fb92 f3f3 	sdiv	r3, r2, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	3b01      	subs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
	data=MPU_Write_Byte(MPU_SAMPLE_RATE_REG,data);	//设置数字低通滤波器
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	4619      	mov	r1, r3
 8001714:	2019      	movs	r0, #25
 8001716:	f7ff ff3f 	bl	8001598 <MPU_Write_Byte>
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]
 	return MPU_Set_LPF(rate/2);	  //自动设置LPF为采样率的一半
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	085b      	lsrs	r3, r3, #1
 8001722:	b29b      	uxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ffa9 	bl	800167c <MPU_Set_LPF>
 800172a:	4603      	mov	r3, r0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <MPU_Get_Gyroscope_Data>:

/*-------------------------------------------------------------*/

HAL_StatusTypeDef MPU_Get_Gyroscope_Data(int16_t *gx,int16_t *gy,int16_t *gz){
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef ret;
    uint8_t buf[6];
	ret = MPU_Read_Len(MPU_GYRO_XOUTH_REG, 6, buf);
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	461a      	mov	r2, r3
 8001746:	2106      	movs	r1, #6
 8001748:	2043      	movs	r0, #67	@ 0x43
 800174a:	f7ff ff01 	bl	8001550 <MPU_Read_Len>
 800174e:	4603      	mov	r3, r0
 8001750:	75fb      	strb	r3, [r7, #23]
	if(ret == HAL_OK){
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d11a      	bne.n	800178e <MPU_Get_Gyroscope_Data+0x5a>
		*gx = (((uint16_t)buf[0] << 8) | buf[1]);
 8001758:	7c3b      	ldrb	r3, [r7, #16]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21a      	sxth	r2, r3
 800175e:	7c7b      	ldrb	r3, [r7, #17]
 8001760:	b21b      	sxth	r3, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	b21a      	sxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	801a      	strh	r2, [r3, #0]
		*gy = (((uint16_t)buf[2] << 8) | buf[3]);
 800176a:	7cbb      	ldrb	r3, [r7, #18]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	b21a      	sxth	r2, r3
 8001770:	7cfb      	ldrb	r3, [r7, #19]
 8001772:	b21b      	sxth	r3, r3
 8001774:	4313      	orrs	r3, r2
 8001776:	b21a      	sxth	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	801a      	strh	r2, [r3, #0]
		*gz = (((uint16_t)buf[4] << 8) | buf[5]);
 800177c:	7d3b      	ldrb	r3, [r7, #20]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b21a      	sxth	r2, r3
 8001782:	7d7b      	ldrb	r3, [r7, #21]
 8001784:	b21b      	sxth	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	b21a      	sxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	801a      	strh	r2, [r3, #0]
	}
    return ret;
 800178e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <MPU_Get_Accelerometer_Data>:


HAL_StatusTypeDef MPU_Get_Accelerometer_Data(int16_t *ax,int16_t *ay,int16_t *az){
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef ret;
    uint8_t buf[6];
	ret = MPU_Read_Len(MPU_ACCEL_XOUTH_REG, 6, buf);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	461a      	mov	r2, r3
 80017aa:	2106      	movs	r1, #6
 80017ac:	203b      	movs	r0, #59	@ 0x3b
 80017ae:	f7ff fecf 	bl	8001550 <MPU_Read_Len>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]
	if(ret == HAL_OK){
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d11a      	bne.n	80017f2 <MPU_Get_Accelerometer_Data+0x5a>
		*ax = (((uint16_t)buf[0] << 8) | buf[1]);
 80017bc:	7c3b      	ldrb	r3, [r7, #16]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	7c7b      	ldrb	r3, [r7, #17]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	801a      	strh	r2, [r3, #0]
		*ay = (((uint16_t)buf[2] << 8) | buf[3]);
 80017ce:	7cbb      	ldrb	r3, [r7, #18]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	7cfb      	ldrb	r3, [r7, #19]
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	4313      	orrs	r3, r2
 80017da:	b21a      	sxth	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	801a      	strh	r2, [r3, #0]
		*az = (((uint16_t)buf[4] << 8) | buf[5]);
 80017e0:	7d3b      	ldrb	r3, [r7, #20]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	7d7b      	ldrb	r3, [r7, #21]
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	801a      	strh	r2, [r3, #0]
	}
    return ret;;
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <MPU_Calibrate_Accel_Data>:

/*-------------------------------------------------------------*/

HAL_StatusTypeDef MPU_Calibrate_Accel_Data(int16_t *accel_bias) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret;
    int32_t sum_ax = 0, sum_ay = 0, sum_az = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
    const uint16_t num_samples = 500;  // 采样数（越多越精确）
 8001810:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001814:	827b      	strh	r3, [r7, #18]

    for (int i = 0; i < num_samples; i++) {
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e023      	b.n	8001864 <MPU_Calibrate_Accel_Data+0x68>

        int16_t ax, ay, az;
        ret = MPU_Get_Accelerometer_Data(&ax, &ay, &az);
 800181c:	f107 020c 	add.w	r2, r7, #12
 8001820:	f107 010e 	add.w	r1, r7, #14
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ffb5 	bl	8001798 <MPU_Get_Accelerometer_Data>
 800182e:	4603      	mov	r3, r0
 8001830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        sum_ax += ax;
 8001834:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001838:	461a      	mov	r2, r3
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	4413      	add	r3, r2
 800183e:	623b      	str	r3, [r7, #32]
        sum_ay += ay;
 8001840:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001844:	461a      	mov	r2, r3
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4413      	add	r3, r2
 800184a:	61fb      	str	r3, [r7, #28]
        sum_az += az;
 800184c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001850:	461a      	mov	r2, r3
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4413      	add	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        HAL_Delay(2);  // 控制采样间隔
 8001858:	2002      	movs	r0, #2
 800185a:	f000 fde9 	bl	8002430 <HAL_Delay>
    for (int i = 0; i < num_samples; i++) {
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	8a7b      	ldrh	r3, [r7, #18]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbd7      	blt.n	800181c <MPU_Calibrate_Accel_Data+0x20>

    }

    // 计算平均偏移（理想静止时 az 应为 1g，其他轴为 0）
    accel_bias[0] = sum_ax / num_samples;
 800186c:	8a7b      	ldrh	r3, [r7, #18]
 800186e:	6a3a      	ldr	r2, [r7, #32]
 8001870:	fb92 f3f3 	sdiv	r3, r2, r3
 8001874:	b21a      	sxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	801a      	strh	r2, [r3, #0]
    accel_bias[1] = sum_ay / num_samples;
 800187a:	8a7b      	ldrh	r3, [r7, #18]
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3302      	adds	r3, #2
 8001886:	b212      	sxth	r2, r2
 8001888:	801a      	strh	r2, [r3, #0]
    accel_bias[2] = sum_az / num_samples - (int16_t)(1.0f * ACCEL_SCALE); // 减去理论重力值（±2g 时 16384 = 1g）
 800188a:	8a7b      	ldrh	r3, [r7, #18]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3304      	adds	r3, #4
 800189e:	b212      	sxth	r2, r2
 80018a0:	801a      	strh	r2, [r3, #0]

    return ret;
 80018a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3728      	adds	r7, #40	@ 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <MPU_Calibrate_Gyro_Data>:

HAL_StatusTypeDef MPU_Calibrate_Gyro_Data(int16_t *gyro_bias) {
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b08a      	sub	sp, #40	@ 0x28
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret;
    int32_t sum_gx = 0, sum_gy = 0, sum_gz = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
    const uint16_t num_samples = 500;
 80018c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80018c6:	827b      	strh	r3, [r7, #18]

    for (int i = 0; i < num_samples; i++) {
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e023      	b.n	8001916 <MPU_Calibrate_Gyro_Data+0x68>
        int16_t gx, gy, gz;
        ret = MPU_Get_Gyroscope_Data(&gx, &gy, &gz);
 80018ce:	f107 020c 	add.w	r2, r7, #12
 80018d2:	f107 010e 	add.w	r1, r7, #14
 80018d6:	f107 0310 	add.w	r3, r7, #16
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff2a 	bl	8001734 <MPU_Get_Gyroscope_Data>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        sum_gx += gx;
 80018e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018ea:	461a      	mov	r2, r3
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	4413      	add	r3, r2
 80018f0:	623b      	str	r3, [r7, #32]
        sum_gy += gy;
 80018f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018f6:	461a      	mov	r2, r3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	61fb      	str	r3, [r7, #28]
        sum_gz += gz;
 80018fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001902:	461a      	mov	r2, r3
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	4413      	add	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        HAL_Delay(2);  // 控制采样间隔
 800190a:	2002      	movs	r0, #2
 800190c:	f000 fd90 	bl	8002430 <HAL_Delay>
    for (int i = 0; i < num_samples; i++) {
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	8a7b      	ldrh	r3, [r7, #18]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	429a      	cmp	r2, r3
 800191c:	dbd7      	blt.n	80018ce <MPU_Calibrate_Gyro_Data+0x20>
    }

    gyro_bias[0] = sum_gx / num_samples;  // X 轴偏移
 800191e:	8a7b      	ldrh	r3, [r7, #18]
 8001920:	6a3a      	ldr	r2, [r7, #32]
 8001922:	fb92 f3f3 	sdiv	r3, r2, r3
 8001926:	b21a      	sxth	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	801a      	strh	r2, [r3, #0]
    gyro_bias[1] = sum_gy / num_samples;  // Y 轴偏移
 800192c:	8a7b      	ldrh	r3, [r7, #18]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	fb92 f2f3 	sdiv	r2, r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3302      	adds	r3, #2
 8001938:	b212      	sxth	r2, r2
 800193a:	801a      	strh	r2, [r3, #0]
    gyro_bias[2] = sum_gz / num_samples;  // Z 轴偏移
 800193c:	8a7b      	ldrh	r3, [r7, #18]
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	fb92 f2f3 	sdiv	r2, r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3304      	adds	r3, #4
 8001948:	b212      	sxth	r2, r2
 800194a:	801a      	strh	r2, [r3, #0]

    return ret;
 800194c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001950:	4618      	mov	r0, r3
 8001952:	3728      	adds	r7, #40	@ 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <MPU_Get_Gyroscope>:

/*-------------------------------------------------------------*/

HAL_StatusTypeDef MPU_Get_Gyroscope(float *gx,float *gy,float *gz, int16_t *gyro_bias){
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef ret;
    int16_t gx_data, gy_data, gz_data;
	ret = MPU_Get_Gyroscope_Data(&gx_data, &gy_data, &gz_data);
 8001966:	f107 0210 	add.w	r2, r7, #16
 800196a:	f107 0112 	add.w	r1, r7, #18
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fede 	bl	8001734 <MPU_Get_Gyroscope_Data>
 8001978:	4603      	mov	r3, r0
 800197a:	75fb      	strb	r3, [r7, #23]
	if(ret == HAL_OK){
 800197c:	7dfb      	ldrb	r3, [r7, #23]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d137      	bne.n	80019f2 <MPU_Get_Gyroscope+0x9a>
		*gx = (gx_data - gyro_bias[0]) / GYRO_SCALE;
 8001982:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001986:	461a      	mov	r2, r3
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001998:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80019fc <MPU_Get_Gyroscope+0xa4>
 800199c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	edc3 7a00 	vstr	s15, [r3]
		*gy = (gx_data - gyro_bias[1]) / GYRO_SCALE;
 80019a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019aa:	461a      	mov	r2, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	3302      	adds	r3, #2
 80019b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019be:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80019fc <MPU_Get_Gyroscope+0xa4>
 80019c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	edc3 7a00 	vstr	s15, [r3]
		*gz = (gz_data - gyro_bias[2]) / GYRO_SCALE;
 80019cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019d0:	461a      	mov	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3304      	adds	r3, #4
 80019d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e4:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80019fc <MPU_Get_Gyroscope+0xa4>
 80019e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	edc3 7a00 	vstr	s15, [r3]
	}
    return ret;
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	41833333 	.word	0x41833333

08001a00 <MPU_Get_Accelerometer>:

HAL_StatusTypeDef MPU_Get_Accelerometer(float *ax,float *ay,float *az, int16_t *accel_bias){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef ret;
    int16_t ax_data, ay_data, az_data;
    ret = MPU_Get_Accelerometer_Data(&ax_data, &ay_data, &az_data);
 8001a0e:	f107 0210 	add.w	r2, r7, #16
 8001a12:	f107 0112 	add.w	r1, r7, #18
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff febc 	bl	8001798 <MPU_Get_Accelerometer_Data>
 8001a20:	4603      	mov	r3, r0
 8001a22:	75fb      	strb	r3, [r7, #23]
	if(ret == HAL_OK){
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d137      	bne.n	8001a9a <MPU_Get_Accelerometer+0x9a>
		*ax = (ax_data - accel_bias[0]) / ACCEL_SCALE;
 8001a2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a40:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001aa4 <MPU_Get_Accelerometer+0xa4>
 8001a44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
		*ay = (ay_data - accel_bias[1]) / ACCEL_SCALE;
 8001a4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a52:	461a      	mov	r2, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3302      	adds	r3, #2
 8001a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	ee07 3a90 	vmov	s15, r3
 8001a62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a66:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001aa4 <MPU_Get_Accelerometer+0xa4>
 8001a6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	edc3 7a00 	vstr	s15, [r3]
		*az = (az_data - accel_bias[2]) / ACCEL_SCALE;
 8001a74:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a8c:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001aa4 <MPU_Get_Accelerometer+0xa4>
 8001a90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	edc3 7a00 	vstr	s15, [r3]
	}
    return ret;;
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	46800000 	.word	0x46800000

08001aa8 <AngleProcessor_Init>:
    temp = (36.53 + ((double)raw)/340) * 100;  //  temp = (long)((35 + (raw / 340)) * 65536L);

    return temp/100.0f;
}

void AngleProcessor_Init(AngleProcessor* processor, float Q, float R) {
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ab4:	edc7 0a01 	vstr	s1, [r7, #4]

	processor->Q = Q;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	601a      	str	r2, [r3, #0]
	processor->R = R;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	605a      	str	r2, [r3, #4]
	processor->P = 1.0f;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001aca:	609a      	str	r2, [r3, #8]
	processor->K = 0.0f;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]

	processor->roll_hat = 0.0f;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
	processor->pitch_hat = 0.0f;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	615a      	str	r2, [r3, #20]

}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <MPU_Get_Angle_KalmanFilter>:

void MPU_Get_Angle_KalmanFilter(int16_t* accel_bias ,int16_t* gyro_bias, AngleProcessor* processor, float time_interval){
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b094      	sub	sp, #80	@ 0x50
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	ed87 0a00 	vstr	s0, [r7]

	float dt = time_interval;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	64bb      	str	r3, [r7, #72]	@ 0x48
	float denominator = 0.0f;
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float gx, gy, gz;
	float roll_angle_gyro, pitch_angle_gyro;
	float roll_angle = processor->roll_hat, pitch_angle = processor->pitch_hat;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	643b      	str	r3, [r7, #64]	@ 0x40

	float ax, ay, az;
	float roll_v, pitch_v;
	float roll_angle_accel, pitch_angle_accel;

	MPU_Get_Gyroscope(&gx, &gy, &gz, gyro_bias);
 8001b18:	f107 021c 	add.w	r2, r7, #28
 8001b1c:	f107 0120 	add.w	r1, r7, #32
 8001b20:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f7ff ff17 	bl	8001958 <MPU_Get_Gyroscope>
	roll_v = gx + (sin(roll_angle)*tan(pitch_angle))*gy + (cos(roll_angle)*tan(pitch_angle))*gz;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fd13 	bl	8000558 <__aeabi_f2d>
 8001b32:	4680      	mov	r8, r0
 8001b34:	4689      	mov	r9, r1
 8001b36:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b38:	f7fe fd0e 	bl	8000558 <__aeabi_f2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	ec43 2b10 	vmov	d0, r2, r3
 8001b44:	f008 f820 	bl	8009b88 <sin>
 8001b48:	ec5b ab10 	vmov	sl, fp, d0
 8001b4c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001b4e:	f7fe fd03 	bl	8000558 <__aeabi_f2d>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	ec43 2b10 	vmov	d0, r2, r3
 8001b5a:	f008 f869 	bl	8009c30 <tan>
 8001b5e:	ec53 2b10 	vmov	r2, r3, d0
 8001b62:	4650      	mov	r0, sl
 8001b64:	4659      	mov	r1, fp
 8001b66:	f7fe fd4f 	bl	8000608 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4692      	mov	sl, r2
 8001b70:	469b      	mov	fp, r3
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fcef 	bl	8000558 <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4650      	mov	r0, sl
 8001b80:	4659      	mov	r1, fp
 8001b82:	f7fe fd41 	bl	8000608 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4640      	mov	r0, r8
 8001b8c:	4649      	mov	r1, r9
 8001b8e:	f7fe fb85 	bl	800029c <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4690      	mov	r8, r2
 8001b98:	4699      	mov	r9, r3
 8001b9a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b9c:	f7fe fcdc 	bl	8000558 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	ec43 2b10 	vmov	d0, r2, r3
 8001ba8:	f007 ff9a 	bl	8009ae0 <cos>
 8001bac:	ec5b ab10 	vmov	sl, fp, d0
 8001bb0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001bb2:	f7fe fcd1 	bl	8000558 <__aeabi_f2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	ec43 2b10 	vmov	d0, r2, r3
 8001bbe:	f008 f837 	bl	8009c30 <tan>
 8001bc2:	ec53 2b10 	vmov	r2, r3, d0
 8001bc6:	4650      	mov	r0, sl
 8001bc8:	4659      	mov	r1, fp
 8001bca:	f7fe fd1d 	bl	8000608 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4692      	mov	sl, r2
 8001bd4:	469b      	mov	fp, r3
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fcbd 	bl	8000558 <__aeabi_f2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4650      	mov	r0, sl
 8001be4:	4659      	mov	r1, fp
 8001be6:	f7fe fd0f 	bl	8000608 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4640      	mov	r0, r8
 8001bf0:	4649      	mov	r1, r9
 8001bf2:	f7fe fb53 	bl	800029c <__adddf3>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7fe fffb 	bl	8000bf8 <__aeabi_d2f>
 8001c02:	4603      	mov	r3, r0
 8001c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
	pitch_v = cos(roll_angle)*gy - sin(roll_angle)*gz;
 8001c06:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c08:	f7fe fca6 	bl	8000558 <__aeabi_f2d>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	ec43 2b10 	vmov	d0, r2, r3
 8001c14:	f007 ff64 	bl	8009ae0 <cos>
 8001c18:	ec59 8b10 	vmov	r8, r9, d0
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc9a 	bl	8000558 <__aeabi_f2d>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4640      	mov	r0, r8
 8001c2a:	4649      	mov	r1, r9
 8001c2c:	f7fe fcec 	bl	8000608 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4690      	mov	r8, r2
 8001c36:	4699      	mov	r9, r3
 8001c38:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c3a:	f7fe fc8d 	bl	8000558 <__aeabi_f2d>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	ec43 2b10 	vmov	d0, r2, r3
 8001c46:	f007 ff9f 	bl	8009b88 <sin>
 8001c4a:	ec5b ab10 	vmov	sl, fp, d0
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc81 	bl	8000558 <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4650      	mov	r0, sl
 8001c5c:	4659      	mov	r1, fp
 8001c5e:	f7fe fcd3 	bl	8000608 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4640      	mov	r0, r8
 8001c68:	4649      	mov	r1, r9
 8001c6a:	f7fe fb15 	bl	8000298 <__aeabi_dsub>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe ffbf 	bl	8000bf8 <__aeabi_d2f>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
	roll_angle_gyro = roll_angle + roll_v * dt;
 8001c7e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001c82:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c92:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	pitch_angle_gyro = pitch_angle + pitch_v * dt;
 8001c96:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001c9a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001caa:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	MPU_Get_Accelerometer(&ax, &ay, &az, accel_bias);
 8001cae:	f107 0210 	add.w	r2, r7, #16
 8001cb2:	f107 0114 	add.w	r1, r7, #20
 8001cb6:	f107 0018 	add.w	r0, r7, #24
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f7ff fea0 	bl	8001a00 <MPU_Get_Accelerometer>

	denominator = az;
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (fabs(denominator) < 1e-6) {denominator = 1e-6f;}  // 避免除零
 8001cc4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001cc8:	eef0 7ae7 	vabs.f32	s15, s15
 8001ccc:	ee17 0a90 	vmov	r0, s15
 8001cd0:	f7fe fc42 	bl	8000558 <__aeabi_f2d>
 8001cd4:	a36c      	add	r3, pc, #432	@ (adr r3, 8001e88 <MPU_Get_Angle_KalmanFilter+0x398>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe ff07 	bl	8000aec <__aeabi_dcmplt>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MPU_Get_Angle_KalmanFilter+0x1f8>
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e90 <MPU_Get_Angle_KalmanFilter+0x3a0>)
 8001ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	roll_angle_accel = atan2(ay, denominator) * 57.296f;   // arctan returns: -pi tp pi -- 180/pi = 57.296;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc34 	bl	8000558 <__aeabi_f2d>
 8001cf0:	4680      	mov	r8, r0
 8001cf2:	4689      	mov	r9, r1
 8001cf4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001cf6:	f7fe fc2f 	bl	8000558 <__aeabi_f2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	ec43 2b11 	vmov	d1, r2, r3
 8001d02:	ec49 8b10 	vmov	d0, r8, r9
 8001d06:	f007 febd 	bl	8009a84 <atan2>
 8001d0a:	ec51 0b10 	vmov	r0, r1, d0
 8001d0e:	a35c      	add	r3, pc, #368	@ (adr r3, 8001e80 <MPU_Get_Angle_KalmanFilter+0x390>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fc78 	bl	8000608 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe ff6a 	bl	8000bf8 <__aeabi_d2f>
 8001d24:	4603      	mov	r3, r0
 8001d26:	62fb      	str	r3, [r7, #44]	@ 0x2c

	denominator = sqrt(ay*ay + az*az);
 8001d28:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d34:	edd7 6a04 	vldr	s13, [r7, #16]
 8001d38:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	ee17 0a90 	vmov	r0, s15
 8001d48:	f7fe fc06 	bl	8000558 <__aeabi_f2d>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	ec43 2b10 	vmov	d0, r2, r3
 8001d54:	f007 fe98 	bl	8009a88 <sqrt>
 8001d58:	ec53 2b10 	vmov	r2, r3, d0
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe ff4a 	bl	8000bf8 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (fabs(denominator) < 1e-6) {denominator = 1e-6f;}
 8001d68:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d6c:	eef0 7ae7 	vabs.f32	s15, s15
 8001d70:	ee17 0a90 	vmov	r0, s15
 8001d74:	f7fe fbf0 	bl	8000558 <__aeabi_f2d>
 8001d78:	a343      	add	r3, pc, #268	@ (adr r3, 8001e88 <MPU_Get_Angle_KalmanFilter+0x398>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe feb5 	bl	8000aec <__aeabi_dcmplt>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MPU_Get_Angle_KalmanFilter+0x29c>
 8001d88:	4b41      	ldr	r3, [pc, #260]	@ (8001e90 <MPU_Get_Angle_KalmanFilter+0x3a0>)
 8001d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	pitch_angle_accel = -atan2(ax, denominator) * 57.296f;
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbe2 	bl	8000558 <__aeabi_f2d>
 8001d94:	4680      	mov	r8, r0
 8001d96:	4689      	mov	r9, r1
 8001d98:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001d9a:	f7fe fbdd 	bl	8000558 <__aeabi_f2d>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	ec43 2b11 	vmov	d1, r2, r3
 8001da6:	ec49 8b10 	vmov	d0, r8, r9
 8001daa:	f007 fe6b 	bl	8009a84 <atan2>
 8001dae:	ec53 2b10 	vmov	r2, r3, d0
 8001db2:	4614      	mov	r4, r2
 8001db4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001db8:	a331      	add	r3, pc, #196	@ (adr r3, 8001e80 <MPU_Get_Angle_KalmanFilter+0x390>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	4629      	mov	r1, r5
 8001dc2:	f7fe fc21 	bl	8000608 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe ff13 	bl	8000bf8 <__aeabi_d2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	62bb      	str	r3, [r7, #40]	@ 0x28

	processor->P = processor->P + processor->Q;                 // 协方差时间更新(P_k-1 -> P_k')
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	edc3 7a02 	vstr	s15, [r3, #8]
	processor->K = processor->P / (processor->P + processor->R);       // 卡尔曼增益更新 (K_k)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	edd3 6a02 	vldr	s13, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	edc3 7a03 	vstr	s15, [r3, #12]

	processor->roll_hat = roll_angle_gyro + processor->K * (roll_angle_accel - processor->roll_hat); //  数据融合 X_hat = X_hat' + K_k*(X_measure - X_hat')
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e18:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001e1c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e24:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	edc3 7a04 	vstr	s15, [r3, #16]
	processor->pitch_hat = pitch_angle_gyro + processor->K * (pitch_angle_accel - processor->pitch_hat); //  数据融合 X_hat = X_hat' + K_k*(X_measure - X_hat')
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e3e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001e42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	edc3 7a05 	vstr	s15, [r3, #20]

	processor->P *= (1 - processor->K);                  // 协方差后验更新(k' -> k)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001e76:	bf00      	nop
 8001e78:	3750      	adds	r7, #80	@ 0x50
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e80:	60000000 	.word	0x60000000
 8001e84:	404ca5e3 	.word	0x404ca5e3
 8001e88:	a0b5ed8d 	.word	0xa0b5ed8d
 8001e8c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001e90:	358637bd 	.word	0x358637bd

08001e94 <SendMessage>:

void SendMessage(UART_HandleTypeDef *huart, const char *text) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
    uint8_t is_sent = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
    if (!is_sent) {
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10c      	bne.n	8001ec2 <SendMessage+0x2e>
        HAL_UART_Transmit(huart, (uint8_t*)text, strlen(text), HAL_MAX_DELAY);
 8001ea8:	6838      	ldr	r0, [r7, #0]
 8001eaa:	f7fe f9e9 	bl	8000280 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	6839      	ldr	r1, [r7, #0]
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f002 fea9 	bl	8004c10 <HAL_UART_Transmit>
        is_sent = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
    }
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <HAL_MspInit+0x4c>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	4a0f      	ldr	r2, [pc, #60]	@ (8001f18 <HAL_MspInit+0x4c>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <HAL_MspInit+0x4c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_MspInit+0x4c>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <HAL_MspInit+0x4c>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_MspInit+0x4c>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <NMI_Handler+0x4>

08001f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <MemManage_Handler+0x4>

08001f34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f72:	f000 fa3d 	bl	80023f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  return 1;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_kill>:

int _kill(int pid, int sig)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f94:	f004 f9ee 	bl	8006374 <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2216      	movs	r2, #22
 8001f9c:	601a      	str	r2, [r3, #0]
  return -1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <_exit>:

void _exit (int status)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fb2:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ffe7 	bl	8001f8a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <_exit+0x12>

08001fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e00a      	b.n	8001fe8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fd2:	f3af 8000 	nop.w
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	60ba      	str	r2, [r7, #8]
 8001fde:	b2ca      	uxtb	r2, r1
 8001fe0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dbf0      	blt.n	8001fd2 <_read+0x12>
  }

  return len;
 8001ff0:	687b      	ldr	r3, [r7, #4]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e009      	b.n	8002020 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	60ba      	str	r2, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	dbf1      	blt.n	800200c <_write+0x12>
  }
  return len;
 8002028:	687b      	ldr	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_close>:

int _close(int file)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800205a:	605a      	str	r2, [r3, #4]
  return 0;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_isatty>:

int _isatty(int file)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	@ (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f004 f952 	bl	8006374 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	@ (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20018000 	.word	0x20018000
 80020fc:	00000400 	.word	0x00000400
 8002100:	200002ec 	.word	0x200002ec
 8002104:	200004d0 	.word	0x200004d0

08002108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0308 	add.w	r3, r7, #8
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	463b      	mov	r3, r7
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002148:	4b1f      	ldr	r3, [pc, #124]	@ (80021c8 <MX_TIM1_Init+0x9c>)
 800214a:	4a20      	ldr	r2, [pc, #128]	@ (80021cc <MX_TIM1_Init+0xa0>)
 800214c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 839;
 800214e:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <MX_TIM1_Init+0x9c>)
 8002150:	f240 3247 	movw	r2, #839	@ 0x347
 8002154:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b1c      	ldr	r3, [pc, #112]	@ (80021c8 <MX_TIM1_Init+0x9c>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 300;
 800215c:	4b1a      	ldr	r3, [pc, #104]	@ (80021c8 <MX_TIM1_Init+0x9c>)
 800215e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002162:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002164:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <MX_TIM1_Init+0x9c>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800216a:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <MX_TIM1_Init+0x9c>)
 800216c:	2200      	movs	r2, #0
 800216e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002170:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <MX_TIM1_Init+0x9c>)
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002176:	4814      	ldr	r0, [pc, #80]	@ (80021c8 <MX_TIM1_Init+0x9c>)
 8002178:	f002 f9ec 	bl	8004554 <HAL_TIM_Base_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002182:	f7ff f93f 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002186:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800218a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	4619      	mov	r1, r3
 8002192:	480d      	ldr	r0, [pc, #52]	@ (80021c8 <MX_TIM1_Init+0x9c>)
 8002194:	f002 fa90 	bl	80046b8 <HAL_TIM_ConfigClockSource>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800219e:	f7ff f931 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021aa:	463b      	mov	r3, r7
 80021ac:	4619      	mov	r1, r3
 80021ae:	4806      	ldr	r0, [pc, #24]	@ (80021c8 <MX_TIM1_Init+0x9c>)
 80021b0:	f002 fc70 	bl	8004a94 <HAL_TIMEx_MasterConfigSynchronization>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80021ba:	f7ff f923 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200002f0 	.word	0x200002f0
 80021cc:	40010000 	.word	0x40010000

080021d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0b      	ldr	r2, [pc, #44]	@ (800220c <HAL_TIM_Base_MspInit+0x3c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10d      	bne.n	80021fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_TIM_Base_MspInit+0x40>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	4a09      	ldr	r2, [pc, #36]	@ (8002210 <HAL_TIM_Base_MspInit+0x40>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021f2:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <HAL_TIM_Base_MspInit+0x40>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40010000 	.word	0x40010000
 8002210:	40023800 	.word	0x40023800

08002214 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002218:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <MX_USART2_UART_Init+0x4c>)
 800221a:	4a12      	ldr	r2, [pc, #72]	@ (8002264 <MX_USART2_UART_Init+0x50>)
 800221c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <MX_USART2_UART_Init+0x4c>)
 8002220:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <MX_USART2_UART_Init+0x4c>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800222c:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <MX_USART2_UART_Init+0x4c>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002232:	4b0b      	ldr	r3, [pc, #44]	@ (8002260 <MX_USART2_UART_Init+0x4c>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002238:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <MX_USART2_UART_Init+0x4c>)
 800223a:	220c      	movs	r2, #12
 800223c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223e:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <MX_USART2_UART_Init+0x4c>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <MX_USART2_UART_Init+0x4c>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800224a:	4805      	ldr	r0, [pc, #20]	@ (8002260 <MX_USART2_UART_Init+0x4c>)
 800224c:	f002 fc90 	bl	8004b70 <HAL_UART_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002256:	f7ff f8d5 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000338 	.word	0x20000338
 8002264:	40004400 	.word	0x40004400

08002268 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	@ 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a19      	ldr	r2, [pc, #100]	@ (80022ec <HAL_UART_MspInit+0x84>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d12b      	bne.n	80022e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_UART_MspInit+0x88>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <HAL_UART_MspInit+0x88>)
 8002294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_UART_MspInit+0x88>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_UART_MspInit+0x88>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a10      	ldr	r2, [pc, #64]	@ (80022f0 <HAL_UART_MspInit+0x88>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <HAL_UART_MspInit+0x88>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022c2:	230c      	movs	r3, #12
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022d2:	2307      	movs	r3, #7
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <HAL_UART_MspInit+0x8c>)
 80022de:	f000 f9b1 	bl	8002644 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	@ 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40004400 	.word	0x40004400
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020000 	.word	0x40020000

080022f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002330 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022fc:	f7ff ff04 	bl	8002108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002300:	480c      	ldr	r0, [pc, #48]	@ (8002334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002302:	490d      	ldr	r1, [pc, #52]	@ (8002338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002304:	4a0d      	ldr	r2, [pc, #52]	@ (800233c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002308:	e002      	b.n	8002310 <LoopCopyDataInit>

0800230a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800230c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230e:	3304      	adds	r3, #4

08002310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002314:	d3f9      	bcc.n	800230a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002316:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002318:	4c0a      	ldr	r4, [pc, #40]	@ (8002344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800231c:	e001      	b.n	8002322 <LoopFillZerobss>

0800231e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002320:	3204      	adds	r2, #4

08002322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002324:	d3fb      	bcc.n	800231e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002326:	f004 f82b 	bl	8006380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800232a:	f7fe ff47 	bl	80011bc <main>
  bx  lr    
 800232e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002330:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002338:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800233c:	0800bec0 	.word	0x0800bec0
  ldr r2, =_sbss
 8002340:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002344:	200004d0 	.word	0x200004d0

08002348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002348:	e7fe      	b.n	8002348 <ADC_IRQHandler>
	...

0800234c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002350:	4b0e      	ldr	r3, [pc, #56]	@ (800238c <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0d      	ldr	r2, [pc, #52]	@ (800238c <HAL_Init+0x40>)
 8002356:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800235a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <HAL_Init+0x40>)
 8002362:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002368:	4b08      	ldr	r3, [pc, #32]	@ (800238c <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a07      	ldr	r2, [pc, #28]	@ (800238c <HAL_Init+0x40>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002374:	2003      	movs	r0, #3
 8002376:	f000 f931 	bl	80025dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237a:	2000      	movs	r0, #0
 800237c:	f000 f808 	bl	8002390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002380:	f7ff fda4 	bl	8001ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023c00 	.word	0x40023c00

08002390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002398:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_InitTick+0x54>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_InitTick+0x58>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f93b 	bl	800262a <HAL_SYSTICK_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00e      	b.n	80023dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	d80a      	bhi.n	80023da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c4:	2200      	movs	r2, #0
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f000 f911 	bl	80025f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d0:	4a06      	ldr	r2, [pc, #24]	@ (80023ec <HAL_InitTick+0x5c>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000008 	.word	0x20000008
 80023e8:	20000010 	.word	0x20000010
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_IncTick+0x20>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_IncTick+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	@ (8002414 <HAL_IncTick+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000010 	.word	0x20000010
 8002414:	20000380 	.word	0x20000380

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	@ (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000380 	.word	0x20000380

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff ffee 	bl	8002418 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d005      	beq.n	8002456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244a:	4b0a      	ldr	r3, [pc, #40]	@ (8002474 <HAL_Delay+0x44>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002456:	bf00      	nop
 8002458:	f7ff ffde 	bl	8002418 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d8f7      	bhi.n	8002458 <HAL_Delay+0x28>
  {
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000010 	.word	0x20000010

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0c      	ldr	r3, [pc, #48]	@ (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	@ (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	@ (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	db0a      	blt.n	8002506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	490c      	ldr	r1, [pc, #48]	@ (8002528 <__NVIC_SetPriority+0x4c>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	0112      	lsls	r2, r2, #4
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	440b      	add	r3, r1
 8002500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002504:	e00a      	b.n	800251c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4908      	ldr	r1, [pc, #32]	@ (800252c <__NVIC_SetPriority+0x50>)
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	3b04      	subs	r3, #4
 8002514:	0112      	lsls	r2, r2, #4
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	440b      	add	r3, r1
 800251a:	761a      	strb	r2, [r3, #24]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000e100 	.word	0xe000e100
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	@ 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f1c3 0307 	rsb	r3, r3, #7
 800254a:	2b04      	cmp	r3, #4
 800254c:	bf28      	it	cs
 800254e:	2304      	movcs	r3, #4
 8002550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3304      	adds	r3, #4
 8002556:	2b06      	cmp	r3, #6
 8002558:	d902      	bls.n	8002560 <NVIC_EncodePriority+0x30>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3b03      	subs	r3, #3
 800255e:	e000      	b.n	8002562 <NVIC_EncodePriority+0x32>
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43da      	mvns	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	401a      	ands	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	43d9      	mvns	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	4313      	orrs	r3, r2
         );
}
 800258a:	4618      	mov	r0, r3
 800258c:	3724      	adds	r7, #36	@ 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a8:	d301      	bcc.n	80025ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00f      	b.n	80025ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ae:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <SysTick_Config+0x40>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b6:	210f      	movs	r1, #15
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295
 80025bc:	f7ff ff8e 	bl	80024dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c0:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <SysTick_Config+0x40>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c6:	4b04      	ldr	r3, [pc, #16]	@ (80025d8 <SysTick_Config+0x40>)
 80025c8:	2207      	movs	r2, #7
 80025ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	e000e010 	.word	0xe000e010

080025dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ff47 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002604:	f7ff ff5c 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 8002608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f7ff ff8e 	bl	8002530 <NVIC_EncodePriority>
 8002614:	4602      	mov	r2, r0
 8002616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff5d 	bl	80024dc <__NVIC_SetPriority>
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ffb0 	bl	8002598 <SysTick_Config>
 8002638:	4603      	mov	r3, r0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e159      	b.n	8002914 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 8148 	bne.w	800290e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d005      	beq.n	8002696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002692:	2b02      	cmp	r3, #2
 8002694:	d130      	bne.n	80026f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0201 	and.w	r2, r3, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b03      	cmp	r3, #3
 8002702:	d017      	beq.n	8002734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d123      	bne.n	8002788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80a2 	beq.w	800290e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b57      	ldr	r3, [pc, #348]	@ (800292c <HAL_GPIO_Init+0x2e8>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	4a56      	ldr	r2, [pc, #344]	@ (800292c <HAL_GPIO_Init+0x2e8>)
 80027d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027da:	4b54      	ldr	r3, [pc, #336]	@ (800292c <HAL_GPIO_Init+0x2e8>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027e6:	4a52      	ldr	r2, [pc, #328]	@ (8002930 <HAL_GPIO_Init+0x2ec>)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a49      	ldr	r2, [pc, #292]	@ (8002934 <HAL_GPIO_Init+0x2f0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d019      	beq.n	8002846 <HAL_GPIO_Init+0x202>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a48      	ldr	r2, [pc, #288]	@ (8002938 <HAL_GPIO_Init+0x2f4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_GPIO_Init+0x1fe>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a47      	ldr	r2, [pc, #284]	@ (800293c <HAL_GPIO_Init+0x2f8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00d      	beq.n	800283e <HAL_GPIO_Init+0x1fa>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a46      	ldr	r2, [pc, #280]	@ (8002940 <HAL_GPIO_Init+0x2fc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d007      	beq.n	800283a <HAL_GPIO_Init+0x1f6>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a45      	ldr	r2, [pc, #276]	@ (8002944 <HAL_GPIO_Init+0x300>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_GPIO_Init+0x1f2>
 8002832:	2304      	movs	r3, #4
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x204>
 8002836:	2307      	movs	r3, #7
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x204>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x204>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x204>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x204>
 8002846:	2300      	movs	r3, #0
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002858:	4935      	ldr	r1, [pc, #212]	@ (8002930 <HAL_GPIO_Init+0x2ec>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002866:	4b38      	ldr	r3, [pc, #224]	@ (8002948 <HAL_GPIO_Init+0x304>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288a:	4a2f      	ldr	r2, [pc, #188]	@ (8002948 <HAL_GPIO_Init+0x304>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002890:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <HAL_GPIO_Init+0x304>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b4:	4a24      	ldr	r2, [pc, #144]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ba:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028de:	4a1a      	ldr	r2, [pc, #104]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e4:	4b18      	ldr	r3, [pc, #96]	@ (8002948 <HAL_GPIO_Init+0x304>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002908:	4a0f      	ldr	r2, [pc, #60]	@ (8002948 <HAL_GPIO_Init+0x304>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b0f      	cmp	r3, #15
 8002918:	f67f aea2 	bls.w	8002660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3724      	adds	r7, #36	@ 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40013c00 	.word	0x40013c00

0800294c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
 8002958:	4613      	mov	r3, r2
 800295a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800295c:	787b      	ldrb	r3, [r7, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002968:	e003      	b.n	8002972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	041a      	lsls	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	619a      	str	r2, [r3, #24]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e12b      	b.n	8002bea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fbc0 	bl	800112c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2224      	movs	r2, #36	@ 0x24
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e4:	f001 fd8e 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 80029e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4a81      	ldr	r2, [pc, #516]	@ (8002bf4 <HAL_I2C_Init+0x274>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d807      	bhi.n	8002a04 <HAL_I2C_Init+0x84>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a80      	ldr	r2, [pc, #512]	@ (8002bf8 <HAL_I2C_Init+0x278>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	bf94      	ite	ls
 80029fc:	2301      	movls	r3, #1
 80029fe:	2300      	movhi	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e006      	b.n	8002a12 <HAL_I2C_Init+0x92>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a7d      	ldr	r2, [pc, #500]	@ (8002bfc <HAL_I2C_Init+0x27c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	bf94      	ite	ls
 8002a0c:	2301      	movls	r3, #1
 8002a0e:	2300      	movhi	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0e7      	b.n	8002bea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4a78      	ldr	r2, [pc, #480]	@ (8002c00 <HAL_I2C_Init+0x280>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	0c9b      	lsrs	r3, r3, #18
 8002a24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a6a      	ldr	r2, [pc, #424]	@ (8002bf4 <HAL_I2C_Init+0x274>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d802      	bhi.n	8002a54 <HAL_I2C_Init+0xd4>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	3301      	adds	r3, #1
 8002a52:	e009      	b.n	8002a68 <HAL_I2C_Init+0xe8>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	4a69      	ldr	r2, [pc, #420]	@ (8002c04 <HAL_I2C_Init+0x284>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	3301      	adds	r3, #1
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a7a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	495c      	ldr	r1, [pc, #368]	@ (8002bf4 <HAL_I2C_Init+0x274>)
 8002a84:	428b      	cmp	r3, r1
 8002a86:	d819      	bhi.n	8002abc <HAL_I2C_Init+0x13c>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e59      	subs	r1, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a96:	1c59      	adds	r1, r3, #1
 8002a98:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_I2C_Init+0x138>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1e59      	subs	r1, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab6:	e051      	b.n	8002b5c <HAL_I2C_Init+0x1dc>
 8002ab8:	2304      	movs	r3, #4
 8002aba:	e04f      	b.n	8002b5c <HAL_I2C_Init+0x1dc>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d111      	bne.n	8002ae8 <HAL_I2C_Init+0x168>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1e58      	subs	r0, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	440b      	add	r3, r1
 8002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	e012      	b.n	8002b0e <HAL_I2C_Init+0x18e>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1e58      	subs	r0, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	0099      	lsls	r1, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Init+0x196>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e022      	b.n	8002b5c <HAL_I2C_Init+0x1dc>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10e      	bne.n	8002b3c <HAL_I2C_Init+0x1bc>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1e58      	subs	r0, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6859      	ldr	r1, [r3, #4]
 8002b26:	460b      	mov	r3, r1
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	440b      	add	r3, r1
 8002b2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b3a:	e00f      	b.n	8002b5c <HAL_I2C_Init+0x1dc>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e58      	subs	r0, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	0099      	lsls	r1, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b52:	3301      	adds	r3, #1
 8002b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	6809      	ldr	r1, [r1, #0]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69da      	ldr	r2, [r3, #28]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6911      	ldr	r1, [r2, #16]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68d2      	ldr	r2, [r2, #12]
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	000186a0 	.word	0x000186a0
 8002bf8:	001e847f 	.word	0x001e847f
 8002bfc:	003d08ff 	.word	0x003d08ff
 8002c00:	431bde83 	.word	0x431bde83
 8002c04:	10624dd3 	.word	0x10624dd3

08002c08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	4608      	mov	r0, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	817b      	strh	r3, [r7, #10]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	813b      	strh	r3, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c22:	f7ff fbf9 	bl	8002418 <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	f040 80d9 	bne.w	8002de8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2319      	movs	r3, #25
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	496d      	ldr	r1, [pc, #436]	@ (8002df4 <HAL_I2C_Mem_Write+0x1ec>)
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fdb9 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e0cc      	b.n	8002dea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_I2C_Mem_Write+0x56>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e0c5      	b.n	8002dea <HAL_I2C_Mem_Write+0x1e2>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d007      	beq.n	8002c84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2221      	movs	r2, #33	@ 0x21
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2240      	movs	r2, #64	@ 0x40
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a3a      	ldr	r2, [r7, #32]
 8002cae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a4d      	ldr	r2, [pc, #308]	@ (8002df8 <HAL_I2C_Mem_Write+0x1f0>)
 8002cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cc6:	88f8      	ldrh	r0, [r7, #6]
 8002cc8:	893a      	ldrh	r2, [r7, #8]
 8002cca:	8979      	ldrh	r1, [r7, #10]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fbf0 	bl	80034bc <I2C_RequestMemoryWrite>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d052      	beq.n	8002d88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e081      	b.n	8002dea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fe7e 	bl	80039ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d107      	bne.n	8002d0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06b      	b.n	8002dea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d11b      	bne.n	8002d88 <HAL_I2C_Mem_Write+0x180>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d017      	beq.n	8002d88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	781a      	ldrb	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1aa      	bne.n	8002ce6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 fe71 	bl	8003a7c <I2C_WaitOnBTFFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00d      	beq.n	8002dbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d107      	bne.n	8002db8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e016      	b.n	8002dea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e000      	b.n	8002dea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	00100002 	.word	0x00100002
 8002df8:	ffff0000 	.word	0xffff0000

08002dfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08c      	sub	sp, #48	@ 0x30
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	4608      	mov	r0, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	817b      	strh	r3, [r7, #10]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	813b      	strh	r3, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e16:	f7ff faff 	bl	8002418 <HAL_GetTick>
 8002e1a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	f040 8214 	bne.w	8003252 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	2319      	movs	r3, #25
 8002e30:	2201      	movs	r2, #1
 8002e32:	497b      	ldr	r1, [pc, #492]	@ (8003020 <HAL_I2C_Mem_Read+0x224>)
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 fcbf 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
 8002e42:	e207      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2C_Mem_Read+0x56>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e200      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d007      	beq.n	8002e78 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2222      	movs	r2, #34	@ 0x22
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2240      	movs	r2, #64	@ 0x40
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ea2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a5b      	ldr	r2, [pc, #364]	@ (8003024 <HAL_I2C_Mem_Read+0x228>)
 8002eb8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eba:	88f8      	ldrh	r0, [r7, #6]
 8002ebc:	893a      	ldrh	r2, [r7, #8]
 8002ebe:	8979      	ldrh	r1, [r7, #10]
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	4603      	mov	r3, r0
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fb8c 	bl	80035e8 <I2C_RequestMemoryRead>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e1bc      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d113      	bne.n	8002f0a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	623b      	str	r3, [r7, #32]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	623b      	str	r3, [r7, #32]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e190      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d11b      	bne.n	8002f4a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e170      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d11b      	bne.n	8002f8a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	e150      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fa0:	e144      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	f200 80f1 	bhi.w	800318e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d123      	bne.n	8002ffc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fda7 	bl	8003b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e145      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ffa:	e117      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	2b02      	cmp	r3, #2
 8003002:	d14e      	bne.n	80030a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300a:	2200      	movs	r2, #0
 800300c:	4906      	ldr	r1, [pc, #24]	@ (8003028 <HAL_I2C_Mem_Read+0x22c>)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fbd2 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e11a      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
 800301e:	bf00      	nop
 8003020:	00100002 	.word	0x00100002
 8003024:	ffff0000 	.word	0xffff0000
 8003028:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800303a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030a0:	e0c4      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a8:	2200      	movs	r2, #0
 80030aa:	496c      	ldr	r1, [pc, #432]	@ (800325c <HAL_I2C_Mem_Read+0x460>)
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fb83 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0cb      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003104:	2200      	movs	r2, #0
 8003106:	4955      	ldr	r1, [pc, #340]	@ (800325c <HAL_I2C_Mem_Read+0x460>)
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fb55 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e09d      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800318c:	e04e      	b.n	800322c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003190:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fcba 	bl	8003b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e058      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d124      	bne.n	800322c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d107      	bne.n	80031fa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003230:	2b00      	cmp	r3, #0
 8003232:	f47f aeb6 	bne.w	8002fa2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	e000      	b.n	8003254 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003252:	2302      	movs	r3, #2
  }
}
 8003254:	4618      	mov	r0, r3
 8003256:	3728      	adds	r7, #40	@ 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	00010004 	.word	0x00010004

08003260 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	@ 0x28
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	460b      	mov	r3, r1
 800326e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003270:	f7ff f8d2 	bl	8002418 <HAL_GetTick>
 8003274:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b20      	cmp	r3, #32
 8003284:	f040 8111 	bne.w	80034aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	2319      	movs	r3, #25
 800328e:	2201      	movs	r2, #1
 8003290:	4988      	ldr	r1, [pc, #544]	@ (80034b4 <HAL_I2C_IsDeviceReady+0x254>)
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fa90 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
 80032a0:	e104      	b.n	80034ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_I2C_IsDeviceReady+0x50>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e0fd      	b.n	80034ac <HAL_I2C_IsDeviceReady+0x24c>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d007      	beq.n	80032d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2224      	movs	r2, #36	@ 0x24
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4a70      	ldr	r2, [pc, #448]	@ (80034b8 <HAL_I2C_IsDeviceReady+0x258>)
 80032f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003308:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2200      	movs	r2, #0
 8003312:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fa4e 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00d      	beq.n	800333e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003330:	d103      	bne.n	800333a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003338:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0b6      	b.n	80034ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800333e:	897b      	ldrh	r3, [r7, #10]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800334c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800334e:	f7ff f863 	bl	8002418 <HAL_GetTick>
 8003352:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b02      	cmp	r3, #2
 8003360:	bf0c      	ite	eq
 8003362:	2301      	moveq	r3, #1
 8003364:	2300      	movne	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003382:	e025      	b.n	80033d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003384:	f7ff f848 	bl	8002418 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d302      	bcc.n	800339a <HAL_I2C_IsDeviceReady+0x13a>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d103      	bne.n	80033a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	22a0      	movs	r2, #160	@ 0xa0
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80033da:	d005      	beq.n	80033e8 <HAL_I2C_IsDeviceReady+0x188>
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <HAL_I2C_IsDeviceReady+0x188>
 80033e2:	7dbb      	ldrb	r3, [r7, #22]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0cd      	beq.n	8003384 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d129      	bne.n	8003452 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2319      	movs	r3, #25
 800342a:	2201      	movs	r2, #1
 800342c:	4921      	ldr	r1, [pc, #132]	@ (80034b4 <HAL_I2C_IsDeviceReady+0x254>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f9c2 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e036      	b.n	80034ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	e02c      	b.n	80034ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003460:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800346a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2319      	movs	r3, #25
 8003472:	2201      	movs	r2, #1
 8003474:	490f      	ldr	r1, [pc, #60]	@ (80034b4 <HAL_I2C_IsDeviceReady+0x254>)
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f99e 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e012      	b.n	80034ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	3301      	adds	r3, #1
 800348a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	f4ff af32 	bcc.w	80032fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3720      	adds	r7, #32
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	00100002 	.word	0x00100002
 80034b8:	ffff0000 	.word	0xffff0000

080034bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	4608      	mov	r0, r1
 80034c6:	4611      	mov	r1, r2
 80034c8:	461a      	mov	r2, r3
 80034ca:	4603      	mov	r3, r0
 80034cc:	817b      	strh	r3, [r7, #10]
 80034ce:	460b      	mov	r3, r1
 80034d0:	813b      	strh	r3, [r7, #8]
 80034d2:	4613      	mov	r3, r2
 80034d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f960 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00d      	beq.n	800351a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800350c:	d103      	bne.n	8003516 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003514:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e05f      	b.n	80035da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800351a:	897b      	ldrh	r3, [r7, #10]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003528:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	6a3a      	ldr	r2, [r7, #32]
 800352e:	492d      	ldr	r1, [pc, #180]	@ (80035e4 <I2C_RequestMemoryWrite+0x128>)
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f9bb 	bl	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e04c      	b.n	80035da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003558:	6a39      	ldr	r1, [r7, #32]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fa46 	bl	80039ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00d      	beq.n	8003582 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	2b04      	cmp	r3, #4
 800356c:	d107      	bne.n	800357e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e02b      	b.n	80035da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d105      	bne.n	8003594 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003588:	893b      	ldrh	r3, [r7, #8]
 800358a:	b2da      	uxtb	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	611a      	str	r2, [r3, #16]
 8003592:	e021      	b.n	80035d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003594:	893b      	ldrh	r3, [r7, #8]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	b29b      	uxth	r3, r3
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a4:	6a39      	ldr	r1, [r7, #32]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fa20 	bl	80039ec <I2C_WaitOnTXEFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00d      	beq.n	80035ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d107      	bne.n	80035ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e005      	b.n	80035da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035ce:	893b      	ldrh	r3, [r7, #8]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	00010002 	.word	0x00010002

080035e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	4608      	mov	r0, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	461a      	mov	r2, r3
 80035f6:	4603      	mov	r3, r0
 80035f8:	817b      	strh	r3, [r7, #10]
 80035fa:	460b      	mov	r3, r1
 80035fc:	813b      	strh	r3, [r7, #8]
 80035fe:	4613      	mov	r3, r2
 8003600:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003610:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003620:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	2200      	movs	r2, #0
 800362a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f8c2 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00d      	beq.n	8003656 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003648:	d103      	bne.n	8003652 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003650:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0aa      	b.n	80037ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003656:	897b      	ldrh	r3, [r7, #10]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003664:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	6a3a      	ldr	r2, [r7, #32]
 800366a:	4952      	ldr	r1, [pc, #328]	@ (80037b4 <I2C_RequestMemoryRead+0x1cc>)
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f91d 	bl	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e097      	b.n	80037ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003694:	6a39      	ldr	r1, [r7, #32]
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f9a8 	bl	80039ec <I2C_WaitOnTXEFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d107      	bne.n	80036ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e076      	b.n	80037ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d105      	bne.n	80036d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036c4:	893b      	ldrh	r3, [r7, #8]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	611a      	str	r2, [r3, #16]
 80036ce:	e021      	b.n	8003714 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036d0:	893b      	ldrh	r3, [r7, #8]
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e0:	6a39      	ldr	r1, [r7, #32]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f982 	bl	80039ec <I2C_WaitOnTXEFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d107      	bne.n	8003706 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003704:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e050      	b.n	80037ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800370a:	893b      	ldrh	r3, [r7, #8]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003716:	6a39      	ldr	r1, [r7, #32]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f967 	bl	80039ec <I2C_WaitOnTXEFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00d      	beq.n	8003740 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	2b04      	cmp	r3, #4
 800372a:	d107      	bne.n	800373c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800373a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e035      	b.n	80037ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800374e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	2200      	movs	r2, #0
 8003758:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f82b 	bl	80037b8 <I2C_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00d      	beq.n	8003784 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003776:	d103      	bne.n	8003780 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800377e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e013      	b.n	80037ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003784:	897b      	ldrh	r3, [r7, #10]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	b2da      	uxtb	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	6a3a      	ldr	r2, [r7, #32]
 8003798:	4906      	ldr	r1, [pc, #24]	@ (80037b4 <I2C_RequestMemoryRead+0x1cc>)
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f886 	bl	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	00010002 	.word	0x00010002

080037b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c8:	e048      	b.n	800385c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d044      	beq.n	800385c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d2:	f7fe fe21 	bl	8002418 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d302      	bcc.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d139      	bne.n	800385c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	0c1b      	lsrs	r3, r3, #16
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d10d      	bne.n	800380e <I2C_WaitOnFlagUntilTimeout+0x56>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	43da      	mvns	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4013      	ands	r3, r2
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	e00c      	b.n	8003828 <I2C_WaitOnFlagUntilTimeout+0x70>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	43da      	mvns	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	4013      	ands	r3, r2
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	429a      	cmp	r2, r3
 800382c:	d116      	bne.n	800385c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	f043 0220 	orr.w	r2, r3, #32
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e023      	b.n	80038a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	0c1b      	lsrs	r3, r3, #16
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d10d      	bne.n	8003882 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	43da      	mvns	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	4013      	ands	r3, r2
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf0c      	ite	eq
 8003878:	2301      	moveq	r3, #1
 800387a:	2300      	movne	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	461a      	mov	r2, r3
 8003880:	e00c      	b.n	800389c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	43da      	mvns	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4013      	ands	r3, r2
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d093      	beq.n	80037ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ba:	e071      	b.n	80039a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ca:	d123      	bne.n	8003914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	f043 0204 	orr.w	r2, r3, #4
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e067      	b.n	80039e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d041      	beq.n	80039a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391c:	f7fe fd7c 	bl	8002418 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d302      	bcc.n	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d136      	bne.n	80039a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d10c      	bne.n	8003956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	43da      	mvns	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4013      	ands	r3, r2
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	bf14      	ite	ne
 800394e:	2301      	movne	r3, #1
 8003950:	2300      	moveq	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	e00b      	b.n	800396e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	43da      	mvns	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	4013      	ands	r3, r2
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e021      	b.n	80039e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	0c1b      	lsrs	r3, r3, #16
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d10c      	bne.n	80039c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	43da      	mvns	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4013      	ands	r3, r2
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e00b      	b.n	80039dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4013      	ands	r3, r2
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf14      	ite	ne
 80039d6:	2301      	movne	r3, #1
 80039d8:	2300      	moveq	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f47f af6d 	bne.w	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f8:	e034      	b.n	8003a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f8e3 	bl	8003bc6 <I2C_IsAcknowledgeFailed>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e034      	b.n	8003a74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d028      	beq.n	8003a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a12:	f7fe fd01 	bl	8002418 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d302      	bcc.n	8003a28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11d      	bne.n	8003a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a32:	2b80      	cmp	r3, #128	@ 0x80
 8003a34:	d016      	beq.n	8003a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e007      	b.n	8003a74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6e:	2b80      	cmp	r3, #128	@ 0x80
 8003a70:	d1c3      	bne.n	80039fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a88:	e034      	b.n	8003af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f89b 	bl	8003bc6 <I2C_IsAcknowledgeFailed>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e034      	b.n	8003b04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d028      	beq.n	8003af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fe fcb9 	bl	8002418 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d11d      	bne.n	8003af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d016      	beq.n	8003af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e007      	b.n	8003b04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d1c3      	bne.n	8003a8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b18:	e049      	b.n	8003bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d119      	bne.n	8003b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0210 	mvn.w	r2, #16
 8003b30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e030      	b.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5c:	f7fe fc5c 	bl	8002418 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d302      	bcc.n	8003b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11d      	bne.n	8003bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7c:	2b40      	cmp	r3, #64	@ 0x40
 8003b7e:	d016      	beq.n	8003bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f043 0220 	orr.w	r2, r3, #32
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e007      	b.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb8:	2b40      	cmp	r3, #64	@ 0x40
 8003bba:	d1ae      	bne.n	8003b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bdc:	d11b      	bne.n	8003c16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003be6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f043 0204 	orr.w	r2, r3, #4
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e267      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d075      	beq.n	8003d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c42:	4b88      	ldr	r3, [pc, #544]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d00c      	beq.n	8003c68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c4e:	4b85      	ldr	r3, [pc, #532]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d112      	bne.n	8003c80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5a:	4b82      	ldr	r3, [pc, #520]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c66:	d10b      	bne.n	8003c80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	4b7e      	ldr	r3, [pc, #504]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d05b      	beq.n	8003d2c <HAL_RCC_OscConfig+0x108>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d157      	bne.n	8003d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e242      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c88:	d106      	bne.n	8003c98 <HAL_RCC_OscConfig+0x74>
 8003c8a:	4b76      	ldr	r3, [pc, #472]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a75      	ldr	r2, [pc, #468]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e01d      	b.n	8003cd4 <HAL_RCC_OscConfig+0xb0>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x98>
 8003ca2:	4b70      	ldr	r3, [pc, #448]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a6f      	ldr	r2, [pc, #444]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b6d      	ldr	r3, [pc, #436]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a6c      	ldr	r2, [pc, #432]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0xb0>
 8003cbc:	4b69      	ldr	r3, [pc, #420]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a68      	ldr	r2, [pc, #416]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b66      	ldr	r3, [pc, #408]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a65      	ldr	r2, [pc, #404]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7fe fb9c 	bl	8002418 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7fe fb98 	bl	8002418 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	@ 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e207      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b5b      	ldr	r3, [pc, #364]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0xc0>
 8003d02:	e014      	b.n	8003d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fe fb88 	bl	8002418 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fe fb84 	bl	8002418 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	@ 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e1f3      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	4b51      	ldr	r3, [pc, #324]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0xe8>
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d063      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d46:	4b47      	ldr	r3, [pc, #284]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d11c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d52:	4b44      	ldr	r3, [pc, #272]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d116      	bne.n	8003d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5e:	4b41      	ldr	r3, [pc, #260]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_RCC_OscConfig+0x152>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d001      	beq.n	8003d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e1c7      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d76:	4b3b      	ldr	r3, [pc, #236]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4937      	ldr	r1, [pc, #220]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8a:	e03a      	b.n	8003e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d94:	4b34      	ldr	r3, [pc, #208]	@ (8003e68 <HAL_RCC_OscConfig+0x244>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9a:	f7fe fb3d 	bl	8002418 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da2:	f7fe fb39 	bl	8002418 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e1a8      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc0:	4b28      	ldr	r3, [pc, #160]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4925      	ldr	r1, [pc, #148]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]
 8003dd4:	e015      	b.n	8003e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dd6:	4b24      	ldr	r3, [pc, #144]	@ (8003e68 <HAL_RCC_OscConfig+0x244>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fb1c 	bl	8002418 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de4:	f7fe fb18 	bl	8002418 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e187      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d036      	beq.n	8003e7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d016      	beq.n	8003e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e16:	4b15      	ldr	r3, [pc, #84]	@ (8003e6c <HAL_RCC_OscConfig+0x248>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1c:	f7fe fafc 	bl	8002418 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e24:	f7fe faf8 	bl	8002418 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e167      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e36:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <HAL_RCC_OscConfig+0x240>)
 8003e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0x200>
 8003e42:	e01b      	b.n	8003e7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e44:	4b09      	ldr	r3, [pc, #36]	@ (8003e6c <HAL_RCC_OscConfig+0x248>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4a:	f7fe fae5 	bl	8002418 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e50:	e00e      	b.n	8003e70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e52:	f7fe fae1 	bl	8002418 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d907      	bls.n	8003e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e150      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
 8003e64:	40023800 	.word	0x40023800
 8003e68:	42470000 	.word	0x42470000
 8003e6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e70:	4b88      	ldr	r3, [pc, #544]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1ea      	bne.n	8003e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8097 	beq.w	8003fb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e8e:	4b81      	ldr	r3, [pc, #516]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10f      	bne.n	8003eba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	4b7d      	ldr	r3, [pc, #500]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	4a7c      	ldr	r2, [pc, #496]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eaa:	4b7a      	ldr	r3, [pc, #488]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eba:	4b77      	ldr	r3, [pc, #476]	@ (8004098 <HAL_RCC_OscConfig+0x474>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d118      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ec6:	4b74      	ldr	r3, [pc, #464]	@ (8004098 <HAL_RCC_OscConfig+0x474>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a73      	ldr	r2, [pc, #460]	@ (8004098 <HAL_RCC_OscConfig+0x474>)
 8003ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed2:	f7fe faa1 	bl	8002418 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eda:	f7fe fa9d 	bl	8002418 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e10c      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eec:	4b6a      	ldr	r3, [pc, #424]	@ (8004098 <HAL_RCC_OscConfig+0x474>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d106      	bne.n	8003f0e <HAL_RCC_OscConfig+0x2ea>
 8003f00:	4b64      	ldr	r3, [pc, #400]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f04:	4a63      	ldr	r2, [pc, #396]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f0c:	e01c      	b.n	8003f48 <HAL_RCC_OscConfig+0x324>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x30c>
 8003f16:	4b5f      	ldr	r3, [pc, #380]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1a:	4a5e      	ldr	r2, [pc, #376]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	f043 0304 	orr.w	r3, r3, #4
 8003f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f22:	4b5c      	ldr	r3, [pc, #368]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f26:	4a5b      	ldr	r2, [pc, #364]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCC_OscConfig+0x324>
 8003f30:	4b58      	ldr	r3, [pc, #352]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f34:	4a57      	ldr	r2, [pc, #348]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f3c:	4b55      	ldr	r3, [pc, #340]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f40:	4a54      	ldr	r2, [pc, #336]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003f42:	f023 0304 	bic.w	r3, r3, #4
 8003f46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d015      	beq.n	8003f7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f50:	f7fe fa62 	bl	8002418 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f56:	e00a      	b.n	8003f6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f58:	f7fe fa5e 	bl	8002418 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e0cb      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6e:	4b49      	ldr	r3, [pc, #292]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0ee      	beq.n	8003f58 <HAL_RCC_OscConfig+0x334>
 8003f7a:	e014      	b.n	8003fa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7c:	f7fe fa4c 	bl	8002418 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fe fa48 	bl	8002418 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e0b5      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1ee      	bne.n	8003f84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d105      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fac:	4b39      	ldr	r3, [pc, #228]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb0:	4a38      	ldr	r2, [pc, #224]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80a1 	beq.w	8004104 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fc2:	4b34      	ldr	r3, [pc, #208]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d05c      	beq.n	8004088 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d141      	bne.n	800405a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd6:	4b31      	ldr	r3, [pc, #196]	@ (800409c <HAL_RCC_OscConfig+0x478>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fa1c 	bl	8002418 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fe fa18 	bl	8002418 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e087      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	4b27      	ldr	r3, [pc, #156]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	3b01      	subs	r3, #1
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	491b      	ldr	r1, [pc, #108]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 8004028:	4313      	orrs	r3, r2
 800402a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402c:	4b1b      	ldr	r3, [pc, #108]	@ (800409c <HAL_RCC_OscConfig+0x478>)
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fe f9f1 	bl	8002418 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403a:	f7fe f9ed 	bl	8002418 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e05c      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404c:	4b11      	ldr	r3, [pc, #68]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x416>
 8004058:	e054      	b.n	8004104 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405a:	4b10      	ldr	r3, [pc, #64]	@ (800409c <HAL_RCC_OscConfig+0x478>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fe f9da 	bl	8002418 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004068:	f7fe f9d6 	bl	8002418 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e045      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <HAL_RCC_OscConfig+0x470>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x444>
 8004086:	e03d      	b.n	8004104 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d107      	bne.n	80040a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e038      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
 8004094:	40023800 	.word	0x40023800
 8004098:	40007000 	.word	0x40007000
 800409c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004110 <HAL_RCC_OscConfig+0x4ec>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d028      	beq.n	8004100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d121      	bne.n	8004100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d11a      	bne.n	8004100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040d8:	4293      	cmp	r3, r2
 80040da:	d111      	bne.n	8004100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	3b01      	subs	r3, #1
 80040ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40023800 	.word	0x40023800

08004114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0cc      	b.n	80042c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004128:	4b68      	ldr	r3, [pc, #416]	@ (80042cc <HAL_RCC_ClockConfig+0x1b8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d90c      	bls.n	8004150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004136:	4b65      	ldr	r3, [pc, #404]	@ (80042cc <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800413e:	4b63      	ldr	r3, [pc, #396]	@ (80042cc <HAL_RCC_ClockConfig+0x1b8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0b8      	b.n	80042c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004168:	4b59      	ldr	r3, [pc, #356]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4a58      	ldr	r2, [pc, #352]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004172:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004180:	4b53      	ldr	r3, [pc, #332]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4a52      	ldr	r2, [pc, #328]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800418a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800418c:	4b50      	ldr	r3, [pc, #320]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	494d      	ldr	r1, [pc, #308]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d044      	beq.n	8004234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d107      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b2:	4b47      	ldr	r3, [pc, #284]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d119      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e07f      	b.n	80042c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d003      	beq.n	80041d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d2:	4b3f      	ldr	r3, [pc, #252]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e06f      	b.n	80042c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e2:	4b3b      	ldr	r3, [pc, #236]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e067      	b.n	80042c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f2:	4b37      	ldr	r3, [pc, #220]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f023 0203 	bic.w	r2, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4934      	ldr	r1, [pc, #208]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	4313      	orrs	r3, r2
 8004202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004204:	f7fe f908 	bl	8002418 <HAL_GetTick>
 8004208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420a:	e00a      	b.n	8004222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420c:	f7fe f904 	bl	8002418 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e04f      	b.n	80042c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	4b2b      	ldr	r3, [pc, #172]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 020c 	and.w	r2, r3, #12
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	429a      	cmp	r2, r3
 8004232:	d1eb      	bne.n	800420c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004234:	4b25      	ldr	r3, [pc, #148]	@ (80042cc <HAL_RCC_ClockConfig+0x1b8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d20c      	bcs.n	800425c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b22      	ldr	r3, [pc, #136]	@ (80042cc <HAL_RCC_ClockConfig+0x1b8>)
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800424a:	4b20      	ldr	r3, [pc, #128]	@ (80042cc <HAL_RCC_ClockConfig+0x1b8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e032      	b.n	80042c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004268:	4b19      	ldr	r3, [pc, #100]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4916      	ldr	r1, [pc, #88]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004286:	4b12      	ldr	r3, [pc, #72]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	490e      	ldr	r1, [pc, #56]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800429a:	f000 f821 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 800429e:	4602      	mov	r2, r0
 80042a0:	4b0b      	ldr	r3, [pc, #44]	@ (80042d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	490a      	ldr	r1, [pc, #40]	@ (80042d4 <HAL_RCC_ClockConfig+0x1c0>)
 80042ac:	5ccb      	ldrb	r3, [r1, r3]
 80042ae:	fa22 f303 	lsr.w	r3, r2, r3
 80042b2:	4a09      	ldr	r2, [pc, #36]	@ (80042d8 <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80042b6:	4b09      	ldr	r3, [pc, #36]	@ (80042dc <HAL_RCC_ClockConfig+0x1c8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe f868 	bl	8002390 <HAL_InitTick>

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40023c00 	.word	0x40023c00
 80042d0:	40023800 	.word	0x40023800
 80042d4:	0800b824 	.word	0x0800b824
 80042d8:	20000008 	.word	0x20000008
 80042dc:	2000000c 	.word	0x2000000c

080042e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e4:	b094      	sub	sp, #80	@ 0x50
 80042e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042f8:	4b79      	ldr	r3, [pc, #484]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 030c 	and.w	r3, r3, #12
 8004300:	2b08      	cmp	r3, #8
 8004302:	d00d      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0x40>
 8004304:	2b08      	cmp	r3, #8
 8004306:	f200 80e1 	bhi.w	80044cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0x34>
 800430e:	2b04      	cmp	r3, #4
 8004310:	d003      	beq.n	800431a <HAL_RCC_GetSysClockFreq+0x3a>
 8004312:	e0db      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004314:	4b73      	ldr	r3, [pc, #460]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004316:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004318:	e0db      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800431a:	4b73      	ldr	r3, [pc, #460]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800431c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800431e:	e0d8      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004320:	4b6f      	ldr	r3, [pc, #444]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004328:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800432a:	4b6d      	ldr	r3, [pc, #436]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d063      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004336:	4b6a      	ldr	r3, [pc, #424]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	099b      	lsrs	r3, r3, #6
 800433c:	2200      	movs	r2, #0
 800433e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004340:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004348:	633b      	str	r3, [r7, #48]	@ 0x30
 800434a:	2300      	movs	r3, #0
 800434c:	637b      	str	r3, [r7, #52]	@ 0x34
 800434e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004352:	4622      	mov	r2, r4
 8004354:	462b      	mov	r3, r5
 8004356:	f04f 0000 	mov.w	r0, #0
 800435a:	f04f 0100 	mov.w	r1, #0
 800435e:	0159      	lsls	r1, r3, #5
 8004360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004364:	0150      	lsls	r0, r2, #5
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4621      	mov	r1, r4
 800436c:	1a51      	subs	r1, r2, r1
 800436e:	6139      	str	r1, [r7, #16]
 8004370:	4629      	mov	r1, r5
 8004372:	eb63 0301 	sbc.w	r3, r3, r1
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004384:	4659      	mov	r1, fp
 8004386:	018b      	lsls	r3, r1, #6
 8004388:	4651      	mov	r1, sl
 800438a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800438e:	4651      	mov	r1, sl
 8004390:	018a      	lsls	r2, r1, #6
 8004392:	4651      	mov	r1, sl
 8004394:	ebb2 0801 	subs.w	r8, r2, r1
 8004398:	4659      	mov	r1, fp
 800439a:	eb63 0901 	sbc.w	r9, r3, r1
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b2:	4690      	mov	r8, r2
 80043b4:	4699      	mov	r9, r3
 80043b6:	4623      	mov	r3, r4
 80043b8:	eb18 0303 	adds.w	r3, r8, r3
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	462b      	mov	r3, r5
 80043c0:	eb49 0303 	adc.w	r3, r9, r3
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043d2:	4629      	mov	r1, r5
 80043d4:	024b      	lsls	r3, r1, #9
 80043d6:	4621      	mov	r1, r4
 80043d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043dc:	4621      	mov	r1, r4
 80043de:	024a      	lsls	r2, r1, #9
 80043e0:	4610      	mov	r0, r2
 80043e2:	4619      	mov	r1, r3
 80043e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e6:	2200      	movs	r2, #0
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043f0:	f7fc fc52 	bl	8000c98 <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4613      	mov	r3, r2
 80043fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043fc:	e058      	b.n	80044b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fe:	4b38      	ldr	r3, [pc, #224]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	099b      	lsrs	r3, r3, #6
 8004404:	2200      	movs	r2, #0
 8004406:	4618      	mov	r0, r3
 8004408:	4611      	mov	r1, r2
 800440a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800440e:	623b      	str	r3, [r7, #32]
 8004410:	2300      	movs	r3, #0
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
 8004414:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004418:	4642      	mov	r2, r8
 800441a:	464b      	mov	r3, r9
 800441c:	f04f 0000 	mov.w	r0, #0
 8004420:	f04f 0100 	mov.w	r1, #0
 8004424:	0159      	lsls	r1, r3, #5
 8004426:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800442a:	0150      	lsls	r0, r2, #5
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4641      	mov	r1, r8
 8004432:	ebb2 0a01 	subs.w	sl, r2, r1
 8004436:	4649      	mov	r1, r9
 8004438:	eb63 0b01 	sbc.w	fp, r3, r1
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004448:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800444c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004450:	ebb2 040a 	subs.w	r4, r2, sl
 8004454:	eb63 050b 	sbc.w	r5, r3, fp
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	00eb      	lsls	r3, r5, #3
 8004462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004466:	00e2      	lsls	r2, r4, #3
 8004468:	4614      	mov	r4, r2
 800446a:	461d      	mov	r5, r3
 800446c:	4643      	mov	r3, r8
 800446e:	18e3      	adds	r3, r4, r3
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	464b      	mov	r3, r9
 8004474:	eb45 0303 	adc.w	r3, r5, r3
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004486:	4629      	mov	r1, r5
 8004488:	028b      	lsls	r3, r1, #10
 800448a:	4621      	mov	r1, r4
 800448c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004490:	4621      	mov	r1, r4
 8004492:	028a      	lsls	r2, r1, #10
 8004494:	4610      	mov	r0, r2
 8004496:	4619      	mov	r1, r3
 8004498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800449a:	2200      	movs	r2, #0
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	61fa      	str	r2, [r7, #28]
 80044a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044a4:	f7fc fbf8 	bl	8000c98 <__aeabi_uldivmod>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4613      	mov	r3, r2
 80044ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044b0:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	0c1b      	lsrs	r3, r3, #16
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	3301      	adds	r3, #1
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80044c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044ca:	e002      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044cc:	4b05      	ldr	r3, [pc, #20]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80044ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3750      	adds	r7, #80	@ 0x50
 80044d8:	46bd      	mov	sp, r7
 80044da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800
 80044e4:	00f42400 	.word	0x00f42400
 80044e8:	007a1200 	.word	0x007a1200

080044ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f0:	4b03      	ldr	r3, [pc, #12]	@ (8004500 <HAL_RCC_GetHCLKFreq+0x14>)
 80044f2:	681b      	ldr	r3, [r3, #0]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20000008 	.word	0x20000008

08004504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004508:	f7ff fff0 	bl	80044ec <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b05      	ldr	r3, [pc, #20]	@ (8004524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	0a9b      	lsrs	r3, r3, #10
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4903      	ldr	r1, [pc, #12]	@ (8004528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40023800 	.word	0x40023800
 8004528:	0800b834 	.word	0x0800b834

0800452c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004530:	f7ff ffdc 	bl	80044ec <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b05      	ldr	r3, [pc, #20]	@ (800454c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	0b5b      	lsrs	r3, r3, #13
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4903      	ldr	r1, [pc, #12]	@ (8004550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40023800 	.word	0x40023800
 8004550:	0800b834 	.word	0x0800b834

08004554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e041      	b.n	80045ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fd fe28 	bl	80021d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f000 f958 	bl	8004848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	d001      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e044      	b.n	8004696 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1e      	ldr	r2, [pc, #120]	@ (80046a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d018      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0x6c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004636:	d013      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0x6c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1a      	ldr	r2, [pc, #104]	@ (80046a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00e      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0x6c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a19      	ldr	r2, [pc, #100]	@ (80046ac <HAL_TIM_Base_Start_IT+0xb8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d009      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0x6c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a17      	ldr	r2, [pc, #92]	@ (80046b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0x6c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a16      	ldr	r2, [pc, #88]	@ (80046b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d111      	bne.n	8004684 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b06      	cmp	r3, #6
 8004670:	d010      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	e007      	b.n	8004694 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40010000 	.word	0x40010000
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40000800 	.word	0x40000800
 80046b0:	40000c00 	.word	0x40000c00
 80046b4:	40014000 	.word	0x40014000

080046b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_TIM_ConfigClockSource+0x1c>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e0b4      	b.n	800483e <HAL_TIM_ConfigClockSource+0x186>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800470c:	d03e      	beq.n	800478c <HAL_TIM_ConfigClockSource+0xd4>
 800470e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004712:	f200 8087 	bhi.w	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 8004716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800471a:	f000 8086 	beq.w	800482a <HAL_TIM_ConfigClockSource+0x172>
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004722:	d87f      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b70      	cmp	r3, #112	@ 0x70
 8004726:	d01a      	beq.n	800475e <HAL_TIM_ConfigClockSource+0xa6>
 8004728:	2b70      	cmp	r3, #112	@ 0x70
 800472a:	d87b      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b60      	cmp	r3, #96	@ 0x60
 800472e:	d050      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x11a>
 8004730:	2b60      	cmp	r3, #96	@ 0x60
 8004732:	d877      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b50      	cmp	r3, #80	@ 0x50
 8004736:	d03c      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0xfa>
 8004738:	2b50      	cmp	r3, #80	@ 0x50
 800473a:	d873      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b40      	cmp	r3, #64	@ 0x40
 800473e:	d058      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x13a>
 8004740:	2b40      	cmp	r3, #64	@ 0x40
 8004742:	d86f      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b30      	cmp	r3, #48	@ 0x30
 8004746:	d064      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x15a>
 8004748:	2b30      	cmp	r3, #48	@ 0x30
 800474a:	d86b      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b20      	cmp	r3, #32
 800474e:	d060      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x15a>
 8004750:	2b20      	cmp	r3, #32
 8004752:	d867      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d05c      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x15a>
 8004758:	2b10      	cmp	r3, #16
 800475a:	d05a      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x15a>
 800475c:	e062      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800476e:	f000 f971 	bl	8004a54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	609a      	str	r2, [r3, #8]
      break;
 800478a:	e04f      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800479c:	f000 f95a 	bl	8004a54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047ae:	609a      	str	r2, [r3, #8]
      break;
 80047b0:	e03c      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047be:	461a      	mov	r2, r3
 80047c0:	f000 f8ce 	bl	8004960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2150      	movs	r1, #80	@ 0x50
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f927 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 80047d0:	e02c      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047de:	461a      	mov	r2, r3
 80047e0:	f000 f8ed 	bl	80049be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2160      	movs	r1, #96	@ 0x60
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f917 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 80047f0:	e01c      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fe:	461a      	mov	r2, r3
 8004800:	f000 f8ae 	bl	8004960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2140      	movs	r1, #64	@ 0x40
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f907 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 8004810:	e00c      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4619      	mov	r1, r3
 800481c:	4610      	mov	r0, r2
 800481e:	f000 f8fe 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 8004822:	e003      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
      break;
 8004828:	e000      	b.n	800482c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800482a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800483c:	7bfb      	ldrb	r3, [r7, #15]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3a      	ldr	r2, [pc, #232]	@ (8004944 <TIM_Base_SetConfig+0xfc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00f      	beq.n	8004880 <TIM_Base_SetConfig+0x38>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004866:	d00b      	beq.n	8004880 <TIM_Base_SetConfig+0x38>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a37      	ldr	r2, [pc, #220]	@ (8004948 <TIM_Base_SetConfig+0x100>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d007      	beq.n	8004880 <TIM_Base_SetConfig+0x38>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a36      	ldr	r2, [pc, #216]	@ (800494c <TIM_Base_SetConfig+0x104>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_Base_SetConfig+0x38>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a35      	ldr	r2, [pc, #212]	@ (8004950 <TIM_Base_SetConfig+0x108>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d108      	bne.n	8004892 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2b      	ldr	r2, [pc, #172]	@ (8004944 <TIM_Base_SetConfig+0xfc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01b      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a0:	d017      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a28      	ldr	r2, [pc, #160]	@ (8004948 <TIM_Base_SetConfig+0x100>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d013      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a27      	ldr	r2, [pc, #156]	@ (800494c <TIM_Base_SetConfig+0x104>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00f      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a26      	ldr	r2, [pc, #152]	@ (8004950 <TIM_Base_SetConfig+0x108>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00b      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a25      	ldr	r2, [pc, #148]	@ (8004954 <TIM_Base_SetConfig+0x10c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d007      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a24      	ldr	r2, [pc, #144]	@ (8004958 <TIM_Base_SetConfig+0x110>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d003      	beq.n	80048d2 <TIM_Base_SetConfig+0x8a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a23      	ldr	r2, [pc, #140]	@ (800495c <TIM_Base_SetConfig+0x114>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d108      	bne.n	80048e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a0e      	ldr	r2, [pc, #56]	@ (8004944 <TIM_Base_SetConfig+0xfc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d103      	bne.n	8004918 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b01      	cmp	r3, #1
 8004928:	d105      	bne.n	8004936 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f023 0201 	bic.w	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	611a      	str	r2, [r3, #16]
  }
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	40000c00 	.word	0x40000c00
 8004954:	40014000 	.word	0x40014000
 8004958:	40014400 	.word	0x40014400
 800495c:	40014800 	.word	0x40014800

08004960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f023 0201 	bic.w	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800498a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f023 030a 	bic.w	r3, r3, #10
 800499c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049be:	b480      	push	{r7}
 80049c0:	b087      	sub	sp, #28
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f023 0210 	bic.w	r2, r3, #16
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	031b      	lsls	r3, r3, #12
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	621a      	str	r2, [r3, #32]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f043 0307 	orr.w	r3, r3, #7
 8004a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	609a      	str	r2, [r3, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	021a      	lsls	r2, r3, #8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	609a      	str	r2, [r3, #8]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e050      	b.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1c      	ldr	r2, [pc, #112]	@ (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d018      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af8:	d013      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a18      	ldr	r2, [pc, #96]	@ (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a16      	ldr	r2, [pc, #88]	@ (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a15      	ldr	r2, [pc, #84]	@ (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a13      	ldr	r2, [pc, #76]	@ (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d10c      	bne.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40010000 	.word	0x40010000
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800
 8004b68:	40000c00 	.word	0x40000c00
 8004b6c:	40014000 	.word	0x40014000

08004b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e042      	b.n	8004c08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fd fb66 	bl	8002268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2224      	movs	r2, #36	@ 0x24
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f973 	bl	8004ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	@ 0x28
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d175      	bne.n	8004d1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_UART_Transmit+0x2c>
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e06e      	b.n	8004d1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2221      	movs	r2, #33	@ 0x21
 8004c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c4e:	f7fd fbe3 	bl	8002418 <HAL_GetTick>
 8004c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	88fa      	ldrh	r2, [r7, #6]
 8004c58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	88fa      	ldrh	r2, [r7, #6]
 8004c5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c68:	d108      	bne.n	8004c7c <HAL_UART_Transmit+0x6c>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d104      	bne.n	8004c7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	e003      	b.n	8004c84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c84:	e02e      	b.n	8004ce4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2180      	movs	r1, #128	@ 0x80
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f848 	bl	8004d26 <UART_WaitOnFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e03a      	b.n	8004d1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10b      	bne.n	8004cc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	61bb      	str	r3, [r7, #24]
 8004cc4:	e007      	b.n	8004cd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	781a      	ldrb	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1cb      	bne.n	8004c86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2140      	movs	r1, #64	@ 0x40
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f814 	bl	8004d26 <UART_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e006      	b.n	8004d1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
  }
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3720      	adds	r7, #32
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b086      	sub	sp, #24
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	4613      	mov	r3, r2
 8004d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d36:	e03b      	b.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3e:	d037      	beq.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d40:	f7fd fb6a 	bl	8002418 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	6a3a      	ldr	r2, [r7, #32]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d302      	bcc.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e03a      	b.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d023      	beq.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b80      	cmp	r3, #128	@ 0x80
 8004d6c:	d020      	beq.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b40      	cmp	r3, #64	@ 0x40
 8004d72:	d01d      	beq.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d116      	bne.n	8004db0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f81d 	bl	8004dd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2208      	movs	r2, #8
 8004da2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e00f      	b.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d0b4      	beq.n	8004d38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b095      	sub	sp, #84	@ 0x54
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e00:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e5      	bne.n	8004de0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3314      	adds	r3, #20
 8004e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3314      	adds	r3, #20
 8004e32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e5      	bne.n	8004e14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d119      	bne.n	8004e84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	330c      	adds	r3, #12
 8004e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f023 0310 	bic.w	r3, r3, #16
 8004e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e70:	61ba      	str	r2, [r7, #24]
 8004e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6979      	ldr	r1, [r7, #20]
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e5      	bne.n	8004e50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e92:	bf00      	nop
 8004e94:	3754      	adds	r7, #84	@ 0x54
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea4:	b0c0      	sub	sp, #256	@ 0x100
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	68d9      	ldr	r1, [r3, #12]
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	ea40 0301 	orr.w	r3, r0, r1
 8004ec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ef8:	f021 010c 	bic.w	r1, r1, #12
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f06:	430b      	orrs	r3, r1
 8004f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1a:	6999      	ldr	r1, [r3, #24]
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	ea40 0301 	orr.w	r3, r0, r1
 8004f26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4b8f      	ldr	r3, [pc, #572]	@ (800516c <UART_SetConfig+0x2cc>)
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d005      	beq.n	8004f40 <UART_SetConfig+0xa0>
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005170 <UART_SetConfig+0x2d0>)
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d104      	bne.n	8004f4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f40:	f7ff faf4 	bl	800452c <HAL_RCC_GetPCLK2Freq>
 8004f44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f48:	e003      	b.n	8004f52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f4a:	f7ff fadb 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 8004f4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f5c:	f040 810c 	bne.w	8005178 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f64:	2200      	movs	r2, #0
 8004f66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f72:	4622      	mov	r2, r4
 8004f74:	462b      	mov	r3, r5
 8004f76:	1891      	adds	r1, r2, r2
 8004f78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f7a:	415b      	adcs	r3, r3
 8004f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f82:	4621      	mov	r1, r4
 8004f84:	eb12 0801 	adds.w	r8, r2, r1
 8004f88:	4629      	mov	r1, r5
 8004f8a:	eb43 0901 	adc.w	r9, r3, r1
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fa2:	4690      	mov	r8, r2
 8004fa4:	4699      	mov	r9, r3
 8004fa6:	4623      	mov	r3, r4
 8004fa8:	eb18 0303 	adds.w	r3, r8, r3
 8004fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fb0:	462b      	mov	r3, r5
 8004fb2:	eb49 0303 	adc.w	r3, r9, r3
 8004fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fce:	460b      	mov	r3, r1
 8004fd0:	18db      	adds	r3, r3, r3
 8004fd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	eb42 0303 	adc.w	r3, r2, r3
 8004fda:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fe0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fe4:	f7fb fe58 	bl	8000c98 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4b61      	ldr	r3, [pc, #388]	@ (8005174 <UART_SetConfig+0x2d4>)
 8004fee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	011c      	lsls	r4, r3, #4
 8004ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005000:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005004:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005008:	4642      	mov	r2, r8
 800500a:	464b      	mov	r3, r9
 800500c:	1891      	adds	r1, r2, r2
 800500e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005010:	415b      	adcs	r3, r3
 8005012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005014:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005018:	4641      	mov	r1, r8
 800501a:	eb12 0a01 	adds.w	sl, r2, r1
 800501e:	4649      	mov	r1, r9
 8005020:	eb43 0b01 	adc.w	fp, r3, r1
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005030:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005038:	4692      	mov	sl, r2
 800503a:	469b      	mov	fp, r3
 800503c:	4643      	mov	r3, r8
 800503e:	eb1a 0303 	adds.w	r3, sl, r3
 8005042:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005046:	464b      	mov	r3, r9
 8005048:	eb4b 0303 	adc.w	r3, fp, r3
 800504c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800505c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005060:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005064:	460b      	mov	r3, r1
 8005066:	18db      	adds	r3, r3, r3
 8005068:	643b      	str	r3, [r7, #64]	@ 0x40
 800506a:	4613      	mov	r3, r2
 800506c:	eb42 0303 	adc.w	r3, r2, r3
 8005070:	647b      	str	r3, [r7, #68]	@ 0x44
 8005072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005076:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800507a:	f7fb fe0d 	bl	8000c98 <__aeabi_uldivmod>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4611      	mov	r1, r2
 8005084:	4b3b      	ldr	r3, [pc, #236]	@ (8005174 <UART_SetConfig+0x2d4>)
 8005086:	fba3 2301 	umull	r2, r3, r3, r1
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	2264      	movs	r2, #100	@ 0x64
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	1acb      	subs	r3, r1, r3
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800509a:	4b36      	ldr	r3, [pc, #216]	@ (8005174 <UART_SetConfig+0x2d4>)
 800509c:	fba3 2302 	umull	r2, r3, r3, r2
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050a8:	441c      	add	r4, r3
 80050aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050bc:	4642      	mov	r2, r8
 80050be:	464b      	mov	r3, r9
 80050c0:	1891      	adds	r1, r2, r2
 80050c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050c4:	415b      	adcs	r3, r3
 80050c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050cc:	4641      	mov	r1, r8
 80050ce:	1851      	adds	r1, r2, r1
 80050d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80050d2:	4649      	mov	r1, r9
 80050d4:	414b      	adcs	r3, r1
 80050d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050e4:	4659      	mov	r1, fp
 80050e6:	00cb      	lsls	r3, r1, #3
 80050e8:	4651      	mov	r1, sl
 80050ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ee:	4651      	mov	r1, sl
 80050f0:	00ca      	lsls	r2, r1, #3
 80050f2:	4610      	mov	r0, r2
 80050f4:	4619      	mov	r1, r3
 80050f6:	4603      	mov	r3, r0
 80050f8:	4642      	mov	r2, r8
 80050fa:	189b      	adds	r3, r3, r2
 80050fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005100:	464b      	mov	r3, r9
 8005102:	460a      	mov	r2, r1
 8005104:	eb42 0303 	adc.w	r3, r2, r3
 8005108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005118:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800511c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005120:	460b      	mov	r3, r1
 8005122:	18db      	adds	r3, r3, r3
 8005124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005126:	4613      	mov	r3, r2
 8005128:	eb42 0303 	adc.w	r3, r2, r3
 800512c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800512e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005132:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005136:	f7fb fdaf 	bl	8000c98 <__aeabi_uldivmod>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4b0d      	ldr	r3, [pc, #52]	@ (8005174 <UART_SetConfig+0x2d4>)
 8005140:	fba3 1302 	umull	r1, r3, r3, r2
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	2164      	movs	r1, #100	@ 0x64
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	3332      	adds	r3, #50	@ 0x32
 8005152:	4a08      	ldr	r2, [pc, #32]	@ (8005174 <UART_SetConfig+0x2d4>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	f003 0207 	and.w	r2, r3, #7
 800515e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4422      	add	r2, r4
 8005166:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005168:	e106      	b.n	8005378 <UART_SetConfig+0x4d8>
 800516a:	bf00      	nop
 800516c:	40011000 	.word	0x40011000
 8005170:	40011400 	.word	0x40011400
 8005174:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800517c:	2200      	movs	r2, #0
 800517e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005182:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005186:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800518a:	4642      	mov	r2, r8
 800518c:	464b      	mov	r3, r9
 800518e:	1891      	adds	r1, r2, r2
 8005190:	6239      	str	r1, [r7, #32]
 8005192:	415b      	adcs	r3, r3
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24
 8005196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800519a:	4641      	mov	r1, r8
 800519c:	1854      	adds	r4, r2, r1
 800519e:	4649      	mov	r1, r9
 80051a0:	eb43 0501 	adc.w	r5, r3, r1
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	00eb      	lsls	r3, r5, #3
 80051ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051b2:	00e2      	lsls	r2, r4, #3
 80051b4:	4614      	mov	r4, r2
 80051b6:	461d      	mov	r5, r3
 80051b8:	4643      	mov	r3, r8
 80051ba:	18e3      	adds	r3, r4, r3
 80051bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051c0:	464b      	mov	r3, r9
 80051c2:	eb45 0303 	adc.w	r3, r5, r3
 80051c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051e6:	4629      	mov	r1, r5
 80051e8:	008b      	lsls	r3, r1, #2
 80051ea:	4621      	mov	r1, r4
 80051ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051f0:	4621      	mov	r1, r4
 80051f2:	008a      	lsls	r2, r1, #2
 80051f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051f8:	f7fb fd4e 	bl	8000c98 <__aeabi_uldivmod>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4b60      	ldr	r3, [pc, #384]	@ (8005384 <UART_SetConfig+0x4e4>)
 8005202:	fba3 2302 	umull	r2, r3, r3, r2
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	011c      	lsls	r4, r3, #4
 800520a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800520e:	2200      	movs	r2, #0
 8005210:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005214:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005218:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800521c:	4642      	mov	r2, r8
 800521e:	464b      	mov	r3, r9
 8005220:	1891      	adds	r1, r2, r2
 8005222:	61b9      	str	r1, [r7, #24]
 8005224:	415b      	adcs	r3, r3
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800522c:	4641      	mov	r1, r8
 800522e:	1851      	adds	r1, r2, r1
 8005230:	6139      	str	r1, [r7, #16]
 8005232:	4649      	mov	r1, r9
 8005234:	414b      	adcs	r3, r1
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005244:	4659      	mov	r1, fp
 8005246:	00cb      	lsls	r3, r1, #3
 8005248:	4651      	mov	r1, sl
 800524a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800524e:	4651      	mov	r1, sl
 8005250:	00ca      	lsls	r2, r1, #3
 8005252:	4610      	mov	r0, r2
 8005254:	4619      	mov	r1, r3
 8005256:	4603      	mov	r3, r0
 8005258:	4642      	mov	r2, r8
 800525a:	189b      	adds	r3, r3, r2
 800525c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005260:	464b      	mov	r3, r9
 8005262:	460a      	mov	r2, r1
 8005264:	eb42 0303 	adc.w	r3, r2, r3
 8005268:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005276:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005284:	4649      	mov	r1, r9
 8005286:	008b      	lsls	r3, r1, #2
 8005288:	4641      	mov	r1, r8
 800528a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800528e:	4641      	mov	r1, r8
 8005290:	008a      	lsls	r2, r1, #2
 8005292:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005296:	f7fb fcff 	bl	8000c98 <__aeabi_uldivmod>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4611      	mov	r1, r2
 80052a0:	4b38      	ldr	r3, [pc, #224]	@ (8005384 <UART_SetConfig+0x4e4>)
 80052a2:	fba3 2301 	umull	r2, r3, r3, r1
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	2264      	movs	r2, #100	@ 0x64
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	1acb      	subs	r3, r1, r3
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	3332      	adds	r3, #50	@ 0x32
 80052b4:	4a33      	ldr	r2, [pc, #204]	@ (8005384 <UART_SetConfig+0x4e4>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052c0:	441c      	add	r4, r3
 80052c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c6:	2200      	movs	r2, #0
 80052c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80052ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80052cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052d0:	4642      	mov	r2, r8
 80052d2:	464b      	mov	r3, r9
 80052d4:	1891      	adds	r1, r2, r2
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	415b      	adcs	r3, r3
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052e0:	4641      	mov	r1, r8
 80052e2:	1851      	adds	r1, r2, r1
 80052e4:	6039      	str	r1, [r7, #0]
 80052e6:	4649      	mov	r1, r9
 80052e8:	414b      	adcs	r3, r1
 80052ea:	607b      	str	r3, [r7, #4]
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052f8:	4659      	mov	r1, fp
 80052fa:	00cb      	lsls	r3, r1, #3
 80052fc:	4651      	mov	r1, sl
 80052fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005302:	4651      	mov	r1, sl
 8005304:	00ca      	lsls	r2, r1, #3
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	4603      	mov	r3, r0
 800530c:	4642      	mov	r2, r8
 800530e:	189b      	adds	r3, r3, r2
 8005310:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005312:	464b      	mov	r3, r9
 8005314:	460a      	mov	r2, r1
 8005316:	eb42 0303 	adc.w	r3, r2, r3
 800531a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	663b      	str	r3, [r7, #96]	@ 0x60
 8005326:	667a      	str	r2, [r7, #100]	@ 0x64
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005334:	4649      	mov	r1, r9
 8005336:	008b      	lsls	r3, r1, #2
 8005338:	4641      	mov	r1, r8
 800533a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800533e:	4641      	mov	r1, r8
 8005340:	008a      	lsls	r2, r1, #2
 8005342:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005346:	f7fb fca7 	bl	8000c98 <__aeabi_uldivmod>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <UART_SetConfig+0x4e4>)
 8005350:	fba3 1302 	umull	r1, r3, r3, r2
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	2164      	movs	r1, #100	@ 0x64
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	3332      	adds	r3, #50	@ 0x32
 8005362:	4a08      	ldr	r2, [pc, #32]	@ (8005384 <UART_SetConfig+0x4e4>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	f003 020f 	and.w	r2, r3, #15
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4422      	add	r2, r4
 8005376:	609a      	str	r2, [r3, #8]
}
 8005378:	bf00      	nop
 800537a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800537e:	46bd      	mov	sp, r7
 8005380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005384:	51eb851f 	.word	0x51eb851f

08005388 <__cvt>:
 8005388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800538c:	ec57 6b10 	vmov	r6, r7, d0
 8005390:	2f00      	cmp	r7, #0
 8005392:	460c      	mov	r4, r1
 8005394:	4619      	mov	r1, r3
 8005396:	463b      	mov	r3, r7
 8005398:	bfbb      	ittet	lt
 800539a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800539e:	461f      	movlt	r7, r3
 80053a0:	2300      	movge	r3, #0
 80053a2:	232d      	movlt	r3, #45	@ 0x2d
 80053a4:	700b      	strb	r3, [r1, #0]
 80053a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80053ac:	4691      	mov	r9, r2
 80053ae:	f023 0820 	bic.w	r8, r3, #32
 80053b2:	bfbc      	itt	lt
 80053b4:	4632      	movlt	r2, r6
 80053b6:	4616      	movlt	r6, r2
 80053b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053bc:	d005      	beq.n	80053ca <__cvt+0x42>
 80053be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80053c2:	d100      	bne.n	80053c6 <__cvt+0x3e>
 80053c4:	3401      	adds	r4, #1
 80053c6:	2102      	movs	r1, #2
 80053c8:	e000      	b.n	80053cc <__cvt+0x44>
 80053ca:	2103      	movs	r1, #3
 80053cc:	ab03      	add	r3, sp, #12
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	ab02      	add	r3, sp, #8
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	ec47 6b10 	vmov	d0, r6, r7
 80053d8:	4653      	mov	r3, sl
 80053da:	4622      	mov	r2, r4
 80053dc:	f001 f888 	bl	80064f0 <_dtoa_r>
 80053e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80053e4:	4605      	mov	r5, r0
 80053e6:	d119      	bne.n	800541c <__cvt+0x94>
 80053e8:	f019 0f01 	tst.w	r9, #1
 80053ec:	d00e      	beq.n	800540c <__cvt+0x84>
 80053ee:	eb00 0904 	add.w	r9, r0, r4
 80053f2:	2200      	movs	r2, #0
 80053f4:	2300      	movs	r3, #0
 80053f6:	4630      	mov	r0, r6
 80053f8:	4639      	mov	r1, r7
 80053fa:	f7fb fb6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80053fe:	b108      	cbz	r0, 8005404 <__cvt+0x7c>
 8005400:	f8cd 900c 	str.w	r9, [sp, #12]
 8005404:	2230      	movs	r2, #48	@ 0x30
 8005406:	9b03      	ldr	r3, [sp, #12]
 8005408:	454b      	cmp	r3, r9
 800540a:	d31e      	bcc.n	800544a <__cvt+0xc2>
 800540c:	9b03      	ldr	r3, [sp, #12]
 800540e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005410:	1b5b      	subs	r3, r3, r5
 8005412:	4628      	mov	r0, r5
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	b004      	add	sp, #16
 8005418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005420:	eb00 0904 	add.w	r9, r0, r4
 8005424:	d1e5      	bne.n	80053f2 <__cvt+0x6a>
 8005426:	7803      	ldrb	r3, [r0, #0]
 8005428:	2b30      	cmp	r3, #48	@ 0x30
 800542a:	d10a      	bne.n	8005442 <__cvt+0xba>
 800542c:	2200      	movs	r2, #0
 800542e:	2300      	movs	r3, #0
 8005430:	4630      	mov	r0, r6
 8005432:	4639      	mov	r1, r7
 8005434:	f7fb fb50 	bl	8000ad8 <__aeabi_dcmpeq>
 8005438:	b918      	cbnz	r0, 8005442 <__cvt+0xba>
 800543a:	f1c4 0401 	rsb	r4, r4, #1
 800543e:	f8ca 4000 	str.w	r4, [sl]
 8005442:	f8da 3000 	ldr.w	r3, [sl]
 8005446:	4499      	add	r9, r3
 8005448:	e7d3      	b.n	80053f2 <__cvt+0x6a>
 800544a:	1c59      	adds	r1, r3, #1
 800544c:	9103      	str	r1, [sp, #12]
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	e7d9      	b.n	8005406 <__cvt+0x7e>

08005452 <__exponent>:
 8005452:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005454:	2900      	cmp	r1, #0
 8005456:	bfba      	itte	lt
 8005458:	4249      	neglt	r1, r1
 800545a:	232d      	movlt	r3, #45	@ 0x2d
 800545c:	232b      	movge	r3, #43	@ 0x2b
 800545e:	2909      	cmp	r1, #9
 8005460:	7002      	strb	r2, [r0, #0]
 8005462:	7043      	strb	r3, [r0, #1]
 8005464:	dd29      	ble.n	80054ba <__exponent+0x68>
 8005466:	f10d 0307 	add.w	r3, sp, #7
 800546a:	461d      	mov	r5, r3
 800546c:	270a      	movs	r7, #10
 800546e:	461a      	mov	r2, r3
 8005470:	fbb1 f6f7 	udiv	r6, r1, r7
 8005474:	fb07 1416 	mls	r4, r7, r6, r1
 8005478:	3430      	adds	r4, #48	@ 0x30
 800547a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800547e:	460c      	mov	r4, r1
 8005480:	2c63      	cmp	r4, #99	@ 0x63
 8005482:	f103 33ff 	add.w	r3, r3, #4294967295
 8005486:	4631      	mov	r1, r6
 8005488:	dcf1      	bgt.n	800546e <__exponent+0x1c>
 800548a:	3130      	adds	r1, #48	@ 0x30
 800548c:	1e94      	subs	r4, r2, #2
 800548e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005492:	1c41      	adds	r1, r0, #1
 8005494:	4623      	mov	r3, r4
 8005496:	42ab      	cmp	r3, r5
 8005498:	d30a      	bcc.n	80054b0 <__exponent+0x5e>
 800549a:	f10d 0309 	add.w	r3, sp, #9
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	42ac      	cmp	r4, r5
 80054a2:	bf88      	it	hi
 80054a4:	2300      	movhi	r3, #0
 80054a6:	3302      	adds	r3, #2
 80054a8:	4403      	add	r3, r0
 80054aa:	1a18      	subs	r0, r3, r0
 80054ac:	b003      	add	sp, #12
 80054ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80054b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80054b8:	e7ed      	b.n	8005496 <__exponent+0x44>
 80054ba:	2330      	movs	r3, #48	@ 0x30
 80054bc:	3130      	adds	r1, #48	@ 0x30
 80054be:	7083      	strb	r3, [r0, #2]
 80054c0:	70c1      	strb	r1, [r0, #3]
 80054c2:	1d03      	adds	r3, r0, #4
 80054c4:	e7f1      	b.n	80054aa <__exponent+0x58>
	...

080054c8 <_printf_float>:
 80054c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	b08d      	sub	sp, #52	@ 0x34
 80054ce:	460c      	mov	r4, r1
 80054d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80054d4:	4616      	mov	r6, r2
 80054d6:	461f      	mov	r7, r3
 80054d8:	4605      	mov	r5, r0
 80054da:	f000 ff01 	bl	80062e0 <_localeconv_r>
 80054de:	6803      	ldr	r3, [r0, #0]
 80054e0:	9304      	str	r3, [sp, #16]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fa fecc 	bl	8000280 <strlen>
 80054e8:	2300      	movs	r3, #0
 80054ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80054ec:	f8d8 3000 	ldr.w	r3, [r8]
 80054f0:	9005      	str	r0, [sp, #20]
 80054f2:	3307      	adds	r3, #7
 80054f4:	f023 0307 	bic.w	r3, r3, #7
 80054f8:	f103 0208 	add.w	r2, r3, #8
 80054fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005500:	f8d4 b000 	ldr.w	fp, [r4]
 8005504:	f8c8 2000 	str.w	r2, [r8]
 8005508:	e9d3 8900 	ldrd	r8, r9, [r3]
 800550c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005510:	9307      	str	r3, [sp, #28]
 8005512:	f8cd 8018 	str.w	r8, [sp, #24]
 8005516:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800551a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800551e:	4b9c      	ldr	r3, [pc, #624]	@ (8005790 <_printf_float+0x2c8>)
 8005520:	f04f 32ff 	mov.w	r2, #4294967295
 8005524:	f7fb fb0a 	bl	8000b3c <__aeabi_dcmpun>
 8005528:	bb70      	cbnz	r0, 8005588 <_printf_float+0xc0>
 800552a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800552e:	4b98      	ldr	r3, [pc, #608]	@ (8005790 <_printf_float+0x2c8>)
 8005530:	f04f 32ff 	mov.w	r2, #4294967295
 8005534:	f7fb fae4 	bl	8000b00 <__aeabi_dcmple>
 8005538:	bb30      	cbnz	r0, 8005588 <_printf_float+0xc0>
 800553a:	2200      	movs	r2, #0
 800553c:	2300      	movs	r3, #0
 800553e:	4640      	mov	r0, r8
 8005540:	4649      	mov	r1, r9
 8005542:	f7fb fad3 	bl	8000aec <__aeabi_dcmplt>
 8005546:	b110      	cbz	r0, 800554e <_printf_float+0x86>
 8005548:	232d      	movs	r3, #45	@ 0x2d
 800554a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800554e:	4a91      	ldr	r2, [pc, #580]	@ (8005794 <_printf_float+0x2cc>)
 8005550:	4b91      	ldr	r3, [pc, #580]	@ (8005798 <_printf_float+0x2d0>)
 8005552:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005556:	bf94      	ite	ls
 8005558:	4690      	movls	r8, r2
 800555a:	4698      	movhi	r8, r3
 800555c:	2303      	movs	r3, #3
 800555e:	6123      	str	r3, [r4, #16]
 8005560:	f02b 0304 	bic.w	r3, fp, #4
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	f04f 0900 	mov.w	r9, #0
 800556a:	9700      	str	r7, [sp, #0]
 800556c:	4633      	mov	r3, r6
 800556e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005570:	4621      	mov	r1, r4
 8005572:	4628      	mov	r0, r5
 8005574:	f000 f9d2 	bl	800591c <_printf_common>
 8005578:	3001      	adds	r0, #1
 800557a:	f040 808d 	bne.w	8005698 <_printf_float+0x1d0>
 800557e:	f04f 30ff 	mov.w	r0, #4294967295
 8005582:	b00d      	add	sp, #52	@ 0x34
 8005584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005588:	4642      	mov	r2, r8
 800558a:	464b      	mov	r3, r9
 800558c:	4640      	mov	r0, r8
 800558e:	4649      	mov	r1, r9
 8005590:	f7fb fad4 	bl	8000b3c <__aeabi_dcmpun>
 8005594:	b140      	cbz	r0, 80055a8 <_printf_float+0xe0>
 8005596:	464b      	mov	r3, r9
 8005598:	2b00      	cmp	r3, #0
 800559a:	bfbc      	itt	lt
 800559c:	232d      	movlt	r3, #45	@ 0x2d
 800559e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80055a2:	4a7e      	ldr	r2, [pc, #504]	@ (800579c <_printf_float+0x2d4>)
 80055a4:	4b7e      	ldr	r3, [pc, #504]	@ (80057a0 <_printf_float+0x2d8>)
 80055a6:	e7d4      	b.n	8005552 <_printf_float+0x8a>
 80055a8:	6863      	ldr	r3, [r4, #4]
 80055aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80055ae:	9206      	str	r2, [sp, #24]
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	d13b      	bne.n	800562c <_printf_float+0x164>
 80055b4:	2306      	movs	r3, #6
 80055b6:	6063      	str	r3, [r4, #4]
 80055b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80055bc:	2300      	movs	r3, #0
 80055be:	6022      	str	r2, [r4, #0]
 80055c0:	9303      	str	r3, [sp, #12]
 80055c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80055c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80055c8:	ab09      	add	r3, sp, #36	@ 0x24
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	6861      	ldr	r1, [r4, #4]
 80055ce:	ec49 8b10 	vmov	d0, r8, r9
 80055d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80055d6:	4628      	mov	r0, r5
 80055d8:	f7ff fed6 	bl	8005388 <__cvt>
 80055dc:	9b06      	ldr	r3, [sp, #24]
 80055de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80055e0:	2b47      	cmp	r3, #71	@ 0x47
 80055e2:	4680      	mov	r8, r0
 80055e4:	d129      	bne.n	800563a <_printf_float+0x172>
 80055e6:	1cc8      	adds	r0, r1, #3
 80055e8:	db02      	blt.n	80055f0 <_printf_float+0x128>
 80055ea:	6863      	ldr	r3, [r4, #4]
 80055ec:	4299      	cmp	r1, r3
 80055ee:	dd41      	ble.n	8005674 <_printf_float+0x1ac>
 80055f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80055f4:	fa5f fa8a 	uxtb.w	sl, sl
 80055f8:	3901      	subs	r1, #1
 80055fa:	4652      	mov	r2, sl
 80055fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005600:	9109      	str	r1, [sp, #36]	@ 0x24
 8005602:	f7ff ff26 	bl	8005452 <__exponent>
 8005606:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005608:	1813      	adds	r3, r2, r0
 800560a:	2a01      	cmp	r2, #1
 800560c:	4681      	mov	r9, r0
 800560e:	6123      	str	r3, [r4, #16]
 8005610:	dc02      	bgt.n	8005618 <_printf_float+0x150>
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	07d2      	lsls	r2, r2, #31
 8005616:	d501      	bpl.n	800561c <_printf_float+0x154>
 8005618:	3301      	adds	r3, #1
 800561a:	6123      	str	r3, [r4, #16]
 800561c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0a2      	beq.n	800556a <_printf_float+0xa2>
 8005624:	232d      	movs	r3, #45	@ 0x2d
 8005626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800562a:	e79e      	b.n	800556a <_printf_float+0xa2>
 800562c:	9a06      	ldr	r2, [sp, #24]
 800562e:	2a47      	cmp	r2, #71	@ 0x47
 8005630:	d1c2      	bne.n	80055b8 <_printf_float+0xf0>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1c0      	bne.n	80055b8 <_printf_float+0xf0>
 8005636:	2301      	movs	r3, #1
 8005638:	e7bd      	b.n	80055b6 <_printf_float+0xee>
 800563a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800563e:	d9db      	bls.n	80055f8 <_printf_float+0x130>
 8005640:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005644:	d118      	bne.n	8005678 <_printf_float+0x1b0>
 8005646:	2900      	cmp	r1, #0
 8005648:	6863      	ldr	r3, [r4, #4]
 800564a:	dd0b      	ble.n	8005664 <_printf_float+0x19c>
 800564c:	6121      	str	r1, [r4, #16]
 800564e:	b913      	cbnz	r3, 8005656 <_printf_float+0x18e>
 8005650:	6822      	ldr	r2, [r4, #0]
 8005652:	07d0      	lsls	r0, r2, #31
 8005654:	d502      	bpl.n	800565c <_printf_float+0x194>
 8005656:	3301      	adds	r3, #1
 8005658:	440b      	add	r3, r1
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800565e:	f04f 0900 	mov.w	r9, #0
 8005662:	e7db      	b.n	800561c <_printf_float+0x154>
 8005664:	b913      	cbnz	r3, 800566c <_printf_float+0x1a4>
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	07d2      	lsls	r2, r2, #31
 800566a:	d501      	bpl.n	8005670 <_printf_float+0x1a8>
 800566c:	3302      	adds	r3, #2
 800566e:	e7f4      	b.n	800565a <_printf_float+0x192>
 8005670:	2301      	movs	r3, #1
 8005672:	e7f2      	b.n	800565a <_printf_float+0x192>
 8005674:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800567a:	4299      	cmp	r1, r3
 800567c:	db05      	blt.n	800568a <_printf_float+0x1c2>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	6121      	str	r1, [r4, #16]
 8005682:	07d8      	lsls	r0, r3, #31
 8005684:	d5ea      	bpl.n	800565c <_printf_float+0x194>
 8005686:	1c4b      	adds	r3, r1, #1
 8005688:	e7e7      	b.n	800565a <_printf_float+0x192>
 800568a:	2900      	cmp	r1, #0
 800568c:	bfd4      	ite	le
 800568e:	f1c1 0202 	rsble	r2, r1, #2
 8005692:	2201      	movgt	r2, #1
 8005694:	4413      	add	r3, r2
 8005696:	e7e0      	b.n	800565a <_printf_float+0x192>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	055a      	lsls	r2, r3, #21
 800569c:	d407      	bmi.n	80056ae <_printf_float+0x1e6>
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	4642      	mov	r2, r8
 80056a2:	4631      	mov	r1, r6
 80056a4:	4628      	mov	r0, r5
 80056a6:	47b8      	blx	r7
 80056a8:	3001      	adds	r0, #1
 80056aa:	d12b      	bne.n	8005704 <_printf_float+0x23c>
 80056ac:	e767      	b.n	800557e <_printf_float+0xb6>
 80056ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056b2:	f240 80dd 	bls.w	8005870 <_printf_float+0x3a8>
 80056b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056ba:	2200      	movs	r2, #0
 80056bc:	2300      	movs	r3, #0
 80056be:	f7fb fa0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d033      	beq.n	800572e <_printf_float+0x266>
 80056c6:	4a37      	ldr	r2, [pc, #220]	@ (80057a4 <_printf_float+0x2dc>)
 80056c8:	2301      	movs	r3, #1
 80056ca:	4631      	mov	r1, r6
 80056cc:	4628      	mov	r0, r5
 80056ce:	47b8      	blx	r7
 80056d0:	3001      	adds	r0, #1
 80056d2:	f43f af54 	beq.w	800557e <_printf_float+0xb6>
 80056d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80056da:	4543      	cmp	r3, r8
 80056dc:	db02      	blt.n	80056e4 <_printf_float+0x21c>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	07d8      	lsls	r0, r3, #31
 80056e2:	d50f      	bpl.n	8005704 <_printf_float+0x23c>
 80056e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056e8:	4631      	mov	r1, r6
 80056ea:	4628      	mov	r0, r5
 80056ec:	47b8      	blx	r7
 80056ee:	3001      	adds	r0, #1
 80056f0:	f43f af45 	beq.w	800557e <_printf_float+0xb6>
 80056f4:	f04f 0900 	mov.w	r9, #0
 80056f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80056fc:	f104 0a1a 	add.w	sl, r4, #26
 8005700:	45c8      	cmp	r8, r9
 8005702:	dc09      	bgt.n	8005718 <_printf_float+0x250>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	079b      	lsls	r3, r3, #30
 8005708:	f100 8103 	bmi.w	8005912 <_printf_float+0x44a>
 800570c:	68e0      	ldr	r0, [r4, #12]
 800570e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005710:	4298      	cmp	r0, r3
 8005712:	bfb8      	it	lt
 8005714:	4618      	movlt	r0, r3
 8005716:	e734      	b.n	8005582 <_printf_float+0xba>
 8005718:	2301      	movs	r3, #1
 800571a:	4652      	mov	r2, sl
 800571c:	4631      	mov	r1, r6
 800571e:	4628      	mov	r0, r5
 8005720:	47b8      	blx	r7
 8005722:	3001      	adds	r0, #1
 8005724:	f43f af2b 	beq.w	800557e <_printf_float+0xb6>
 8005728:	f109 0901 	add.w	r9, r9, #1
 800572c:	e7e8      	b.n	8005700 <_printf_float+0x238>
 800572e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	dc39      	bgt.n	80057a8 <_printf_float+0x2e0>
 8005734:	4a1b      	ldr	r2, [pc, #108]	@ (80057a4 <_printf_float+0x2dc>)
 8005736:	2301      	movs	r3, #1
 8005738:	4631      	mov	r1, r6
 800573a:	4628      	mov	r0, r5
 800573c:	47b8      	blx	r7
 800573e:	3001      	adds	r0, #1
 8005740:	f43f af1d 	beq.w	800557e <_printf_float+0xb6>
 8005744:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005748:	ea59 0303 	orrs.w	r3, r9, r3
 800574c:	d102      	bne.n	8005754 <_printf_float+0x28c>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	07d9      	lsls	r1, r3, #31
 8005752:	d5d7      	bpl.n	8005704 <_printf_float+0x23c>
 8005754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005758:	4631      	mov	r1, r6
 800575a:	4628      	mov	r0, r5
 800575c:	47b8      	blx	r7
 800575e:	3001      	adds	r0, #1
 8005760:	f43f af0d 	beq.w	800557e <_printf_float+0xb6>
 8005764:	f04f 0a00 	mov.w	sl, #0
 8005768:	f104 0b1a 	add.w	fp, r4, #26
 800576c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800576e:	425b      	negs	r3, r3
 8005770:	4553      	cmp	r3, sl
 8005772:	dc01      	bgt.n	8005778 <_printf_float+0x2b0>
 8005774:	464b      	mov	r3, r9
 8005776:	e793      	b.n	80056a0 <_printf_float+0x1d8>
 8005778:	2301      	movs	r3, #1
 800577a:	465a      	mov	r2, fp
 800577c:	4631      	mov	r1, r6
 800577e:	4628      	mov	r0, r5
 8005780:	47b8      	blx	r7
 8005782:	3001      	adds	r0, #1
 8005784:	f43f aefb 	beq.w	800557e <_printf_float+0xb6>
 8005788:	f10a 0a01 	add.w	sl, sl, #1
 800578c:	e7ee      	b.n	800576c <_printf_float+0x2a4>
 800578e:	bf00      	nop
 8005790:	7fefffff 	.word	0x7fefffff
 8005794:	0800b83c 	.word	0x0800b83c
 8005798:	0800b840 	.word	0x0800b840
 800579c:	0800b844 	.word	0x0800b844
 80057a0:	0800b848 	.word	0x0800b848
 80057a4:	0800b84c 	.word	0x0800b84c
 80057a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80057ae:	4553      	cmp	r3, sl
 80057b0:	bfa8      	it	ge
 80057b2:	4653      	movge	r3, sl
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	4699      	mov	r9, r3
 80057b8:	dc36      	bgt.n	8005828 <_printf_float+0x360>
 80057ba:	f04f 0b00 	mov.w	fp, #0
 80057be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057c2:	f104 021a 	add.w	r2, r4, #26
 80057c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057c8:	9306      	str	r3, [sp, #24]
 80057ca:	eba3 0309 	sub.w	r3, r3, r9
 80057ce:	455b      	cmp	r3, fp
 80057d0:	dc31      	bgt.n	8005836 <_printf_float+0x36e>
 80057d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d4:	459a      	cmp	sl, r3
 80057d6:	dc3a      	bgt.n	800584e <_printf_float+0x386>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	07da      	lsls	r2, r3, #31
 80057dc:	d437      	bmi.n	800584e <_printf_float+0x386>
 80057de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e0:	ebaa 0903 	sub.w	r9, sl, r3
 80057e4:	9b06      	ldr	r3, [sp, #24]
 80057e6:	ebaa 0303 	sub.w	r3, sl, r3
 80057ea:	4599      	cmp	r9, r3
 80057ec:	bfa8      	it	ge
 80057ee:	4699      	movge	r9, r3
 80057f0:	f1b9 0f00 	cmp.w	r9, #0
 80057f4:	dc33      	bgt.n	800585e <_printf_float+0x396>
 80057f6:	f04f 0800 	mov.w	r8, #0
 80057fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057fe:	f104 0b1a 	add.w	fp, r4, #26
 8005802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005804:	ebaa 0303 	sub.w	r3, sl, r3
 8005808:	eba3 0309 	sub.w	r3, r3, r9
 800580c:	4543      	cmp	r3, r8
 800580e:	f77f af79 	ble.w	8005704 <_printf_float+0x23c>
 8005812:	2301      	movs	r3, #1
 8005814:	465a      	mov	r2, fp
 8005816:	4631      	mov	r1, r6
 8005818:	4628      	mov	r0, r5
 800581a:	47b8      	blx	r7
 800581c:	3001      	adds	r0, #1
 800581e:	f43f aeae 	beq.w	800557e <_printf_float+0xb6>
 8005822:	f108 0801 	add.w	r8, r8, #1
 8005826:	e7ec      	b.n	8005802 <_printf_float+0x33a>
 8005828:	4642      	mov	r2, r8
 800582a:	4631      	mov	r1, r6
 800582c:	4628      	mov	r0, r5
 800582e:	47b8      	blx	r7
 8005830:	3001      	adds	r0, #1
 8005832:	d1c2      	bne.n	80057ba <_printf_float+0x2f2>
 8005834:	e6a3      	b.n	800557e <_printf_float+0xb6>
 8005836:	2301      	movs	r3, #1
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	9206      	str	r2, [sp, #24]
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	f43f ae9c 	beq.w	800557e <_printf_float+0xb6>
 8005846:	9a06      	ldr	r2, [sp, #24]
 8005848:	f10b 0b01 	add.w	fp, fp, #1
 800584c:	e7bb      	b.n	80057c6 <_printf_float+0x2fe>
 800584e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005852:	4631      	mov	r1, r6
 8005854:	4628      	mov	r0, r5
 8005856:	47b8      	blx	r7
 8005858:	3001      	adds	r0, #1
 800585a:	d1c0      	bne.n	80057de <_printf_float+0x316>
 800585c:	e68f      	b.n	800557e <_printf_float+0xb6>
 800585e:	9a06      	ldr	r2, [sp, #24]
 8005860:	464b      	mov	r3, r9
 8005862:	4442      	add	r2, r8
 8005864:	4631      	mov	r1, r6
 8005866:	4628      	mov	r0, r5
 8005868:	47b8      	blx	r7
 800586a:	3001      	adds	r0, #1
 800586c:	d1c3      	bne.n	80057f6 <_printf_float+0x32e>
 800586e:	e686      	b.n	800557e <_printf_float+0xb6>
 8005870:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005874:	f1ba 0f01 	cmp.w	sl, #1
 8005878:	dc01      	bgt.n	800587e <_printf_float+0x3b6>
 800587a:	07db      	lsls	r3, r3, #31
 800587c:	d536      	bpl.n	80058ec <_printf_float+0x424>
 800587e:	2301      	movs	r3, #1
 8005880:	4642      	mov	r2, r8
 8005882:	4631      	mov	r1, r6
 8005884:	4628      	mov	r0, r5
 8005886:	47b8      	blx	r7
 8005888:	3001      	adds	r0, #1
 800588a:	f43f ae78 	beq.w	800557e <_printf_float+0xb6>
 800588e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005892:	4631      	mov	r1, r6
 8005894:	4628      	mov	r0, r5
 8005896:	47b8      	blx	r7
 8005898:	3001      	adds	r0, #1
 800589a:	f43f ae70 	beq.w	800557e <_printf_float+0xb6>
 800589e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058a2:	2200      	movs	r2, #0
 80058a4:	2300      	movs	r3, #0
 80058a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058aa:	f7fb f915 	bl	8000ad8 <__aeabi_dcmpeq>
 80058ae:	b9c0      	cbnz	r0, 80058e2 <_printf_float+0x41a>
 80058b0:	4653      	mov	r3, sl
 80058b2:	f108 0201 	add.w	r2, r8, #1
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	d10c      	bne.n	80058da <_printf_float+0x412>
 80058c0:	e65d      	b.n	800557e <_printf_float+0xb6>
 80058c2:	2301      	movs	r3, #1
 80058c4:	465a      	mov	r2, fp
 80058c6:	4631      	mov	r1, r6
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b8      	blx	r7
 80058cc:	3001      	adds	r0, #1
 80058ce:	f43f ae56 	beq.w	800557e <_printf_float+0xb6>
 80058d2:	f108 0801 	add.w	r8, r8, #1
 80058d6:	45d0      	cmp	r8, sl
 80058d8:	dbf3      	blt.n	80058c2 <_printf_float+0x3fa>
 80058da:	464b      	mov	r3, r9
 80058dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80058e0:	e6df      	b.n	80056a2 <_printf_float+0x1da>
 80058e2:	f04f 0800 	mov.w	r8, #0
 80058e6:	f104 0b1a 	add.w	fp, r4, #26
 80058ea:	e7f4      	b.n	80058d6 <_printf_float+0x40e>
 80058ec:	2301      	movs	r3, #1
 80058ee:	4642      	mov	r2, r8
 80058f0:	e7e1      	b.n	80058b6 <_printf_float+0x3ee>
 80058f2:	2301      	movs	r3, #1
 80058f4:	464a      	mov	r2, r9
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b8      	blx	r7
 80058fc:	3001      	adds	r0, #1
 80058fe:	f43f ae3e 	beq.w	800557e <_printf_float+0xb6>
 8005902:	f108 0801 	add.w	r8, r8, #1
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800590a:	1a5b      	subs	r3, r3, r1
 800590c:	4543      	cmp	r3, r8
 800590e:	dcf0      	bgt.n	80058f2 <_printf_float+0x42a>
 8005910:	e6fc      	b.n	800570c <_printf_float+0x244>
 8005912:	f04f 0800 	mov.w	r8, #0
 8005916:	f104 0919 	add.w	r9, r4, #25
 800591a:	e7f4      	b.n	8005906 <_printf_float+0x43e>

0800591c <_printf_common>:
 800591c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	4616      	mov	r6, r2
 8005922:	4698      	mov	r8, r3
 8005924:	688a      	ldr	r2, [r1, #8]
 8005926:	690b      	ldr	r3, [r1, #16]
 8005928:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800592c:	4293      	cmp	r3, r2
 800592e:	bfb8      	it	lt
 8005930:	4613      	movlt	r3, r2
 8005932:	6033      	str	r3, [r6, #0]
 8005934:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005938:	4607      	mov	r7, r0
 800593a:	460c      	mov	r4, r1
 800593c:	b10a      	cbz	r2, 8005942 <_printf_common+0x26>
 800593e:	3301      	adds	r3, #1
 8005940:	6033      	str	r3, [r6, #0]
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	0699      	lsls	r1, r3, #26
 8005946:	bf42      	ittt	mi
 8005948:	6833      	ldrmi	r3, [r6, #0]
 800594a:	3302      	addmi	r3, #2
 800594c:	6033      	strmi	r3, [r6, #0]
 800594e:	6825      	ldr	r5, [r4, #0]
 8005950:	f015 0506 	ands.w	r5, r5, #6
 8005954:	d106      	bne.n	8005964 <_printf_common+0x48>
 8005956:	f104 0a19 	add.w	sl, r4, #25
 800595a:	68e3      	ldr	r3, [r4, #12]
 800595c:	6832      	ldr	r2, [r6, #0]
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	42ab      	cmp	r3, r5
 8005962:	dc26      	bgt.n	80059b2 <_printf_common+0x96>
 8005964:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005968:	6822      	ldr	r2, [r4, #0]
 800596a:	3b00      	subs	r3, #0
 800596c:	bf18      	it	ne
 800596e:	2301      	movne	r3, #1
 8005970:	0692      	lsls	r2, r2, #26
 8005972:	d42b      	bmi.n	80059cc <_printf_common+0xb0>
 8005974:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005978:	4641      	mov	r1, r8
 800597a:	4638      	mov	r0, r7
 800597c:	47c8      	blx	r9
 800597e:	3001      	adds	r0, #1
 8005980:	d01e      	beq.n	80059c0 <_printf_common+0xa4>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	6922      	ldr	r2, [r4, #16]
 8005986:	f003 0306 	and.w	r3, r3, #6
 800598a:	2b04      	cmp	r3, #4
 800598c:	bf02      	ittt	eq
 800598e:	68e5      	ldreq	r5, [r4, #12]
 8005990:	6833      	ldreq	r3, [r6, #0]
 8005992:	1aed      	subeq	r5, r5, r3
 8005994:	68a3      	ldr	r3, [r4, #8]
 8005996:	bf0c      	ite	eq
 8005998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800599c:	2500      	movne	r5, #0
 800599e:	4293      	cmp	r3, r2
 80059a0:	bfc4      	itt	gt
 80059a2:	1a9b      	subgt	r3, r3, r2
 80059a4:	18ed      	addgt	r5, r5, r3
 80059a6:	2600      	movs	r6, #0
 80059a8:	341a      	adds	r4, #26
 80059aa:	42b5      	cmp	r5, r6
 80059ac:	d11a      	bne.n	80059e4 <_printf_common+0xc8>
 80059ae:	2000      	movs	r0, #0
 80059b0:	e008      	b.n	80059c4 <_printf_common+0xa8>
 80059b2:	2301      	movs	r3, #1
 80059b4:	4652      	mov	r2, sl
 80059b6:	4641      	mov	r1, r8
 80059b8:	4638      	mov	r0, r7
 80059ba:	47c8      	blx	r9
 80059bc:	3001      	adds	r0, #1
 80059be:	d103      	bne.n	80059c8 <_printf_common+0xac>
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c8:	3501      	adds	r5, #1
 80059ca:	e7c6      	b.n	800595a <_printf_common+0x3e>
 80059cc:	18e1      	adds	r1, r4, r3
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	2030      	movs	r0, #48	@ 0x30
 80059d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059d6:	4422      	add	r2, r4
 80059d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059e0:	3302      	adds	r3, #2
 80059e2:	e7c7      	b.n	8005974 <_printf_common+0x58>
 80059e4:	2301      	movs	r3, #1
 80059e6:	4622      	mov	r2, r4
 80059e8:	4641      	mov	r1, r8
 80059ea:	4638      	mov	r0, r7
 80059ec:	47c8      	blx	r9
 80059ee:	3001      	adds	r0, #1
 80059f0:	d0e6      	beq.n	80059c0 <_printf_common+0xa4>
 80059f2:	3601      	adds	r6, #1
 80059f4:	e7d9      	b.n	80059aa <_printf_common+0x8e>
	...

080059f8 <_printf_i>:
 80059f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059fc:	7e0f      	ldrb	r7, [r1, #24]
 80059fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a00:	2f78      	cmp	r7, #120	@ 0x78
 8005a02:	4691      	mov	r9, r2
 8005a04:	4680      	mov	r8, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	469a      	mov	sl, r3
 8005a0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a0e:	d807      	bhi.n	8005a20 <_printf_i+0x28>
 8005a10:	2f62      	cmp	r7, #98	@ 0x62
 8005a12:	d80a      	bhi.n	8005a2a <_printf_i+0x32>
 8005a14:	2f00      	cmp	r7, #0
 8005a16:	f000 80d2 	beq.w	8005bbe <_printf_i+0x1c6>
 8005a1a:	2f58      	cmp	r7, #88	@ 0x58
 8005a1c:	f000 80b9 	beq.w	8005b92 <_printf_i+0x19a>
 8005a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a28:	e03a      	b.n	8005aa0 <_printf_i+0xa8>
 8005a2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a2e:	2b15      	cmp	r3, #21
 8005a30:	d8f6      	bhi.n	8005a20 <_printf_i+0x28>
 8005a32:	a101      	add	r1, pc, #4	@ (adr r1, 8005a38 <_printf_i+0x40>)
 8005a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a38:	08005a91 	.word	0x08005a91
 8005a3c:	08005aa5 	.word	0x08005aa5
 8005a40:	08005a21 	.word	0x08005a21
 8005a44:	08005a21 	.word	0x08005a21
 8005a48:	08005a21 	.word	0x08005a21
 8005a4c:	08005a21 	.word	0x08005a21
 8005a50:	08005aa5 	.word	0x08005aa5
 8005a54:	08005a21 	.word	0x08005a21
 8005a58:	08005a21 	.word	0x08005a21
 8005a5c:	08005a21 	.word	0x08005a21
 8005a60:	08005a21 	.word	0x08005a21
 8005a64:	08005ba5 	.word	0x08005ba5
 8005a68:	08005acf 	.word	0x08005acf
 8005a6c:	08005b5f 	.word	0x08005b5f
 8005a70:	08005a21 	.word	0x08005a21
 8005a74:	08005a21 	.word	0x08005a21
 8005a78:	08005bc7 	.word	0x08005bc7
 8005a7c:	08005a21 	.word	0x08005a21
 8005a80:	08005acf 	.word	0x08005acf
 8005a84:	08005a21 	.word	0x08005a21
 8005a88:	08005a21 	.word	0x08005a21
 8005a8c:	08005b67 	.word	0x08005b67
 8005a90:	6833      	ldr	r3, [r6, #0]
 8005a92:	1d1a      	adds	r2, r3, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6032      	str	r2, [r6, #0]
 8005a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e09d      	b.n	8005be0 <_printf_i+0x1e8>
 8005aa4:	6833      	ldr	r3, [r6, #0]
 8005aa6:	6820      	ldr	r0, [r4, #0]
 8005aa8:	1d19      	adds	r1, r3, #4
 8005aaa:	6031      	str	r1, [r6, #0]
 8005aac:	0606      	lsls	r6, r0, #24
 8005aae:	d501      	bpl.n	8005ab4 <_printf_i+0xbc>
 8005ab0:	681d      	ldr	r5, [r3, #0]
 8005ab2:	e003      	b.n	8005abc <_printf_i+0xc4>
 8005ab4:	0645      	lsls	r5, r0, #25
 8005ab6:	d5fb      	bpl.n	8005ab0 <_printf_i+0xb8>
 8005ab8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005abc:	2d00      	cmp	r5, #0
 8005abe:	da03      	bge.n	8005ac8 <_printf_i+0xd0>
 8005ac0:	232d      	movs	r3, #45	@ 0x2d
 8005ac2:	426d      	negs	r5, r5
 8005ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ac8:	4859      	ldr	r0, [pc, #356]	@ (8005c30 <_printf_i+0x238>)
 8005aca:	230a      	movs	r3, #10
 8005acc:	e011      	b.n	8005af2 <_printf_i+0xfa>
 8005ace:	6821      	ldr	r1, [r4, #0]
 8005ad0:	6833      	ldr	r3, [r6, #0]
 8005ad2:	0608      	lsls	r0, r1, #24
 8005ad4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ad8:	d402      	bmi.n	8005ae0 <_printf_i+0xe8>
 8005ada:	0649      	lsls	r1, r1, #25
 8005adc:	bf48      	it	mi
 8005ade:	b2ad      	uxthmi	r5, r5
 8005ae0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ae2:	4853      	ldr	r0, [pc, #332]	@ (8005c30 <_printf_i+0x238>)
 8005ae4:	6033      	str	r3, [r6, #0]
 8005ae6:	bf14      	ite	ne
 8005ae8:	230a      	movne	r3, #10
 8005aea:	2308      	moveq	r3, #8
 8005aec:	2100      	movs	r1, #0
 8005aee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005af2:	6866      	ldr	r6, [r4, #4]
 8005af4:	60a6      	str	r6, [r4, #8]
 8005af6:	2e00      	cmp	r6, #0
 8005af8:	bfa2      	ittt	ge
 8005afa:	6821      	ldrge	r1, [r4, #0]
 8005afc:	f021 0104 	bicge.w	r1, r1, #4
 8005b00:	6021      	strge	r1, [r4, #0]
 8005b02:	b90d      	cbnz	r5, 8005b08 <_printf_i+0x110>
 8005b04:	2e00      	cmp	r6, #0
 8005b06:	d04b      	beq.n	8005ba0 <_printf_i+0x1a8>
 8005b08:	4616      	mov	r6, r2
 8005b0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b0e:	fb03 5711 	mls	r7, r3, r1, r5
 8005b12:	5dc7      	ldrb	r7, [r0, r7]
 8005b14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b18:	462f      	mov	r7, r5
 8005b1a:	42bb      	cmp	r3, r7
 8005b1c:	460d      	mov	r5, r1
 8005b1e:	d9f4      	bls.n	8005b0a <_printf_i+0x112>
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d10b      	bne.n	8005b3c <_printf_i+0x144>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	07df      	lsls	r7, r3, #31
 8005b28:	d508      	bpl.n	8005b3c <_printf_i+0x144>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	6861      	ldr	r1, [r4, #4]
 8005b2e:	4299      	cmp	r1, r3
 8005b30:	bfde      	ittt	le
 8005b32:	2330      	movle	r3, #48	@ 0x30
 8005b34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b3c:	1b92      	subs	r2, r2, r6
 8005b3e:	6122      	str	r2, [r4, #16]
 8005b40:	f8cd a000 	str.w	sl, [sp]
 8005b44:	464b      	mov	r3, r9
 8005b46:	aa03      	add	r2, sp, #12
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	f7ff fee6 	bl	800591c <_printf_common>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d14a      	bne.n	8005bea <_printf_i+0x1f2>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	b004      	add	sp, #16
 8005b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	f043 0320 	orr.w	r3, r3, #32
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	4833      	ldr	r0, [pc, #204]	@ (8005c34 <_printf_i+0x23c>)
 8005b68:	2778      	movs	r7, #120	@ 0x78
 8005b6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	6831      	ldr	r1, [r6, #0]
 8005b72:	061f      	lsls	r7, r3, #24
 8005b74:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b78:	d402      	bmi.n	8005b80 <_printf_i+0x188>
 8005b7a:	065f      	lsls	r7, r3, #25
 8005b7c:	bf48      	it	mi
 8005b7e:	b2ad      	uxthmi	r5, r5
 8005b80:	6031      	str	r1, [r6, #0]
 8005b82:	07d9      	lsls	r1, r3, #31
 8005b84:	bf44      	itt	mi
 8005b86:	f043 0320 	orrmi.w	r3, r3, #32
 8005b8a:	6023      	strmi	r3, [r4, #0]
 8005b8c:	b11d      	cbz	r5, 8005b96 <_printf_i+0x19e>
 8005b8e:	2310      	movs	r3, #16
 8005b90:	e7ac      	b.n	8005aec <_printf_i+0xf4>
 8005b92:	4827      	ldr	r0, [pc, #156]	@ (8005c30 <_printf_i+0x238>)
 8005b94:	e7e9      	b.n	8005b6a <_printf_i+0x172>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	f023 0320 	bic.w	r3, r3, #32
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	e7f6      	b.n	8005b8e <_printf_i+0x196>
 8005ba0:	4616      	mov	r6, r2
 8005ba2:	e7bd      	b.n	8005b20 <_printf_i+0x128>
 8005ba4:	6833      	ldr	r3, [r6, #0]
 8005ba6:	6825      	ldr	r5, [r4, #0]
 8005ba8:	6961      	ldr	r1, [r4, #20]
 8005baa:	1d18      	adds	r0, r3, #4
 8005bac:	6030      	str	r0, [r6, #0]
 8005bae:	062e      	lsls	r6, r5, #24
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	d501      	bpl.n	8005bb8 <_printf_i+0x1c0>
 8005bb4:	6019      	str	r1, [r3, #0]
 8005bb6:	e002      	b.n	8005bbe <_printf_i+0x1c6>
 8005bb8:	0668      	lsls	r0, r5, #25
 8005bba:	d5fb      	bpl.n	8005bb4 <_printf_i+0x1bc>
 8005bbc:	8019      	strh	r1, [r3, #0]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	6123      	str	r3, [r4, #16]
 8005bc2:	4616      	mov	r6, r2
 8005bc4:	e7bc      	b.n	8005b40 <_printf_i+0x148>
 8005bc6:	6833      	ldr	r3, [r6, #0]
 8005bc8:	1d1a      	adds	r2, r3, #4
 8005bca:	6032      	str	r2, [r6, #0]
 8005bcc:	681e      	ldr	r6, [r3, #0]
 8005bce:	6862      	ldr	r2, [r4, #4]
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7fa fb04 	bl	80001e0 <memchr>
 8005bd8:	b108      	cbz	r0, 8005bde <_printf_i+0x1e6>
 8005bda:	1b80      	subs	r0, r0, r6
 8005bdc:	6060      	str	r0, [r4, #4]
 8005bde:	6863      	ldr	r3, [r4, #4]
 8005be0:	6123      	str	r3, [r4, #16]
 8005be2:	2300      	movs	r3, #0
 8005be4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005be8:	e7aa      	b.n	8005b40 <_printf_i+0x148>
 8005bea:	6923      	ldr	r3, [r4, #16]
 8005bec:	4632      	mov	r2, r6
 8005bee:	4649      	mov	r1, r9
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	47d0      	blx	sl
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d0ad      	beq.n	8005b54 <_printf_i+0x15c>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	079b      	lsls	r3, r3, #30
 8005bfc:	d413      	bmi.n	8005c26 <_printf_i+0x22e>
 8005bfe:	68e0      	ldr	r0, [r4, #12]
 8005c00:	9b03      	ldr	r3, [sp, #12]
 8005c02:	4298      	cmp	r0, r3
 8005c04:	bfb8      	it	lt
 8005c06:	4618      	movlt	r0, r3
 8005c08:	e7a6      	b.n	8005b58 <_printf_i+0x160>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4632      	mov	r2, r6
 8005c0e:	4649      	mov	r1, r9
 8005c10:	4640      	mov	r0, r8
 8005c12:	47d0      	blx	sl
 8005c14:	3001      	adds	r0, #1
 8005c16:	d09d      	beq.n	8005b54 <_printf_i+0x15c>
 8005c18:	3501      	adds	r5, #1
 8005c1a:	68e3      	ldr	r3, [r4, #12]
 8005c1c:	9903      	ldr	r1, [sp, #12]
 8005c1e:	1a5b      	subs	r3, r3, r1
 8005c20:	42ab      	cmp	r3, r5
 8005c22:	dcf2      	bgt.n	8005c0a <_printf_i+0x212>
 8005c24:	e7eb      	b.n	8005bfe <_printf_i+0x206>
 8005c26:	2500      	movs	r5, #0
 8005c28:	f104 0619 	add.w	r6, r4, #25
 8005c2c:	e7f5      	b.n	8005c1a <_printf_i+0x222>
 8005c2e:	bf00      	nop
 8005c30:	0800b84e 	.word	0x0800b84e
 8005c34:	0800b85f 	.word	0x0800b85f

08005c38 <_scanf_float>:
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	b087      	sub	sp, #28
 8005c3e:	4617      	mov	r7, r2
 8005c40:	9303      	str	r3, [sp, #12]
 8005c42:	688b      	ldr	r3, [r1, #8]
 8005c44:	1e5a      	subs	r2, r3, #1
 8005c46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005c4a:	bf81      	itttt	hi
 8005c4c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005c50:	eb03 0b05 	addhi.w	fp, r3, r5
 8005c54:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005c58:	608b      	strhi	r3, [r1, #8]
 8005c5a:	680b      	ldr	r3, [r1, #0]
 8005c5c:	460a      	mov	r2, r1
 8005c5e:	f04f 0500 	mov.w	r5, #0
 8005c62:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005c66:	f842 3b1c 	str.w	r3, [r2], #28
 8005c6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c6e:	4680      	mov	r8, r0
 8005c70:	460c      	mov	r4, r1
 8005c72:	bf98      	it	ls
 8005c74:	f04f 0b00 	movls.w	fp, #0
 8005c78:	9201      	str	r2, [sp, #4]
 8005c7a:	4616      	mov	r6, r2
 8005c7c:	46aa      	mov	sl, r5
 8005c7e:	46a9      	mov	r9, r5
 8005c80:	9502      	str	r5, [sp, #8]
 8005c82:	68a2      	ldr	r2, [r4, #8]
 8005c84:	b152      	cbz	r2, 8005c9c <_scanf_float+0x64>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c8c:	d864      	bhi.n	8005d58 <_scanf_float+0x120>
 8005c8e:	2b40      	cmp	r3, #64	@ 0x40
 8005c90:	d83c      	bhi.n	8005d0c <_scanf_float+0xd4>
 8005c92:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005c96:	b2c8      	uxtb	r0, r1
 8005c98:	280e      	cmp	r0, #14
 8005c9a:	d93a      	bls.n	8005d12 <_scanf_float+0xda>
 8005c9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ca0:	d003      	beq.n	8005caa <_scanf_float+0x72>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cae:	f1ba 0f01 	cmp.w	sl, #1
 8005cb2:	f200 8117 	bhi.w	8005ee4 <_scanf_float+0x2ac>
 8005cb6:	9b01      	ldr	r3, [sp, #4]
 8005cb8:	429e      	cmp	r6, r3
 8005cba:	f200 8108 	bhi.w	8005ece <_scanf_float+0x296>
 8005cbe:	2001      	movs	r0, #1
 8005cc0:	b007      	add	sp, #28
 8005cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005cca:	2a0d      	cmp	r2, #13
 8005ccc:	d8e6      	bhi.n	8005c9c <_scanf_float+0x64>
 8005cce:	a101      	add	r1, pc, #4	@ (adr r1, 8005cd4 <_scanf_float+0x9c>)
 8005cd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005cd4:	08005e1b 	.word	0x08005e1b
 8005cd8:	08005c9d 	.word	0x08005c9d
 8005cdc:	08005c9d 	.word	0x08005c9d
 8005ce0:	08005c9d 	.word	0x08005c9d
 8005ce4:	08005e7b 	.word	0x08005e7b
 8005ce8:	08005e53 	.word	0x08005e53
 8005cec:	08005c9d 	.word	0x08005c9d
 8005cf0:	08005c9d 	.word	0x08005c9d
 8005cf4:	08005e29 	.word	0x08005e29
 8005cf8:	08005c9d 	.word	0x08005c9d
 8005cfc:	08005c9d 	.word	0x08005c9d
 8005d00:	08005c9d 	.word	0x08005c9d
 8005d04:	08005c9d 	.word	0x08005c9d
 8005d08:	08005de1 	.word	0x08005de1
 8005d0c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005d10:	e7db      	b.n	8005cca <_scanf_float+0x92>
 8005d12:	290e      	cmp	r1, #14
 8005d14:	d8c2      	bhi.n	8005c9c <_scanf_float+0x64>
 8005d16:	a001      	add	r0, pc, #4	@ (adr r0, 8005d1c <_scanf_float+0xe4>)
 8005d18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d1c:	08005dd1 	.word	0x08005dd1
 8005d20:	08005c9d 	.word	0x08005c9d
 8005d24:	08005dd1 	.word	0x08005dd1
 8005d28:	08005e67 	.word	0x08005e67
 8005d2c:	08005c9d 	.word	0x08005c9d
 8005d30:	08005d79 	.word	0x08005d79
 8005d34:	08005db7 	.word	0x08005db7
 8005d38:	08005db7 	.word	0x08005db7
 8005d3c:	08005db7 	.word	0x08005db7
 8005d40:	08005db7 	.word	0x08005db7
 8005d44:	08005db7 	.word	0x08005db7
 8005d48:	08005db7 	.word	0x08005db7
 8005d4c:	08005db7 	.word	0x08005db7
 8005d50:	08005db7 	.word	0x08005db7
 8005d54:	08005db7 	.word	0x08005db7
 8005d58:	2b6e      	cmp	r3, #110	@ 0x6e
 8005d5a:	d809      	bhi.n	8005d70 <_scanf_float+0x138>
 8005d5c:	2b60      	cmp	r3, #96	@ 0x60
 8005d5e:	d8b2      	bhi.n	8005cc6 <_scanf_float+0x8e>
 8005d60:	2b54      	cmp	r3, #84	@ 0x54
 8005d62:	d07b      	beq.n	8005e5c <_scanf_float+0x224>
 8005d64:	2b59      	cmp	r3, #89	@ 0x59
 8005d66:	d199      	bne.n	8005c9c <_scanf_float+0x64>
 8005d68:	2d07      	cmp	r5, #7
 8005d6a:	d197      	bne.n	8005c9c <_scanf_float+0x64>
 8005d6c:	2508      	movs	r5, #8
 8005d6e:	e02c      	b.n	8005dca <_scanf_float+0x192>
 8005d70:	2b74      	cmp	r3, #116	@ 0x74
 8005d72:	d073      	beq.n	8005e5c <_scanf_float+0x224>
 8005d74:	2b79      	cmp	r3, #121	@ 0x79
 8005d76:	e7f6      	b.n	8005d66 <_scanf_float+0x12e>
 8005d78:	6821      	ldr	r1, [r4, #0]
 8005d7a:	05c8      	lsls	r0, r1, #23
 8005d7c:	d51b      	bpl.n	8005db6 <_scanf_float+0x17e>
 8005d7e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005d82:	6021      	str	r1, [r4, #0]
 8005d84:	f109 0901 	add.w	r9, r9, #1
 8005d88:	f1bb 0f00 	cmp.w	fp, #0
 8005d8c:	d003      	beq.n	8005d96 <_scanf_float+0x15e>
 8005d8e:	3201      	adds	r2, #1
 8005d90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d94:	60a2      	str	r2, [r4, #8]
 8005d96:	68a3      	ldr	r3, [r4, #8]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	60a3      	str	r3, [r4, #8]
 8005d9c:	6923      	ldr	r3, [r4, #16]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	6123      	str	r3, [r4, #16]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	607b      	str	r3, [r7, #4]
 8005daa:	f340 8087 	ble.w	8005ebc <_scanf_float+0x284>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	3301      	adds	r3, #1
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	e765      	b.n	8005c82 <_scanf_float+0x4a>
 8005db6:	eb1a 0105 	adds.w	r1, sl, r5
 8005dba:	f47f af6f 	bne.w	8005c9c <_scanf_float+0x64>
 8005dbe:	6822      	ldr	r2, [r4, #0]
 8005dc0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005dc4:	6022      	str	r2, [r4, #0]
 8005dc6:	460d      	mov	r5, r1
 8005dc8:	468a      	mov	sl, r1
 8005dca:	f806 3b01 	strb.w	r3, [r6], #1
 8005dce:	e7e2      	b.n	8005d96 <_scanf_float+0x15e>
 8005dd0:	6822      	ldr	r2, [r4, #0]
 8005dd2:	0610      	lsls	r0, r2, #24
 8005dd4:	f57f af62 	bpl.w	8005c9c <_scanf_float+0x64>
 8005dd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ddc:	6022      	str	r2, [r4, #0]
 8005dde:	e7f4      	b.n	8005dca <_scanf_float+0x192>
 8005de0:	f1ba 0f00 	cmp.w	sl, #0
 8005de4:	d10e      	bne.n	8005e04 <_scanf_float+0x1cc>
 8005de6:	f1b9 0f00 	cmp.w	r9, #0
 8005dea:	d10e      	bne.n	8005e0a <_scanf_float+0x1d2>
 8005dec:	6822      	ldr	r2, [r4, #0]
 8005dee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005df2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005df6:	d108      	bne.n	8005e0a <_scanf_float+0x1d2>
 8005df8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005dfc:	6022      	str	r2, [r4, #0]
 8005dfe:	f04f 0a01 	mov.w	sl, #1
 8005e02:	e7e2      	b.n	8005dca <_scanf_float+0x192>
 8005e04:	f1ba 0f02 	cmp.w	sl, #2
 8005e08:	d055      	beq.n	8005eb6 <_scanf_float+0x27e>
 8005e0a:	2d01      	cmp	r5, #1
 8005e0c:	d002      	beq.n	8005e14 <_scanf_float+0x1dc>
 8005e0e:	2d04      	cmp	r5, #4
 8005e10:	f47f af44 	bne.w	8005c9c <_scanf_float+0x64>
 8005e14:	3501      	adds	r5, #1
 8005e16:	b2ed      	uxtb	r5, r5
 8005e18:	e7d7      	b.n	8005dca <_scanf_float+0x192>
 8005e1a:	f1ba 0f01 	cmp.w	sl, #1
 8005e1e:	f47f af3d 	bne.w	8005c9c <_scanf_float+0x64>
 8005e22:	f04f 0a02 	mov.w	sl, #2
 8005e26:	e7d0      	b.n	8005dca <_scanf_float+0x192>
 8005e28:	b97d      	cbnz	r5, 8005e4a <_scanf_float+0x212>
 8005e2a:	f1b9 0f00 	cmp.w	r9, #0
 8005e2e:	f47f af38 	bne.w	8005ca2 <_scanf_float+0x6a>
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005e38:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e3c:	f040 8108 	bne.w	8006050 <_scanf_float+0x418>
 8005e40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e44:	6022      	str	r2, [r4, #0]
 8005e46:	2501      	movs	r5, #1
 8005e48:	e7bf      	b.n	8005dca <_scanf_float+0x192>
 8005e4a:	2d03      	cmp	r5, #3
 8005e4c:	d0e2      	beq.n	8005e14 <_scanf_float+0x1dc>
 8005e4e:	2d05      	cmp	r5, #5
 8005e50:	e7de      	b.n	8005e10 <_scanf_float+0x1d8>
 8005e52:	2d02      	cmp	r5, #2
 8005e54:	f47f af22 	bne.w	8005c9c <_scanf_float+0x64>
 8005e58:	2503      	movs	r5, #3
 8005e5a:	e7b6      	b.n	8005dca <_scanf_float+0x192>
 8005e5c:	2d06      	cmp	r5, #6
 8005e5e:	f47f af1d 	bne.w	8005c9c <_scanf_float+0x64>
 8005e62:	2507      	movs	r5, #7
 8005e64:	e7b1      	b.n	8005dca <_scanf_float+0x192>
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	0591      	lsls	r1, r2, #22
 8005e6a:	f57f af17 	bpl.w	8005c9c <_scanf_float+0x64>
 8005e6e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005e72:	6022      	str	r2, [r4, #0]
 8005e74:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e78:	e7a7      	b.n	8005dca <_scanf_float+0x192>
 8005e7a:	6822      	ldr	r2, [r4, #0]
 8005e7c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005e80:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005e84:	d006      	beq.n	8005e94 <_scanf_float+0x25c>
 8005e86:	0550      	lsls	r0, r2, #21
 8005e88:	f57f af08 	bpl.w	8005c9c <_scanf_float+0x64>
 8005e8c:	f1b9 0f00 	cmp.w	r9, #0
 8005e90:	f000 80de 	beq.w	8006050 <_scanf_float+0x418>
 8005e94:	0591      	lsls	r1, r2, #22
 8005e96:	bf58      	it	pl
 8005e98:	9902      	ldrpl	r1, [sp, #8]
 8005e9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e9e:	bf58      	it	pl
 8005ea0:	eba9 0101 	subpl.w	r1, r9, r1
 8005ea4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005ea8:	bf58      	it	pl
 8005eaa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005eae:	6022      	str	r2, [r4, #0]
 8005eb0:	f04f 0900 	mov.w	r9, #0
 8005eb4:	e789      	b.n	8005dca <_scanf_float+0x192>
 8005eb6:	f04f 0a03 	mov.w	sl, #3
 8005eba:	e786      	b.n	8005dca <_scanf_float+0x192>
 8005ebc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	4798      	blx	r3
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f43f aedb 	beq.w	8005c82 <_scanf_float+0x4a>
 8005ecc:	e6e6      	b.n	8005c9c <_scanf_float+0x64>
 8005ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ed2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ed6:	463a      	mov	r2, r7
 8005ed8:	4640      	mov	r0, r8
 8005eda:	4798      	blx	r3
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	e6e8      	b.n	8005cb6 <_scanf_float+0x7e>
 8005ee4:	1e6b      	subs	r3, r5, #1
 8005ee6:	2b06      	cmp	r3, #6
 8005ee8:	d824      	bhi.n	8005f34 <_scanf_float+0x2fc>
 8005eea:	2d02      	cmp	r5, #2
 8005eec:	d836      	bhi.n	8005f5c <_scanf_float+0x324>
 8005eee:	9b01      	ldr	r3, [sp, #4]
 8005ef0:	429e      	cmp	r6, r3
 8005ef2:	f67f aee4 	bls.w	8005cbe <_scanf_float+0x86>
 8005ef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005efa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005efe:	463a      	mov	r2, r7
 8005f00:	4640      	mov	r0, r8
 8005f02:	4798      	blx	r3
 8005f04:	6923      	ldr	r3, [r4, #16]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	6123      	str	r3, [r4, #16]
 8005f0a:	e7f0      	b.n	8005eee <_scanf_float+0x2b6>
 8005f0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f10:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005f14:	463a      	mov	r2, r7
 8005f16:	4640      	mov	r0, r8
 8005f18:	4798      	blx	r3
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	6123      	str	r3, [r4, #16]
 8005f20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f24:	fa5f fa8a 	uxtb.w	sl, sl
 8005f28:	f1ba 0f02 	cmp.w	sl, #2
 8005f2c:	d1ee      	bne.n	8005f0c <_scanf_float+0x2d4>
 8005f2e:	3d03      	subs	r5, #3
 8005f30:	b2ed      	uxtb	r5, r5
 8005f32:	1b76      	subs	r6, r6, r5
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	05da      	lsls	r2, r3, #23
 8005f38:	d530      	bpl.n	8005f9c <_scanf_float+0x364>
 8005f3a:	055b      	lsls	r3, r3, #21
 8005f3c:	d511      	bpl.n	8005f62 <_scanf_float+0x32a>
 8005f3e:	9b01      	ldr	r3, [sp, #4]
 8005f40:	429e      	cmp	r6, r3
 8005f42:	f67f aebc 	bls.w	8005cbe <_scanf_float+0x86>
 8005f46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f4e:	463a      	mov	r2, r7
 8005f50:	4640      	mov	r0, r8
 8005f52:	4798      	blx	r3
 8005f54:	6923      	ldr	r3, [r4, #16]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	e7f0      	b.n	8005f3e <_scanf_float+0x306>
 8005f5c:	46aa      	mov	sl, r5
 8005f5e:	46b3      	mov	fp, r6
 8005f60:	e7de      	b.n	8005f20 <_scanf_float+0x2e8>
 8005f62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	2965      	cmp	r1, #101	@ 0x65
 8005f6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005f72:	6123      	str	r3, [r4, #16]
 8005f74:	d00c      	beq.n	8005f90 <_scanf_float+0x358>
 8005f76:	2945      	cmp	r1, #69	@ 0x45
 8005f78:	d00a      	beq.n	8005f90 <_scanf_float+0x358>
 8005f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f7e:	463a      	mov	r2, r7
 8005f80:	4640      	mov	r0, r8
 8005f82:	4798      	blx	r3
 8005f84:	6923      	ldr	r3, [r4, #16]
 8005f86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	1eb5      	subs	r5, r6, #2
 8005f8e:	6123      	str	r3, [r4, #16]
 8005f90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f94:	463a      	mov	r2, r7
 8005f96:	4640      	mov	r0, r8
 8005f98:	4798      	blx	r3
 8005f9a:	462e      	mov	r6, r5
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	f012 0210 	ands.w	r2, r2, #16
 8005fa2:	d001      	beq.n	8005fa8 <_scanf_float+0x370>
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	e68b      	b.n	8005cc0 <_scanf_float+0x88>
 8005fa8:	7032      	strb	r2, [r6, #0]
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb4:	d11c      	bne.n	8005ff0 <_scanf_float+0x3b8>
 8005fb6:	9b02      	ldr	r3, [sp, #8]
 8005fb8:	454b      	cmp	r3, r9
 8005fba:	eba3 0209 	sub.w	r2, r3, r9
 8005fbe:	d123      	bne.n	8006008 <_scanf_float+0x3d0>
 8005fc0:	9901      	ldr	r1, [sp, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4640      	mov	r0, r8
 8005fc6:	f002 fc0b 	bl	80087e0 <_strtod_r>
 8005fca:	9b03      	ldr	r3, [sp, #12]
 8005fcc:	6821      	ldr	r1, [r4, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f011 0f02 	tst.w	r1, #2
 8005fd4:	ec57 6b10 	vmov	r6, r7, d0
 8005fd8:	f103 0204 	add.w	r2, r3, #4
 8005fdc:	d01f      	beq.n	800601e <_scanf_float+0x3e6>
 8005fde:	9903      	ldr	r1, [sp, #12]
 8005fe0:	600a      	str	r2, [r1, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	e9c3 6700 	strd	r6, r7, [r3]
 8005fe8:	68e3      	ldr	r3, [r4, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60e3      	str	r3, [r4, #12]
 8005fee:	e7d9      	b.n	8005fa4 <_scanf_float+0x36c>
 8005ff0:	9b04      	ldr	r3, [sp, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0e4      	beq.n	8005fc0 <_scanf_float+0x388>
 8005ff6:	9905      	ldr	r1, [sp, #20]
 8005ff8:	230a      	movs	r3, #10
 8005ffa:	3101      	adds	r1, #1
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	f002 fc6f 	bl	80088e0 <_strtol_r>
 8006002:	9b04      	ldr	r3, [sp, #16]
 8006004:	9e05      	ldr	r6, [sp, #20]
 8006006:	1ac2      	subs	r2, r0, r3
 8006008:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800600c:	429e      	cmp	r6, r3
 800600e:	bf28      	it	cs
 8006010:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006014:	4910      	ldr	r1, [pc, #64]	@ (8006058 <_scanf_float+0x420>)
 8006016:	4630      	mov	r0, r6
 8006018:	f000 f8f6 	bl	8006208 <siprintf>
 800601c:	e7d0      	b.n	8005fc0 <_scanf_float+0x388>
 800601e:	f011 0f04 	tst.w	r1, #4
 8006022:	9903      	ldr	r1, [sp, #12]
 8006024:	600a      	str	r2, [r1, #0]
 8006026:	d1dc      	bne.n	8005fe2 <_scanf_float+0x3aa>
 8006028:	681d      	ldr	r5, [r3, #0]
 800602a:	4632      	mov	r2, r6
 800602c:	463b      	mov	r3, r7
 800602e:	4630      	mov	r0, r6
 8006030:	4639      	mov	r1, r7
 8006032:	f7fa fd83 	bl	8000b3c <__aeabi_dcmpun>
 8006036:	b128      	cbz	r0, 8006044 <_scanf_float+0x40c>
 8006038:	4808      	ldr	r0, [pc, #32]	@ (800605c <_scanf_float+0x424>)
 800603a:	f000 f9c9 	bl	80063d0 <nanf>
 800603e:	ed85 0a00 	vstr	s0, [r5]
 8006042:	e7d1      	b.n	8005fe8 <_scanf_float+0x3b0>
 8006044:	4630      	mov	r0, r6
 8006046:	4639      	mov	r1, r7
 8006048:	f7fa fdd6 	bl	8000bf8 <__aeabi_d2f>
 800604c:	6028      	str	r0, [r5, #0]
 800604e:	e7cb      	b.n	8005fe8 <_scanf_float+0x3b0>
 8006050:	f04f 0900 	mov.w	r9, #0
 8006054:	e629      	b.n	8005caa <_scanf_float+0x72>
 8006056:	bf00      	nop
 8006058:	0800b870 	.word	0x0800b870
 800605c:	0800bc05 	.word	0x0800bc05

08006060 <std>:
 8006060:	2300      	movs	r3, #0
 8006062:	b510      	push	{r4, lr}
 8006064:	4604      	mov	r4, r0
 8006066:	e9c0 3300 	strd	r3, r3, [r0]
 800606a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800606e:	6083      	str	r3, [r0, #8]
 8006070:	8181      	strh	r1, [r0, #12]
 8006072:	6643      	str	r3, [r0, #100]	@ 0x64
 8006074:	81c2      	strh	r2, [r0, #14]
 8006076:	6183      	str	r3, [r0, #24]
 8006078:	4619      	mov	r1, r3
 800607a:	2208      	movs	r2, #8
 800607c:	305c      	adds	r0, #92	@ 0x5c
 800607e:	f000 f926 	bl	80062ce <memset>
 8006082:	4b0d      	ldr	r3, [pc, #52]	@ (80060b8 <std+0x58>)
 8006084:	6263      	str	r3, [r4, #36]	@ 0x24
 8006086:	4b0d      	ldr	r3, [pc, #52]	@ (80060bc <std+0x5c>)
 8006088:	62a3      	str	r3, [r4, #40]	@ 0x28
 800608a:	4b0d      	ldr	r3, [pc, #52]	@ (80060c0 <std+0x60>)
 800608c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800608e:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <std+0x64>)
 8006090:	6323      	str	r3, [r4, #48]	@ 0x30
 8006092:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <std+0x68>)
 8006094:	6224      	str	r4, [r4, #32]
 8006096:	429c      	cmp	r4, r3
 8006098:	d006      	beq.n	80060a8 <std+0x48>
 800609a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800609e:	4294      	cmp	r4, r2
 80060a0:	d002      	beq.n	80060a8 <std+0x48>
 80060a2:	33d0      	adds	r3, #208	@ 0xd0
 80060a4:	429c      	cmp	r4, r3
 80060a6:	d105      	bne.n	80060b4 <std+0x54>
 80060a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b0:	f000 b98a 	b.w	80063c8 <__retarget_lock_init_recursive>
 80060b4:	bd10      	pop	{r4, pc}
 80060b6:	bf00      	nop
 80060b8:	08006249 	.word	0x08006249
 80060bc:	0800626b 	.word	0x0800626b
 80060c0:	080062a3 	.word	0x080062a3
 80060c4:	080062c7 	.word	0x080062c7
 80060c8:	20000384 	.word	0x20000384

080060cc <stdio_exit_handler>:
 80060cc:	4a02      	ldr	r2, [pc, #8]	@ (80060d8 <stdio_exit_handler+0xc>)
 80060ce:	4903      	ldr	r1, [pc, #12]	@ (80060dc <stdio_exit_handler+0x10>)
 80060d0:	4803      	ldr	r0, [pc, #12]	@ (80060e0 <stdio_exit_handler+0x14>)
 80060d2:	f000 b869 	b.w	80061a8 <_fwalk_sglue>
 80060d6:	bf00      	nop
 80060d8:	20000014 	.word	0x20000014
 80060dc:	08008f21 	.word	0x08008f21
 80060e0:	20000024 	.word	0x20000024

080060e4 <cleanup_stdio>:
 80060e4:	6841      	ldr	r1, [r0, #4]
 80060e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006118 <cleanup_stdio+0x34>)
 80060e8:	4299      	cmp	r1, r3
 80060ea:	b510      	push	{r4, lr}
 80060ec:	4604      	mov	r4, r0
 80060ee:	d001      	beq.n	80060f4 <cleanup_stdio+0x10>
 80060f0:	f002 ff16 	bl	8008f20 <_fflush_r>
 80060f4:	68a1      	ldr	r1, [r4, #8]
 80060f6:	4b09      	ldr	r3, [pc, #36]	@ (800611c <cleanup_stdio+0x38>)
 80060f8:	4299      	cmp	r1, r3
 80060fa:	d002      	beq.n	8006102 <cleanup_stdio+0x1e>
 80060fc:	4620      	mov	r0, r4
 80060fe:	f002 ff0f 	bl	8008f20 <_fflush_r>
 8006102:	68e1      	ldr	r1, [r4, #12]
 8006104:	4b06      	ldr	r3, [pc, #24]	@ (8006120 <cleanup_stdio+0x3c>)
 8006106:	4299      	cmp	r1, r3
 8006108:	d004      	beq.n	8006114 <cleanup_stdio+0x30>
 800610a:	4620      	mov	r0, r4
 800610c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006110:	f002 bf06 	b.w	8008f20 <_fflush_r>
 8006114:	bd10      	pop	{r4, pc}
 8006116:	bf00      	nop
 8006118:	20000384 	.word	0x20000384
 800611c:	200003ec 	.word	0x200003ec
 8006120:	20000454 	.word	0x20000454

08006124 <global_stdio_init.part.0>:
 8006124:	b510      	push	{r4, lr}
 8006126:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <global_stdio_init.part.0+0x30>)
 8006128:	4c0b      	ldr	r4, [pc, #44]	@ (8006158 <global_stdio_init.part.0+0x34>)
 800612a:	4a0c      	ldr	r2, [pc, #48]	@ (800615c <global_stdio_init.part.0+0x38>)
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	4620      	mov	r0, r4
 8006130:	2200      	movs	r2, #0
 8006132:	2104      	movs	r1, #4
 8006134:	f7ff ff94 	bl	8006060 <std>
 8006138:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800613c:	2201      	movs	r2, #1
 800613e:	2109      	movs	r1, #9
 8006140:	f7ff ff8e 	bl	8006060 <std>
 8006144:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006148:	2202      	movs	r2, #2
 800614a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800614e:	2112      	movs	r1, #18
 8006150:	f7ff bf86 	b.w	8006060 <std>
 8006154:	200004bc 	.word	0x200004bc
 8006158:	20000384 	.word	0x20000384
 800615c:	080060cd 	.word	0x080060cd

08006160 <__sfp_lock_acquire>:
 8006160:	4801      	ldr	r0, [pc, #4]	@ (8006168 <__sfp_lock_acquire+0x8>)
 8006162:	f000 b932 	b.w	80063ca <__retarget_lock_acquire_recursive>
 8006166:	bf00      	nop
 8006168:	200004c5 	.word	0x200004c5

0800616c <__sfp_lock_release>:
 800616c:	4801      	ldr	r0, [pc, #4]	@ (8006174 <__sfp_lock_release+0x8>)
 800616e:	f000 b92d 	b.w	80063cc <__retarget_lock_release_recursive>
 8006172:	bf00      	nop
 8006174:	200004c5 	.word	0x200004c5

08006178 <__sinit>:
 8006178:	b510      	push	{r4, lr}
 800617a:	4604      	mov	r4, r0
 800617c:	f7ff fff0 	bl	8006160 <__sfp_lock_acquire>
 8006180:	6a23      	ldr	r3, [r4, #32]
 8006182:	b11b      	cbz	r3, 800618c <__sinit+0x14>
 8006184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006188:	f7ff bff0 	b.w	800616c <__sfp_lock_release>
 800618c:	4b04      	ldr	r3, [pc, #16]	@ (80061a0 <__sinit+0x28>)
 800618e:	6223      	str	r3, [r4, #32]
 8006190:	4b04      	ldr	r3, [pc, #16]	@ (80061a4 <__sinit+0x2c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f5      	bne.n	8006184 <__sinit+0xc>
 8006198:	f7ff ffc4 	bl	8006124 <global_stdio_init.part.0>
 800619c:	e7f2      	b.n	8006184 <__sinit+0xc>
 800619e:	bf00      	nop
 80061a0:	080060e5 	.word	0x080060e5
 80061a4:	200004bc 	.word	0x200004bc

080061a8 <_fwalk_sglue>:
 80061a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ac:	4607      	mov	r7, r0
 80061ae:	4688      	mov	r8, r1
 80061b0:	4614      	mov	r4, r2
 80061b2:	2600      	movs	r6, #0
 80061b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061b8:	f1b9 0901 	subs.w	r9, r9, #1
 80061bc:	d505      	bpl.n	80061ca <_fwalk_sglue+0x22>
 80061be:	6824      	ldr	r4, [r4, #0]
 80061c0:	2c00      	cmp	r4, #0
 80061c2:	d1f7      	bne.n	80061b4 <_fwalk_sglue+0xc>
 80061c4:	4630      	mov	r0, r6
 80061c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ca:	89ab      	ldrh	r3, [r5, #12]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d907      	bls.n	80061e0 <_fwalk_sglue+0x38>
 80061d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061d4:	3301      	adds	r3, #1
 80061d6:	d003      	beq.n	80061e0 <_fwalk_sglue+0x38>
 80061d8:	4629      	mov	r1, r5
 80061da:	4638      	mov	r0, r7
 80061dc:	47c0      	blx	r8
 80061de:	4306      	orrs	r6, r0
 80061e0:	3568      	adds	r5, #104	@ 0x68
 80061e2:	e7e9      	b.n	80061b8 <_fwalk_sglue+0x10>

080061e4 <iprintf>:
 80061e4:	b40f      	push	{r0, r1, r2, r3}
 80061e6:	b507      	push	{r0, r1, r2, lr}
 80061e8:	4906      	ldr	r1, [pc, #24]	@ (8006204 <iprintf+0x20>)
 80061ea:	ab04      	add	r3, sp, #16
 80061ec:	6808      	ldr	r0, [r1, #0]
 80061ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f2:	6881      	ldr	r1, [r0, #8]
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	f002 fcf7 	bl	8008be8 <_vfiprintf_r>
 80061fa:	b003      	add	sp, #12
 80061fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006200:	b004      	add	sp, #16
 8006202:	4770      	bx	lr
 8006204:	20000020 	.word	0x20000020

08006208 <siprintf>:
 8006208:	b40e      	push	{r1, r2, r3}
 800620a:	b500      	push	{lr}
 800620c:	b09c      	sub	sp, #112	@ 0x70
 800620e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006210:	9002      	str	r0, [sp, #8]
 8006212:	9006      	str	r0, [sp, #24]
 8006214:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006218:	4809      	ldr	r0, [pc, #36]	@ (8006240 <siprintf+0x38>)
 800621a:	9107      	str	r1, [sp, #28]
 800621c:	9104      	str	r1, [sp, #16]
 800621e:	4909      	ldr	r1, [pc, #36]	@ (8006244 <siprintf+0x3c>)
 8006220:	f853 2b04 	ldr.w	r2, [r3], #4
 8006224:	9105      	str	r1, [sp, #20]
 8006226:	6800      	ldr	r0, [r0, #0]
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	a902      	add	r1, sp, #8
 800622c:	f002 fbb6 	bl	800899c <_svfiprintf_r>
 8006230:	9b02      	ldr	r3, [sp, #8]
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	b01c      	add	sp, #112	@ 0x70
 8006238:	f85d eb04 	ldr.w	lr, [sp], #4
 800623c:	b003      	add	sp, #12
 800623e:	4770      	bx	lr
 8006240:	20000020 	.word	0x20000020
 8006244:	ffff0208 	.word	0xffff0208

08006248 <__sread>:
 8006248:	b510      	push	{r4, lr}
 800624a:	460c      	mov	r4, r1
 800624c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006250:	f000 f86c 	bl	800632c <_read_r>
 8006254:	2800      	cmp	r0, #0
 8006256:	bfab      	itete	ge
 8006258:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800625a:	89a3      	ldrhlt	r3, [r4, #12]
 800625c:	181b      	addge	r3, r3, r0
 800625e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006262:	bfac      	ite	ge
 8006264:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006266:	81a3      	strhlt	r3, [r4, #12]
 8006268:	bd10      	pop	{r4, pc}

0800626a <__swrite>:
 800626a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626e:	461f      	mov	r7, r3
 8006270:	898b      	ldrh	r3, [r1, #12]
 8006272:	05db      	lsls	r3, r3, #23
 8006274:	4605      	mov	r5, r0
 8006276:	460c      	mov	r4, r1
 8006278:	4616      	mov	r6, r2
 800627a:	d505      	bpl.n	8006288 <__swrite+0x1e>
 800627c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006280:	2302      	movs	r3, #2
 8006282:	2200      	movs	r2, #0
 8006284:	f000 f840 	bl	8006308 <_lseek_r>
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800628e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006292:	81a3      	strh	r3, [r4, #12]
 8006294:	4632      	mov	r2, r6
 8006296:	463b      	mov	r3, r7
 8006298:	4628      	mov	r0, r5
 800629a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800629e:	f000 b857 	b.w	8006350 <_write_r>

080062a2 <__sseek>:
 80062a2:	b510      	push	{r4, lr}
 80062a4:	460c      	mov	r4, r1
 80062a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062aa:	f000 f82d 	bl	8006308 <_lseek_r>
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	bf15      	itete	ne
 80062b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062be:	81a3      	strheq	r3, [r4, #12]
 80062c0:	bf18      	it	ne
 80062c2:	81a3      	strhne	r3, [r4, #12]
 80062c4:	bd10      	pop	{r4, pc}

080062c6 <__sclose>:
 80062c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ca:	f000 b80d 	b.w	80062e8 <_close_r>

080062ce <memset>:
 80062ce:	4402      	add	r2, r0
 80062d0:	4603      	mov	r3, r0
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d100      	bne.n	80062d8 <memset+0xa>
 80062d6:	4770      	bx	lr
 80062d8:	f803 1b01 	strb.w	r1, [r3], #1
 80062dc:	e7f9      	b.n	80062d2 <memset+0x4>
	...

080062e0 <_localeconv_r>:
 80062e0:	4800      	ldr	r0, [pc, #0]	@ (80062e4 <_localeconv_r+0x4>)
 80062e2:	4770      	bx	lr
 80062e4:	20000160 	.word	0x20000160

080062e8 <_close_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4d06      	ldr	r5, [pc, #24]	@ (8006304 <_close_r+0x1c>)
 80062ec:	2300      	movs	r3, #0
 80062ee:	4604      	mov	r4, r0
 80062f0:	4608      	mov	r0, r1
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	f7fb fe9d 	bl	8002032 <_close>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d102      	bne.n	8006302 <_close_r+0x1a>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	b103      	cbz	r3, 8006302 <_close_r+0x1a>
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	200004c0 	.word	0x200004c0

08006308 <_lseek_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4d07      	ldr	r5, [pc, #28]	@ (8006328 <_lseek_r+0x20>)
 800630c:	4604      	mov	r4, r0
 800630e:	4608      	mov	r0, r1
 8006310:	4611      	mov	r1, r2
 8006312:	2200      	movs	r2, #0
 8006314:	602a      	str	r2, [r5, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	f7fb feb2 	bl	8002080 <_lseek>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d102      	bne.n	8006326 <_lseek_r+0x1e>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	b103      	cbz	r3, 8006326 <_lseek_r+0x1e>
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	200004c0 	.word	0x200004c0

0800632c <_read_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4d07      	ldr	r5, [pc, #28]	@ (800634c <_read_r+0x20>)
 8006330:	4604      	mov	r4, r0
 8006332:	4608      	mov	r0, r1
 8006334:	4611      	mov	r1, r2
 8006336:	2200      	movs	r2, #0
 8006338:	602a      	str	r2, [r5, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	f7fb fe40 	bl	8001fc0 <_read>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d102      	bne.n	800634a <_read_r+0x1e>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	b103      	cbz	r3, 800634a <_read_r+0x1e>
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	200004c0 	.word	0x200004c0

08006350 <_write_r>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	4d07      	ldr	r5, [pc, #28]	@ (8006370 <_write_r+0x20>)
 8006354:	4604      	mov	r4, r0
 8006356:	4608      	mov	r0, r1
 8006358:	4611      	mov	r1, r2
 800635a:	2200      	movs	r2, #0
 800635c:	602a      	str	r2, [r5, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	f7fb fe4b 	bl	8001ffa <_write>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d102      	bne.n	800636e <_write_r+0x1e>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	b103      	cbz	r3, 800636e <_write_r+0x1e>
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	200004c0 	.word	0x200004c0

08006374 <__errno>:
 8006374:	4b01      	ldr	r3, [pc, #4]	@ (800637c <__errno+0x8>)
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	20000020 	.word	0x20000020

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4d0d      	ldr	r5, [pc, #52]	@ (80063b8 <__libc_init_array+0x38>)
 8006384:	4c0d      	ldr	r4, [pc, #52]	@ (80063bc <__libc_init_array+0x3c>)
 8006386:	1b64      	subs	r4, r4, r5
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	2600      	movs	r6, #0
 800638c:	42a6      	cmp	r6, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	4d0b      	ldr	r5, [pc, #44]	@ (80063c0 <__libc_init_array+0x40>)
 8006392:	4c0c      	ldr	r4, [pc, #48]	@ (80063c4 <__libc_init_array+0x44>)
 8006394:	f005 f99c 	bl	800b6d0 <_init>
 8006398:	1b64      	subs	r4, r4, r5
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	2600      	movs	r6, #0
 800639e:	42a6      	cmp	r6, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a8:	4798      	blx	r3
 80063aa:	3601      	adds	r6, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b2:	4798      	blx	r3
 80063b4:	3601      	adds	r6, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	0800beb8 	.word	0x0800beb8
 80063bc:	0800beb8 	.word	0x0800beb8
 80063c0:	0800beb8 	.word	0x0800beb8
 80063c4:	0800bebc 	.word	0x0800bebc

080063c8 <__retarget_lock_init_recursive>:
 80063c8:	4770      	bx	lr

080063ca <__retarget_lock_acquire_recursive>:
 80063ca:	4770      	bx	lr

080063cc <__retarget_lock_release_recursive>:
 80063cc:	4770      	bx	lr
	...

080063d0 <nanf>:
 80063d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80063d8 <nanf+0x8>
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	7fc00000 	.word	0x7fc00000

080063dc <quorem>:
 80063dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	6903      	ldr	r3, [r0, #16]
 80063e2:	690c      	ldr	r4, [r1, #16]
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	4607      	mov	r7, r0
 80063e8:	db7e      	blt.n	80064e8 <quorem+0x10c>
 80063ea:	3c01      	subs	r4, #1
 80063ec:	f101 0814 	add.w	r8, r1, #20
 80063f0:	00a3      	lsls	r3, r4, #2
 80063f2:	f100 0514 	add.w	r5, r0, #20
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006402:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006406:	3301      	adds	r3, #1
 8006408:	429a      	cmp	r2, r3
 800640a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800640e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006412:	d32e      	bcc.n	8006472 <quorem+0x96>
 8006414:	f04f 0a00 	mov.w	sl, #0
 8006418:	46c4      	mov	ip, r8
 800641a:	46ae      	mov	lr, r5
 800641c:	46d3      	mov	fp, sl
 800641e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006422:	b298      	uxth	r0, r3
 8006424:	fb06 a000 	mla	r0, r6, r0, sl
 8006428:	0c02      	lsrs	r2, r0, #16
 800642a:	0c1b      	lsrs	r3, r3, #16
 800642c:	fb06 2303 	mla	r3, r6, r3, r2
 8006430:	f8de 2000 	ldr.w	r2, [lr]
 8006434:	b280      	uxth	r0, r0
 8006436:	b292      	uxth	r2, r2
 8006438:	1a12      	subs	r2, r2, r0
 800643a:	445a      	add	r2, fp
 800643c:	f8de 0000 	ldr.w	r0, [lr]
 8006440:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006444:	b29b      	uxth	r3, r3
 8006446:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800644a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800644e:	b292      	uxth	r2, r2
 8006450:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006454:	45e1      	cmp	r9, ip
 8006456:	f84e 2b04 	str.w	r2, [lr], #4
 800645a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800645e:	d2de      	bcs.n	800641e <quorem+0x42>
 8006460:	9b00      	ldr	r3, [sp, #0]
 8006462:	58eb      	ldr	r3, [r5, r3]
 8006464:	b92b      	cbnz	r3, 8006472 <quorem+0x96>
 8006466:	9b01      	ldr	r3, [sp, #4]
 8006468:	3b04      	subs	r3, #4
 800646a:	429d      	cmp	r5, r3
 800646c:	461a      	mov	r2, r3
 800646e:	d32f      	bcc.n	80064d0 <quorem+0xf4>
 8006470:	613c      	str	r4, [r7, #16]
 8006472:	4638      	mov	r0, r7
 8006474:	f001 f9c4 	bl	8007800 <__mcmp>
 8006478:	2800      	cmp	r0, #0
 800647a:	db25      	blt.n	80064c8 <quorem+0xec>
 800647c:	4629      	mov	r1, r5
 800647e:	2000      	movs	r0, #0
 8006480:	f858 2b04 	ldr.w	r2, [r8], #4
 8006484:	f8d1 c000 	ldr.w	ip, [r1]
 8006488:	fa1f fe82 	uxth.w	lr, r2
 800648c:	fa1f f38c 	uxth.w	r3, ip
 8006490:	eba3 030e 	sub.w	r3, r3, lr
 8006494:	4403      	add	r3, r0
 8006496:	0c12      	lsrs	r2, r2, #16
 8006498:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800649c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064a6:	45c1      	cmp	r9, r8
 80064a8:	f841 3b04 	str.w	r3, [r1], #4
 80064ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064b0:	d2e6      	bcs.n	8006480 <quorem+0xa4>
 80064b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064ba:	b922      	cbnz	r2, 80064c6 <quorem+0xea>
 80064bc:	3b04      	subs	r3, #4
 80064be:	429d      	cmp	r5, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	d30b      	bcc.n	80064dc <quorem+0x100>
 80064c4:	613c      	str	r4, [r7, #16]
 80064c6:	3601      	adds	r6, #1
 80064c8:	4630      	mov	r0, r6
 80064ca:	b003      	add	sp, #12
 80064cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d0:	6812      	ldr	r2, [r2, #0]
 80064d2:	3b04      	subs	r3, #4
 80064d4:	2a00      	cmp	r2, #0
 80064d6:	d1cb      	bne.n	8006470 <quorem+0x94>
 80064d8:	3c01      	subs	r4, #1
 80064da:	e7c6      	b.n	800646a <quorem+0x8e>
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	3b04      	subs	r3, #4
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d1ef      	bne.n	80064c4 <quorem+0xe8>
 80064e4:	3c01      	subs	r4, #1
 80064e6:	e7ea      	b.n	80064be <quorem+0xe2>
 80064e8:	2000      	movs	r0, #0
 80064ea:	e7ee      	b.n	80064ca <quorem+0xee>
 80064ec:	0000      	movs	r0, r0
	...

080064f0 <_dtoa_r>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	69c7      	ldr	r7, [r0, #28]
 80064f6:	b099      	sub	sp, #100	@ 0x64
 80064f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80064fc:	ec55 4b10 	vmov	r4, r5, d0
 8006500:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006502:	9109      	str	r1, [sp, #36]	@ 0x24
 8006504:	4683      	mov	fp, r0
 8006506:	920e      	str	r2, [sp, #56]	@ 0x38
 8006508:	9313      	str	r3, [sp, #76]	@ 0x4c
 800650a:	b97f      	cbnz	r7, 800652c <_dtoa_r+0x3c>
 800650c:	2010      	movs	r0, #16
 800650e:	f000 fdfd 	bl	800710c <malloc>
 8006512:	4602      	mov	r2, r0
 8006514:	f8cb 001c 	str.w	r0, [fp, #28]
 8006518:	b920      	cbnz	r0, 8006524 <_dtoa_r+0x34>
 800651a:	4ba7      	ldr	r3, [pc, #668]	@ (80067b8 <_dtoa_r+0x2c8>)
 800651c:	21ef      	movs	r1, #239	@ 0xef
 800651e:	48a7      	ldr	r0, [pc, #668]	@ (80067bc <_dtoa_r+0x2cc>)
 8006520:	f002 fe0e 	bl	8009140 <__assert_func>
 8006524:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006528:	6007      	str	r7, [r0, #0]
 800652a:	60c7      	str	r7, [r0, #12]
 800652c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006530:	6819      	ldr	r1, [r3, #0]
 8006532:	b159      	cbz	r1, 800654c <_dtoa_r+0x5c>
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	604a      	str	r2, [r1, #4]
 8006538:	2301      	movs	r3, #1
 800653a:	4093      	lsls	r3, r2
 800653c:	608b      	str	r3, [r1, #8]
 800653e:	4658      	mov	r0, fp
 8006540:	f000 feda 	bl	80072f8 <_Bfree>
 8006544:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	1e2b      	subs	r3, r5, #0
 800654e:	bfb9      	ittee	lt
 8006550:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006554:	9303      	strlt	r3, [sp, #12]
 8006556:	2300      	movge	r3, #0
 8006558:	6033      	strge	r3, [r6, #0]
 800655a:	9f03      	ldr	r7, [sp, #12]
 800655c:	4b98      	ldr	r3, [pc, #608]	@ (80067c0 <_dtoa_r+0x2d0>)
 800655e:	bfbc      	itt	lt
 8006560:	2201      	movlt	r2, #1
 8006562:	6032      	strlt	r2, [r6, #0]
 8006564:	43bb      	bics	r3, r7
 8006566:	d112      	bne.n	800658e <_dtoa_r+0x9e>
 8006568:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800656a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006574:	4323      	orrs	r3, r4
 8006576:	f000 854d 	beq.w	8007014 <_dtoa_r+0xb24>
 800657a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800657c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80067d4 <_dtoa_r+0x2e4>
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 854f 	beq.w	8007024 <_dtoa_r+0xb34>
 8006586:	f10a 0303 	add.w	r3, sl, #3
 800658a:	f000 bd49 	b.w	8007020 <_dtoa_r+0xb30>
 800658e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006592:	2200      	movs	r2, #0
 8006594:	ec51 0b17 	vmov	r0, r1, d7
 8006598:	2300      	movs	r3, #0
 800659a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800659e:	f7fa fa9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80065a2:	4680      	mov	r8, r0
 80065a4:	b158      	cbz	r0, 80065be <_dtoa_r+0xce>
 80065a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065a8:	2301      	movs	r3, #1
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065ae:	b113      	cbz	r3, 80065b6 <_dtoa_r+0xc6>
 80065b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80065b2:	4b84      	ldr	r3, [pc, #528]	@ (80067c4 <_dtoa_r+0x2d4>)
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80067d8 <_dtoa_r+0x2e8>
 80065ba:	f000 bd33 	b.w	8007024 <_dtoa_r+0xb34>
 80065be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80065c2:	aa16      	add	r2, sp, #88	@ 0x58
 80065c4:	a917      	add	r1, sp, #92	@ 0x5c
 80065c6:	4658      	mov	r0, fp
 80065c8:	f001 fa3a 	bl	8007a40 <__d2b>
 80065cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80065d0:	4681      	mov	r9, r0
 80065d2:	2e00      	cmp	r6, #0
 80065d4:	d077      	beq.n	80066c6 <_dtoa_r+0x1d6>
 80065d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80065dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80065ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80065f0:	4619      	mov	r1, r3
 80065f2:	2200      	movs	r2, #0
 80065f4:	4b74      	ldr	r3, [pc, #464]	@ (80067c8 <_dtoa_r+0x2d8>)
 80065f6:	f7f9 fe4f 	bl	8000298 <__aeabi_dsub>
 80065fa:	a369      	add	r3, pc, #420	@ (adr r3, 80067a0 <_dtoa_r+0x2b0>)
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f7fa f802 	bl	8000608 <__aeabi_dmul>
 8006604:	a368      	add	r3, pc, #416	@ (adr r3, 80067a8 <_dtoa_r+0x2b8>)
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	f7f9 fe47 	bl	800029c <__adddf3>
 800660e:	4604      	mov	r4, r0
 8006610:	4630      	mov	r0, r6
 8006612:	460d      	mov	r5, r1
 8006614:	f7f9 ff8e 	bl	8000534 <__aeabi_i2d>
 8006618:	a365      	add	r3, pc, #404	@ (adr r3, 80067b0 <_dtoa_r+0x2c0>)
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f7f9 fff3 	bl	8000608 <__aeabi_dmul>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	4620      	mov	r0, r4
 8006628:	4629      	mov	r1, r5
 800662a:	f7f9 fe37 	bl	800029c <__adddf3>
 800662e:	4604      	mov	r4, r0
 8006630:	460d      	mov	r5, r1
 8006632:	f7fa fa99 	bl	8000b68 <__aeabi_d2iz>
 8006636:	2200      	movs	r2, #0
 8006638:	4607      	mov	r7, r0
 800663a:	2300      	movs	r3, #0
 800663c:	4620      	mov	r0, r4
 800663e:	4629      	mov	r1, r5
 8006640:	f7fa fa54 	bl	8000aec <__aeabi_dcmplt>
 8006644:	b140      	cbz	r0, 8006658 <_dtoa_r+0x168>
 8006646:	4638      	mov	r0, r7
 8006648:	f7f9 ff74 	bl	8000534 <__aeabi_i2d>
 800664c:	4622      	mov	r2, r4
 800664e:	462b      	mov	r3, r5
 8006650:	f7fa fa42 	bl	8000ad8 <__aeabi_dcmpeq>
 8006654:	b900      	cbnz	r0, 8006658 <_dtoa_r+0x168>
 8006656:	3f01      	subs	r7, #1
 8006658:	2f16      	cmp	r7, #22
 800665a:	d851      	bhi.n	8006700 <_dtoa_r+0x210>
 800665c:	4b5b      	ldr	r3, [pc, #364]	@ (80067cc <_dtoa_r+0x2dc>)
 800665e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800666a:	f7fa fa3f 	bl	8000aec <__aeabi_dcmplt>
 800666e:	2800      	cmp	r0, #0
 8006670:	d048      	beq.n	8006704 <_dtoa_r+0x214>
 8006672:	3f01      	subs	r7, #1
 8006674:	2300      	movs	r3, #0
 8006676:	9312      	str	r3, [sp, #72]	@ 0x48
 8006678:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800667a:	1b9b      	subs	r3, r3, r6
 800667c:	1e5a      	subs	r2, r3, #1
 800667e:	bf44      	itt	mi
 8006680:	f1c3 0801 	rsbmi	r8, r3, #1
 8006684:	2300      	movmi	r3, #0
 8006686:	9208      	str	r2, [sp, #32]
 8006688:	bf54      	ite	pl
 800668a:	f04f 0800 	movpl.w	r8, #0
 800668e:	9308      	strmi	r3, [sp, #32]
 8006690:	2f00      	cmp	r7, #0
 8006692:	db39      	blt.n	8006708 <_dtoa_r+0x218>
 8006694:	9b08      	ldr	r3, [sp, #32]
 8006696:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006698:	443b      	add	r3, r7
 800669a:	9308      	str	r3, [sp, #32]
 800669c:	2300      	movs	r3, #0
 800669e:	930a      	str	r3, [sp, #40]	@ 0x28
 80066a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a2:	2b09      	cmp	r3, #9
 80066a4:	d864      	bhi.n	8006770 <_dtoa_r+0x280>
 80066a6:	2b05      	cmp	r3, #5
 80066a8:	bfc4      	itt	gt
 80066aa:	3b04      	subgt	r3, #4
 80066ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80066ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b0:	f1a3 0302 	sub.w	r3, r3, #2
 80066b4:	bfcc      	ite	gt
 80066b6:	2400      	movgt	r4, #0
 80066b8:	2401      	movle	r4, #1
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d863      	bhi.n	8006786 <_dtoa_r+0x296>
 80066be:	e8df f003 	tbb	[pc, r3]
 80066c2:	372a      	.short	0x372a
 80066c4:	5535      	.short	0x5535
 80066c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80066ca:	441e      	add	r6, r3
 80066cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	bfc1      	itttt	gt
 80066d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80066d8:	409f      	lslgt	r7, r3
 80066da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80066de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066e2:	bfd6      	itet	le
 80066e4:	f1c3 0320 	rsble	r3, r3, #32
 80066e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80066ec:	fa04 f003 	lslle.w	r0, r4, r3
 80066f0:	f7f9 ff10 	bl	8000514 <__aeabi_ui2d>
 80066f4:	2201      	movs	r2, #1
 80066f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80066fa:	3e01      	subs	r6, #1
 80066fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80066fe:	e777      	b.n	80065f0 <_dtoa_r+0x100>
 8006700:	2301      	movs	r3, #1
 8006702:	e7b8      	b.n	8006676 <_dtoa_r+0x186>
 8006704:	9012      	str	r0, [sp, #72]	@ 0x48
 8006706:	e7b7      	b.n	8006678 <_dtoa_r+0x188>
 8006708:	427b      	negs	r3, r7
 800670a:	930a      	str	r3, [sp, #40]	@ 0x28
 800670c:	2300      	movs	r3, #0
 800670e:	eba8 0807 	sub.w	r8, r8, r7
 8006712:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006714:	e7c4      	b.n	80066a0 <_dtoa_r+0x1b0>
 8006716:	2300      	movs	r3, #0
 8006718:	930b      	str	r3, [sp, #44]	@ 0x2c
 800671a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800671c:	2b00      	cmp	r3, #0
 800671e:	dc35      	bgt.n	800678c <_dtoa_r+0x29c>
 8006720:	2301      	movs	r3, #1
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	9307      	str	r3, [sp, #28]
 8006726:	461a      	mov	r2, r3
 8006728:	920e      	str	r2, [sp, #56]	@ 0x38
 800672a:	e00b      	b.n	8006744 <_dtoa_r+0x254>
 800672c:	2301      	movs	r3, #1
 800672e:	e7f3      	b.n	8006718 <_dtoa_r+0x228>
 8006730:	2300      	movs	r3, #0
 8006732:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006736:	18fb      	adds	r3, r7, r3
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	3301      	adds	r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	9307      	str	r3, [sp, #28]
 8006740:	bfb8      	it	lt
 8006742:	2301      	movlt	r3, #1
 8006744:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006748:	2100      	movs	r1, #0
 800674a:	2204      	movs	r2, #4
 800674c:	f102 0514 	add.w	r5, r2, #20
 8006750:	429d      	cmp	r5, r3
 8006752:	d91f      	bls.n	8006794 <_dtoa_r+0x2a4>
 8006754:	6041      	str	r1, [r0, #4]
 8006756:	4658      	mov	r0, fp
 8006758:	f000 fd8e 	bl	8007278 <_Balloc>
 800675c:	4682      	mov	sl, r0
 800675e:	2800      	cmp	r0, #0
 8006760:	d13c      	bne.n	80067dc <_dtoa_r+0x2ec>
 8006762:	4b1b      	ldr	r3, [pc, #108]	@ (80067d0 <_dtoa_r+0x2e0>)
 8006764:	4602      	mov	r2, r0
 8006766:	f240 11af 	movw	r1, #431	@ 0x1af
 800676a:	e6d8      	b.n	800651e <_dtoa_r+0x2e>
 800676c:	2301      	movs	r3, #1
 800676e:	e7e0      	b.n	8006732 <_dtoa_r+0x242>
 8006770:	2401      	movs	r4, #1
 8006772:	2300      	movs	r3, #0
 8006774:	9309      	str	r3, [sp, #36]	@ 0x24
 8006776:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006778:	f04f 33ff 	mov.w	r3, #4294967295
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	9307      	str	r3, [sp, #28]
 8006780:	2200      	movs	r2, #0
 8006782:	2312      	movs	r3, #18
 8006784:	e7d0      	b.n	8006728 <_dtoa_r+0x238>
 8006786:	2301      	movs	r3, #1
 8006788:	930b      	str	r3, [sp, #44]	@ 0x2c
 800678a:	e7f5      	b.n	8006778 <_dtoa_r+0x288>
 800678c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	9307      	str	r3, [sp, #28]
 8006792:	e7d7      	b.n	8006744 <_dtoa_r+0x254>
 8006794:	3101      	adds	r1, #1
 8006796:	0052      	lsls	r2, r2, #1
 8006798:	e7d8      	b.n	800674c <_dtoa_r+0x25c>
 800679a:	bf00      	nop
 800679c:	f3af 8000 	nop.w
 80067a0:	636f4361 	.word	0x636f4361
 80067a4:	3fd287a7 	.word	0x3fd287a7
 80067a8:	8b60c8b3 	.word	0x8b60c8b3
 80067ac:	3fc68a28 	.word	0x3fc68a28
 80067b0:	509f79fb 	.word	0x509f79fb
 80067b4:	3fd34413 	.word	0x3fd34413
 80067b8:	0800b882 	.word	0x0800b882
 80067bc:	0800b899 	.word	0x0800b899
 80067c0:	7ff00000 	.word	0x7ff00000
 80067c4:	0800b84d 	.word	0x0800b84d
 80067c8:	3ff80000 	.word	0x3ff80000
 80067cc:	0800b990 	.word	0x0800b990
 80067d0:	0800b8f1 	.word	0x0800b8f1
 80067d4:	0800b87e 	.word	0x0800b87e
 80067d8:	0800b84c 	.word	0x0800b84c
 80067dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067e0:	6018      	str	r0, [r3, #0]
 80067e2:	9b07      	ldr	r3, [sp, #28]
 80067e4:	2b0e      	cmp	r3, #14
 80067e6:	f200 80a4 	bhi.w	8006932 <_dtoa_r+0x442>
 80067ea:	2c00      	cmp	r4, #0
 80067ec:	f000 80a1 	beq.w	8006932 <_dtoa_r+0x442>
 80067f0:	2f00      	cmp	r7, #0
 80067f2:	dd33      	ble.n	800685c <_dtoa_r+0x36c>
 80067f4:	4bad      	ldr	r3, [pc, #692]	@ (8006aac <_dtoa_r+0x5bc>)
 80067f6:	f007 020f 	and.w	r2, r7, #15
 80067fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067fe:	ed93 7b00 	vldr	d7, [r3]
 8006802:	05f8      	lsls	r0, r7, #23
 8006804:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006808:	ea4f 1427 	mov.w	r4, r7, asr #4
 800680c:	d516      	bpl.n	800683c <_dtoa_r+0x34c>
 800680e:	4ba8      	ldr	r3, [pc, #672]	@ (8006ab0 <_dtoa_r+0x5c0>)
 8006810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006814:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006818:	f7fa f820 	bl	800085c <__aeabi_ddiv>
 800681c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006820:	f004 040f 	and.w	r4, r4, #15
 8006824:	2603      	movs	r6, #3
 8006826:	4da2      	ldr	r5, [pc, #648]	@ (8006ab0 <_dtoa_r+0x5c0>)
 8006828:	b954      	cbnz	r4, 8006840 <_dtoa_r+0x350>
 800682a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800682e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006832:	f7fa f813 	bl	800085c <__aeabi_ddiv>
 8006836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800683a:	e028      	b.n	800688e <_dtoa_r+0x39e>
 800683c:	2602      	movs	r6, #2
 800683e:	e7f2      	b.n	8006826 <_dtoa_r+0x336>
 8006840:	07e1      	lsls	r1, r4, #31
 8006842:	d508      	bpl.n	8006856 <_dtoa_r+0x366>
 8006844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006848:	e9d5 2300 	ldrd	r2, r3, [r5]
 800684c:	f7f9 fedc 	bl	8000608 <__aeabi_dmul>
 8006850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006854:	3601      	adds	r6, #1
 8006856:	1064      	asrs	r4, r4, #1
 8006858:	3508      	adds	r5, #8
 800685a:	e7e5      	b.n	8006828 <_dtoa_r+0x338>
 800685c:	f000 80d2 	beq.w	8006a04 <_dtoa_r+0x514>
 8006860:	427c      	negs	r4, r7
 8006862:	4b92      	ldr	r3, [pc, #584]	@ (8006aac <_dtoa_r+0x5bc>)
 8006864:	4d92      	ldr	r5, [pc, #584]	@ (8006ab0 <_dtoa_r+0x5c0>)
 8006866:	f004 020f 	and.w	r2, r4, #15
 800686a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006876:	f7f9 fec7 	bl	8000608 <__aeabi_dmul>
 800687a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800687e:	1124      	asrs	r4, r4, #4
 8006880:	2300      	movs	r3, #0
 8006882:	2602      	movs	r6, #2
 8006884:	2c00      	cmp	r4, #0
 8006886:	f040 80b2 	bne.w	80069ee <_dtoa_r+0x4fe>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1d3      	bne.n	8006836 <_dtoa_r+0x346>
 800688e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006890:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 80b7 	beq.w	8006a08 <_dtoa_r+0x518>
 800689a:	4b86      	ldr	r3, [pc, #536]	@ (8006ab4 <_dtoa_r+0x5c4>)
 800689c:	2200      	movs	r2, #0
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	f7fa f923 	bl	8000aec <__aeabi_dcmplt>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	f000 80ae 	beq.w	8006a08 <_dtoa_r+0x518>
 80068ac:	9b07      	ldr	r3, [sp, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80aa 	beq.w	8006a08 <_dtoa_r+0x518>
 80068b4:	9b00      	ldr	r3, [sp, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	dd37      	ble.n	800692a <_dtoa_r+0x43a>
 80068ba:	1e7b      	subs	r3, r7, #1
 80068bc:	9304      	str	r3, [sp, #16]
 80068be:	4620      	mov	r0, r4
 80068c0:	4b7d      	ldr	r3, [pc, #500]	@ (8006ab8 <_dtoa_r+0x5c8>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	4629      	mov	r1, r5
 80068c6:	f7f9 fe9f 	bl	8000608 <__aeabi_dmul>
 80068ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ce:	9c00      	ldr	r4, [sp, #0]
 80068d0:	3601      	adds	r6, #1
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7f9 fe2e 	bl	8000534 <__aeabi_i2d>
 80068d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068dc:	f7f9 fe94 	bl	8000608 <__aeabi_dmul>
 80068e0:	4b76      	ldr	r3, [pc, #472]	@ (8006abc <_dtoa_r+0x5cc>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	f7f9 fcda 	bl	800029c <__adddf3>
 80068e8:	4605      	mov	r5, r0
 80068ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068ee:	2c00      	cmp	r4, #0
 80068f0:	f040 808d 	bne.w	8006a0e <_dtoa_r+0x51e>
 80068f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068f8:	4b71      	ldr	r3, [pc, #452]	@ (8006ac0 <_dtoa_r+0x5d0>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	f7f9 fccc 	bl	8000298 <__aeabi_dsub>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006908:	462a      	mov	r2, r5
 800690a:	4633      	mov	r3, r6
 800690c:	f7fa f90c 	bl	8000b28 <__aeabi_dcmpgt>
 8006910:	2800      	cmp	r0, #0
 8006912:	f040 828b 	bne.w	8006e2c <_dtoa_r+0x93c>
 8006916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800691a:	462a      	mov	r2, r5
 800691c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006920:	f7fa f8e4 	bl	8000aec <__aeabi_dcmplt>
 8006924:	2800      	cmp	r0, #0
 8006926:	f040 8128 	bne.w	8006b7a <_dtoa_r+0x68a>
 800692a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800692e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006932:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006934:	2b00      	cmp	r3, #0
 8006936:	f2c0 815a 	blt.w	8006bee <_dtoa_r+0x6fe>
 800693a:	2f0e      	cmp	r7, #14
 800693c:	f300 8157 	bgt.w	8006bee <_dtoa_r+0x6fe>
 8006940:	4b5a      	ldr	r3, [pc, #360]	@ (8006aac <_dtoa_r+0x5bc>)
 8006942:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006946:	ed93 7b00 	vldr	d7, [r3]
 800694a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800694c:	2b00      	cmp	r3, #0
 800694e:	ed8d 7b00 	vstr	d7, [sp]
 8006952:	da03      	bge.n	800695c <_dtoa_r+0x46c>
 8006954:	9b07      	ldr	r3, [sp, #28]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f340 8101 	ble.w	8006b5e <_dtoa_r+0x66e>
 800695c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006960:	4656      	mov	r6, sl
 8006962:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006966:	4620      	mov	r0, r4
 8006968:	4629      	mov	r1, r5
 800696a:	f7f9 ff77 	bl	800085c <__aeabi_ddiv>
 800696e:	f7fa f8fb 	bl	8000b68 <__aeabi_d2iz>
 8006972:	4680      	mov	r8, r0
 8006974:	f7f9 fdde 	bl	8000534 <__aeabi_i2d>
 8006978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800697c:	f7f9 fe44 	bl	8000608 <__aeabi_dmul>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4620      	mov	r0, r4
 8006986:	4629      	mov	r1, r5
 8006988:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800698c:	f7f9 fc84 	bl	8000298 <__aeabi_dsub>
 8006990:	f806 4b01 	strb.w	r4, [r6], #1
 8006994:	9d07      	ldr	r5, [sp, #28]
 8006996:	eba6 040a 	sub.w	r4, r6, sl
 800699a:	42a5      	cmp	r5, r4
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	f040 8117 	bne.w	8006bd2 <_dtoa_r+0x6e2>
 80069a4:	f7f9 fc7a 	bl	800029c <__adddf3>
 80069a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ac:	4604      	mov	r4, r0
 80069ae:	460d      	mov	r5, r1
 80069b0:	f7fa f8ba 	bl	8000b28 <__aeabi_dcmpgt>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f040 80f9 	bne.w	8006bac <_dtoa_r+0x6bc>
 80069ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069be:	4620      	mov	r0, r4
 80069c0:	4629      	mov	r1, r5
 80069c2:	f7fa f889 	bl	8000ad8 <__aeabi_dcmpeq>
 80069c6:	b118      	cbz	r0, 80069d0 <_dtoa_r+0x4e0>
 80069c8:	f018 0f01 	tst.w	r8, #1
 80069cc:	f040 80ee 	bne.w	8006bac <_dtoa_r+0x6bc>
 80069d0:	4649      	mov	r1, r9
 80069d2:	4658      	mov	r0, fp
 80069d4:	f000 fc90 	bl	80072f8 <_Bfree>
 80069d8:	2300      	movs	r3, #0
 80069da:	7033      	strb	r3, [r6, #0]
 80069dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80069de:	3701      	adds	r7, #1
 80069e0:	601f      	str	r7, [r3, #0]
 80069e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 831d 	beq.w	8007024 <_dtoa_r+0xb34>
 80069ea:	601e      	str	r6, [r3, #0]
 80069ec:	e31a      	b.n	8007024 <_dtoa_r+0xb34>
 80069ee:	07e2      	lsls	r2, r4, #31
 80069f0:	d505      	bpl.n	80069fe <_dtoa_r+0x50e>
 80069f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069f6:	f7f9 fe07 	bl	8000608 <__aeabi_dmul>
 80069fa:	3601      	adds	r6, #1
 80069fc:	2301      	movs	r3, #1
 80069fe:	1064      	asrs	r4, r4, #1
 8006a00:	3508      	adds	r5, #8
 8006a02:	e73f      	b.n	8006884 <_dtoa_r+0x394>
 8006a04:	2602      	movs	r6, #2
 8006a06:	e742      	b.n	800688e <_dtoa_r+0x39e>
 8006a08:	9c07      	ldr	r4, [sp, #28]
 8006a0a:	9704      	str	r7, [sp, #16]
 8006a0c:	e761      	b.n	80068d2 <_dtoa_r+0x3e2>
 8006a0e:	4b27      	ldr	r3, [pc, #156]	@ (8006aac <_dtoa_r+0x5bc>)
 8006a10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a1a:	4454      	add	r4, sl
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	d053      	beq.n	8006ac8 <_dtoa_r+0x5d8>
 8006a20:	4928      	ldr	r1, [pc, #160]	@ (8006ac4 <_dtoa_r+0x5d4>)
 8006a22:	2000      	movs	r0, #0
 8006a24:	f7f9 ff1a 	bl	800085c <__aeabi_ddiv>
 8006a28:	4633      	mov	r3, r6
 8006a2a:	462a      	mov	r2, r5
 8006a2c:	f7f9 fc34 	bl	8000298 <__aeabi_dsub>
 8006a30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a34:	4656      	mov	r6, sl
 8006a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a3a:	f7fa f895 	bl	8000b68 <__aeabi_d2iz>
 8006a3e:	4605      	mov	r5, r0
 8006a40:	f7f9 fd78 	bl	8000534 <__aeabi_i2d>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a4c:	f7f9 fc24 	bl	8000298 <__aeabi_dsub>
 8006a50:	3530      	adds	r5, #48	@ 0x30
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a5a:	f806 5b01 	strb.w	r5, [r6], #1
 8006a5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a62:	f7fa f843 	bl	8000aec <__aeabi_dcmplt>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d171      	bne.n	8006b4e <_dtoa_r+0x65e>
 8006a6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a6e:	4911      	ldr	r1, [pc, #68]	@ (8006ab4 <_dtoa_r+0x5c4>)
 8006a70:	2000      	movs	r0, #0
 8006a72:	f7f9 fc11 	bl	8000298 <__aeabi_dsub>
 8006a76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a7a:	f7fa f837 	bl	8000aec <__aeabi_dcmplt>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	f040 8095 	bne.w	8006bae <_dtoa_r+0x6be>
 8006a84:	42a6      	cmp	r6, r4
 8006a86:	f43f af50 	beq.w	800692a <_dtoa_r+0x43a>
 8006a8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab8 <_dtoa_r+0x5c8>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	f7f9 fdb9 	bl	8000608 <__aeabi_dmul>
 8006a96:	4b08      	ldr	r3, [pc, #32]	@ (8006ab8 <_dtoa_r+0x5c8>)
 8006a98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aa2:	f7f9 fdb1 	bl	8000608 <__aeabi_dmul>
 8006aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aaa:	e7c4      	b.n	8006a36 <_dtoa_r+0x546>
 8006aac:	0800b990 	.word	0x0800b990
 8006ab0:	0800b968 	.word	0x0800b968
 8006ab4:	3ff00000 	.word	0x3ff00000
 8006ab8:	40240000 	.word	0x40240000
 8006abc:	401c0000 	.word	0x401c0000
 8006ac0:	40140000 	.word	0x40140000
 8006ac4:	3fe00000 	.word	0x3fe00000
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	f7f9 fd9c 	bl	8000608 <__aeabi_dmul>
 8006ad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ad4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006ad6:	4656      	mov	r6, sl
 8006ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006adc:	f7fa f844 	bl	8000b68 <__aeabi_d2iz>
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	f7f9 fd27 	bl	8000534 <__aeabi_i2d>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aee:	f7f9 fbd3 	bl	8000298 <__aeabi_dsub>
 8006af2:	3530      	adds	r5, #48	@ 0x30
 8006af4:	f806 5b01 	strb.w	r5, [r6], #1
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	42a6      	cmp	r6, r4
 8006afe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	d124      	bne.n	8006b52 <_dtoa_r+0x662>
 8006b08:	4bac      	ldr	r3, [pc, #688]	@ (8006dbc <_dtoa_r+0x8cc>)
 8006b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b0e:	f7f9 fbc5 	bl	800029c <__adddf3>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b1a:	f7fa f805 	bl	8000b28 <__aeabi_dcmpgt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d145      	bne.n	8006bae <_dtoa_r+0x6be>
 8006b22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b26:	49a5      	ldr	r1, [pc, #660]	@ (8006dbc <_dtoa_r+0x8cc>)
 8006b28:	2000      	movs	r0, #0
 8006b2a:	f7f9 fbb5 	bl	8000298 <__aeabi_dsub>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b36:	f7f9 ffd9 	bl	8000aec <__aeabi_dcmplt>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f43f aef5 	beq.w	800692a <_dtoa_r+0x43a>
 8006b40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006b42:	1e73      	subs	r3, r6, #1
 8006b44:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b4a:	2b30      	cmp	r3, #48	@ 0x30
 8006b4c:	d0f8      	beq.n	8006b40 <_dtoa_r+0x650>
 8006b4e:	9f04      	ldr	r7, [sp, #16]
 8006b50:	e73e      	b.n	80069d0 <_dtoa_r+0x4e0>
 8006b52:	4b9b      	ldr	r3, [pc, #620]	@ (8006dc0 <_dtoa_r+0x8d0>)
 8006b54:	f7f9 fd58 	bl	8000608 <__aeabi_dmul>
 8006b58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b5c:	e7bc      	b.n	8006ad8 <_dtoa_r+0x5e8>
 8006b5e:	d10c      	bne.n	8006b7a <_dtoa_r+0x68a>
 8006b60:	4b98      	ldr	r3, [pc, #608]	@ (8006dc4 <_dtoa_r+0x8d4>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b68:	f7f9 fd4e 	bl	8000608 <__aeabi_dmul>
 8006b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b70:	f7f9 ffd0 	bl	8000b14 <__aeabi_dcmpge>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	f000 8157 	beq.w	8006e28 <_dtoa_r+0x938>
 8006b7a:	2400      	movs	r4, #0
 8006b7c:	4625      	mov	r5, r4
 8006b7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b80:	43db      	mvns	r3, r3
 8006b82:	9304      	str	r3, [sp, #16]
 8006b84:	4656      	mov	r6, sl
 8006b86:	2700      	movs	r7, #0
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4658      	mov	r0, fp
 8006b8c:	f000 fbb4 	bl	80072f8 <_Bfree>
 8006b90:	2d00      	cmp	r5, #0
 8006b92:	d0dc      	beq.n	8006b4e <_dtoa_r+0x65e>
 8006b94:	b12f      	cbz	r7, 8006ba2 <_dtoa_r+0x6b2>
 8006b96:	42af      	cmp	r7, r5
 8006b98:	d003      	beq.n	8006ba2 <_dtoa_r+0x6b2>
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	4658      	mov	r0, fp
 8006b9e:	f000 fbab 	bl	80072f8 <_Bfree>
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	4658      	mov	r0, fp
 8006ba6:	f000 fba7 	bl	80072f8 <_Bfree>
 8006baa:	e7d0      	b.n	8006b4e <_dtoa_r+0x65e>
 8006bac:	9704      	str	r7, [sp, #16]
 8006bae:	4633      	mov	r3, r6
 8006bb0:	461e      	mov	r6, r3
 8006bb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bb6:	2a39      	cmp	r2, #57	@ 0x39
 8006bb8:	d107      	bne.n	8006bca <_dtoa_r+0x6da>
 8006bba:	459a      	cmp	sl, r3
 8006bbc:	d1f8      	bne.n	8006bb0 <_dtoa_r+0x6c0>
 8006bbe:	9a04      	ldr	r2, [sp, #16]
 8006bc0:	3201      	adds	r2, #1
 8006bc2:	9204      	str	r2, [sp, #16]
 8006bc4:	2230      	movs	r2, #48	@ 0x30
 8006bc6:	f88a 2000 	strb.w	r2, [sl]
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	3201      	adds	r2, #1
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	e7bd      	b.n	8006b4e <_dtoa_r+0x65e>
 8006bd2:	4b7b      	ldr	r3, [pc, #492]	@ (8006dc0 <_dtoa_r+0x8d0>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f7f9 fd17 	bl	8000608 <__aeabi_dmul>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4604      	mov	r4, r0
 8006be0:	460d      	mov	r5, r1
 8006be2:	f7f9 ff79 	bl	8000ad8 <__aeabi_dcmpeq>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f43f aebb 	beq.w	8006962 <_dtoa_r+0x472>
 8006bec:	e6f0      	b.n	80069d0 <_dtoa_r+0x4e0>
 8006bee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006bf0:	2a00      	cmp	r2, #0
 8006bf2:	f000 80db 	beq.w	8006dac <_dtoa_r+0x8bc>
 8006bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bf8:	2a01      	cmp	r2, #1
 8006bfa:	f300 80bf 	bgt.w	8006d7c <_dtoa_r+0x88c>
 8006bfe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006c00:	2a00      	cmp	r2, #0
 8006c02:	f000 80b7 	beq.w	8006d74 <_dtoa_r+0x884>
 8006c06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c0c:	4646      	mov	r6, r8
 8006c0e:	9a08      	ldr	r2, [sp, #32]
 8006c10:	2101      	movs	r1, #1
 8006c12:	441a      	add	r2, r3
 8006c14:	4658      	mov	r0, fp
 8006c16:	4498      	add	r8, r3
 8006c18:	9208      	str	r2, [sp, #32]
 8006c1a:	f000 fc6b 	bl	80074f4 <__i2b>
 8006c1e:	4605      	mov	r5, r0
 8006c20:	b15e      	cbz	r6, 8006c3a <_dtoa_r+0x74a>
 8006c22:	9b08      	ldr	r3, [sp, #32]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	dd08      	ble.n	8006c3a <_dtoa_r+0x74a>
 8006c28:	42b3      	cmp	r3, r6
 8006c2a:	9a08      	ldr	r2, [sp, #32]
 8006c2c:	bfa8      	it	ge
 8006c2e:	4633      	movge	r3, r6
 8006c30:	eba8 0803 	sub.w	r8, r8, r3
 8006c34:	1af6      	subs	r6, r6, r3
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	9308      	str	r3, [sp, #32]
 8006c3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c3c:	b1f3      	cbz	r3, 8006c7c <_dtoa_r+0x78c>
 8006c3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 80b7 	beq.w	8006db4 <_dtoa_r+0x8c4>
 8006c46:	b18c      	cbz	r4, 8006c6c <_dtoa_r+0x77c>
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	4658      	mov	r0, fp
 8006c4e:	f000 fd11 	bl	8007674 <__pow5mult>
 8006c52:	464a      	mov	r2, r9
 8006c54:	4601      	mov	r1, r0
 8006c56:	4605      	mov	r5, r0
 8006c58:	4658      	mov	r0, fp
 8006c5a:	f000 fc61 	bl	8007520 <__multiply>
 8006c5e:	4649      	mov	r1, r9
 8006c60:	9004      	str	r0, [sp, #16]
 8006c62:	4658      	mov	r0, fp
 8006c64:	f000 fb48 	bl	80072f8 <_Bfree>
 8006c68:	9b04      	ldr	r3, [sp, #16]
 8006c6a:	4699      	mov	r9, r3
 8006c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c6e:	1b1a      	subs	r2, r3, r4
 8006c70:	d004      	beq.n	8006c7c <_dtoa_r+0x78c>
 8006c72:	4649      	mov	r1, r9
 8006c74:	4658      	mov	r0, fp
 8006c76:	f000 fcfd 	bl	8007674 <__pow5mult>
 8006c7a:	4681      	mov	r9, r0
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	4658      	mov	r0, fp
 8006c80:	f000 fc38 	bl	80074f4 <__i2b>
 8006c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c86:	4604      	mov	r4, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 81cf 	beq.w	800702c <_dtoa_r+0xb3c>
 8006c8e:	461a      	mov	r2, r3
 8006c90:	4601      	mov	r1, r0
 8006c92:	4658      	mov	r0, fp
 8006c94:	f000 fcee 	bl	8007674 <__pow5mult>
 8006c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	f300 8095 	bgt.w	8006dcc <_dtoa_r+0x8dc>
 8006ca2:	9b02      	ldr	r3, [sp, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f040 8087 	bne.w	8006db8 <_dtoa_r+0x8c8>
 8006caa:	9b03      	ldr	r3, [sp, #12]
 8006cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 8089 	bne.w	8006dc8 <_dtoa_r+0x8d8>
 8006cb6:	9b03      	ldr	r3, [sp, #12]
 8006cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cbc:	0d1b      	lsrs	r3, r3, #20
 8006cbe:	051b      	lsls	r3, r3, #20
 8006cc0:	b12b      	cbz	r3, 8006cce <_dtoa_r+0x7de>
 8006cc2:	9b08      	ldr	r3, [sp, #32]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	9308      	str	r3, [sp, #32]
 8006cc8:	f108 0801 	add.w	r8, r8, #1
 8006ccc:	2301      	movs	r3, #1
 8006cce:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 81b0 	beq.w	8007038 <_dtoa_r+0xb48>
 8006cd8:	6923      	ldr	r3, [r4, #16]
 8006cda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006cde:	6918      	ldr	r0, [r3, #16]
 8006ce0:	f000 fbbc 	bl	800745c <__hi0bits>
 8006ce4:	f1c0 0020 	rsb	r0, r0, #32
 8006ce8:	9b08      	ldr	r3, [sp, #32]
 8006cea:	4418      	add	r0, r3
 8006cec:	f010 001f 	ands.w	r0, r0, #31
 8006cf0:	d077      	beq.n	8006de2 <_dtoa_r+0x8f2>
 8006cf2:	f1c0 0320 	rsb	r3, r0, #32
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	dd6b      	ble.n	8006dd2 <_dtoa_r+0x8e2>
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	f1c0 001c 	rsb	r0, r0, #28
 8006d00:	4403      	add	r3, r0
 8006d02:	4480      	add	r8, r0
 8006d04:	4406      	add	r6, r0
 8006d06:	9308      	str	r3, [sp, #32]
 8006d08:	f1b8 0f00 	cmp.w	r8, #0
 8006d0c:	dd05      	ble.n	8006d1a <_dtoa_r+0x82a>
 8006d0e:	4649      	mov	r1, r9
 8006d10:	4642      	mov	r2, r8
 8006d12:	4658      	mov	r0, fp
 8006d14:	f000 fd08 	bl	8007728 <__lshift>
 8006d18:	4681      	mov	r9, r0
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	dd05      	ble.n	8006d2c <_dtoa_r+0x83c>
 8006d20:	4621      	mov	r1, r4
 8006d22:	461a      	mov	r2, r3
 8006d24:	4658      	mov	r0, fp
 8006d26:	f000 fcff 	bl	8007728 <__lshift>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d059      	beq.n	8006de6 <_dtoa_r+0x8f6>
 8006d32:	4621      	mov	r1, r4
 8006d34:	4648      	mov	r0, r9
 8006d36:	f000 fd63 	bl	8007800 <__mcmp>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	da53      	bge.n	8006de6 <_dtoa_r+0x8f6>
 8006d3e:	1e7b      	subs	r3, r7, #1
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	4649      	mov	r1, r9
 8006d44:	2300      	movs	r3, #0
 8006d46:	220a      	movs	r2, #10
 8006d48:	4658      	mov	r0, fp
 8006d4a:	f000 faf7 	bl	800733c <__multadd>
 8006d4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d50:	4681      	mov	r9, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 8172 	beq.w	800703c <_dtoa_r+0xb4c>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	220a      	movs	r2, #10
 8006d5e:	4658      	mov	r0, fp
 8006d60:	f000 faec 	bl	800733c <__multadd>
 8006d64:	9b00      	ldr	r3, [sp, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	4605      	mov	r5, r0
 8006d6a:	dc67      	bgt.n	8006e3c <_dtoa_r+0x94c>
 8006d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	dc41      	bgt.n	8006df6 <_dtoa_r+0x906>
 8006d72:	e063      	b.n	8006e3c <_dtoa_r+0x94c>
 8006d74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d7a:	e746      	b.n	8006c0a <_dtoa_r+0x71a>
 8006d7c:	9b07      	ldr	r3, [sp, #28]
 8006d7e:	1e5c      	subs	r4, r3, #1
 8006d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	bfbf      	itttt	lt
 8006d86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006d88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006d8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006d8c:	1ae3      	sublt	r3, r4, r3
 8006d8e:	bfb4      	ite	lt
 8006d90:	18d2      	addlt	r2, r2, r3
 8006d92:	1b1c      	subge	r4, r3, r4
 8006d94:	9b07      	ldr	r3, [sp, #28]
 8006d96:	bfbc      	itt	lt
 8006d98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006d9a:	2400      	movlt	r4, #0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	bfb5      	itete	lt
 8006da0:	eba8 0603 	sublt.w	r6, r8, r3
 8006da4:	9b07      	ldrge	r3, [sp, #28]
 8006da6:	2300      	movlt	r3, #0
 8006da8:	4646      	movge	r6, r8
 8006daa:	e730      	b.n	8006c0e <_dtoa_r+0x71e>
 8006dac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006dae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006db0:	4646      	mov	r6, r8
 8006db2:	e735      	b.n	8006c20 <_dtoa_r+0x730>
 8006db4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006db6:	e75c      	b.n	8006c72 <_dtoa_r+0x782>
 8006db8:	2300      	movs	r3, #0
 8006dba:	e788      	b.n	8006cce <_dtoa_r+0x7de>
 8006dbc:	3fe00000 	.word	0x3fe00000
 8006dc0:	40240000 	.word	0x40240000
 8006dc4:	40140000 	.word	0x40140000
 8006dc8:	9b02      	ldr	r3, [sp, #8]
 8006dca:	e780      	b.n	8006cce <_dtoa_r+0x7de>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dd0:	e782      	b.n	8006cd8 <_dtoa_r+0x7e8>
 8006dd2:	d099      	beq.n	8006d08 <_dtoa_r+0x818>
 8006dd4:	9a08      	ldr	r2, [sp, #32]
 8006dd6:	331c      	adds	r3, #28
 8006dd8:	441a      	add	r2, r3
 8006dda:	4498      	add	r8, r3
 8006ddc:	441e      	add	r6, r3
 8006dde:	9208      	str	r2, [sp, #32]
 8006de0:	e792      	b.n	8006d08 <_dtoa_r+0x818>
 8006de2:	4603      	mov	r3, r0
 8006de4:	e7f6      	b.n	8006dd4 <_dtoa_r+0x8e4>
 8006de6:	9b07      	ldr	r3, [sp, #28]
 8006de8:	9704      	str	r7, [sp, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	dc20      	bgt.n	8006e30 <_dtoa_r+0x940>
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	dd1e      	ble.n	8006e34 <_dtoa_r+0x944>
 8006df6:	9b00      	ldr	r3, [sp, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f47f aec0 	bne.w	8006b7e <_dtoa_r+0x68e>
 8006dfe:	4621      	mov	r1, r4
 8006e00:	2205      	movs	r2, #5
 8006e02:	4658      	mov	r0, fp
 8006e04:	f000 fa9a 	bl	800733c <__multadd>
 8006e08:	4601      	mov	r1, r0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4648      	mov	r0, r9
 8006e0e:	f000 fcf7 	bl	8007800 <__mcmp>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	f77f aeb3 	ble.w	8006b7e <_dtoa_r+0x68e>
 8006e18:	4656      	mov	r6, sl
 8006e1a:	2331      	movs	r3, #49	@ 0x31
 8006e1c:	f806 3b01 	strb.w	r3, [r6], #1
 8006e20:	9b04      	ldr	r3, [sp, #16]
 8006e22:	3301      	adds	r3, #1
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	e6ae      	b.n	8006b86 <_dtoa_r+0x696>
 8006e28:	9c07      	ldr	r4, [sp, #28]
 8006e2a:	9704      	str	r7, [sp, #16]
 8006e2c:	4625      	mov	r5, r4
 8006e2e:	e7f3      	b.n	8006e18 <_dtoa_r+0x928>
 8006e30:	9b07      	ldr	r3, [sp, #28]
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 8104 	beq.w	8007044 <_dtoa_r+0xb54>
 8006e3c:	2e00      	cmp	r6, #0
 8006e3e:	dd05      	ble.n	8006e4c <_dtoa_r+0x95c>
 8006e40:	4629      	mov	r1, r5
 8006e42:	4632      	mov	r2, r6
 8006e44:	4658      	mov	r0, fp
 8006e46:	f000 fc6f 	bl	8007728 <__lshift>
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d05a      	beq.n	8006f08 <_dtoa_r+0xa18>
 8006e52:	6869      	ldr	r1, [r5, #4]
 8006e54:	4658      	mov	r0, fp
 8006e56:	f000 fa0f 	bl	8007278 <_Balloc>
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	b928      	cbnz	r0, 8006e6a <_dtoa_r+0x97a>
 8006e5e:	4b84      	ldr	r3, [pc, #528]	@ (8007070 <_dtoa_r+0xb80>)
 8006e60:	4602      	mov	r2, r0
 8006e62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e66:	f7ff bb5a 	b.w	800651e <_dtoa_r+0x2e>
 8006e6a:	692a      	ldr	r2, [r5, #16]
 8006e6c:	3202      	adds	r2, #2
 8006e6e:	0092      	lsls	r2, r2, #2
 8006e70:	f105 010c 	add.w	r1, r5, #12
 8006e74:	300c      	adds	r0, #12
 8006e76:	f002 f94b 	bl	8009110 <memcpy>
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4658      	mov	r0, fp
 8006e80:	f000 fc52 	bl	8007728 <__lshift>
 8006e84:	f10a 0301 	add.w	r3, sl, #1
 8006e88:	9307      	str	r3, [sp, #28]
 8006e8a:	9b00      	ldr	r3, [sp, #0]
 8006e8c:	4453      	add	r3, sl
 8006e8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e90:	9b02      	ldr	r3, [sp, #8]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	462f      	mov	r7, r5
 8006e98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	9b07      	ldr	r3, [sp, #28]
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	4648      	mov	r0, r9
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	f7ff fa99 	bl	80063dc <quorem>
 8006eaa:	4639      	mov	r1, r7
 8006eac:	9002      	str	r0, [sp, #8]
 8006eae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006eb2:	4648      	mov	r0, r9
 8006eb4:	f000 fca4 	bl	8007800 <__mcmp>
 8006eb8:	462a      	mov	r2, r5
 8006eba:	9008      	str	r0, [sp, #32]
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4658      	mov	r0, fp
 8006ec0:	f000 fcba 	bl	8007838 <__mdiff>
 8006ec4:	68c2      	ldr	r2, [r0, #12]
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	bb02      	cbnz	r2, 8006f0c <_dtoa_r+0xa1c>
 8006eca:	4601      	mov	r1, r0
 8006ecc:	4648      	mov	r0, r9
 8006ece:	f000 fc97 	bl	8007800 <__mcmp>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4658      	mov	r0, fp
 8006ed8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006eda:	f000 fa0d 	bl	80072f8 <_Bfree>
 8006ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ee2:	9e07      	ldr	r6, [sp, #28]
 8006ee4:	ea43 0102 	orr.w	r1, r3, r2
 8006ee8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eea:	4319      	orrs	r1, r3
 8006eec:	d110      	bne.n	8006f10 <_dtoa_r+0xa20>
 8006eee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ef2:	d029      	beq.n	8006f48 <_dtoa_r+0xa58>
 8006ef4:	9b08      	ldr	r3, [sp, #32]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	dd02      	ble.n	8006f00 <_dtoa_r+0xa10>
 8006efa:	9b02      	ldr	r3, [sp, #8]
 8006efc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f00:	9b00      	ldr	r3, [sp, #0]
 8006f02:	f883 8000 	strb.w	r8, [r3]
 8006f06:	e63f      	b.n	8006b88 <_dtoa_r+0x698>
 8006f08:	4628      	mov	r0, r5
 8006f0a:	e7bb      	b.n	8006e84 <_dtoa_r+0x994>
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	e7e1      	b.n	8006ed4 <_dtoa_r+0x9e4>
 8006f10:	9b08      	ldr	r3, [sp, #32]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	db04      	blt.n	8006f20 <_dtoa_r+0xa30>
 8006f16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	d120      	bne.n	8006f62 <_dtoa_r+0xa72>
 8006f20:	2a00      	cmp	r2, #0
 8006f22:	dded      	ble.n	8006f00 <_dtoa_r+0xa10>
 8006f24:	4649      	mov	r1, r9
 8006f26:	2201      	movs	r2, #1
 8006f28:	4658      	mov	r0, fp
 8006f2a:	f000 fbfd 	bl	8007728 <__lshift>
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4681      	mov	r9, r0
 8006f32:	f000 fc65 	bl	8007800 <__mcmp>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	dc03      	bgt.n	8006f42 <_dtoa_r+0xa52>
 8006f3a:	d1e1      	bne.n	8006f00 <_dtoa_r+0xa10>
 8006f3c:	f018 0f01 	tst.w	r8, #1
 8006f40:	d0de      	beq.n	8006f00 <_dtoa_r+0xa10>
 8006f42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f46:	d1d8      	bne.n	8006efa <_dtoa_r+0xa0a>
 8006f48:	9a00      	ldr	r2, [sp, #0]
 8006f4a:	2339      	movs	r3, #57	@ 0x39
 8006f4c:	7013      	strb	r3, [r2, #0]
 8006f4e:	4633      	mov	r3, r6
 8006f50:	461e      	mov	r6, r3
 8006f52:	3b01      	subs	r3, #1
 8006f54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f58:	2a39      	cmp	r2, #57	@ 0x39
 8006f5a:	d052      	beq.n	8007002 <_dtoa_r+0xb12>
 8006f5c:	3201      	adds	r2, #1
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	e612      	b.n	8006b88 <_dtoa_r+0x698>
 8006f62:	2a00      	cmp	r2, #0
 8006f64:	dd07      	ble.n	8006f76 <_dtoa_r+0xa86>
 8006f66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f6a:	d0ed      	beq.n	8006f48 <_dtoa_r+0xa58>
 8006f6c:	9a00      	ldr	r2, [sp, #0]
 8006f6e:	f108 0301 	add.w	r3, r8, #1
 8006f72:	7013      	strb	r3, [r2, #0]
 8006f74:	e608      	b.n	8006b88 <_dtoa_r+0x698>
 8006f76:	9b07      	ldr	r3, [sp, #28]
 8006f78:	9a07      	ldr	r2, [sp, #28]
 8006f7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d028      	beq.n	8006fd6 <_dtoa_r+0xae6>
 8006f84:	4649      	mov	r1, r9
 8006f86:	2300      	movs	r3, #0
 8006f88:	220a      	movs	r2, #10
 8006f8a:	4658      	mov	r0, fp
 8006f8c:	f000 f9d6 	bl	800733c <__multadd>
 8006f90:	42af      	cmp	r7, r5
 8006f92:	4681      	mov	r9, r0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	f04f 020a 	mov.w	r2, #10
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	4658      	mov	r0, fp
 8006fa0:	d107      	bne.n	8006fb2 <_dtoa_r+0xac2>
 8006fa2:	f000 f9cb 	bl	800733c <__multadd>
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	4605      	mov	r5, r0
 8006faa:	9b07      	ldr	r3, [sp, #28]
 8006fac:	3301      	adds	r3, #1
 8006fae:	9307      	str	r3, [sp, #28]
 8006fb0:	e774      	b.n	8006e9c <_dtoa_r+0x9ac>
 8006fb2:	f000 f9c3 	bl	800733c <__multadd>
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	4607      	mov	r7, r0
 8006fba:	2300      	movs	r3, #0
 8006fbc:	220a      	movs	r2, #10
 8006fbe:	4658      	mov	r0, fp
 8006fc0:	f000 f9bc 	bl	800733c <__multadd>
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	e7f0      	b.n	8006faa <_dtoa_r+0xaba>
 8006fc8:	9b00      	ldr	r3, [sp, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bfcc      	ite	gt
 8006fce:	461e      	movgt	r6, r3
 8006fd0:	2601      	movle	r6, #1
 8006fd2:	4456      	add	r6, sl
 8006fd4:	2700      	movs	r7, #0
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	2201      	movs	r2, #1
 8006fda:	4658      	mov	r0, fp
 8006fdc:	f000 fba4 	bl	8007728 <__lshift>
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	4681      	mov	r9, r0
 8006fe4:	f000 fc0c 	bl	8007800 <__mcmp>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	dcb0      	bgt.n	8006f4e <_dtoa_r+0xa5e>
 8006fec:	d102      	bne.n	8006ff4 <_dtoa_r+0xb04>
 8006fee:	f018 0f01 	tst.w	r8, #1
 8006ff2:	d1ac      	bne.n	8006f4e <_dtoa_r+0xa5e>
 8006ff4:	4633      	mov	r3, r6
 8006ff6:	461e      	mov	r6, r3
 8006ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffc:	2a30      	cmp	r2, #48	@ 0x30
 8006ffe:	d0fa      	beq.n	8006ff6 <_dtoa_r+0xb06>
 8007000:	e5c2      	b.n	8006b88 <_dtoa_r+0x698>
 8007002:	459a      	cmp	sl, r3
 8007004:	d1a4      	bne.n	8006f50 <_dtoa_r+0xa60>
 8007006:	9b04      	ldr	r3, [sp, #16]
 8007008:	3301      	adds	r3, #1
 800700a:	9304      	str	r3, [sp, #16]
 800700c:	2331      	movs	r3, #49	@ 0x31
 800700e:	f88a 3000 	strb.w	r3, [sl]
 8007012:	e5b9      	b.n	8006b88 <_dtoa_r+0x698>
 8007014:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007016:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007074 <_dtoa_r+0xb84>
 800701a:	b11b      	cbz	r3, 8007024 <_dtoa_r+0xb34>
 800701c:	f10a 0308 	add.w	r3, sl, #8
 8007020:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	4650      	mov	r0, sl
 8007026:	b019      	add	sp, #100	@ 0x64
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800702e:	2b01      	cmp	r3, #1
 8007030:	f77f ae37 	ble.w	8006ca2 <_dtoa_r+0x7b2>
 8007034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007036:	930a      	str	r3, [sp, #40]	@ 0x28
 8007038:	2001      	movs	r0, #1
 800703a:	e655      	b.n	8006ce8 <_dtoa_r+0x7f8>
 800703c:	9b00      	ldr	r3, [sp, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f77f aed6 	ble.w	8006df0 <_dtoa_r+0x900>
 8007044:	4656      	mov	r6, sl
 8007046:	4621      	mov	r1, r4
 8007048:	4648      	mov	r0, r9
 800704a:	f7ff f9c7 	bl	80063dc <quorem>
 800704e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007052:	f806 8b01 	strb.w	r8, [r6], #1
 8007056:	9b00      	ldr	r3, [sp, #0]
 8007058:	eba6 020a 	sub.w	r2, r6, sl
 800705c:	4293      	cmp	r3, r2
 800705e:	ddb3      	ble.n	8006fc8 <_dtoa_r+0xad8>
 8007060:	4649      	mov	r1, r9
 8007062:	2300      	movs	r3, #0
 8007064:	220a      	movs	r2, #10
 8007066:	4658      	mov	r0, fp
 8007068:	f000 f968 	bl	800733c <__multadd>
 800706c:	4681      	mov	r9, r0
 800706e:	e7ea      	b.n	8007046 <_dtoa_r+0xb56>
 8007070:	0800b8f1 	.word	0x0800b8f1
 8007074:	0800b875 	.word	0x0800b875

08007078 <_free_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4605      	mov	r5, r0
 800707c:	2900      	cmp	r1, #0
 800707e:	d041      	beq.n	8007104 <_free_r+0x8c>
 8007080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007084:	1f0c      	subs	r4, r1, #4
 8007086:	2b00      	cmp	r3, #0
 8007088:	bfb8      	it	lt
 800708a:	18e4      	addlt	r4, r4, r3
 800708c:	f000 f8e8 	bl	8007260 <__malloc_lock>
 8007090:	4a1d      	ldr	r2, [pc, #116]	@ (8007108 <_free_r+0x90>)
 8007092:	6813      	ldr	r3, [r2, #0]
 8007094:	b933      	cbnz	r3, 80070a4 <_free_r+0x2c>
 8007096:	6063      	str	r3, [r4, #4]
 8007098:	6014      	str	r4, [r2, #0]
 800709a:	4628      	mov	r0, r5
 800709c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070a0:	f000 b8e4 	b.w	800726c <__malloc_unlock>
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	d908      	bls.n	80070ba <_free_r+0x42>
 80070a8:	6820      	ldr	r0, [r4, #0]
 80070aa:	1821      	adds	r1, r4, r0
 80070ac:	428b      	cmp	r3, r1
 80070ae:	bf01      	itttt	eq
 80070b0:	6819      	ldreq	r1, [r3, #0]
 80070b2:	685b      	ldreq	r3, [r3, #4]
 80070b4:	1809      	addeq	r1, r1, r0
 80070b6:	6021      	streq	r1, [r4, #0]
 80070b8:	e7ed      	b.n	8007096 <_free_r+0x1e>
 80070ba:	461a      	mov	r2, r3
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	b10b      	cbz	r3, 80070c4 <_free_r+0x4c>
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	d9fa      	bls.n	80070ba <_free_r+0x42>
 80070c4:	6811      	ldr	r1, [r2, #0]
 80070c6:	1850      	adds	r0, r2, r1
 80070c8:	42a0      	cmp	r0, r4
 80070ca:	d10b      	bne.n	80070e4 <_free_r+0x6c>
 80070cc:	6820      	ldr	r0, [r4, #0]
 80070ce:	4401      	add	r1, r0
 80070d0:	1850      	adds	r0, r2, r1
 80070d2:	4283      	cmp	r3, r0
 80070d4:	6011      	str	r1, [r2, #0]
 80070d6:	d1e0      	bne.n	800709a <_free_r+0x22>
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	6053      	str	r3, [r2, #4]
 80070de:	4408      	add	r0, r1
 80070e0:	6010      	str	r0, [r2, #0]
 80070e2:	e7da      	b.n	800709a <_free_r+0x22>
 80070e4:	d902      	bls.n	80070ec <_free_r+0x74>
 80070e6:	230c      	movs	r3, #12
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	e7d6      	b.n	800709a <_free_r+0x22>
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	1821      	adds	r1, r4, r0
 80070f0:	428b      	cmp	r3, r1
 80070f2:	bf04      	itt	eq
 80070f4:	6819      	ldreq	r1, [r3, #0]
 80070f6:	685b      	ldreq	r3, [r3, #4]
 80070f8:	6063      	str	r3, [r4, #4]
 80070fa:	bf04      	itt	eq
 80070fc:	1809      	addeq	r1, r1, r0
 80070fe:	6021      	streq	r1, [r4, #0]
 8007100:	6054      	str	r4, [r2, #4]
 8007102:	e7ca      	b.n	800709a <_free_r+0x22>
 8007104:	bd38      	pop	{r3, r4, r5, pc}
 8007106:	bf00      	nop
 8007108:	200004cc 	.word	0x200004cc

0800710c <malloc>:
 800710c:	4b02      	ldr	r3, [pc, #8]	@ (8007118 <malloc+0xc>)
 800710e:	4601      	mov	r1, r0
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	f000 b825 	b.w	8007160 <_malloc_r>
 8007116:	bf00      	nop
 8007118:	20000020 	.word	0x20000020

0800711c <sbrk_aligned>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	4e0f      	ldr	r6, [pc, #60]	@ (800715c <sbrk_aligned+0x40>)
 8007120:	460c      	mov	r4, r1
 8007122:	6831      	ldr	r1, [r6, #0]
 8007124:	4605      	mov	r5, r0
 8007126:	b911      	cbnz	r1, 800712e <sbrk_aligned+0x12>
 8007128:	f001 ffe2 	bl	80090f0 <_sbrk_r>
 800712c:	6030      	str	r0, [r6, #0]
 800712e:	4621      	mov	r1, r4
 8007130:	4628      	mov	r0, r5
 8007132:	f001 ffdd 	bl	80090f0 <_sbrk_r>
 8007136:	1c43      	adds	r3, r0, #1
 8007138:	d103      	bne.n	8007142 <sbrk_aligned+0x26>
 800713a:	f04f 34ff 	mov.w	r4, #4294967295
 800713e:	4620      	mov	r0, r4
 8007140:	bd70      	pop	{r4, r5, r6, pc}
 8007142:	1cc4      	adds	r4, r0, #3
 8007144:	f024 0403 	bic.w	r4, r4, #3
 8007148:	42a0      	cmp	r0, r4
 800714a:	d0f8      	beq.n	800713e <sbrk_aligned+0x22>
 800714c:	1a21      	subs	r1, r4, r0
 800714e:	4628      	mov	r0, r5
 8007150:	f001 ffce 	bl	80090f0 <_sbrk_r>
 8007154:	3001      	adds	r0, #1
 8007156:	d1f2      	bne.n	800713e <sbrk_aligned+0x22>
 8007158:	e7ef      	b.n	800713a <sbrk_aligned+0x1e>
 800715a:	bf00      	nop
 800715c:	200004c8 	.word	0x200004c8

08007160 <_malloc_r>:
 8007160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007164:	1ccd      	adds	r5, r1, #3
 8007166:	f025 0503 	bic.w	r5, r5, #3
 800716a:	3508      	adds	r5, #8
 800716c:	2d0c      	cmp	r5, #12
 800716e:	bf38      	it	cc
 8007170:	250c      	movcc	r5, #12
 8007172:	2d00      	cmp	r5, #0
 8007174:	4606      	mov	r6, r0
 8007176:	db01      	blt.n	800717c <_malloc_r+0x1c>
 8007178:	42a9      	cmp	r1, r5
 800717a:	d904      	bls.n	8007186 <_malloc_r+0x26>
 800717c:	230c      	movs	r3, #12
 800717e:	6033      	str	r3, [r6, #0]
 8007180:	2000      	movs	r0, #0
 8007182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007186:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800725c <_malloc_r+0xfc>
 800718a:	f000 f869 	bl	8007260 <__malloc_lock>
 800718e:	f8d8 3000 	ldr.w	r3, [r8]
 8007192:	461c      	mov	r4, r3
 8007194:	bb44      	cbnz	r4, 80071e8 <_malloc_r+0x88>
 8007196:	4629      	mov	r1, r5
 8007198:	4630      	mov	r0, r6
 800719a:	f7ff ffbf 	bl	800711c <sbrk_aligned>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	4604      	mov	r4, r0
 80071a2:	d158      	bne.n	8007256 <_malloc_r+0xf6>
 80071a4:	f8d8 4000 	ldr.w	r4, [r8]
 80071a8:	4627      	mov	r7, r4
 80071aa:	2f00      	cmp	r7, #0
 80071ac:	d143      	bne.n	8007236 <_malloc_r+0xd6>
 80071ae:	2c00      	cmp	r4, #0
 80071b0:	d04b      	beq.n	800724a <_malloc_r+0xea>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	4639      	mov	r1, r7
 80071b6:	4630      	mov	r0, r6
 80071b8:	eb04 0903 	add.w	r9, r4, r3
 80071bc:	f001 ff98 	bl	80090f0 <_sbrk_r>
 80071c0:	4581      	cmp	r9, r0
 80071c2:	d142      	bne.n	800724a <_malloc_r+0xea>
 80071c4:	6821      	ldr	r1, [r4, #0]
 80071c6:	1a6d      	subs	r5, r5, r1
 80071c8:	4629      	mov	r1, r5
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff ffa6 	bl	800711c <sbrk_aligned>
 80071d0:	3001      	adds	r0, #1
 80071d2:	d03a      	beq.n	800724a <_malloc_r+0xea>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	442b      	add	r3, r5
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	f8d8 3000 	ldr.w	r3, [r8]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	bb62      	cbnz	r2, 800723c <_malloc_r+0xdc>
 80071e2:	f8c8 7000 	str.w	r7, [r8]
 80071e6:	e00f      	b.n	8007208 <_malloc_r+0xa8>
 80071e8:	6822      	ldr	r2, [r4, #0]
 80071ea:	1b52      	subs	r2, r2, r5
 80071ec:	d420      	bmi.n	8007230 <_malloc_r+0xd0>
 80071ee:	2a0b      	cmp	r2, #11
 80071f0:	d917      	bls.n	8007222 <_malloc_r+0xc2>
 80071f2:	1961      	adds	r1, r4, r5
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	6025      	str	r5, [r4, #0]
 80071f8:	bf18      	it	ne
 80071fa:	6059      	strne	r1, [r3, #4]
 80071fc:	6863      	ldr	r3, [r4, #4]
 80071fe:	bf08      	it	eq
 8007200:	f8c8 1000 	streq.w	r1, [r8]
 8007204:	5162      	str	r2, [r4, r5]
 8007206:	604b      	str	r3, [r1, #4]
 8007208:	4630      	mov	r0, r6
 800720a:	f000 f82f 	bl	800726c <__malloc_unlock>
 800720e:	f104 000b 	add.w	r0, r4, #11
 8007212:	1d23      	adds	r3, r4, #4
 8007214:	f020 0007 	bic.w	r0, r0, #7
 8007218:	1ac2      	subs	r2, r0, r3
 800721a:	bf1c      	itt	ne
 800721c:	1a1b      	subne	r3, r3, r0
 800721e:	50a3      	strne	r3, [r4, r2]
 8007220:	e7af      	b.n	8007182 <_malloc_r+0x22>
 8007222:	6862      	ldr	r2, [r4, #4]
 8007224:	42a3      	cmp	r3, r4
 8007226:	bf0c      	ite	eq
 8007228:	f8c8 2000 	streq.w	r2, [r8]
 800722c:	605a      	strne	r2, [r3, #4]
 800722e:	e7eb      	b.n	8007208 <_malloc_r+0xa8>
 8007230:	4623      	mov	r3, r4
 8007232:	6864      	ldr	r4, [r4, #4]
 8007234:	e7ae      	b.n	8007194 <_malloc_r+0x34>
 8007236:	463c      	mov	r4, r7
 8007238:	687f      	ldr	r7, [r7, #4]
 800723a:	e7b6      	b.n	80071aa <_malloc_r+0x4a>
 800723c:	461a      	mov	r2, r3
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	42a3      	cmp	r3, r4
 8007242:	d1fb      	bne.n	800723c <_malloc_r+0xdc>
 8007244:	2300      	movs	r3, #0
 8007246:	6053      	str	r3, [r2, #4]
 8007248:	e7de      	b.n	8007208 <_malloc_r+0xa8>
 800724a:	230c      	movs	r3, #12
 800724c:	6033      	str	r3, [r6, #0]
 800724e:	4630      	mov	r0, r6
 8007250:	f000 f80c 	bl	800726c <__malloc_unlock>
 8007254:	e794      	b.n	8007180 <_malloc_r+0x20>
 8007256:	6005      	str	r5, [r0, #0]
 8007258:	e7d6      	b.n	8007208 <_malloc_r+0xa8>
 800725a:	bf00      	nop
 800725c:	200004cc 	.word	0x200004cc

08007260 <__malloc_lock>:
 8007260:	4801      	ldr	r0, [pc, #4]	@ (8007268 <__malloc_lock+0x8>)
 8007262:	f7ff b8b2 	b.w	80063ca <__retarget_lock_acquire_recursive>
 8007266:	bf00      	nop
 8007268:	200004c4 	.word	0x200004c4

0800726c <__malloc_unlock>:
 800726c:	4801      	ldr	r0, [pc, #4]	@ (8007274 <__malloc_unlock+0x8>)
 800726e:	f7ff b8ad 	b.w	80063cc <__retarget_lock_release_recursive>
 8007272:	bf00      	nop
 8007274:	200004c4 	.word	0x200004c4

08007278 <_Balloc>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	69c6      	ldr	r6, [r0, #28]
 800727c:	4604      	mov	r4, r0
 800727e:	460d      	mov	r5, r1
 8007280:	b976      	cbnz	r6, 80072a0 <_Balloc+0x28>
 8007282:	2010      	movs	r0, #16
 8007284:	f7ff ff42 	bl	800710c <malloc>
 8007288:	4602      	mov	r2, r0
 800728a:	61e0      	str	r0, [r4, #28]
 800728c:	b920      	cbnz	r0, 8007298 <_Balloc+0x20>
 800728e:	4b18      	ldr	r3, [pc, #96]	@ (80072f0 <_Balloc+0x78>)
 8007290:	4818      	ldr	r0, [pc, #96]	@ (80072f4 <_Balloc+0x7c>)
 8007292:	216b      	movs	r1, #107	@ 0x6b
 8007294:	f001 ff54 	bl	8009140 <__assert_func>
 8007298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800729c:	6006      	str	r6, [r0, #0]
 800729e:	60c6      	str	r6, [r0, #12]
 80072a0:	69e6      	ldr	r6, [r4, #28]
 80072a2:	68f3      	ldr	r3, [r6, #12]
 80072a4:	b183      	cbz	r3, 80072c8 <_Balloc+0x50>
 80072a6:	69e3      	ldr	r3, [r4, #28]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072ae:	b9b8      	cbnz	r0, 80072e0 <_Balloc+0x68>
 80072b0:	2101      	movs	r1, #1
 80072b2:	fa01 f605 	lsl.w	r6, r1, r5
 80072b6:	1d72      	adds	r2, r6, #5
 80072b8:	0092      	lsls	r2, r2, #2
 80072ba:	4620      	mov	r0, r4
 80072bc:	f001 ff5e 	bl	800917c <_calloc_r>
 80072c0:	b160      	cbz	r0, 80072dc <_Balloc+0x64>
 80072c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072c6:	e00e      	b.n	80072e6 <_Balloc+0x6e>
 80072c8:	2221      	movs	r2, #33	@ 0x21
 80072ca:	2104      	movs	r1, #4
 80072cc:	4620      	mov	r0, r4
 80072ce:	f001 ff55 	bl	800917c <_calloc_r>
 80072d2:	69e3      	ldr	r3, [r4, #28]
 80072d4:	60f0      	str	r0, [r6, #12]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e4      	bne.n	80072a6 <_Balloc+0x2e>
 80072dc:	2000      	movs	r0, #0
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	6802      	ldr	r2, [r0, #0]
 80072e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072e6:	2300      	movs	r3, #0
 80072e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072ec:	e7f7      	b.n	80072de <_Balloc+0x66>
 80072ee:	bf00      	nop
 80072f0:	0800b882 	.word	0x0800b882
 80072f4:	0800b902 	.word	0x0800b902

080072f8 <_Bfree>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	69c6      	ldr	r6, [r0, #28]
 80072fc:	4605      	mov	r5, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	b976      	cbnz	r6, 8007320 <_Bfree+0x28>
 8007302:	2010      	movs	r0, #16
 8007304:	f7ff ff02 	bl	800710c <malloc>
 8007308:	4602      	mov	r2, r0
 800730a:	61e8      	str	r0, [r5, #28]
 800730c:	b920      	cbnz	r0, 8007318 <_Bfree+0x20>
 800730e:	4b09      	ldr	r3, [pc, #36]	@ (8007334 <_Bfree+0x3c>)
 8007310:	4809      	ldr	r0, [pc, #36]	@ (8007338 <_Bfree+0x40>)
 8007312:	218f      	movs	r1, #143	@ 0x8f
 8007314:	f001 ff14 	bl	8009140 <__assert_func>
 8007318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800731c:	6006      	str	r6, [r0, #0]
 800731e:	60c6      	str	r6, [r0, #12]
 8007320:	b13c      	cbz	r4, 8007332 <_Bfree+0x3a>
 8007322:	69eb      	ldr	r3, [r5, #28]
 8007324:	6862      	ldr	r2, [r4, #4]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800732c:	6021      	str	r1, [r4, #0]
 800732e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	0800b882 	.word	0x0800b882
 8007338:	0800b902 	.word	0x0800b902

0800733c <__multadd>:
 800733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007340:	690d      	ldr	r5, [r1, #16]
 8007342:	4607      	mov	r7, r0
 8007344:	460c      	mov	r4, r1
 8007346:	461e      	mov	r6, r3
 8007348:	f101 0c14 	add.w	ip, r1, #20
 800734c:	2000      	movs	r0, #0
 800734e:	f8dc 3000 	ldr.w	r3, [ip]
 8007352:	b299      	uxth	r1, r3
 8007354:	fb02 6101 	mla	r1, r2, r1, r6
 8007358:	0c1e      	lsrs	r6, r3, #16
 800735a:	0c0b      	lsrs	r3, r1, #16
 800735c:	fb02 3306 	mla	r3, r2, r6, r3
 8007360:	b289      	uxth	r1, r1
 8007362:	3001      	adds	r0, #1
 8007364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007368:	4285      	cmp	r5, r0
 800736a:	f84c 1b04 	str.w	r1, [ip], #4
 800736e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007372:	dcec      	bgt.n	800734e <__multadd+0x12>
 8007374:	b30e      	cbz	r6, 80073ba <__multadd+0x7e>
 8007376:	68a3      	ldr	r3, [r4, #8]
 8007378:	42ab      	cmp	r3, r5
 800737a:	dc19      	bgt.n	80073b0 <__multadd+0x74>
 800737c:	6861      	ldr	r1, [r4, #4]
 800737e:	4638      	mov	r0, r7
 8007380:	3101      	adds	r1, #1
 8007382:	f7ff ff79 	bl	8007278 <_Balloc>
 8007386:	4680      	mov	r8, r0
 8007388:	b928      	cbnz	r0, 8007396 <__multadd+0x5a>
 800738a:	4602      	mov	r2, r0
 800738c:	4b0c      	ldr	r3, [pc, #48]	@ (80073c0 <__multadd+0x84>)
 800738e:	480d      	ldr	r0, [pc, #52]	@ (80073c4 <__multadd+0x88>)
 8007390:	21ba      	movs	r1, #186	@ 0xba
 8007392:	f001 fed5 	bl	8009140 <__assert_func>
 8007396:	6922      	ldr	r2, [r4, #16]
 8007398:	3202      	adds	r2, #2
 800739a:	f104 010c 	add.w	r1, r4, #12
 800739e:	0092      	lsls	r2, r2, #2
 80073a0:	300c      	adds	r0, #12
 80073a2:	f001 feb5 	bl	8009110 <memcpy>
 80073a6:	4621      	mov	r1, r4
 80073a8:	4638      	mov	r0, r7
 80073aa:	f7ff ffa5 	bl	80072f8 <_Bfree>
 80073ae:	4644      	mov	r4, r8
 80073b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073b4:	3501      	adds	r5, #1
 80073b6:	615e      	str	r6, [r3, #20]
 80073b8:	6125      	str	r5, [r4, #16]
 80073ba:	4620      	mov	r0, r4
 80073bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c0:	0800b8f1 	.word	0x0800b8f1
 80073c4:	0800b902 	.word	0x0800b902

080073c8 <__s2b>:
 80073c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073cc:	460c      	mov	r4, r1
 80073ce:	4615      	mov	r5, r2
 80073d0:	461f      	mov	r7, r3
 80073d2:	2209      	movs	r2, #9
 80073d4:	3308      	adds	r3, #8
 80073d6:	4606      	mov	r6, r0
 80073d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80073dc:	2100      	movs	r1, #0
 80073de:	2201      	movs	r2, #1
 80073e0:	429a      	cmp	r2, r3
 80073e2:	db09      	blt.n	80073f8 <__s2b+0x30>
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7ff ff47 	bl	8007278 <_Balloc>
 80073ea:	b940      	cbnz	r0, 80073fe <__s2b+0x36>
 80073ec:	4602      	mov	r2, r0
 80073ee:	4b19      	ldr	r3, [pc, #100]	@ (8007454 <__s2b+0x8c>)
 80073f0:	4819      	ldr	r0, [pc, #100]	@ (8007458 <__s2b+0x90>)
 80073f2:	21d3      	movs	r1, #211	@ 0xd3
 80073f4:	f001 fea4 	bl	8009140 <__assert_func>
 80073f8:	0052      	lsls	r2, r2, #1
 80073fa:	3101      	adds	r1, #1
 80073fc:	e7f0      	b.n	80073e0 <__s2b+0x18>
 80073fe:	9b08      	ldr	r3, [sp, #32]
 8007400:	6143      	str	r3, [r0, #20]
 8007402:	2d09      	cmp	r5, #9
 8007404:	f04f 0301 	mov.w	r3, #1
 8007408:	6103      	str	r3, [r0, #16]
 800740a:	dd16      	ble.n	800743a <__s2b+0x72>
 800740c:	f104 0909 	add.w	r9, r4, #9
 8007410:	46c8      	mov	r8, r9
 8007412:	442c      	add	r4, r5
 8007414:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007418:	4601      	mov	r1, r0
 800741a:	3b30      	subs	r3, #48	@ 0x30
 800741c:	220a      	movs	r2, #10
 800741e:	4630      	mov	r0, r6
 8007420:	f7ff ff8c 	bl	800733c <__multadd>
 8007424:	45a0      	cmp	r8, r4
 8007426:	d1f5      	bne.n	8007414 <__s2b+0x4c>
 8007428:	f1a5 0408 	sub.w	r4, r5, #8
 800742c:	444c      	add	r4, r9
 800742e:	1b2d      	subs	r5, r5, r4
 8007430:	1963      	adds	r3, r4, r5
 8007432:	42bb      	cmp	r3, r7
 8007434:	db04      	blt.n	8007440 <__s2b+0x78>
 8007436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743a:	340a      	adds	r4, #10
 800743c:	2509      	movs	r5, #9
 800743e:	e7f6      	b.n	800742e <__s2b+0x66>
 8007440:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007444:	4601      	mov	r1, r0
 8007446:	3b30      	subs	r3, #48	@ 0x30
 8007448:	220a      	movs	r2, #10
 800744a:	4630      	mov	r0, r6
 800744c:	f7ff ff76 	bl	800733c <__multadd>
 8007450:	e7ee      	b.n	8007430 <__s2b+0x68>
 8007452:	bf00      	nop
 8007454:	0800b8f1 	.word	0x0800b8f1
 8007458:	0800b902 	.word	0x0800b902

0800745c <__hi0bits>:
 800745c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007460:	4603      	mov	r3, r0
 8007462:	bf36      	itet	cc
 8007464:	0403      	lslcc	r3, r0, #16
 8007466:	2000      	movcs	r0, #0
 8007468:	2010      	movcc	r0, #16
 800746a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800746e:	bf3c      	itt	cc
 8007470:	021b      	lslcc	r3, r3, #8
 8007472:	3008      	addcc	r0, #8
 8007474:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007478:	bf3c      	itt	cc
 800747a:	011b      	lslcc	r3, r3, #4
 800747c:	3004      	addcc	r0, #4
 800747e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007482:	bf3c      	itt	cc
 8007484:	009b      	lslcc	r3, r3, #2
 8007486:	3002      	addcc	r0, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	db05      	blt.n	8007498 <__hi0bits+0x3c>
 800748c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007490:	f100 0001 	add.w	r0, r0, #1
 8007494:	bf08      	it	eq
 8007496:	2020      	moveq	r0, #32
 8007498:	4770      	bx	lr

0800749a <__lo0bits>:
 800749a:	6803      	ldr	r3, [r0, #0]
 800749c:	4602      	mov	r2, r0
 800749e:	f013 0007 	ands.w	r0, r3, #7
 80074a2:	d00b      	beq.n	80074bc <__lo0bits+0x22>
 80074a4:	07d9      	lsls	r1, r3, #31
 80074a6:	d421      	bmi.n	80074ec <__lo0bits+0x52>
 80074a8:	0798      	lsls	r0, r3, #30
 80074aa:	bf49      	itett	mi
 80074ac:	085b      	lsrmi	r3, r3, #1
 80074ae:	089b      	lsrpl	r3, r3, #2
 80074b0:	2001      	movmi	r0, #1
 80074b2:	6013      	strmi	r3, [r2, #0]
 80074b4:	bf5c      	itt	pl
 80074b6:	6013      	strpl	r3, [r2, #0]
 80074b8:	2002      	movpl	r0, #2
 80074ba:	4770      	bx	lr
 80074bc:	b299      	uxth	r1, r3
 80074be:	b909      	cbnz	r1, 80074c4 <__lo0bits+0x2a>
 80074c0:	0c1b      	lsrs	r3, r3, #16
 80074c2:	2010      	movs	r0, #16
 80074c4:	b2d9      	uxtb	r1, r3
 80074c6:	b909      	cbnz	r1, 80074cc <__lo0bits+0x32>
 80074c8:	3008      	adds	r0, #8
 80074ca:	0a1b      	lsrs	r3, r3, #8
 80074cc:	0719      	lsls	r1, r3, #28
 80074ce:	bf04      	itt	eq
 80074d0:	091b      	lsreq	r3, r3, #4
 80074d2:	3004      	addeq	r0, #4
 80074d4:	0799      	lsls	r1, r3, #30
 80074d6:	bf04      	itt	eq
 80074d8:	089b      	lsreq	r3, r3, #2
 80074da:	3002      	addeq	r0, #2
 80074dc:	07d9      	lsls	r1, r3, #31
 80074de:	d403      	bmi.n	80074e8 <__lo0bits+0x4e>
 80074e0:	085b      	lsrs	r3, r3, #1
 80074e2:	f100 0001 	add.w	r0, r0, #1
 80074e6:	d003      	beq.n	80074f0 <__lo0bits+0x56>
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	4770      	bx	lr
 80074ec:	2000      	movs	r0, #0
 80074ee:	4770      	bx	lr
 80074f0:	2020      	movs	r0, #32
 80074f2:	4770      	bx	lr

080074f4 <__i2b>:
 80074f4:	b510      	push	{r4, lr}
 80074f6:	460c      	mov	r4, r1
 80074f8:	2101      	movs	r1, #1
 80074fa:	f7ff febd 	bl	8007278 <_Balloc>
 80074fe:	4602      	mov	r2, r0
 8007500:	b928      	cbnz	r0, 800750e <__i2b+0x1a>
 8007502:	4b05      	ldr	r3, [pc, #20]	@ (8007518 <__i2b+0x24>)
 8007504:	4805      	ldr	r0, [pc, #20]	@ (800751c <__i2b+0x28>)
 8007506:	f240 1145 	movw	r1, #325	@ 0x145
 800750a:	f001 fe19 	bl	8009140 <__assert_func>
 800750e:	2301      	movs	r3, #1
 8007510:	6144      	str	r4, [r0, #20]
 8007512:	6103      	str	r3, [r0, #16]
 8007514:	bd10      	pop	{r4, pc}
 8007516:	bf00      	nop
 8007518:	0800b8f1 	.word	0x0800b8f1
 800751c:	0800b902 	.word	0x0800b902

08007520 <__multiply>:
 8007520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007524:	4614      	mov	r4, r2
 8007526:	690a      	ldr	r2, [r1, #16]
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	429a      	cmp	r2, r3
 800752c:	bfa8      	it	ge
 800752e:	4623      	movge	r3, r4
 8007530:	460f      	mov	r7, r1
 8007532:	bfa4      	itt	ge
 8007534:	460c      	movge	r4, r1
 8007536:	461f      	movge	r7, r3
 8007538:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800753c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007540:	68a3      	ldr	r3, [r4, #8]
 8007542:	6861      	ldr	r1, [r4, #4]
 8007544:	eb0a 0609 	add.w	r6, sl, r9
 8007548:	42b3      	cmp	r3, r6
 800754a:	b085      	sub	sp, #20
 800754c:	bfb8      	it	lt
 800754e:	3101      	addlt	r1, #1
 8007550:	f7ff fe92 	bl	8007278 <_Balloc>
 8007554:	b930      	cbnz	r0, 8007564 <__multiply+0x44>
 8007556:	4602      	mov	r2, r0
 8007558:	4b44      	ldr	r3, [pc, #272]	@ (800766c <__multiply+0x14c>)
 800755a:	4845      	ldr	r0, [pc, #276]	@ (8007670 <__multiply+0x150>)
 800755c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007560:	f001 fdee 	bl	8009140 <__assert_func>
 8007564:	f100 0514 	add.w	r5, r0, #20
 8007568:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800756c:	462b      	mov	r3, r5
 800756e:	2200      	movs	r2, #0
 8007570:	4543      	cmp	r3, r8
 8007572:	d321      	bcc.n	80075b8 <__multiply+0x98>
 8007574:	f107 0114 	add.w	r1, r7, #20
 8007578:	f104 0214 	add.w	r2, r4, #20
 800757c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007580:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007584:	9302      	str	r3, [sp, #8]
 8007586:	1b13      	subs	r3, r2, r4
 8007588:	3b15      	subs	r3, #21
 800758a:	f023 0303 	bic.w	r3, r3, #3
 800758e:	3304      	adds	r3, #4
 8007590:	f104 0715 	add.w	r7, r4, #21
 8007594:	42ba      	cmp	r2, r7
 8007596:	bf38      	it	cc
 8007598:	2304      	movcc	r3, #4
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	9b02      	ldr	r3, [sp, #8]
 800759e:	9103      	str	r1, [sp, #12]
 80075a0:	428b      	cmp	r3, r1
 80075a2:	d80c      	bhi.n	80075be <__multiply+0x9e>
 80075a4:	2e00      	cmp	r6, #0
 80075a6:	dd03      	ble.n	80075b0 <__multiply+0x90>
 80075a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d05b      	beq.n	8007668 <__multiply+0x148>
 80075b0:	6106      	str	r6, [r0, #16]
 80075b2:	b005      	add	sp, #20
 80075b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b8:	f843 2b04 	str.w	r2, [r3], #4
 80075bc:	e7d8      	b.n	8007570 <__multiply+0x50>
 80075be:	f8b1 a000 	ldrh.w	sl, [r1]
 80075c2:	f1ba 0f00 	cmp.w	sl, #0
 80075c6:	d024      	beq.n	8007612 <__multiply+0xf2>
 80075c8:	f104 0e14 	add.w	lr, r4, #20
 80075cc:	46a9      	mov	r9, r5
 80075ce:	f04f 0c00 	mov.w	ip, #0
 80075d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075d6:	f8d9 3000 	ldr.w	r3, [r9]
 80075da:	fa1f fb87 	uxth.w	fp, r7
 80075de:	b29b      	uxth	r3, r3
 80075e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80075e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80075e8:	f8d9 7000 	ldr.w	r7, [r9]
 80075ec:	4463      	add	r3, ip
 80075ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075f2:	fb0a c70b 	mla	r7, sl, fp, ip
 80075f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007600:	4572      	cmp	r2, lr
 8007602:	f849 3b04 	str.w	r3, [r9], #4
 8007606:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800760a:	d8e2      	bhi.n	80075d2 <__multiply+0xb2>
 800760c:	9b01      	ldr	r3, [sp, #4]
 800760e:	f845 c003 	str.w	ip, [r5, r3]
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007618:	3104      	adds	r1, #4
 800761a:	f1b9 0f00 	cmp.w	r9, #0
 800761e:	d021      	beq.n	8007664 <__multiply+0x144>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	f104 0c14 	add.w	ip, r4, #20
 8007626:	46ae      	mov	lr, r5
 8007628:	f04f 0a00 	mov.w	sl, #0
 800762c:	f8bc b000 	ldrh.w	fp, [ip]
 8007630:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007634:	fb09 770b 	mla	r7, r9, fp, r7
 8007638:	4457      	add	r7, sl
 800763a:	b29b      	uxth	r3, r3
 800763c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007640:	f84e 3b04 	str.w	r3, [lr], #4
 8007644:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007648:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800764c:	f8be 3000 	ldrh.w	r3, [lr]
 8007650:	fb09 330a 	mla	r3, r9, sl, r3
 8007654:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007658:	4562      	cmp	r2, ip
 800765a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800765e:	d8e5      	bhi.n	800762c <__multiply+0x10c>
 8007660:	9f01      	ldr	r7, [sp, #4]
 8007662:	51eb      	str	r3, [r5, r7]
 8007664:	3504      	adds	r5, #4
 8007666:	e799      	b.n	800759c <__multiply+0x7c>
 8007668:	3e01      	subs	r6, #1
 800766a:	e79b      	b.n	80075a4 <__multiply+0x84>
 800766c:	0800b8f1 	.word	0x0800b8f1
 8007670:	0800b902 	.word	0x0800b902

08007674 <__pow5mult>:
 8007674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007678:	4615      	mov	r5, r2
 800767a:	f012 0203 	ands.w	r2, r2, #3
 800767e:	4607      	mov	r7, r0
 8007680:	460e      	mov	r6, r1
 8007682:	d007      	beq.n	8007694 <__pow5mult+0x20>
 8007684:	4c25      	ldr	r4, [pc, #148]	@ (800771c <__pow5mult+0xa8>)
 8007686:	3a01      	subs	r2, #1
 8007688:	2300      	movs	r3, #0
 800768a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800768e:	f7ff fe55 	bl	800733c <__multadd>
 8007692:	4606      	mov	r6, r0
 8007694:	10ad      	asrs	r5, r5, #2
 8007696:	d03d      	beq.n	8007714 <__pow5mult+0xa0>
 8007698:	69fc      	ldr	r4, [r7, #28]
 800769a:	b97c      	cbnz	r4, 80076bc <__pow5mult+0x48>
 800769c:	2010      	movs	r0, #16
 800769e:	f7ff fd35 	bl	800710c <malloc>
 80076a2:	4602      	mov	r2, r0
 80076a4:	61f8      	str	r0, [r7, #28]
 80076a6:	b928      	cbnz	r0, 80076b4 <__pow5mult+0x40>
 80076a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007720 <__pow5mult+0xac>)
 80076aa:	481e      	ldr	r0, [pc, #120]	@ (8007724 <__pow5mult+0xb0>)
 80076ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80076b0:	f001 fd46 	bl	8009140 <__assert_func>
 80076b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076b8:	6004      	str	r4, [r0, #0]
 80076ba:	60c4      	str	r4, [r0, #12]
 80076bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80076c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076c4:	b94c      	cbnz	r4, 80076da <__pow5mult+0x66>
 80076c6:	f240 2171 	movw	r1, #625	@ 0x271
 80076ca:	4638      	mov	r0, r7
 80076cc:	f7ff ff12 	bl	80074f4 <__i2b>
 80076d0:	2300      	movs	r3, #0
 80076d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80076d6:	4604      	mov	r4, r0
 80076d8:	6003      	str	r3, [r0, #0]
 80076da:	f04f 0900 	mov.w	r9, #0
 80076de:	07eb      	lsls	r3, r5, #31
 80076e0:	d50a      	bpl.n	80076f8 <__pow5mult+0x84>
 80076e2:	4631      	mov	r1, r6
 80076e4:	4622      	mov	r2, r4
 80076e6:	4638      	mov	r0, r7
 80076e8:	f7ff ff1a 	bl	8007520 <__multiply>
 80076ec:	4631      	mov	r1, r6
 80076ee:	4680      	mov	r8, r0
 80076f0:	4638      	mov	r0, r7
 80076f2:	f7ff fe01 	bl	80072f8 <_Bfree>
 80076f6:	4646      	mov	r6, r8
 80076f8:	106d      	asrs	r5, r5, #1
 80076fa:	d00b      	beq.n	8007714 <__pow5mult+0xa0>
 80076fc:	6820      	ldr	r0, [r4, #0]
 80076fe:	b938      	cbnz	r0, 8007710 <__pow5mult+0x9c>
 8007700:	4622      	mov	r2, r4
 8007702:	4621      	mov	r1, r4
 8007704:	4638      	mov	r0, r7
 8007706:	f7ff ff0b 	bl	8007520 <__multiply>
 800770a:	6020      	str	r0, [r4, #0]
 800770c:	f8c0 9000 	str.w	r9, [r0]
 8007710:	4604      	mov	r4, r0
 8007712:	e7e4      	b.n	80076de <__pow5mult+0x6a>
 8007714:	4630      	mov	r0, r6
 8007716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800771a:	bf00      	nop
 800771c:	0800b95c 	.word	0x0800b95c
 8007720:	0800b882 	.word	0x0800b882
 8007724:	0800b902 	.word	0x0800b902

08007728 <__lshift>:
 8007728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800772c:	460c      	mov	r4, r1
 800772e:	6849      	ldr	r1, [r1, #4]
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007736:	68a3      	ldr	r3, [r4, #8]
 8007738:	4607      	mov	r7, r0
 800773a:	4691      	mov	r9, r2
 800773c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007740:	f108 0601 	add.w	r6, r8, #1
 8007744:	42b3      	cmp	r3, r6
 8007746:	db0b      	blt.n	8007760 <__lshift+0x38>
 8007748:	4638      	mov	r0, r7
 800774a:	f7ff fd95 	bl	8007278 <_Balloc>
 800774e:	4605      	mov	r5, r0
 8007750:	b948      	cbnz	r0, 8007766 <__lshift+0x3e>
 8007752:	4602      	mov	r2, r0
 8007754:	4b28      	ldr	r3, [pc, #160]	@ (80077f8 <__lshift+0xd0>)
 8007756:	4829      	ldr	r0, [pc, #164]	@ (80077fc <__lshift+0xd4>)
 8007758:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800775c:	f001 fcf0 	bl	8009140 <__assert_func>
 8007760:	3101      	adds	r1, #1
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	e7ee      	b.n	8007744 <__lshift+0x1c>
 8007766:	2300      	movs	r3, #0
 8007768:	f100 0114 	add.w	r1, r0, #20
 800776c:	f100 0210 	add.w	r2, r0, #16
 8007770:	4618      	mov	r0, r3
 8007772:	4553      	cmp	r3, sl
 8007774:	db33      	blt.n	80077de <__lshift+0xb6>
 8007776:	6920      	ldr	r0, [r4, #16]
 8007778:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800777c:	f104 0314 	add.w	r3, r4, #20
 8007780:	f019 091f 	ands.w	r9, r9, #31
 8007784:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007788:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800778c:	d02b      	beq.n	80077e6 <__lshift+0xbe>
 800778e:	f1c9 0e20 	rsb	lr, r9, #32
 8007792:	468a      	mov	sl, r1
 8007794:	2200      	movs	r2, #0
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	fa00 f009 	lsl.w	r0, r0, r9
 800779c:	4310      	orrs	r0, r2
 800779e:	f84a 0b04 	str.w	r0, [sl], #4
 80077a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a6:	459c      	cmp	ip, r3
 80077a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80077ac:	d8f3      	bhi.n	8007796 <__lshift+0x6e>
 80077ae:	ebac 0304 	sub.w	r3, ip, r4
 80077b2:	3b15      	subs	r3, #21
 80077b4:	f023 0303 	bic.w	r3, r3, #3
 80077b8:	3304      	adds	r3, #4
 80077ba:	f104 0015 	add.w	r0, r4, #21
 80077be:	4584      	cmp	ip, r0
 80077c0:	bf38      	it	cc
 80077c2:	2304      	movcc	r3, #4
 80077c4:	50ca      	str	r2, [r1, r3]
 80077c6:	b10a      	cbz	r2, 80077cc <__lshift+0xa4>
 80077c8:	f108 0602 	add.w	r6, r8, #2
 80077cc:	3e01      	subs	r6, #1
 80077ce:	4638      	mov	r0, r7
 80077d0:	612e      	str	r6, [r5, #16]
 80077d2:	4621      	mov	r1, r4
 80077d4:	f7ff fd90 	bl	80072f8 <_Bfree>
 80077d8:	4628      	mov	r0, r5
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	f842 0f04 	str.w	r0, [r2, #4]!
 80077e2:	3301      	adds	r3, #1
 80077e4:	e7c5      	b.n	8007772 <__lshift+0x4a>
 80077e6:	3904      	subs	r1, #4
 80077e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80077f0:	459c      	cmp	ip, r3
 80077f2:	d8f9      	bhi.n	80077e8 <__lshift+0xc0>
 80077f4:	e7ea      	b.n	80077cc <__lshift+0xa4>
 80077f6:	bf00      	nop
 80077f8:	0800b8f1 	.word	0x0800b8f1
 80077fc:	0800b902 	.word	0x0800b902

08007800 <__mcmp>:
 8007800:	690a      	ldr	r2, [r1, #16]
 8007802:	4603      	mov	r3, r0
 8007804:	6900      	ldr	r0, [r0, #16]
 8007806:	1a80      	subs	r0, r0, r2
 8007808:	b530      	push	{r4, r5, lr}
 800780a:	d10e      	bne.n	800782a <__mcmp+0x2a>
 800780c:	3314      	adds	r3, #20
 800780e:	3114      	adds	r1, #20
 8007810:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007814:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007818:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800781c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007820:	4295      	cmp	r5, r2
 8007822:	d003      	beq.n	800782c <__mcmp+0x2c>
 8007824:	d205      	bcs.n	8007832 <__mcmp+0x32>
 8007826:	f04f 30ff 	mov.w	r0, #4294967295
 800782a:	bd30      	pop	{r4, r5, pc}
 800782c:	42a3      	cmp	r3, r4
 800782e:	d3f3      	bcc.n	8007818 <__mcmp+0x18>
 8007830:	e7fb      	b.n	800782a <__mcmp+0x2a>
 8007832:	2001      	movs	r0, #1
 8007834:	e7f9      	b.n	800782a <__mcmp+0x2a>
	...

08007838 <__mdiff>:
 8007838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783c:	4689      	mov	r9, r1
 800783e:	4606      	mov	r6, r0
 8007840:	4611      	mov	r1, r2
 8007842:	4648      	mov	r0, r9
 8007844:	4614      	mov	r4, r2
 8007846:	f7ff ffdb 	bl	8007800 <__mcmp>
 800784a:	1e05      	subs	r5, r0, #0
 800784c:	d112      	bne.n	8007874 <__mdiff+0x3c>
 800784e:	4629      	mov	r1, r5
 8007850:	4630      	mov	r0, r6
 8007852:	f7ff fd11 	bl	8007278 <_Balloc>
 8007856:	4602      	mov	r2, r0
 8007858:	b928      	cbnz	r0, 8007866 <__mdiff+0x2e>
 800785a:	4b3f      	ldr	r3, [pc, #252]	@ (8007958 <__mdiff+0x120>)
 800785c:	f240 2137 	movw	r1, #567	@ 0x237
 8007860:	483e      	ldr	r0, [pc, #248]	@ (800795c <__mdiff+0x124>)
 8007862:	f001 fc6d 	bl	8009140 <__assert_func>
 8007866:	2301      	movs	r3, #1
 8007868:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800786c:	4610      	mov	r0, r2
 800786e:	b003      	add	sp, #12
 8007870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007874:	bfbc      	itt	lt
 8007876:	464b      	movlt	r3, r9
 8007878:	46a1      	movlt	r9, r4
 800787a:	4630      	mov	r0, r6
 800787c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007880:	bfba      	itte	lt
 8007882:	461c      	movlt	r4, r3
 8007884:	2501      	movlt	r5, #1
 8007886:	2500      	movge	r5, #0
 8007888:	f7ff fcf6 	bl	8007278 <_Balloc>
 800788c:	4602      	mov	r2, r0
 800788e:	b918      	cbnz	r0, 8007898 <__mdiff+0x60>
 8007890:	4b31      	ldr	r3, [pc, #196]	@ (8007958 <__mdiff+0x120>)
 8007892:	f240 2145 	movw	r1, #581	@ 0x245
 8007896:	e7e3      	b.n	8007860 <__mdiff+0x28>
 8007898:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800789c:	6926      	ldr	r6, [r4, #16]
 800789e:	60c5      	str	r5, [r0, #12]
 80078a0:	f109 0310 	add.w	r3, r9, #16
 80078a4:	f109 0514 	add.w	r5, r9, #20
 80078a8:	f104 0e14 	add.w	lr, r4, #20
 80078ac:	f100 0b14 	add.w	fp, r0, #20
 80078b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80078b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	46d9      	mov	r9, fp
 80078bc:	f04f 0c00 	mov.w	ip, #0
 80078c0:	9b01      	ldr	r3, [sp, #4]
 80078c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80078c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80078ca:	9301      	str	r3, [sp, #4]
 80078cc:	fa1f f38a 	uxth.w	r3, sl
 80078d0:	4619      	mov	r1, r3
 80078d2:	b283      	uxth	r3, r0
 80078d4:	1acb      	subs	r3, r1, r3
 80078d6:	0c00      	lsrs	r0, r0, #16
 80078d8:	4463      	add	r3, ip
 80078da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80078de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80078e8:	4576      	cmp	r6, lr
 80078ea:	f849 3b04 	str.w	r3, [r9], #4
 80078ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078f2:	d8e5      	bhi.n	80078c0 <__mdiff+0x88>
 80078f4:	1b33      	subs	r3, r6, r4
 80078f6:	3b15      	subs	r3, #21
 80078f8:	f023 0303 	bic.w	r3, r3, #3
 80078fc:	3415      	adds	r4, #21
 80078fe:	3304      	adds	r3, #4
 8007900:	42a6      	cmp	r6, r4
 8007902:	bf38      	it	cc
 8007904:	2304      	movcc	r3, #4
 8007906:	441d      	add	r5, r3
 8007908:	445b      	add	r3, fp
 800790a:	461e      	mov	r6, r3
 800790c:	462c      	mov	r4, r5
 800790e:	4544      	cmp	r4, r8
 8007910:	d30e      	bcc.n	8007930 <__mdiff+0xf8>
 8007912:	f108 0103 	add.w	r1, r8, #3
 8007916:	1b49      	subs	r1, r1, r5
 8007918:	f021 0103 	bic.w	r1, r1, #3
 800791c:	3d03      	subs	r5, #3
 800791e:	45a8      	cmp	r8, r5
 8007920:	bf38      	it	cc
 8007922:	2100      	movcc	r1, #0
 8007924:	440b      	add	r3, r1
 8007926:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800792a:	b191      	cbz	r1, 8007952 <__mdiff+0x11a>
 800792c:	6117      	str	r7, [r2, #16]
 800792e:	e79d      	b.n	800786c <__mdiff+0x34>
 8007930:	f854 1b04 	ldr.w	r1, [r4], #4
 8007934:	46e6      	mov	lr, ip
 8007936:	0c08      	lsrs	r0, r1, #16
 8007938:	fa1c fc81 	uxtah	ip, ip, r1
 800793c:	4471      	add	r1, lr
 800793e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007942:	b289      	uxth	r1, r1
 8007944:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007948:	f846 1b04 	str.w	r1, [r6], #4
 800794c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007950:	e7dd      	b.n	800790e <__mdiff+0xd6>
 8007952:	3f01      	subs	r7, #1
 8007954:	e7e7      	b.n	8007926 <__mdiff+0xee>
 8007956:	bf00      	nop
 8007958:	0800b8f1 	.word	0x0800b8f1
 800795c:	0800b902 	.word	0x0800b902

08007960 <__ulp>:
 8007960:	b082      	sub	sp, #8
 8007962:	ed8d 0b00 	vstr	d0, [sp]
 8007966:	9a01      	ldr	r2, [sp, #4]
 8007968:	4b0f      	ldr	r3, [pc, #60]	@ (80079a8 <__ulp+0x48>)
 800796a:	4013      	ands	r3, r2
 800796c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007970:	2b00      	cmp	r3, #0
 8007972:	dc08      	bgt.n	8007986 <__ulp+0x26>
 8007974:	425b      	negs	r3, r3
 8007976:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800797a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800797e:	da04      	bge.n	800798a <__ulp+0x2a>
 8007980:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007984:	4113      	asrs	r3, r2
 8007986:	2200      	movs	r2, #0
 8007988:	e008      	b.n	800799c <__ulp+0x3c>
 800798a:	f1a2 0314 	sub.w	r3, r2, #20
 800798e:	2b1e      	cmp	r3, #30
 8007990:	bfda      	itte	le
 8007992:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007996:	40da      	lsrle	r2, r3
 8007998:	2201      	movgt	r2, #1
 800799a:	2300      	movs	r3, #0
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	ec41 0b10 	vmov	d0, r0, r1
 80079a4:	b002      	add	sp, #8
 80079a6:	4770      	bx	lr
 80079a8:	7ff00000 	.word	0x7ff00000

080079ac <__b2d>:
 80079ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b0:	6906      	ldr	r6, [r0, #16]
 80079b2:	f100 0814 	add.w	r8, r0, #20
 80079b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80079ba:	1f37      	subs	r7, r6, #4
 80079bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80079c0:	4610      	mov	r0, r2
 80079c2:	f7ff fd4b 	bl	800745c <__hi0bits>
 80079c6:	f1c0 0320 	rsb	r3, r0, #32
 80079ca:	280a      	cmp	r0, #10
 80079cc:	600b      	str	r3, [r1, #0]
 80079ce:	491b      	ldr	r1, [pc, #108]	@ (8007a3c <__b2d+0x90>)
 80079d0:	dc15      	bgt.n	80079fe <__b2d+0x52>
 80079d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80079d6:	fa22 f30c 	lsr.w	r3, r2, ip
 80079da:	45b8      	cmp	r8, r7
 80079dc:	ea43 0501 	orr.w	r5, r3, r1
 80079e0:	bf34      	ite	cc
 80079e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80079e6:	2300      	movcs	r3, #0
 80079e8:	3015      	adds	r0, #21
 80079ea:	fa02 f000 	lsl.w	r0, r2, r0
 80079ee:	fa23 f30c 	lsr.w	r3, r3, ip
 80079f2:	4303      	orrs	r3, r0
 80079f4:	461c      	mov	r4, r3
 80079f6:	ec45 4b10 	vmov	d0, r4, r5
 80079fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079fe:	45b8      	cmp	r8, r7
 8007a00:	bf3a      	itte	cc
 8007a02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007a06:	f1a6 0708 	subcc.w	r7, r6, #8
 8007a0a:	2300      	movcs	r3, #0
 8007a0c:	380b      	subs	r0, #11
 8007a0e:	d012      	beq.n	8007a36 <__b2d+0x8a>
 8007a10:	f1c0 0120 	rsb	r1, r0, #32
 8007a14:	fa23 f401 	lsr.w	r4, r3, r1
 8007a18:	4082      	lsls	r2, r0
 8007a1a:	4322      	orrs	r2, r4
 8007a1c:	4547      	cmp	r7, r8
 8007a1e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007a22:	bf8c      	ite	hi
 8007a24:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007a28:	2200      	movls	r2, #0
 8007a2a:	4083      	lsls	r3, r0
 8007a2c:	40ca      	lsrs	r2, r1
 8007a2e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007a32:	4313      	orrs	r3, r2
 8007a34:	e7de      	b.n	80079f4 <__b2d+0x48>
 8007a36:	ea42 0501 	orr.w	r5, r2, r1
 8007a3a:	e7db      	b.n	80079f4 <__b2d+0x48>
 8007a3c:	3ff00000 	.word	0x3ff00000

08007a40 <__d2b>:
 8007a40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a44:	460f      	mov	r7, r1
 8007a46:	2101      	movs	r1, #1
 8007a48:	ec59 8b10 	vmov	r8, r9, d0
 8007a4c:	4616      	mov	r6, r2
 8007a4e:	f7ff fc13 	bl	8007278 <_Balloc>
 8007a52:	4604      	mov	r4, r0
 8007a54:	b930      	cbnz	r0, 8007a64 <__d2b+0x24>
 8007a56:	4602      	mov	r2, r0
 8007a58:	4b23      	ldr	r3, [pc, #140]	@ (8007ae8 <__d2b+0xa8>)
 8007a5a:	4824      	ldr	r0, [pc, #144]	@ (8007aec <__d2b+0xac>)
 8007a5c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a60:	f001 fb6e 	bl	8009140 <__assert_func>
 8007a64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a6c:	b10d      	cbz	r5, 8007a72 <__d2b+0x32>
 8007a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	f1b8 0300 	subs.w	r3, r8, #0
 8007a78:	d023      	beq.n	8007ac2 <__d2b+0x82>
 8007a7a:	4668      	mov	r0, sp
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	f7ff fd0c 	bl	800749a <__lo0bits>
 8007a82:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a86:	b1d0      	cbz	r0, 8007abe <__d2b+0x7e>
 8007a88:	f1c0 0320 	rsb	r3, r0, #32
 8007a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a90:	430b      	orrs	r3, r1
 8007a92:	40c2      	lsrs	r2, r0
 8007a94:	6163      	str	r3, [r4, #20]
 8007a96:	9201      	str	r2, [sp, #4]
 8007a98:	9b01      	ldr	r3, [sp, #4]
 8007a9a:	61a3      	str	r3, [r4, #24]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bf0c      	ite	eq
 8007aa0:	2201      	moveq	r2, #1
 8007aa2:	2202      	movne	r2, #2
 8007aa4:	6122      	str	r2, [r4, #16]
 8007aa6:	b1a5      	cbz	r5, 8007ad2 <__d2b+0x92>
 8007aa8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007aac:	4405      	add	r5, r0
 8007aae:	603d      	str	r5, [r7, #0]
 8007ab0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ab4:	6030      	str	r0, [r6, #0]
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	b003      	add	sp, #12
 8007aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007abe:	6161      	str	r1, [r4, #20]
 8007ac0:	e7ea      	b.n	8007a98 <__d2b+0x58>
 8007ac2:	a801      	add	r0, sp, #4
 8007ac4:	f7ff fce9 	bl	800749a <__lo0bits>
 8007ac8:	9b01      	ldr	r3, [sp, #4]
 8007aca:	6163      	str	r3, [r4, #20]
 8007acc:	3020      	adds	r0, #32
 8007ace:	2201      	movs	r2, #1
 8007ad0:	e7e8      	b.n	8007aa4 <__d2b+0x64>
 8007ad2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ad6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ada:	6038      	str	r0, [r7, #0]
 8007adc:	6918      	ldr	r0, [r3, #16]
 8007ade:	f7ff fcbd 	bl	800745c <__hi0bits>
 8007ae2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ae6:	e7e5      	b.n	8007ab4 <__d2b+0x74>
 8007ae8:	0800b8f1 	.word	0x0800b8f1
 8007aec:	0800b902 	.word	0x0800b902

08007af0 <__ratio>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	b085      	sub	sp, #20
 8007af6:	e9cd 1000 	strd	r1, r0, [sp]
 8007afa:	a902      	add	r1, sp, #8
 8007afc:	f7ff ff56 	bl	80079ac <__b2d>
 8007b00:	9800      	ldr	r0, [sp, #0]
 8007b02:	a903      	add	r1, sp, #12
 8007b04:	ec55 4b10 	vmov	r4, r5, d0
 8007b08:	f7ff ff50 	bl	80079ac <__b2d>
 8007b0c:	9b01      	ldr	r3, [sp, #4]
 8007b0e:	6919      	ldr	r1, [r3, #16]
 8007b10:	9b00      	ldr	r3, [sp, #0]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	1ac9      	subs	r1, r1, r3
 8007b16:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007b1a:	1a9b      	subs	r3, r3, r2
 8007b1c:	ec5b ab10 	vmov	sl, fp, d0
 8007b20:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	bfce      	itee	gt
 8007b28:	462a      	movgt	r2, r5
 8007b2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b2e:	465a      	movle	r2, fp
 8007b30:	462f      	mov	r7, r5
 8007b32:	46d9      	mov	r9, fp
 8007b34:	bfcc      	ite	gt
 8007b36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b3a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007b3e:	464b      	mov	r3, r9
 8007b40:	4652      	mov	r2, sl
 8007b42:	4620      	mov	r0, r4
 8007b44:	4639      	mov	r1, r7
 8007b46:	f7f8 fe89 	bl	800085c <__aeabi_ddiv>
 8007b4a:	ec41 0b10 	vmov	d0, r0, r1
 8007b4e:	b005      	add	sp, #20
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b54 <__copybits>:
 8007b54:	3901      	subs	r1, #1
 8007b56:	b570      	push	{r4, r5, r6, lr}
 8007b58:	1149      	asrs	r1, r1, #5
 8007b5a:	6914      	ldr	r4, [r2, #16]
 8007b5c:	3101      	adds	r1, #1
 8007b5e:	f102 0314 	add.w	r3, r2, #20
 8007b62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b66:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b6a:	1f05      	subs	r5, r0, #4
 8007b6c:	42a3      	cmp	r3, r4
 8007b6e:	d30c      	bcc.n	8007b8a <__copybits+0x36>
 8007b70:	1aa3      	subs	r3, r4, r2
 8007b72:	3b11      	subs	r3, #17
 8007b74:	f023 0303 	bic.w	r3, r3, #3
 8007b78:	3211      	adds	r2, #17
 8007b7a:	42a2      	cmp	r2, r4
 8007b7c:	bf88      	it	hi
 8007b7e:	2300      	movhi	r3, #0
 8007b80:	4418      	add	r0, r3
 8007b82:	2300      	movs	r3, #0
 8007b84:	4288      	cmp	r0, r1
 8007b86:	d305      	bcc.n	8007b94 <__copybits+0x40>
 8007b88:	bd70      	pop	{r4, r5, r6, pc}
 8007b8a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b8e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b92:	e7eb      	b.n	8007b6c <__copybits+0x18>
 8007b94:	f840 3b04 	str.w	r3, [r0], #4
 8007b98:	e7f4      	b.n	8007b84 <__copybits+0x30>

08007b9a <__any_on>:
 8007b9a:	f100 0214 	add.w	r2, r0, #20
 8007b9e:	6900      	ldr	r0, [r0, #16]
 8007ba0:	114b      	asrs	r3, r1, #5
 8007ba2:	4298      	cmp	r0, r3
 8007ba4:	b510      	push	{r4, lr}
 8007ba6:	db11      	blt.n	8007bcc <__any_on+0x32>
 8007ba8:	dd0a      	ble.n	8007bc0 <__any_on+0x26>
 8007baa:	f011 011f 	ands.w	r1, r1, #31
 8007bae:	d007      	beq.n	8007bc0 <__any_on+0x26>
 8007bb0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007bb4:	fa24 f001 	lsr.w	r0, r4, r1
 8007bb8:	fa00 f101 	lsl.w	r1, r0, r1
 8007bbc:	428c      	cmp	r4, r1
 8007bbe:	d10b      	bne.n	8007bd8 <__any_on+0x3e>
 8007bc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d803      	bhi.n	8007bd0 <__any_on+0x36>
 8007bc8:	2000      	movs	r0, #0
 8007bca:	bd10      	pop	{r4, pc}
 8007bcc:	4603      	mov	r3, r0
 8007bce:	e7f7      	b.n	8007bc0 <__any_on+0x26>
 8007bd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	d0f5      	beq.n	8007bc4 <__any_on+0x2a>
 8007bd8:	2001      	movs	r0, #1
 8007bda:	e7f6      	b.n	8007bca <__any_on+0x30>

08007bdc <sulp>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	4604      	mov	r4, r0
 8007be0:	460d      	mov	r5, r1
 8007be2:	ec45 4b10 	vmov	d0, r4, r5
 8007be6:	4616      	mov	r6, r2
 8007be8:	f7ff feba 	bl	8007960 <__ulp>
 8007bec:	ec51 0b10 	vmov	r0, r1, d0
 8007bf0:	b17e      	cbz	r6, 8007c12 <sulp+0x36>
 8007bf2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007bf6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	dd09      	ble.n	8007c12 <sulp+0x36>
 8007bfe:	051b      	lsls	r3, r3, #20
 8007c00:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007c04:	2400      	movs	r4, #0
 8007c06:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007c0a:	4622      	mov	r2, r4
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	f7f8 fcfb 	bl	8000608 <__aeabi_dmul>
 8007c12:	ec41 0b10 	vmov	d0, r0, r1
 8007c16:	bd70      	pop	{r4, r5, r6, pc}

08007c18 <_strtod_l>:
 8007c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	b09f      	sub	sp, #124	@ 0x7c
 8007c1e:	460c      	mov	r4, r1
 8007c20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007c22:	2200      	movs	r2, #0
 8007c24:	921a      	str	r2, [sp, #104]	@ 0x68
 8007c26:	9005      	str	r0, [sp, #20]
 8007c28:	f04f 0a00 	mov.w	sl, #0
 8007c2c:	f04f 0b00 	mov.w	fp, #0
 8007c30:	460a      	mov	r2, r1
 8007c32:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c34:	7811      	ldrb	r1, [r2, #0]
 8007c36:	292b      	cmp	r1, #43	@ 0x2b
 8007c38:	d04a      	beq.n	8007cd0 <_strtod_l+0xb8>
 8007c3a:	d838      	bhi.n	8007cae <_strtod_l+0x96>
 8007c3c:	290d      	cmp	r1, #13
 8007c3e:	d832      	bhi.n	8007ca6 <_strtod_l+0x8e>
 8007c40:	2908      	cmp	r1, #8
 8007c42:	d832      	bhi.n	8007caa <_strtod_l+0x92>
 8007c44:	2900      	cmp	r1, #0
 8007c46:	d03b      	beq.n	8007cc0 <_strtod_l+0xa8>
 8007c48:	2200      	movs	r2, #0
 8007c4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007c4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007c4e:	782a      	ldrb	r2, [r5, #0]
 8007c50:	2a30      	cmp	r2, #48	@ 0x30
 8007c52:	f040 80b3 	bne.w	8007dbc <_strtod_l+0x1a4>
 8007c56:	786a      	ldrb	r2, [r5, #1]
 8007c58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c5c:	2a58      	cmp	r2, #88	@ 0x58
 8007c5e:	d16e      	bne.n	8007d3e <_strtod_l+0x126>
 8007c60:	9302      	str	r3, [sp, #8]
 8007c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	ab1a      	add	r3, sp, #104	@ 0x68
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	4a8e      	ldr	r2, [pc, #568]	@ (8007ea4 <_strtod_l+0x28c>)
 8007c6c:	9805      	ldr	r0, [sp, #20]
 8007c6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007c70:	a919      	add	r1, sp, #100	@ 0x64
 8007c72:	f001 faff 	bl	8009274 <__gethex>
 8007c76:	f010 060f 	ands.w	r6, r0, #15
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	d005      	beq.n	8007c8a <_strtod_l+0x72>
 8007c7e:	2e06      	cmp	r6, #6
 8007c80:	d128      	bne.n	8007cd4 <_strtod_l+0xbc>
 8007c82:	3501      	adds	r5, #1
 8007c84:	2300      	movs	r3, #0
 8007c86:	9519      	str	r5, [sp, #100]	@ 0x64
 8007c88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f040 858e 	bne.w	80087ae <_strtod_l+0xb96>
 8007c92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c94:	b1cb      	cbz	r3, 8007cca <_strtod_l+0xb2>
 8007c96:	4652      	mov	r2, sl
 8007c98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007c9c:	ec43 2b10 	vmov	d0, r2, r3
 8007ca0:	b01f      	add	sp, #124	@ 0x7c
 8007ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca6:	2920      	cmp	r1, #32
 8007ca8:	d1ce      	bne.n	8007c48 <_strtod_l+0x30>
 8007caa:	3201      	adds	r2, #1
 8007cac:	e7c1      	b.n	8007c32 <_strtod_l+0x1a>
 8007cae:	292d      	cmp	r1, #45	@ 0x2d
 8007cb0:	d1ca      	bne.n	8007c48 <_strtod_l+0x30>
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007cb6:	1c51      	adds	r1, r2, #1
 8007cb8:	9119      	str	r1, [sp, #100]	@ 0x64
 8007cba:	7852      	ldrb	r2, [r2, #1]
 8007cbc:	2a00      	cmp	r2, #0
 8007cbe:	d1c5      	bne.n	8007c4c <_strtod_l+0x34>
 8007cc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007cc2:	9419      	str	r4, [sp, #100]	@ 0x64
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f040 8570 	bne.w	80087aa <_strtod_l+0xb92>
 8007cca:	4652      	mov	r2, sl
 8007ccc:	465b      	mov	r3, fp
 8007cce:	e7e5      	b.n	8007c9c <_strtod_l+0x84>
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	e7ef      	b.n	8007cb4 <_strtod_l+0x9c>
 8007cd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007cd6:	b13a      	cbz	r2, 8007ce8 <_strtod_l+0xd0>
 8007cd8:	2135      	movs	r1, #53	@ 0x35
 8007cda:	a81c      	add	r0, sp, #112	@ 0x70
 8007cdc:	f7ff ff3a 	bl	8007b54 <__copybits>
 8007ce0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ce2:	9805      	ldr	r0, [sp, #20]
 8007ce4:	f7ff fb08 	bl	80072f8 <_Bfree>
 8007ce8:	3e01      	subs	r6, #1
 8007cea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007cec:	2e04      	cmp	r6, #4
 8007cee:	d806      	bhi.n	8007cfe <_strtod_l+0xe6>
 8007cf0:	e8df f006 	tbb	[pc, r6]
 8007cf4:	201d0314 	.word	0x201d0314
 8007cf8:	14          	.byte	0x14
 8007cf9:	00          	.byte	0x00
 8007cfa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007cfe:	05e1      	lsls	r1, r4, #23
 8007d00:	bf48      	it	mi
 8007d02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007d06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d0a:	0d1b      	lsrs	r3, r3, #20
 8007d0c:	051b      	lsls	r3, r3, #20
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1bb      	bne.n	8007c8a <_strtod_l+0x72>
 8007d12:	f7fe fb2f 	bl	8006374 <__errno>
 8007d16:	2322      	movs	r3, #34	@ 0x22
 8007d18:	6003      	str	r3, [r0, #0]
 8007d1a:	e7b6      	b.n	8007c8a <_strtod_l+0x72>
 8007d1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007d20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007d24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007d28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007d2c:	e7e7      	b.n	8007cfe <_strtod_l+0xe6>
 8007d2e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007eac <_strtod_l+0x294>
 8007d32:	e7e4      	b.n	8007cfe <_strtod_l+0xe6>
 8007d34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007d38:	f04f 3aff 	mov.w	sl, #4294967295
 8007d3c:	e7df      	b.n	8007cfe <_strtod_l+0xe6>
 8007d3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d40:	1c5a      	adds	r2, r3, #1
 8007d42:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d44:	785b      	ldrb	r3, [r3, #1]
 8007d46:	2b30      	cmp	r3, #48	@ 0x30
 8007d48:	d0f9      	beq.n	8007d3e <_strtod_l+0x126>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d09d      	beq.n	8007c8a <_strtod_l+0x72>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d54:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d56:	2300      	movs	r3, #0
 8007d58:	9308      	str	r3, [sp, #32]
 8007d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d5c:	461f      	mov	r7, r3
 8007d5e:	220a      	movs	r2, #10
 8007d60:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007d62:	7805      	ldrb	r5, [r0, #0]
 8007d64:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007d68:	b2d9      	uxtb	r1, r3
 8007d6a:	2909      	cmp	r1, #9
 8007d6c:	d928      	bls.n	8007dc0 <_strtod_l+0x1a8>
 8007d6e:	494e      	ldr	r1, [pc, #312]	@ (8007ea8 <_strtod_l+0x290>)
 8007d70:	2201      	movs	r2, #1
 8007d72:	f001 f9ab 	bl	80090cc <strncmp>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d032      	beq.n	8007de0 <_strtod_l+0x1c8>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	462a      	mov	r2, r5
 8007d7e:	4681      	mov	r9, r0
 8007d80:	463d      	mov	r5, r7
 8007d82:	4603      	mov	r3, r0
 8007d84:	2a65      	cmp	r2, #101	@ 0x65
 8007d86:	d001      	beq.n	8007d8c <_strtod_l+0x174>
 8007d88:	2a45      	cmp	r2, #69	@ 0x45
 8007d8a:	d114      	bne.n	8007db6 <_strtod_l+0x19e>
 8007d8c:	b91d      	cbnz	r5, 8007d96 <_strtod_l+0x17e>
 8007d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d90:	4302      	orrs	r2, r0
 8007d92:	d095      	beq.n	8007cc0 <_strtod_l+0xa8>
 8007d94:	2500      	movs	r5, #0
 8007d96:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007d98:	1c62      	adds	r2, r4, #1
 8007d9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d9c:	7862      	ldrb	r2, [r4, #1]
 8007d9e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007da0:	d077      	beq.n	8007e92 <_strtod_l+0x27a>
 8007da2:	2a2d      	cmp	r2, #45	@ 0x2d
 8007da4:	d07b      	beq.n	8007e9e <_strtod_l+0x286>
 8007da6:	f04f 0c00 	mov.w	ip, #0
 8007daa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007dae:	2909      	cmp	r1, #9
 8007db0:	f240 8082 	bls.w	8007eb8 <_strtod_l+0x2a0>
 8007db4:	9419      	str	r4, [sp, #100]	@ 0x64
 8007db6:	f04f 0800 	mov.w	r8, #0
 8007dba:	e0a2      	b.n	8007f02 <_strtod_l+0x2ea>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	e7c7      	b.n	8007d50 <_strtod_l+0x138>
 8007dc0:	2f08      	cmp	r7, #8
 8007dc2:	bfd5      	itete	le
 8007dc4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007dc6:	9908      	ldrgt	r1, [sp, #32]
 8007dc8:	fb02 3301 	mlale	r3, r2, r1, r3
 8007dcc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007dd0:	f100 0001 	add.w	r0, r0, #1
 8007dd4:	bfd4      	ite	le
 8007dd6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007dd8:	9308      	strgt	r3, [sp, #32]
 8007dda:	3701      	adds	r7, #1
 8007ddc:	9019      	str	r0, [sp, #100]	@ 0x64
 8007dde:	e7bf      	b.n	8007d60 <_strtod_l+0x148>
 8007de0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	9219      	str	r2, [sp, #100]	@ 0x64
 8007de6:	785a      	ldrb	r2, [r3, #1]
 8007de8:	b37f      	cbz	r7, 8007e4a <_strtod_l+0x232>
 8007dea:	4681      	mov	r9, r0
 8007dec:	463d      	mov	r5, r7
 8007dee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007df2:	2b09      	cmp	r3, #9
 8007df4:	d912      	bls.n	8007e1c <_strtod_l+0x204>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e7c4      	b.n	8007d84 <_strtod_l+0x16c>
 8007dfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e00:	785a      	ldrb	r2, [r3, #1]
 8007e02:	3001      	adds	r0, #1
 8007e04:	2a30      	cmp	r2, #48	@ 0x30
 8007e06:	d0f8      	beq.n	8007dfa <_strtod_l+0x1e2>
 8007e08:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	f200 84d3 	bhi.w	80087b8 <_strtod_l+0xba0>
 8007e12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e14:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e16:	4681      	mov	r9, r0
 8007e18:	2000      	movs	r0, #0
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	3a30      	subs	r2, #48	@ 0x30
 8007e1e:	f100 0301 	add.w	r3, r0, #1
 8007e22:	d02a      	beq.n	8007e7a <_strtod_l+0x262>
 8007e24:	4499      	add	r9, r3
 8007e26:	eb00 0c05 	add.w	ip, r0, r5
 8007e2a:	462b      	mov	r3, r5
 8007e2c:	210a      	movs	r1, #10
 8007e2e:	4563      	cmp	r3, ip
 8007e30:	d10d      	bne.n	8007e4e <_strtod_l+0x236>
 8007e32:	1c69      	adds	r1, r5, #1
 8007e34:	4401      	add	r1, r0
 8007e36:	4428      	add	r0, r5
 8007e38:	2808      	cmp	r0, #8
 8007e3a:	dc16      	bgt.n	8007e6a <_strtod_l+0x252>
 8007e3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e3e:	230a      	movs	r3, #10
 8007e40:	fb03 2300 	mla	r3, r3, r0, r2
 8007e44:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e46:	2300      	movs	r3, #0
 8007e48:	e018      	b.n	8007e7c <_strtod_l+0x264>
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	e7da      	b.n	8007e04 <_strtod_l+0x1ec>
 8007e4e:	2b08      	cmp	r3, #8
 8007e50:	f103 0301 	add.w	r3, r3, #1
 8007e54:	dc03      	bgt.n	8007e5e <_strtod_l+0x246>
 8007e56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007e58:	434e      	muls	r6, r1
 8007e5a:	960a      	str	r6, [sp, #40]	@ 0x28
 8007e5c:	e7e7      	b.n	8007e2e <_strtod_l+0x216>
 8007e5e:	2b10      	cmp	r3, #16
 8007e60:	bfde      	ittt	le
 8007e62:	9e08      	ldrle	r6, [sp, #32]
 8007e64:	434e      	mulle	r6, r1
 8007e66:	9608      	strle	r6, [sp, #32]
 8007e68:	e7e1      	b.n	8007e2e <_strtod_l+0x216>
 8007e6a:	280f      	cmp	r0, #15
 8007e6c:	dceb      	bgt.n	8007e46 <_strtod_l+0x22e>
 8007e6e:	9808      	ldr	r0, [sp, #32]
 8007e70:	230a      	movs	r3, #10
 8007e72:	fb03 2300 	mla	r3, r3, r0, r2
 8007e76:	9308      	str	r3, [sp, #32]
 8007e78:	e7e5      	b.n	8007e46 <_strtod_l+0x22e>
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e7e:	1c50      	adds	r0, r2, #1
 8007e80:	9019      	str	r0, [sp, #100]	@ 0x64
 8007e82:	7852      	ldrb	r2, [r2, #1]
 8007e84:	4618      	mov	r0, r3
 8007e86:	460d      	mov	r5, r1
 8007e88:	e7b1      	b.n	8007dee <_strtod_l+0x1d6>
 8007e8a:	f04f 0900 	mov.w	r9, #0
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e77d      	b.n	8007d8e <_strtod_l+0x176>
 8007e92:	f04f 0c00 	mov.w	ip, #0
 8007e96:	1ca2      	adds	r2, r4, #2
 8007e98:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e9a:	78a2      	ldrb	r2, [r4, #2]
 8007e9c:	e785      	b.n	8007daa <_strtod_l+0x192>
 8007e9e:	f04f 0c01 	mov.w	ip, #1
 8007ea2:	e7f8      	b.n	8007e96 <_strtod_l+0x27e>
 8007ea4:	0800ba70 	.word	0x0800ba70
 8007ea8:	0800ba58 	.word	0x0800ba58
 8007eac:	7ff00000 	.word	0x7ff00000
 8007eb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007eb2:	1c51      	adds	r1, r2, #1
 8007eb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8007eb6:	7852      	ldrb	r2, [r2, #1]
 8007eb8:	2a30      	cmp	r2, #48	@ 0x30
 8007eba:	d0f9      	beq.n	8007eb0 <_strtod_l+0x298>
 8007ebc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007ec0:	2908      	cmp	r1, #8
 8007ec2:	f63f af78 	bhi.w	8007db6 <_strtod_l+0x19e>
 8007ec6:	3a30      	subs	r2, #48	@ 0x30
 8007ec8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ecc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007ece:	f04f 080a 	mov.w	r8, #10
 8007ed2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ed4:	1c56      	adds	r6, r2, #1
 8007ed6:	9619      	str	r6, [sp, #100]	@ 0x64
 8007ed8:	7852      	ldrb	r2, [r2, #1]
 8007eda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007ede:	f1be 0f09 	cmp.w	lr, #9
 8007ee2:	d939      	bls.n	8007f58 <_strtod_l+0x340>
 8007ee4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007ee6:	1a76      	subs	r6, r6, r1
 8007ee8:	2e08      	cmp	r6, #8
 8007eea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007eee:	dc03      	bgt.n	8007ef8 <_strtod_l+0x2e0>
 8007ef0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007ef2:	4588      	cmp	r8, r1
 8007ef4:	bfa8      	it	ge
 8007ef6:	4688      	movge	r8, r1
 8007ef8:	f1bc 0f00 	cmp.w	ip, #0
 8007efc:	d001      	beq.n	8007f02 <_strtod_l+0x2ea>
 8007efe:	f1c8 0800 	rsb	r8, r8, #0
 8007f02:	2d00      	cmp	r5, #0
 8007f04:	d14e      	bne.n	8007fa4 <_strtod_l+0x38c>
 8007f06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f08:	4308      	orrs	r0, r1
 8007f0a:	f47f aebe 	bne.w	8007c8a <_strtod_l+0x72>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f47f aed6 	bne.w	8007cc0 <_strtod_l+0xa8>
 8007f14:	2a69      	cmp	r2, #105	@ 0x69
 8007f16:	d028      	beq.n	8007f6a <_strtod_l+0x352>
 8007f18:	dc25      	bgt.n	8007f66 <_strtod_l+0x34e>
 8007f1a:	2a49      	cmp	r2, #73	@ 0x49
 8007f1c:	d025      	beq.n	8007f6a <_strtod_l+0x352>
 8007f1e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007f20:	f47f aece 	bne.w	8007cc0 <_strtod_l+0xa8>
 8007f24:	499b      	ldr	r1, [pc, #620]	@ (8008194 <_strtod_l+0x57c>)
 8007f26:	a819      	add	r0, sp, #100	@ 0x64
 8007f28:	f001 fbc6 	bl	80096b8 <__match>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f43f aec7 	beq.w	8007cc0 <_strtod_l+0xa8>
 8007f32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b28      	cmp	r3, #40	@ 0x28
 8007f38:	d12e      	bne.n	8007f98 <_strtod_l+0x380>
 8007f3a:	4997      	ldr	r1, [pc, #604]	@ (8008198 <_strtod_l+0x580>)
 8007f3c:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f3e:	a819      	add	r0, sp, #100	@ 0x64
 8007f40:	f001 fbce 	bl	80096e0 <__hexnan>
 8007f44:	2805      	cmp	r0, #5
 8007f46:	d127      	bne.n	8007f98 <_strtod_l+0x380>
 8007f48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007f4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007f52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007f56:	e698      	b.n	8007c8a <_strtod_l+0x72>
 8007f58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007f5a:	fb08 2101 	mla	r1, r8, r1, r2
 8007f5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007f62:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f64:	e7b5      	b.n	8007ed2 <_strtod_l+0x2ba>
 8007f66:	2a6e      	cmp	r2, #110	@ 0x6e
 8007f68:	e7da      	b.n	8007f20 <_strtod_l+0x308>
 8007f6a:	498c      	ldr	r1, [pc, #560]	@ (800819c <_strtod_l+0x584>)
 8007f6c:	a819      	add	r0, sp, #100	@ 0x64
 8007f6e:	f001 fba3 	bl	80096b8 <__match>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	f43f aea4 	beq.w	8007cc0 <_strtod_l+0xa8>
 8007f78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f7a:	4989      	ldr	r1, [pc, #548]	@ (80081a0 <_strtod_l+0x588>)
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	a819      	add	r0, sp, #100	@ 0x64
 8007f80:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f82:	f001 fb99 	bl	80096b8 <__match>
 8007f86:	b910      	cbnz	r0, 8007f8e <_strtod_l+0x376>
 8007f88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80081b0 <_strtod_l+0x598>
 8007f92:	f04f 0a00 	mov.w	sl, #0
 8007f96:	e678      	b.n	8007c8a <_strtod_l+0x72>
 8007f98:	4882      	ldr	r0, [pc, #520]	@ (80081a4 <_strtod_l+0x58c>)
 8007f9a:	f001 f8c9 	bl	8009130 <nan>
 8007f9e:	ec5b ab10 	vmov	sl, fp, d0
 8007fa2:	e672      	b.n	8007c8a <_strtod_l+0x72>
 8007fa4:	eba8 0309 	sub.w	r3, r8, r9
 8007fa8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fac:	2f00      	cmp	r7, #0
 8007fae:	bf08      	it	eq
 8007fb0:	462f      	moveq	r7, r5
 8007fb2:	2d10      	cmp	r5, #16
 8007fb4:	462c      	mov	r4, r5
 8007fb6:	bfa8      	it	ge
 8007fb8:	2410      	movge	r4, #16
 8007fba:	f7f8 faab 	bl	8000514 <__aeabi_ui2d>
 8007fbe:	2d09      	cmp	r5, #9
 8007fc0:	4682      	mov	sl, r0
 8007fc2:	468b      	mov	fp, r1
 8007fc4:	dc13      	bgt.n	8007fee <_strtod_l+0x3d6>
 8007fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f43f ae5e 	beq.w	8007c8a <_strtod_l+0x72>
 8007fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fd0:	dd78      	ble.n	80080c4 <_strtod_l+0x4ac>
 8007fd2:	2b16      	cmp	r3, #22
 8007fd4:	dc5f      	bgt.n	8008096 <_strtod_l+0x47e>
 8007fd6:	4974      	ldr	r1, [pc, #464]	@ (80081a8 <_strtod_l+0x590>)
 8007fd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	465b      	mov	r3, fp
 8007fe4:	f7f8 fb10 	bl	8000608 <__aeabi_dmul>
 8007fe8:	4682      	mov	sl, r0
 8007fea:	468b      	mov	fp, r1
 8007fec:	e64d      	b.n	8007c8a <_strtod_l+0x72>
 8007fee:	4b6e      	ldr	r3, [pc, #440]	@ (80081a8 <_strtod_l+0x590>)
 8007ff0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ff4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007ff8:	f7f8 fb06 	bl	8000608 <__aeabi_dmul>
 8007ffc:	4682      	mov	sl, r0
 8007ffe:	9808      	ldr	r0, [sp, #32]
 8008000:	468b      	mov	fp, r1
 8008002:	f7f8 fa87 	bl	8000514 <__aeabi_ui2d>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4650      	mov	r0, sl
 800800c:	4659      	mov	r1, fp
 800800e:	f7f8 f945 	bl	800029c <__adddf3>
 8008012:	2d0f      	cmp	r5, #15
 8008014:	4682      	mov	sl, r0
 8008016:	468b      	mov	fp, r1
 8008018:	ddd5      	ble.n	8007fc6 <_strtod_l+0x3ae>
 800801a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800801c:	1b2c      	subs	r4, r5, r4
 800801e:	441c      	add	r4, r3
 8008020:	2c00      	cmp	r4, #0
 8008022:	f340 8096 	ble.w	8008152 <_strtod_l+0x53a>
 8008026:	f014 030f 	ands.w	r3, r4, #15
 800802a:	d00a      	beq.n	8008042 <_strtod_l+0x42a>
 800802c:	495e      	ldr	r1, [pc, #376]	@ (80081a8 <_strtod_l+0x590>)
 800802e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008032:	4652      	mov	r2, sl
 8008034:	465b      	mov	r3, fp
 8008036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800803a:	f7f8 fae5 	bl	8000608 <__aeabi_dmul>
 800803e:	4682      	mov	sl, r0
 8008040:	468b      	mov	fp, r1
 8008042:	f034 040f 	bics.w	r4, r4, #15
 8008046:	d073      	beq.n	8008130 <_strtod_l+0x518>
 8008048:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800804c:	dd48      	ble.n	80080e0 <_strtod_l+0x4c8>
 800804e:	2400      	movs	r4, #0
 8008050:	46a0      	mov	r8, r4
 8008052:	940a      	str	r4, [sp, #40]	@ 0x28
 8008054:	46a1      	mov	r9, r4
 8008056:	9a05      	ldr	r2, [sp, #20]
 8008058:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80081b0 <_strtod_l+0x598>
 800805c:	2322      	movs	r3, #34	@ 0x22
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	f04f 0a00 	mov.w	sl, #0
 8008064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008066:	2b00      	cmp	r3, #0
 8008068:	f43f ae0f 	beq.w	8007c8a <_strtod_l+0x72>
 800806c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800806e:	9805      	ldr	r0, [sp, #20]
 8008070:	f7ff f942 	bl	80072f8 <_Bfree>
 8008074:	9805      	ldr	r0, [sp, #20]
 8008076:	4649      	mov	r1, r9
 8008078:	f7ff f93e 	bl	80072f8 <_Bfree>
 800807c:	9805      	ldr	r0, [sp, #20]
 800807e:	4641      	mov	r1, r8
 8008080:	f7ff f93a 	bl	80072f8 <_Bfree>
 8008084:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008086:	9805      	ldr	r0, [sp, #20]
 8008088:	f7ff f936 	bl	80072f8 <_Bfree>
 800808c:	9805      	ldr	r0, [sp, #20]
 800808e:	4621      	mov	r1, r4
 8008090:	f7ff f932 	bl	80072f8 <_Bfree>
 8008094:	e5f9      	b.n	8007c8a <_strtod_l+0x72>
 8008096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008098:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800809c:	4293      	cmp	r3, r2
 800809e:	dbbc      	blt.n	800801a <_strtod_l+0x402>
 80080a0:	4c41      	ldr	r4, [pc, #260]	@ (80081a8 <_strtod_l+0x590>)
 80080a2:	f1c5 050f 	rsb	r5, r5, #15
 80080a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80080aa:	4652      	mov	r2, sl
 80080ac:	465b      	mov	r3, fp
 80080ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080b2:	f7f8 faa9 	bl	8000608 <__aeabi_dmul>
 80080b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b8:	1b5d      	subs	r5, r3, r5
 80080ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80080be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80080c2:	e78f      	b.n	8007fe4 <_strtod_l+0x3cc>
 80080c4:	3316      	adds	r3, #22
 80080c6:	dba8      	blt.n	800801a <_strtod_l+0x402>
 80080c8:	4b37      	ldr	r3, [pc, #220]	@ (80081a8 <_strtod_l+0x590>)
 80080ca:	eba9 0808 	sub.w	r8, r9, r8
 80080ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80080d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80080d6:	4650      	mov	r0, sl
 80080d8:	4659      	mov	r1, fp
 80080da:	f7f8 fbbf 	bl	800085c <__aeabi_ddiv>
 80080de:	e783      	b.n	8007fe8 <_strtod_l+0x3d0>
 80080e0:	4b32      	ldr	r3, [pc, #200]	@ (80081ac <_strtod_l+0x594>)
 80080e2:	9308      	str	r3, [sp, #32]
 80080e4:	2300      	movs	r3, #0
 80080e6:	1124      	asrs	r4, r4, #4
 80080e8:	4650      	mov	r0, sl
 80080ea:	4659      	mov	r1, fp
 80080ec:	461e      	mov	r6, r3
 80080ee:	2c01      	cmp	r4, #1
 80080f0:	dc21      	bgt.n	8008136 <_strtod_l+0x51e>
 80080f2:	b10b      	cbz	r3, 80080f8 <_strtod_l+0x4e0>
 80080f4:	4682      	mov	sl, r0
 80080f6:	468b      	mov	fp, r1
 80080f8:	492c      	ldr	r1, [pc, #176]	@ (80081ac <_strtod_l+0x594>)
 80080fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80080fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008102:	4652      	mov	r2, sl
 8008104:	465b      	mov	r3, fp
 8008106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800810a:	f7f8 fa7d 	bl	8000608 <__aeabi_dmul>
 800810e:	4b28      	ldr	r3, [pc, #160]	@ (80081b0 <_strtod_l+0x598>)
 8008110:	460a      	mov	r2, r1
 8008112:	400b      	ands	r3, r1
 8008114:	4927      	ldr	r1, [pc, #156]	@ (80081b4 <_strtod_l+0x59c>)
 8008116:	428b      	cmp	r3, r1
 8008118:	4682      	mov	sl, r0
 800811a:	d898      	bhi.n	800804e <_strtod_l+0x436>
 800811c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008120:	428b      	cmp	r3, r1
 8008122:	bf86      	itte	hi
 8008124:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80081b8 <_strtod_l+0x5a0>
 8008128:	f04f 3aff 	movhi.w	sl, #4294967295
 800812c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008130:	2300      	movs	r3, #0
 8008132:	9308      	str	r3, [sp, #32]
 8008134:	e07a      	b.n	800822c <_strtod_l+0x614>
 8008136:	07e2      	lsls	r2, r4, #31
 8008138:	d505      	bpl.n	8008146 <_strtod_l+0x52e>
 800813a:	9b08      	ldr	r3, [sp, #32]
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f7f8 fa62 	bl	8000608 <__aeabi_dmul>
 8008144:	2301      	movs	r3, #1
 8008146:	9a08      	ldr	r2, [sp, #32]
 8008148:	3208      	adds	r2, #8
 800814a:	3601      	adds	r6, #1
 800814c:	1064      	asrs	r4, r4, #1
 800814e:	9208      	str	r2, [sp, #32]
 8008150:	e7cd      	b.n	80080ee <_strtod_l+0x4d6>
 8008152:	d0ed      	beq.n	8008130 <_strtod_l+0x518>
 8008154:	4264      	negs	r4, r4
 8008156:	f014 020f 	ands.w	r2, r4, #15
 800815a:	d00a      	beq.n	8008172 <_strtod_l+0x55a>
 800815c:	4b12      	ldr	r3, [pc, #72]	@ (80081a8 <_strtod_l+0x590>)
 800815e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008162:	4650      	mov	r0, sl
 8008164:	4659      	mov	r1, fp
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	f7f8 fb77 	bl	800085c <__aeabi_ddiv>
 800816e:	4682      	mov	sl, r0
 8008170:	468b      	mov	fp, r1
 8008172:	1124      	asrs	r4, r4, #4
 8008174:	d0dc      	beq.n	8008130 <_strtod_l+0x518>
 8008176:	2c1f      	cmp	r4, #31
 8008178:	dd20      	ble.n	80081bc <_strtod_l+0x5a4>
 800817a:	2400      	movs	r4, #0
 800817c:	46a0      	mov	r8, r4
 800817e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008180:	46a1      	mov	r9, r4
 8008182:	9a05      	ldr	r2, [sp, #20]
 8008184:	2322      	movs	r3, #34	@ 0x22
 8008186:	f04f 0a00 	mov.w	sl, #0
 800818a:	f04f 0b00 	mov.w	fp, #0
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	e768      	b.n	8008064 <_strtod_l+0x44c>
 8008192:	bf00      	nop
 8008194:	0800b849 	.word	0x0800b849
 8008198:	0800ba5c 	.word	0x0800ba5c
 800819c:	0800b841 	.word	0x0800b841
 80081a0:	0800b878 	.word	0x0800b878
 80081a4:	0800bc05 	.word	0x0800bc05
 80081a8:	0800b990 	.word	0x0800b990
 80081ac:	0800b968 	.word	0x0800b968
 80081b0:	7ff00000 	.word	0x7ff00000
 80081b4:	7ca00000 	.word	0x7ca00000
 80081b8:	7fefffff 	.word	0x7fefffff
 80081bc:	f014 0310 	ands.w	r3, r4, #16
 80081c0:	bf18      	it	ne
 80081c2:	236a      	movne	r3, #106	@ 0x6a
 80081c4:	4ea9      	ldr	r6, [pc, #676]	@ (800846c <_strtod_l+0x854>)
 80081c6:	9308      	str	r3, [sp, #32]
 80081c8:	4650      	mov	r0, sl
 80081ca:	4659      	mov	r1, fp
 80081cc:	2300      	movs	r3, #0
 80081ce:	07e2      	lsls	r2, r4, #31
 80081d0:	d504      	bpl.n	80081dc <_strtod_l+0x5c4>
 80081d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081d6:	f7f8 fa17 	bl	8000608 <__aeabi_dmul>
 80081da:	2301      	movs	r3, #1
 80081dc:	1064      	asrs	r4, r4, #1
 80081de:	f106 0608 	add.w	r6, r6, #8
 80081e2:	d1f4      	bne.n	80081ce <_strtod_l+0x5b6>
 80081e4:	b10b      	cbz	r3, 80081ea <_strtod_l+0x5d2>
 80081e6:	4682      	mov	sl, r0
 80081e8:	468b      	mov	fp, r1
 80081ea:	9b08      	ldr	r3, [sp, #32]
 80081ec:	b1b3      	cbz	r3, 800821c <_strtod_l+0x604>
 80081ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80081f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	4659      	mov	r1, fp
 80081fa:	dd0f      	ble.n	800821c <_strtod_l+0x604>
 80081fc:	2b1f      	cmp	r3, #31
 80081fe:	dd55      	ble.n	80082ac <_strtod_l+0x694>
 8008200:	2b34      	cmp	r3, #52	@ 0x34
 8008202:	bfde      	ittt	le
 8008204:	f04f 33ff 	movle.w	r3, #4294967295
 8008208:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800820c:	4093      	lslle	r3, r2
 800820e:	f04f 0a00 	mov.w	sl, #0
 8008212:	bfcc      	ite	gt
 8008214:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008218:	ea03 0b01 	andle.w	fp, r3, r1
 800821c:	2200      	movs	r2, #0
 800821e:	2300      	movs	r3, #0
 8008220:	4650      	mov	r0, sl
 8008222:	4659      	mov	r1, fp
 8008224:	f7f8 fc58 	bl	8000ad8 <__aeabi_dcmpeq>
 8008228:	2800      	cmp	r0, #0
 800822a:	d1a6      	bne.n	800817a <_strtod_l+0x562>
 800822c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008232:	9805      	ldr	r0, [sp, #20]
 8008234:	462b      	mov	r3, r5
 8008236:	463a      	mov	r2, r7
 8008238:	f7ff f8c6 	bl	80073c8 <__s2b>
 800823c:	900a      	str	r0, [sp, #40]	@ 0x28
 800823e:	2800      	cmp	r0, #0
 8008240:	f43f af05 	beq.w	800804e <_strtod_l+0x436>
 8008244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008246:	2a00      	cmp	r2, #0
 8008248:	eba9 0308 	sub.w	r3, r9, r8
 800824c:	bfa8      	it	ge
 800824e:	2300      	movge	r3, #0
 8008250:	9312      	str	r3, [sp, #72]	@ 0x48
 8008252:	2400      	movs	r4, #0
 8008254:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008258:	9316      	str	r3, [sp, #88]	@ 0x58
 800825a:	46a0      	mov	r8, r4
 800825c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800825e:	9805      	ldr	r0, [sp, #20]
 8008260:	6859      	ldr	r1, [r3, #4]
 8008262:	f7ff f809 	bl	8007278 <_Balloc>
 8008266:	4681      	mov	r9, r0
 8008268:	2800      	cmp	r0, #0
 800826a:	f43f aef4 	beq.w	8008056 <_strtod_l+0x43e>
 800826e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008270:	691a      	ldr	r2, [r3, #16]
 8008272:	3202      	adds	r2, #2
 8008274:	f103 010c 	add.w	r1, r3, #12
 8008278:	0092      	lsls	r2, r2, #2
 800827a:	300c      	adds	r0, #12
 800827c:	f000 ff48 	bl	8009110 <memcpy>
 8008280:	ec4b ab10 	vmov	d0, sl, fp
 8008284:	9805      	ldr	r0, [sp, #20]
 8008286:	aa1c      	add	r2, sp, #112	@ 0x70
 8008288:	a91b      	add	r1, sp, #108	@ 0x6c
 800828a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800828e:	f7ff fbd7 	bl	8007a40 <__d2b>
 8008292:	901a      	str	r0, [sp, #104]	@ 0x68
 8008294:	2800      	cmp	r0, #0
 8008296:	f43f aede 	beq.w	8008056 <_strtod_l+0x43e>
 800829a:	9805      	ldr	r0, [sp, #20]
 800829c:	2101      	movs	r1, #1
 800829e:	f7ff f929 	bl	80074f4 <__i2b>
 80082a2:	4680      	mov	r8, r0
 80082a4:	b948      	cbnz	r0, 80082ba <_strtod_l+0x6a2>
 80082a6:	f04f 0800 	mov.w	r8, #0
 80082aa:	e6d4      	b.n	8008056 <_strtod_l+0x43e>
 80082ac:	f04f 32ff 	mov.w	r2, #4294967295
 80082b0:	fa02 f303 	lsl.w	r3, r2, r3
 80082b4:	ea03 0a0a 	and.w	sl, r3, sl
 80082b8:	e7b0      	b.n	800821c <_strtod_l+0x604>
 80082ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80082bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80082be:	2d00      	cmp	r5, #0
 80082c0:	bfab      	itete	ge
 80082c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80082c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80082c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80082c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80082ca:	bfac      	ite	ge
 80082cc:	18ef      	addge	r7, r5, r3
 80082ce:	1b5e      	sublt	r6, r3, r5
 80082d0:	9b08      	ldr	r3, [sp, #32]
 80082d2:	1aed      	subs	r5, r5, r3
 80082d4:	4415      	add	r5, r2
 80082d6:	4b66      	ldr	r3, [pc, #408]	@ (8008470 <_strtod_l+0x858>)
 80082d8:	3d01      	subs	r5, #1
 80082da:	429d      	cmp	r5, r3
 80082dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80082e0:	da50      	bge.n	8008384 <_strtod_l+0x76c>
 80082e2:	1b5b      	subs	r3, r3, r5
 80082e4:	2b1f      	cmp	r3, #31
 80082e6:	eba2 0203 	sub.w	r2, r2, r3
 80082ea:	f04f 0101 	mov.w	r1, #1
 80082ee:	dc3d      	bgt.n	800836c <_strtod_l+0x754>
 80082f0:	fa01 f303 	lsl.w	r3, r1, r3
 80082f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082f6:	2300      	movs	r3, #0
 80082f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80082fa:	18bd      	adds	r5, r7, r2
 80082fc:	9b08      	ldr	r3, [sp, #32]
 80082fe:	42af      	cmp	r7, r5
 8008300:	4416      	add	r6, r2
 8008302:	441e      	add	r6, r3
 8008304:	463b      	mov	r3, r7
 8008306:	bfa8      	it	ge
 8008308:	462b      	movge	r3, r5
 800830a:	42b3      	cmp	r3, r6
 800830c:	bfa8      	it	ge
 800830e:	4633      	movge	r3, r6
 8008310:	2b00      	cmp	r3, #0
 8008312:	bfc2      	ittt	gt
 8008314:	1aed      	subgt	r5, r5, r3
 8008316:	1af6      	subgt	r6, r6, r3
 8008318:	1aff      	subgt	r7, r7, r3
 800831a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800831c:	2b00      	cmp	r3, #0
 800831e:	dd16      	ble.n	800834e <_strtod_l+0x736>
 8008320:	4641      	mov	r1, r8
 8008322:	9805      	ldr	r0, [sp, #20]
 8008324:	461a      	mov	r2, r3
 8008326:	f7ff f9a5 	bl	8007674 <__pow5mult>
 800832a:	4680      	mov	r8, r0
 800832c:	2800      	cmp	r0, #0
 800832e:	d0ba      	beq.n	80082a6 <_strtod_l+0x68e>
 8008330:	4601      	mov	r1, r0
 8008332:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008334:	9805      	ldr	r0, [sp, #20]
 8008336:	f7ff f8f3 	bl	8007520 <__multiply>
 800833a:	900e      	str	r0, [sp, #56]	@ 0x38
 800833c:	2800      	cmp	r0, #0
 800833e:	f43f ae8a 	beq.w	8008056 <_strtod_l+0x43e>
 8008342:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008344:	9805      	ldr	r0, [sp, #20]
 8008346:	f7fe ffd7 	bl	80072f8 <_Bfree>
 800834a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800834c:	931a      	str	r3, [sp, #104]	@ 0x68
 800834e:	2d00      	cmp	r5, #0
 8008350:	dc1d      	bgt.n	800838e <_strtod_l+0x776>
 8008352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	dd23      	ble.n	80083a0 <_strtod_l+0x788>
 8008358:	4649      	mov	r1, r9
 800835a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800835c:	9805      	ldr	r0, [sp, #20]
 800835e:	f7ff f989 	bl	8007674 <__pow5mult>
 8008362:	4681      	mov	r9, r0
 8008364:	b9e0      	cbnz	r0, 80083a0 <_strtod_l+0x788>
 8008366:	f04f 0900 	mov.w	r9, #0
 800836a:	e674      	b.n	8008056 <_strtod_l+0x43e>
 800836c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008370:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008374:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008378:	35e2      	adds	r5, #226	@ 0xe2
 800837a:	fa01 f305 	lsl.w	r3, r1, r5
 800837e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008380:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008382:	e7ba      	b.n	80082fa <_strtod_l+0x6e2>
 8008384:	2300      	movs	r3, #0
 8008386:	9310      	str	r3, [sp, #64]	@ 0x40
 8008388:	2301      	movs	r3, #1
 800838a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800838c:	e7b5      	b.n	80082fa <_strtod_l+0x6e2>
 800838e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008390:	9805      	ldr	r0, [sp, #20]
 8008392:	462a      	mov	r2, r5
 8008394:	f7ff f9c8 	bl	8007728 <__lshift>
 8008398:	901a      	str	r0, [sp, #104]	@ 0x68
 800839a:	2800      	cmp	r0, #0
 800839c:	d1d9      	bne.n	8008352 <_strtod_l+0x73a>
 800839e:	e65a      	b.n	8008056 <_strtod_l+0x43e>
 80083a0:	2e00      	cmp	r6, #0
 80083a2:	dd07      	ble.n	80083b4 <_strtod_l+0x79c>
 80083a4:	4649      	mov	r1, r9
 80083a6:	9805      	ldr	r0, [sp, #20]
 80083a8:	4632      	mov	r2, r6
 80083aa:	f7ff f9bd 	bl	8007728 <__lshift>
 80083ae:	4681      	mov	r9, r0
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d0d8      	beq.n	8008366 <_strtod_l+0x74e>
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	dd08      	ble.n	80083ca <_strtod_l+0x7b2>
 80083b8:	4641      	mov	r1, r8
 80083ba:	9805      	ldr	r0, [sp, #20]
 80083bc:	463a      	mov	r2, r7
 80083be:	f7ff f9b3 	bl	8007728 <__lshift>
 80083c2:	4680      	mov	r8, r0
 80083c4:	2800      	cmp	r0, #0
 80083c6:	f43f ae46 	beq.w	8008056 <_strtod_l+0x43e>
 80083ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083cc:	9805      	ldr	r0, [sp, #20]
 80083ce:	464a      	mov	r2, r9
 80083d0:	f7ff fa32 	bl	8007838 <__mdiff>
 80083d4:	4604      	mov	r4, r0
 80083d6:	2800      	cmp	r0, #0
 80083d8:	f43f ae3d 	beq.w	8008056 <_strtod_l+0x43e>
 80083dc:	68c3      	ldr	r3, [r0, #12]
 80083de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083e0:	2300      	movs	r3, #0
 80083e2:	60c3      	str	r3, [r0, #12]
 80083e4:	4641      	mov	r1, r8
 80083e6:	f7ff fa0b 	bl	8007800 <__mcmp>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	da46      	bge.n	800847c <_strtod_l+0x864>
 80083ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083f0:	ea53 030a 	orrs.w	r3, r3, sl
 80083f4:	d16c      	bne.n	80084d0 <_strtod_l+0x8b8>
 80083f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d168      	bne.n	80084d0 <_strtod_l+0x8b8>
 80083fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008402:	0d1b      	lsrs	r3, r3, #20
 8008404:	051b      	lsls	r3, r3, #20
 8008406:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800840a:	d961      	bls.n	80084d0 <_strtod_l+0x8b8>
 800840c:	6963      	ldr	r3, [r4, #20]
 800840e:	b913      	cbnz	r3, 8008416 <_strtod_l+0x7fe>
 8008410:	6923      	ldr	r3, [r4, #16]
 8008412:	2b01      	cmp	r3, #1
 8008414:	dd5c      	ble.n	80084d0 <_strtod_l+0x8b8>
 8008416:	4621      	mov	r1, r4
 8008418:	2201      	movs	r2, #1
 800841a:	9805      	ldr	r0, [sp, #20]
 800841c:	f7ff f984 	bl	8007728 <__lshift>
 8008420:	4641      	mov	r1, r8
 8008422:	4604      	mov	r4, r0
 8008424:	f7ff f9ec 	bl	8007800 <__mcmp>
 8008428:	2800      	cmp	r0, #0
 800842a:	dd51      	ble.n	80084d0 <_strtod_l+0x8b8>
 800842c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008430:	9a08      	ldr	r2, [sp, #32]
 8008432:	0d1b      	lsrs	r3, r3, #20
 8008434:	051b      	lsls	r3, r3, #20
 8008436:	2a00      	cmp	r2, #0
 8008438:	d06b      	beq.n	8008512 <_strtod_l+0x8fa>
 800843a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800843e:	d868      	bhi.n	8008512 <_strtod_l+0x8fa>
 8008440:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008444:	f67f ae9d 	bls.w	8008182 <_strtod_l+0x56a>
 8008448:	4b0a      	ldr	r3, [pc, #40]	@ (8008474 <_strtod_l+0x85c>)
 800844a:	4650      	mov	r0, sl
 800844c:	4659      	mov	r1, fp
 800844e:	2200      	movs	r2, #0
 8008450:	f7f8 f8da 	bl	8000608 <__aeabi_dmul>
 8008454:	4b08      	ldr	r3, [pc, #32]	@ (8008478 <_strtod_l+0x860>)
 8008456:	400b      	ands	r3, r1
 8008458:	4682      	mov	sl, r0
 800845a:	468b      	mov	fp, r1
 800845c:	2b00      	cmp	r3, #0
 800845e:	f47f ae05 	bne.w	800806c <_strtod_l+0x454>
 8008462:	9a05      	ldr	r2, [sp, #20]
 8008464:	2322      	movs	r3, #34	@ 0x22
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	e600      	b.n	800806c <_strtod_l+0x454>
 800846a:	bf00      	nop
 800846c:	0800ba88 	.word	0x0800ba88
 8008470:	fffffc02 	.word	0xfffffc02
 8008474:	39500000 	.word	0x39500000
 8008478:	7ff00000 	.word	0x7ff00000
 800847c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008480:	d165      	bne.n	800854e <_strtod_l+0x936>
 8008482:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008488:	b35a      	cbz	r2, 80084e2 <_strtod_l+0x8ca>
 800848a:	4a9f      	ldr	r2, [pc, #636]	@ (8008708 <_strtod_l+0xaf0>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d12b      	bne.n	80084e8 <_strtod_l+0x8d0>
 8008490:	9b08      	ldr	r3, [sp, #32]
 8008492:	4651      	mov	r1, sl
 8008494:	b303      	cbz	r3, 80084d8 <_strtod_l+0x8c0>
 8008496:	4b9d      	ldr	r3, [pc, #628]	@ (800870c <_strtod_l+0xaf4>)
 8008498:	465a      	mov	r2, fp
 800849a:	4013      	ands	r3, r2
 800849c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80084a0:	f04f 32ff 	mov.w	r2, #4294967295
 80084a4:	d81b      	bhi.n	80084de <_strtod_l+0x8c6>
 80084a6:	0d1b      	lsrs	r3, r3, #20
 80084a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80084ac:	fa02 f303 	lsl.w	r3, r2, r3
 80084b0:	4299      	cmp	r1, r3
 80084b2:	d119      	bne.n	80084e8 <_strtod_l+0x8d0>
 80084b4:	4b96      	ldr	r3, [pc, #600]	@ (8008710 <_strtod_l+0xaf8>)
 80084b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d102      	bne.n	80084c2 <_strtod_l+0x8aa>
 80084bc:	3101      	adds	r1, #1
 80084be:	f43f adca 	beq.w	8008056 <_strtod_l+0x43e>
 80084c2:	4b92      	ldr	r3, [pc, #584]	@ (800870c <_strtod_l+0xaf4>)
 80084c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084c6:	401a      	ands	r2, r3
 80084c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80084cc:	f04f 0a00 	mov.w	sl, #0
 80084d0:	9b08      	ldr	r3, [sp, #32]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1b8      	bne.n	8008448 <_strtod_l+0x830>
 80084d6:	e5c9      	b.n	800806c <_strtod_l+0x454>
 80084d8:	f04f 33ff 	mov.w	r3, #4294967295
 80084dc:	e7e8      	b.n	80084b0 <_strtod_l+0x898>
 80084de:	4613      	mov	r3, r2
 80084e0:	e7e6      	b.n	80084b0 <_strtod_l+0x898>
 80084e2:	ea53 030a 	orrs.w	r3, r3, sl
 80084e6:	d0a1      	beq.n	800842c <_strtod_l+0x814>
 80084e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084ea:	b1db      	cbz	r3, 8008524 <_strtod_l+0x90c>
 80084ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084ee:	4213      	tst	r3, r2
 80084f0:	d0ee      	beq.n	80084d0 <_strtod_l+0x8b8>
 80084f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084f4:	9a08      	ldr	r2, [sp, #32]
 80084f6:	4650      	mov	r0, sl
 80084f8:	4659      	mov	r1, fp
 80084fa:	b1bb      	cbz	r3, 800852c <_strtod_l+0x914>
 80084fc:	f7ff fb6e 	bl	8007bdc <sulp>
 8008500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008504:	ec53 2b10 	vmov	r2, r3, d0
 8008508:	f7f7 fec8 	bl	800029c <__adddf3>
 800850c:	4682      	mov	sl, r0
 800850e:	468b      	mov	fp, r1
 8008510:	e7de      	b.n	80084d0 <_strtod_l+0x8b8>
 8008512:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008516:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800851a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800851e:	f04f 3aff 	mov.w	sl, #4294967295
 8008522:	e7d5      	b.n	80084d0 <_strtod_l+0x8b8>
 8008524:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008526:	ea13 0f0a 	tst.w	r3, sl
 800852a:	e7e1      	b.n	80084f0 <_strtod_l+0x8d8>
 800852c:	f7ff fb56 	bl	8007bdc <sulp>
 8008530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008534:	ec53 2b10 	vmov	r2, r3, d0
 8008538:	f7f7 feae 	bl	8000298 <__aeabi_dsub>
 800853c:	2200      	movs	r2, #0
 800853e:	2300      	movs	r3, #0
 8008540:	4682      	mov	sl, r0
 8008542:	468b      	mov	fp, r1
 8008544:	f7f8 fac8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008548:	2800      	cmp	r0, #0
 800854a:	d0c1      	beq.n	80084d0 <_strtod_l+0x8b8>
 800854c:	e619      	b.n	8008182 <_strtod_l+0x56a>
 800854e:	4641      	mov	r1, r8
 8008550:	4620      	mov	r0, r4
 8008552:	f7ff facd 	bl	8007af0 <__ratio>
 8008556:	ec57 6b10 	vmov	r6, r7, d0
 800855a:	2200      	movs	r2, #0
 800855c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008560:	4630      	mov	r0, r6
 8008562:	4639      	mov	r1, r7
 8008564:	f7f8 facc 	bl	8000b00 <__aeabi_dcmple>
 8008568:	2800      	cmp	r0, #0
 800856a:	d06f      	beq.n	800864c <_strtod_l+0xa34>
 800856c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d17a      	bne.n	8008668 <_strtod_l+0xa50>
 8008572:	f1ba 0f00 	cmp.w	sl, #0
 8008576:	d158      	bne.n	800862a <_strtod_l+0xa12>
 8008578:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800857a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800857e:	2b00      	cmp	r3, #0
 8008580:	d15a      	bne.n	8008638 <_strtod_l+0xa20>
 8008582:	4b64      	ldr	r3, [pc, #400]	@ (8008714 <_strtod_l+0xafc>)
 8008584:	2200      	movs	r2, #0
 8008586:	4630      	mov	r0, r6
 8008588:	4639      	mov	r1, r7
 800858a:	f7f8 faaf 	bl	8000aec <__aeabi_dcmplt>
 800858e:	2800      	cmp	r0, #0
 8008590:	d159      	bne.n	8008646 <_strtod_l+0xa2e>
 8008592:	4630      	mov	r0, r6
 8008594:	4639      	mov	r1, r7
 8008596:	4b60      	ldr	r3, [pc, #384]	@ (8008718 <_strtod_l+0xb00>)
 8008598:	2200      	movs	r2, #0
 800859a:	f7f8 f835 	bl	8000608 <__aeabi_dmul>
 800859e:	4606      	mov	r6, r0
 80085a0:	460f      	mov	r7, r1
 80085a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80085a6:	9606      	str	r6, [sp, #24]
 80085a8:	9307      	str	r3, [sp, #28]
 80085aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085ae:	4d57      	ldr	r5, [pc, #348]	@ (800870c <_strtod_l+0xaf4>)
 80085b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80085b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085b6:	401d      	ands	r5, r3
 80085b8:	4b58      	ldr	r3, [pc, #352]	@ (800871c <_strtod_l+0xb04>)
 80085ba:	429d      	cmp	r5, r3
 80085bc:	f040 80b2 	bne.w	8008724 <_strtod_l+0xb0c>
 80085c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80085c6:	ec4b ab10 	vmov	d0, sl, fp
 80085ca:	f7ff f9c9 	bl	8007960 <__ulp>
 80085ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085d2:	ec51 0b10 	vmov	r0, r1, d0
 80085d6:	f7f8 f817 	bl	8000608 <__aeabi_dmul>
 80085da:	4652      	mov	r2, sl
 80085dc:	465b      	mov	r3, fp
 80085de:	f7f7 fe5d 	bl	800029c <__adddf3>
 80085e2:	460b      	mov	r3, r1
 80085e4:	4949      	ldr	r1, [pc, #292]	@ (800870c <_strtod_l+0xaf4>)
 80085e6:	4a4e      	ldr	r2, [pc, #312]	@ (8008720 <_strtod_l+0xb08>)
 80085e8:	4019      	ands	r1, r3
 80085ea:	4291      	cmp	r1, r2
 80085ec:	4682      	mov	sl, r0
 80085ee:	d942      	bls.n	8008676 <_strtod_l+0xa5e>
 80085f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085f2:	4b47      	ldr	r3, [pc, #284]	@ (8008710 <_strtod_l+0xaf8>)
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d103      	bne.n	8008600 <_strtod_l+0x9e8>
 80085f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085fa:	3301      	adds	r3, #1
 80085fc:	f43f ad2b 	beq.w	8008056 <_strtod_l+0x43e>
 8008600:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008710 <_strtod_l+0xaf8>
 8008604:	f04f 3aff 	mov.w	sl, #4294967295
 8008608:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800860a:	9805      	ldr	r0, [sp, #20]
 800860c:	f7fe fe74 	bl	80072f8 <_Bfree>
 8008610:	9805      	ldr	r0, [sp, #20]
 8008612:	4649      	mov	r1, r9
 8008614:	f7fe fe70 	bl	80072f8 <_Bfree>
 8008618:	9805      	ldr	r0, [sp, #20]
 800861a:	4641      	mov	r1, r8
 800861c:	f7fe fe6c 	bl	80072f8 <_Bfree>
 8008620:	9805      	ldr	r0, [sp, #20]
 8008622:	4621      	mov	r1, r4
 8008624:	f7fe fe68 	bl	80072f8 <_Bfree>
 8008628:	e618      	b.n	800825c <_strtod_l+0x644>
 800862a:	f1ba 0f01 	cmp.w	sl, #1
 800862e:	d103      	bne.n	8008638 <_strtod_l+0xa20>
 8008630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008632:	2b00      	cmp	r3, #0
 8008634:	f43f ada5 	beq.w	8008182 <_strtod_l+0x56a>
 8008638:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80086e8 <_strtod_l+0xad0>
 800863c:	4f35      	ldr	r7, [pc, #212]	@ (8008714 <_strtod_l+0xafc>)
 800863e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008642:	2600      	movs	r6, #0
 8008644:	e7b1      	b.n	80085aa <_strtod_l+0x992>
 8008646:	4f34      	ldr	r7, [pc, #208]	@ (8008718 <_strtod_l+0xb00>)
 8008648:	2600      	movs	r6, #0
 800864a:	e7aa      	b.n	80085a2 <_strtod_l+0x98a>
 800864c:	4b32      	ldr	r3, [pc, #200]	@ (8008718 <_strtod_l+0xb00>)
 800864e:	4630      	mov	r0, r6
 8008650:	4639      	mov	r1, r7
 8008652:	2200      	movs	r2, #0
 8008654:	f7f7 ffd8 	bl	8000608 <__aeabi_dmul>
 8008658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800865a:	4606      	mov	r6, r0
 800865c:	460f      	mov	r7, r1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d09f      	beq.n	80085a2 <_strtod_l+0x98a>
 8008662:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008666:	e7a0      	b.n	80085aa <_strtod_l+0x992>
 8008668:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80086f0 <_strtod_l+0xad8>
 800866c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008670:	ec57 6b17 	vmov	r6, r7, d7
 8008674:	e799      	b.n	80085aa <_strtod_l+0x992>
 8008676:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800867a:	9b08      	ldr	r3, [sp, #32]
 800867c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1c1      	bne.n	8008608 <_strtod_l+0x9f0>
 8008684:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008688:	0d1b      	lsrs	r3, r3, #20
 800868a:	051b      	lsls	r3, r3, #20
 800868c:	429d      	cmp	r5, r3
 800868e:	d1bb      	bne.n	8008608 <_strtod_l+0x9f0>
 8008690:	4630      	mov	r0, r6
 8008692:	4639      	mov	r1, r7
 8008694:	f7f8 fb18 	bl	8000cc8 <__aeabi_d2lz>
 8008698:	f7f7 ff88 	bl	80005ac <__aeabi_l2d>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4630      	mov	r0, r6
 80086a2:	4639      	mov	r1, r7
 80086a4:	f7f7 fdf8 	bl	8000298 <__aeabi_dsub>
 80086a8:	460b      	mov	r3, r1
 80086aa:	4602      	mov	r2, r0
 80086ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80086b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80086b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086b6:	ea46 060a 	orr.w	r6, r6, sl
 80086ba:	431e      	orrs	r6, r3
 80086bc:	d06f      	beq.n	800879e <_strtod_l+0xb86>
 80086be:	a30e      	add	r3, pc, #56	@ (adr r3, 80086f8 <_strtod_l+0xae0>)
 80086c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c4:	f7f8 fa12 	bl	8000aec <__aeabi_dcmplt>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	f47f accf 	bne.w	800806c <_strtod_l+0x454>
 80086ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8008700 <_strtod_l+0xae8>)
 80086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086d8:	f7f8 fa26 	bl	8000b28 <__aeabi_dcmpgt>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d093      	beq.n	8008608 <_strtod_l+0x9f0>
 80086e0:	e4c4      	b.n	800806c <_strtod_l+0x454>
 80086e2:	bf00      	nop
 80086e4:	f3af 8000 	nop.w
 80086e8:	00000000 	.word	0x00000000
 80086ec:	bff00000 	.word	0xbff00000
 80086f0:	00000000 	.word	0x00000000
 80086f4:	3ff00000 	.word	0x3ff00000
 80086f8:	94a03595 	.word	0x94a03595
 80086fc:	3fdfffff 	.word	0x3fdfffff
 8008700:	35afe535 	.word	0x35afe535
 8008704:	3fe00000 	.word	0x3fe00000
 8008708:	000fffff 	.word	0x000fffff
 800870c:	7ff00000 	.word	0x7ff00000
 8008710:	7fefffff 	.word	0x7fefffff
 8008714:	3ff00000 	.word	0x3ff00000
 8008718:	3fe00000 	.word	0x3fe00000
 800871c:	7fe00000 	.word	0x7fe00000
 8008720:	7c9fffff 	.word	0x7c9fffff
 8008724:	9b08      	ldr	r3, [sp, #32]
 8008726:	b323      	cbz	r3, 8008772 <_strtod_l+0xb5a>
 8008728:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800872c:	d821      	bhi.n	8008772 <_strtod_l+0xb5a>
 800872e:	a328      	add	r3, pc, #160	@ (adr r3, 80087d0 <_strtod_l+0xbb8>)
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	4630      	mov	r0, r6
 8008736:	4639      	mov	r1, r7
 8008738:	f7f8 f9e2 	bl	8000b00 <__aeabi_dcmple>
 800873c:	b1a0      	cbz	r0, 8008768 <_strtod_l+0xb50>
 800873e:	4639      	mov	r1, r7
 8008740:	4630      	mov	r0, r6
 8008742:	f7f8 fa39 	bl	8000bb8 <__aeabi_d2uiz>
 8008746:	2801      	cmp	r0, #1
 8008748:	bf38      	it	cc
 800874a:	2001      	movcc	r0, #1
 800874c:	f7f7 fee2 	bl	8000514 <__aeabi_ui2d>
 8008750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008752:	4606      	mov	r6, r0
 8008754:	460f      	mov	r7, r1
 8008756:	b9fb      	cbnz	r3, 8008798 <_strtod_l+0xb80>
 8008758:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800875c:	9014      	str	r0, [sp, #80]	@ 0x50
 800875e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008760:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008764:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008768:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800876a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800876e:	1b5b      	subs	r3, r3, r5
 8008770:	9311      	str	r3, [sp, #68]	@ 0x44
 8008772:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008776:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800877a:	f7ff f8f1 	bl	8007960 <__ulp>
 800877e:	4650      	mov	r0, sl
 8008780:	ec53 2b10 	vmov	r2, r3, d0
 8008784:	4659      	mov	r1, fp
 8008786:	f7f7 ff3f 	bl	8000608 <__aeabi_dmul>
 800878a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800878e:	f7f7 fd85 	bl	800029c <__adddf3>
 8008792:	4682      	mov	sl, r0
 8008794:	468b      	mov	fp, r1
 8008796:	e770      	b.n	800867a <_strtod_l+0xa62>
 8008798:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800879c:	e7e0      	b.n	8008760 <_strtod_l+0xb48>
 800879e:	a30e      	add	r3, pc, #56	@ (adr r3, 80087d8 <_strtod_l+0xbc0>)
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f7f8 f9a2 	bl	8000aec <__aeabi_dcmplt>
 80087a8:	e798      	b.n	80086dc <_strtod_l+0xac4>
 80087aa:	2300      	movs	r3, #0
 80087ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80087b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	f7ff ba6d 	b.w	8007c92 <_strtod_l+0x7a>
 80087b8:	2a65      	cmp	r2, #101	@ 0x65
 80087ba:	f43f ab66 	beq.w	8007e8a <_strtod_l+0x272>
 80087be:	2a45      	cmp	r2, #69	@ 0x45
 80087c0:	f43f ab63 	beq.w	8007e8a <_strtod_l+0x272>
 80087c4:	2301      	movs	r3, #1
 80087c6:	f7ff bb9e 	b.w	8007f06 <_strtod_l+0x2ee>
 80087ca:	bf00      	nop
 80087cc:	f3af 8000 	nop.w
 80087d0:	ffc00000 	.word	0xffc00000
 80087d4:	41dfffff 	.word	0x41dfffff
 80087d8:	94a03595 	.word	0x94a03595
 80087dc:	3fcfffff 	.word	0x3fcfffff

080087e0 <_strtod_r>:
 80087e0:	4b01      	ldr	r3, [pc, #4]	@ (80087e8 <_strtod_r+0x8>)
 80087e2:	f7ff ba19 	b.w	8007c18 <_strtod_l>
 80087e6:	bf00      	nop
 80087e8:	20000070 	.word	0x20000070

080087ec <_strtol_l.constprop.0>:
 80087ec:	2b24      	cmp	r3, #36	@ 0x24
 80087ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f2:	4686      	mov	lr, r0
 80087f4:	4690      	mov	r8, r2
 80087f6:	d801      	bhi.n	80087fc <_strtol_l.constprop.0+0x10>
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d106      	bne.n	800880a <_strtol_l.constprop.0+0x1e>
 80087fc:	f7fd fdba 	bl	8006374 <__errno>
 8008800:	2316      	movs	r3, #22
 8008802:	6003      	str	r3, [r0, #0]
 8008804:	2000      	movs	r0, #0
 8008806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880a:	4834      	ldr	r0, [pc, #208]	@ (80088dc <_strtol_l.constprop.0+0xf0>)
 800880c:	460d      	mov	r5, r1
 800880e:	462a      	mov	r2, r5
 8008810:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008814:	5d06      	ldrb	r6, [r0, r4]
 8008816:	f016 0608 	ands.w	r6, r6, #8
 800881a:	d1f8      	bne.n	800880e <_strtol_l.constprop.0+0x22>
 800881c:	2c2d      	cmp	r4, #45	@ 0x2d
 800881e:	d12d      	bne.n	800887c <_strtol_l.constprop.0+0x90>
 8008820:	782c      	ldrb	r4, [r5, #0]
 8008822:	2601      	movs	r6, #1
 8008824:	1c95      	adds	r5, r2, #2
 8008826:	f033 0210 	bics.w	r2, r3, #16
 800882a:	d109      	bne.n	8008840 <_strtol_l.constprop.0+0x54>
 800882c:	2c30      	cmp	r4, #48	@ 0x30
 800882e:	d12a      	bne.n	8008886 <_strtol_l.constprop.0+0x9a>
 8008830:	782a      	ldrb	r2, [r5, #0]
 8008832:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008836:	2a58      	cmp	r2, #88	@ 0x58
 8008838:	d125      	bne.n	8008886 <_strtol_l.constprop.0+0x9a>
 800883a:	786c      	ldrb	r4, [r5, #1]
 800883c:	2310      	movs	r3, #16
 800883e:	3502      	adds	r5, #2
 8008840:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008844:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008848:	2200      	movs	r2, #0
 800884a:	fbbc f9f3 	udiv	r9, ip, r3
 800884e:	4610      	mov	r0, r2
 8008850:	fb03 ca19 	mls	sl, r3, r9, ip
 8008854:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008858:	2f09      	cmp	r7, #9
 800885a:	d81b      	bhi.n	8008894 <_strtol_l.constprop.0+0xa8>
 800885c:	463c      	mov	r4, r7
 800885e:	42a3      	cmp	r3, r4
 8008860:	dd27      	ble.n	80088b2 <_strtol_l.constprop.0+0xc6>
 8008862:	1c57      	adds	r7, r2, #1
 8008864:	d007      	beq.n	8008876 <_strtol_l.constprop.0+0x8a>
 8008866:	4581      	cmp	r9, r0
 8008868:	d320      	bcc.n	80088ac <_strtol_l.constprop.0+0xc0>
 800886a:	d101      	bne.n	8008870 <_strtol_l.constprop.0+0x84>
 800886c:	45a2      	cmp	sl, r4
 800886e:	db1d      	blt.n	80088ac <_strtol_l.constprop.0+0xc0>
 8008870:	fb00 4003 	mla	r0, r0, r3, r4
 8008874:	2201      	movs	r2, #1
 8008876:	f815 4b01 	ldrb.w	r4, [r5], #1
 800887a:	e7eb      	b.n	8008854 <_strtol_l.constprop.0+0x68>
 800887c:	2c2b      	cmp	r4, #43	@ 0x2b
 800887e:	bf04      	itt	eq
 8008880:	782c      	ldrbeq	r4, [r5, #0]
 8008882:	1c95      	addeq	r5, r2, #2
 8008884:	e7cf      	b.n	8008826 <_strtol_l.constprop.0+0x3a>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1da      	bne.n	8008840 <_strtol_l.constprop.0+0x54>
 800888a:	2c30      	cmp	r4, #48	@ 0x30
 800888c:	bf0c      	ite	eq
 800888e:	2308      	moveq	r3, #8
 8008890:	230a      	movne	r3, #10
 8008892:	e7d5      	b.n	8008840 <_strtol_l.constprop.0+0x54>
 8008894:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008898:	2f19      	cmp	r7, #25
 800889a:	d801      	bhi.n	80088a0 <_strtol_l.constprop.0+0xb4>
 800889c:	3c37      	subs	r4, #55	@ 0x37
 800889e:	e7de      	b.n	800885e <_strtol_l.constprop.0+0x72>
 80088a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80088a4:	2f19      	cmp	r7, #25
 80088a6:	d804      	bhi.n	80088b2 <_strtol_l.constprop.0+0xc6>
 80088a8:	3c57      	subs	r4, #87	@ 0x57
 80088aa:	e7d8      	b.n	800885e <_strtol_l.constprop.0+0x72>
 80088ac:	f04f 32ff 	mov.w	r2, #4294967295
 80088b0:	e7e1      	b.n	8008876 <_strtol_l.constprop.0+0x8a>
 80088b2:	1c53      	adds	r3, r2, #1
 80088b4:	d108      	bne.n	80088c8 <_strtol_l.constprop.0+0xdc>
 80088b6:	2322      	movs	r3, #34	@ 0x22
 80088b8:	f8ce 3000 	str.w	r3, [lr]
 80088bc:	4660      	mov	r0, ip
 80088be:	f1b8 0f00 	cmp.w	r8, #0
 80088c2:	d0a0      	beq.n	8008806 <_strtol_l.constprop.0+0x1a>
 80088c4:	1e69      	subs	r1, r5, #1
 80088c6:	e006      	b.n	80088d6 <_strtol_l.constprop.0+0xea>
 80088c8:	b106      	cbz	r6, 80088cc <_strtol_l.constprop.0+0xe0>
 80088ca:	4240      	negs	r0, r0
 80088cc:	f1b8 0f00 	cmp.w	r8, #0
 80088d0:	d099      	beq.n	8008806 <_strtol_l.constprop.0+0x1a>
 80088d2:	2a00      	cmp	r2, #0
 80088d4:	d1f6      	bne.n	80088c4 <_strtol_l.constprop.0+0xd8>
 80088d6:	f8c8 1000 	str.w	r1, [r8]
 80088da:	e794      	b.n	8008806 <_strtol_l.constprop.0+0x1a>
 80088dc:	0800bab1 	.word	0x0800bab1

080088e0 <_strtol_r>:
 80088e0:	f7ff bf84 	b.w	80087ec <_strtol_l.constprop.0>

080088e4 <__ssputs_r>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	688e      	ldr	r6, [r1, #8]
 80088ea:	461f      	mov	r7, r3
 80088ec:	42be      	cmp	r6, r7
 80088ee:	680b      	ldr	r3, [r1, #0]
 80088f0:	4682      	mov	sl, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	4690      	mov	r8, r2
 80088f6:	d82d      	bhi.n	8008954 <__ssputs_r+0x70>
 80088f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008900:	d026      	beq.n	8008950 <__ssputs_r+0x6c>
 8008902:	6965      	ldr	r5, [r4, #20]
 8008904:	6909      	ldr	r1, [r1, #16]
 8008906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800890a:	eba3 0901 	sub.w	r9, r3, r1
 800890e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008912:	1c7b      	adds	r3, r7, #1
 8008914:	444b      	add	r3, r9
 8008916:	106d      	asrs	r5, r5, #1
 8008918:	429d      	cmp	r5, r3
 800891a:	bf38      	it	cc
 800891c:	461d      	movcc	r5, r3
 800891e:	0553      	lsls	r3, r2, #21
 8008920:	d527      	bpl.n	8008972 <__ssputs_r+0x8e>
 8008922:	4629      	mov	r1, r5
 8008924:	f7fe fc1c 	bl	8007160 <_malloc_r>
 8008928:	4606      	mov	r6, r0
 800892a:	b360      	cbz	r0, 8008986 <__ssputs_r+0xa2>
 800892c:	6921      	ldr	r1, [r4, #16]
 800892e:	464a      	mov	r2, r9
 8008930:	f000 fbee 	bl	8009110 <memcpy>
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800893a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	6126      	str	r6, [r4, #16]
 8008942:	6165      	str	r5, [r4, #20]
 8008944:	444e      	add	r6, r9
 8008946:	eba5 0509 	sub.w	r5, r5, r9
 800894a:	6026      	str	r6, [r4, #0]
 800894c:	60a5      	str	r5, [r4, #8]
 800894e:	463e      	mov	r6, r7
 8008950:	42be      	cmp	r6, r7
 8008952:	d900      	bls.n	8008956 <__ssputs_r+0x72>
 8008954:	463e      	mov	r6, r7
 8008956:	6820      	ldr	r0, [r4, #0]
 8008958:	4632      	mov	r2, r6
 800895a:	4641      	mov	r1, r8
 800895c:	f000 fb9c 	bl	8009098 <memmove>
 8008960:	68a3      	ldr	r3, [r4, #8]
 8008962:	1b9b      	subs	r3, r3, r6
 8008964:	60a3      	str	r3, [r4, #8]
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	4433      	add	r3, r6
 800896a:	6023      	str	r3, [r4, #0]
 800896c:	2000      	movs	r0, #0
 800896e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008972:	462a      	mov	r2, r5
 8008974:	f000 ff61 	bl	800983a <_realloc_r>
 8008978:	4606      	mov	r6, r0
 800897a:	2800      	cmp	r0, #0
 800897c:	d1e0      	bne.n	8008940 <__ssputs_r+0x5c>
 800897e:	6921      	ldr	r1, [r4, #16]
 8008980:	4650      	mov	r0, sl
 8008982:	f7fe fb79 	bl	8007078 <_free_r>
 8008986:	230c      	movs	r3, #12
 8008988:	f8ca 3000 	str.w	r3, [sl]
 800898c:	89a3      	ldrh	r3, [r4, #12]
 800898e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008992:	81a3      	strh	r3, [r4, #12]
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	e7e9      	b.n	800896e <__ssputs_r+0x8a>
	...

0800899c <_svfiprintf_r>:
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	4698      	mov	r8, r3
 80089a2:	898b      	ldrh	r3, [r1, #12]
 80089a4:	061b      	lsls	r3, r3, #24
 80089a6:	b09d      	sub	sp, #116	@ 0x74
 80089a8:	4607      	mov	r7, r0
 80089aa:	460d      	mov	r5, r1
 80089ac:	4614      	mov	r4, r2
 80089ae:	d510      	bpl.n	80089d2 <_svfiprintf_r+0x36>
 80089b0:	690b      	ldr	r3, [r1, #16]
 80089b2:	b973      	cbnz	r3, 80089d2 <_svfiprintf_r+0x36>
 80089b4:	2140      	movs	r1, #64	@ 0x40
 80089b6:	f7fe fbd3 	bl	8007160 <_malloc_r>
 80089ba:	6028      	str	r0, [r5, #0]
 80089bc:	6128      	str	r0, [r5, #16]
 80089be:	b930      	cbnz	r0, 80089ce <_svfiprintf_r+0x32>
 80089c0:	230c      	movs	r3, #12
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	b01d      	add	sp, #116	@ 0x74
 80089ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ce:	2340      	movs	r3, #64	@ 0x40
 80089d0:	616b      	str	r3, [r5, #20]
 80089d2:	2300      	movs	r3, #0
 80089d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089d6:	2320      	movs	r3, #32
 80089d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80089e0:	2330      	movs	r3, #48	@ 0x30
 80089e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b80 <_svfiprintf_r+0x1e4>
 80089e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089ea:	f04f 0901 	mov.w	r9, #1
 80089ee:	4623      	mov	r3, r4
 80089f0:	469a      	mov	sl, r3
 80089f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089f6:	b10a      	cbz	r2, 80089fc <_svfiprintf_r+0x60>
 80089f8:	2a25      	cmp	r2, #37	@ 0x25
 80089fa:	d1f9      	bne.n	80089f0 <_svfiprintf_r+0x54>
 80089fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008a00:	d00b      	beq.n	8008a1a <_svfiprintf_r+0x7e>
 8008a02:	465b      	mov	r3, fp
 8008a04:	4622      	mov	r2, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f7ff ff6b 	bl	80088e4 <__ssputs_r>
 8008a0e:	3001      	adds	r0, #1
 8008a10:	f000 80a7 	beq.w	8008b62 <_svfiprintf_r+0x1c6>
 8008a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a16:	445a      	add	r2, fp
 8008a18:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 809f 	beq.w	8008b62 <_svfiprintf_r+0x1c6>
 8008a24:	2300      	movs	r3, #0
 8008a26:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a2e:	f10a 0a01 	add.w	sl, sl, #1
 8008a32:	9304      	str	r3, [sp, #16]
 8008a34:	9307      	str	r3, [sp, #28]
 8008a36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a3c:	4654      	mov	r4, sl
 8008a3e:	2205      	movs	r2, #5
 8008a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a44:	484e      	ldr	r0, [pc, #312]	@ (8008b80 <_svfiprintf_r+0x1e4>)
 8008a46:	f7f7 fbcb 	bl	80001e0 <memchr>
 8008a4a:	9a04      	ldr	r2, [sp, #16]
 8008a4c:	b9d8      	cbnz	r0, 8008a86 <_svfiprintf_r+0xea>
 8008a4e:	06d0      	lsls	r0, r2, #27
 8008a50:	bf44      	itt	mi
 8008a52:	2320      	movmi	r3, #32
 8008a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a58:	0711      	lsls	r1, r2, #28
 8008a5a:	bf44      	itt	mi
 8008a5c:	232b      	movmi	r3, #43	@ 0x2b
 8008a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a62:	f89a 3000 	ldrb.w	r3, [sl]
 8008a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a68:	d015      	beq.n	8008a96 <_svfiprintf_r+0xfa>
 8008a6a:	9a07      	ldr	r2, [sp, #28]
 8008a6c:	4654      	mov	r4, sl
 8008a6e:	2000      	movs	r0, #0
 8008a70:	f04f 0c0a 	mov.w	ip, #10
 8008a74:	4621      	mov	r1, r4
 8008a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a7a:	3b30      	subs	r3, #48	@ 0x30
 8008a7c:	2b09      	cmp	r3, #9
 8008a7e:	d94b      	bls.n	8008b18 <_svfiprintf_r+0x17c>
 8008a80:	b1b0      	cbz	r0, 8008ab0 <_svfiprintf_r+0x114>
 8008a82:	9207      	str	r2, [sp, #28]
 8008a84:	e014      	b.n	8008ab0 <_svfiprintf_r+0x114>
 8008a86:	eba0 0308 	sub.w	r3, r0, r8
 8008a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	46a2      	mov	sl, r4
 8008a94:	e7d2      	b.n	8008a3c <_svfiprintf_r+0xa0>
 8008a96:	9b03      	ldr	r3, [sp, #12]
 8008a98:	1d19      	adds	r1, r3, #4
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	9103      	str	r1, [sp, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bfbb      	ittet	lt
 8008aa2:	425b      	neglt	r3, r3
 8008aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8008aa8:	9307      	strge	r3, [sp, #28]
 8008aaa:	9307      	strlt	r3, [sp, #28]
 8008aac:	bfb8      	it	lt
 8008aae:	9204      	strlt	r2, [sp, #16]
 8008ab0:	7823      	ldrb	r3, [r4, #0]
 8008ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ab4:	d10a      	bne.n	8008acc <_svfiprintf_r+0x130>
 8008ab6:	7863      	ldrb	r3, [r4, #1]
 8008ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aba:	d132      	bne.n	8008b22 <_svfiprintf_r+0x186>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	1d1a      	adds	r2, r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	9203      	str	r2, [sp, #12]
 8008ac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ac8:	3402      	adds	r4, #2
 8008aca:	9305      	str	r3, [sp, #20]
 8008acc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b90 <_svfiprintf_r+0x1f4>
 8008ad0:	7821      	ldrb	r1, [r4, #0]
 8008ad2:	2203      	movs	r2, #3
 8008ad4:	4650      	mov	r0, sl
 8008ad6:	f7f7 fb83 	bl	80001e0 <memchr>
 8008ada:	b138      	cbz	r0, 8008aec <_svfiprintf_r+0x150>
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	eba0 000a 	sub.w	r0, r0, sl
 8008ae2:	2240      	movs	r2, #64	@ 0x40
 8008ae4:	4082      	lsls	r2, r0
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	3401      	adds	r4, #1
 8008aea:	9304      	str	r3, [sp, #16]
 8008aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af0:	4824      	ldr	r0, [pc, #144]	@ (8008b84 <_svfiprintf_r+0x1e8>)
 8008af2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008af6:	2206      	movs	r2, #6
 8008af8:	f7f7 fb72 	bl	80001e0 <memchr>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d036      	beq.n	8008b6e <_svfiprintf_r+0x1d2>
 8008b00:	4b21      	ldr	r3, [pc, #132]	@ (8008b88 <_svfiprintf_r+0x1ec>)
 8008b02:	bb1b      	cbnz	r3, 8008b4c <_svfiprintf_r+0x1b0>
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	3307      	adds	r3, #7
 8008b08:	f023 0307 	bic.w	r3, r3, #7
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	9303      	str	r3, [sp, #12]
 8008b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b12:	4433      	add	r3, r6
 8008b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b16:	e76a      	b.n	80089ee <_svfiprintf_r+0x52>
 8008b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	2001      	movs	r0, #1
 8008b20:	e7a8      	b.n	8008a74 <_svfiprintf_r+0xd8>
 8008b22:	2300      	movs	r3, #0
 8008b24:	3401      	adds	r4, #1
 8008b26:	9305      	str	r3, [sp, #20]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f04f 0c0a 	mov.w	ip, #10
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b34:	3a30      	subs	r2, #48	@ 0x30
 8008b36:	2a09      	cmp	r2, #9
 8008b38:	d903      	bls.n	8008b42 <_svfiprintf_r+0x1a6>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0c6      	beq.n	8008acc <_svfiprintf_r+0x130>
 8008b3e:	9105      	str	r1, [sp, #20]
 8008b40:	e7c4      	b.n	8008acc <_svfiprintf_r+0x130>
 8008b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b46:	4604      	mov	r4, r0
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e7f0      	b.n	8008b2e <_svfiprintf_r+0x192>
 8008b4c:	ab03      	add	r3, sp, #12
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	462a      	mov	r2, r5
 8008b52:	4b0e      	ldr	r3, [pc, #56]	@ (8008b8c <_svfiprintf_r+0x1f0>)
 8008b54:	a904      	add	r1, sp, #16
 8008b56:	4638      	mov	r0, r7
 8008b58:	f7fc fcb6 	bl	80054c8 <_printf_float>
 8008b5c:	1c42      	adds	r2, r0, #1
 8008b5e:	4606      	mov	r6, r0
 8008b60:	d1d6      	bne.n	8008b10 <_svfiprintf_r+0x174>
 8008b62:	89ab      	ldrh	r3, [r5, #12]
 8008b64:	065b      	lsls	r3, r3, #25
 8008b66:	f53f af2d 	bmi.w	80089c4 <_svfiprintf_r+0x28>
 8008b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b6c:	e72c      	b.n	80089c8 <_svfiprintf_r+0x2c>
 8008b6e:	ab03      	add	r3, sp, #12
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	462a      	mov	r2, r5
 8008b74:	4b05      	ldr	r3, [pc, #20]	@ (8008b8c <_svfiprintf_r+0x1f0>)
 8008b76:	a904      	add	r1, sp, #16
 8008b78:	4638      	mov	r0, r7
 8008b7a:	f7fc ff3d 	bl	80059f8 <_printf_i>
 8008b7e:	e7ed      	b.n	8008b5c <_svfiprintf_r+0x1c0>
 8008b80:	0800bbb1 	.word	0x0800bbb1
 8008b84:	0800bbbb 	.word	0x0800bbbb
 8008b88:	080054c9 	.word	0x080054c9
 8008b8c:	080088e5 	.word	0x080088e5
 8008b90:	0800bbb7 	.word	0x0800bbb7

08008b94 <__sfputc_r>:
 8008b94:	6893      	ldr	r3, [r2, #8]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	b410      	push	{r4}
 8008b9c:	6093      	str	r3, [r2, #8]
 8008b9e:	da08      	bge.n	8008bb2 <__sfputc_r+0x1e>
 8008ba0:	6994      	ldr	r4, [r2, #24]
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	db01      	blt.n	8008baa <__sfputc_r+0x16>
 8008ba6:	290a      	cmp	r1, #10
 8008ba8:	d103      	bne.n	8008bb2 <__sfputc_r+0x1e>
 8008baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bae:	f000 b9df 	b.w	8008f70 <__swbuf_r>
 8008bb2:	6813      	ldr	r3, [r2, #0]
 8008bb4:	1c58      	adds	r0, r3, #1
 8008bb6:	6010      	str	r0, [r2, #0]
 8008bb8:	7019      	strb	r1, [r3, #0]
 8008bba:	4608      	mov	r0, r1
 8008bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <__sfputs_r>:
 8008bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	460f      	mov	r7, r1
 8008bc8:	4614      	mov	r4, r2
 8008bca:	18d5      	adds	r5, r2, r3
 8008bcc:	42ac      	cmp	r4, r5
 8008bce:	d101      	bne.n	8008bd4 <__sfputs_r+0x12>
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e007      	b.n	8008be4 <__sfputs_r+0x22>
 8008bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd8:	463a      	mov	r2, r7
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7ff ffda 	bl	8008b94 <__sfputc_r>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d1f3      	bne.n	8008bcc <__sfputs_r+0xa>
 8008be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008be8 <_vfiprintf_r>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	460d      	mov	r5, r1
 8008bee:	b09d      	sub	sp, #116	@ 0x74
 8008bf0:	4614      	mov	r4, r2
 8008bf2:	4698      	mov	r8, r3
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	b118      	cbz	r0, 8008c00 <_vfiprintf_r+0x18>
 8008bf8:	6a03      	ldr	r3, [r0, #32]
 8008bfa:	b90b      	cbnz	r3, 8008c00 <_vfiprintf_r+0x18>
 8008bfc:	f7fd fabc 	bl	8006178 <__sinit>
 8008c00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c02:	07d9      	lsls	r1, r3, #31
 8008c04:	d405      	bmi.n	8008c12 <_vfiprintf_r+0x2a>
 8008c06:	89ab      	ldrh	r3, [r5, #12]
 8008c08:	059a      	lsls	r2, r3, #22
 8008c0a:	d402      	bmi.n	8008c12 <_vfiprintf_r+0x2a>
 8008c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c0e:	f7fd fbdc 	bl	80063ca <__retarget_lock_acquire_recursive>
 8008c12:	89ab      	ldrh	r3, [r5, #12]
 8008c14:	071b      	lsls	r3, r3, #28
 8008c16:	d501      	bpl.n	8008c1c <_vfiprintf_r+0x34>
 8008c18:	692b      	ldr	r3, [r5, #16]
 8008c1a:	b99b      	cbnz	r3, 8008c44 <_vfiprintf_r+0x5c>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f000 f9e4 	bl	8008fec <__swsetup_r>
 8008c24:	b170      	cbz	r0, 8008c44 <_vfiprintf_r+0x5c>
 8008c26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c28:	07dc      	lsls	r4, r3, #31
 8008c2a:	d504      	bpl.n	8008c36 <_vfiprintf_r+0x4e>
 8008c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c30:	b01d      	add	sp, #116	@ 0x74
 8008c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	0598      	lsls	r0, r3, #22
 8008c3a:	d4f7      	bmi.n	8008c2c <_vfiprintf_r+0x44>
 8008c3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c3e:	f7fd fbc5 	bl	80063cc <__retarget_lock_release_recursive>
 8008c42:	e7f3      	b.n	8008c2c <_vfiprintf_r+0x44>
 8008c44:	2300      	movs	r3, #0
 8008c46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c48:	2320      	movs	r3, #32
 8008c4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c52:	2330      	movs	r3, #48	@ 0x30
 8008c54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e04 <_vfiprintf_r+0x21c>
 8008c58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c5c:	f04f 0901 	mov.w	r9, #1
 8008c60:	4623      	mov	r3, r4
 8008c62:	469a      	mov	sl, r3
 8008c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c68:	b10a      	cbz	r2, 8008c6e <_vfiprintf_r+0x86>
 8008c6a:	2a25      	cmp	r2, #37	@ 0x25
 8008c6c:	d1f9      	bne.n	8008c62 <_vfiprintf_r+0x7a>
 8008c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8008c72:	d00b      	beq.n	8008c8c <_vfiprintf_r+0xa4>
 8008c74:	465b      	mov	r3, fp
 8008c76:	4622      	mov	r2, r4
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f7ff ffa1 	bl	8008bc2 <__sfputs_r>
 8008c80:	3001      	adds	r0, #1
 8008c82:	f000 80a7 	beq.w	8008dd4 <_vfiprintf_r+0x1ec>
 8008c86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c88:	445a      	add	r2, fp
 8008c8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 809f 	beq.w	8008dd4 <_vfiprintf_r+0x1ec>
 8008c96:	2300      	movs	r3, #0
 8008c98:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ca0:	f10a 0a01 	add.w	sl, sl, #1
 8008ca4:	9304      	str	r3, [sp, #16]
 8008ca6:	9307      	str	r3, [sp, #28]
 8008ca8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cac:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cae:	4654      	mov	r4, sl
 8008cb0:	2205      	movs	r2, #5
 8008cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb6:	4853      	ldr	r0, [pc, #332]	@ (8008e04 <_vfiprintf_r+0x21c>)
 8008cb8:	f7f7 fa92 	bl	80001e0 <memchr>
 8008cbc:	9a04      	ldr	r2, [sp, #16]
 8008cbe:	b9d8      	cbnz	r0, 8008cf8 <_vfiprintf_r+0x110>
 8008cc0:	06d1      	lsls	r1, r2, #27
 8008cc2:	bf44      	itt	mi
 8008cc4:	2320      	movmi	r3, #32
 8008cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cca:	0713      	lsls	r3, r2, #28
 8008ccc:	bf44      	itt	mi
 8008cce:	232b      	movmi	r3, #43	@ 0x2b
 8008cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cda:	d015      	beq.n	8008d08 <_vfiprintf_r+0x120>
 8008cdc:	9a07      	ldr	r2, [sp, #28]
 8008cde:	4654      	mov	r4, sl
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f04f 0c0a 	mov.w	ip, #10
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cec:	3b30      	subs	r3, #48	@ 0x30
 8008cee:	2b09      	cmp	r3, #9
 8008cf0:	d94b      	bls.n	8008d8a <_vfiprintf_r+0x1a2>
 8008cf2:	b1b0      	cbz	r0, 8008d22 <_vfiprintf_r+0x13a>
 8008cf4:	9207      	str	r2, [sp, #28]
 8008cf6:	e014      	b.n	8008d22 <_vfiprintf_r+0x13a>
 8008cf8:	eba0 0308 	sub.w	r3, r0, r8
 8008cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8008d00:	4313      	orrs	r3, r2
 8008d02:	9304      	str	r3, [sp, #16]
 8008d04:	46a2      	mov	sl, r4
 8008d06:	e7d2      	b.n	8008cae <_vfiprintf_r+0xc6>
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	1d19      	adds	r1, r3, #4
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	9103      	str	r1, [sp, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bfbb      	ittet	lt
 8008d14:	425b      	neglt	r3, r3
 8008d16:	f042 0202 	orrlt.w	r2, r2, #2
 8008d1a:	9307      	strge	r3, [sp, #28]
 8008d1c:	9307      	strlt	r3, [sp, #28]
 8008d1e:	bfb8      	it	lt
 8008d20:	9204      	strlt	r2, [sp, #16]
 8008d22:	7823      	ldrb	r3, [r4, #0]
 8008d24:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d26:	d10a      	bne.n	8008d3e <_vfiprintf_r+0x156>
 8008d28:	7863      	ldrb	r3, [r4, #1]
 8008d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d2c:	d132      	bne.n	8008d94 <_vfiprintf_r+0x1ac>
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	1d1a      	adds	r2, r3, #4
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	9203      	str	r2, [sp, #12]
 8008d36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d3a:	3402      	adds	r4, #2
 8008d3c:	9305      	str	r3, [sp, #20]
 8008d3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e14 <_vfiprintf_r+0x22c>
 8008d42:	7821      	ldrb	r1, [r4, #0]
 8008d44:	2203      	movs	r2, #3
 8008d46:	4650      	mov	r0, sl
 8008d48:	f7f7 fa4a 	bl	80001e0 <memchr>
 8008d4c:	b138      	cbz	r0, 8008d5e <_vfiprintf_r+0x176>
 8008d4e:	9b04      	ldr	r3, [sp, #16]
 8008d50:	eba0 000a 	sub.w	r0, r0, sl
 8008d54:	2240      	movs	r2, #64	@ 0x40
 8008d56:	4082      	lsls	r2, r0
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	3401      	adds	r4, #1
 8008d5c:	9304      	str	r3, [sp, #16]
 8008d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d62:	4829      	ldr	r0, [pc, #164]	@ (8008e08 <_vfiprintf_r+0x220>)
 8008d64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d68:	2206      	movs	r2, #6
 8008d6a:	f7f7 fa39 	bl	80001e0 <memchr>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d03f      	beq.n	8008df2 <_vfiprintf_r+0x20a>
 8008d72:	4b26      	ldr	r3, [pc, #152]	@ (8008e0c <_vfiprintf_r+0x224>)
 8008d74:	bb1b      	cbnz	r3, 8008dbe <_vfiprintf_r+0x1d6>
 8008d76:	9b03      	ldr	r3, [sp, #12]
 8008d78:	3307      	adds	r3, #7
 8008d7a:	f023 0307 	bic.w	r3, r3, #7
 8008d7e:	3308      	adds	r3, #8
 8008d80:	9303      	str	r3, [sp, #12]
 8008d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d84:	443b      	add	r3, r7
 8008d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d88:	e76a      	b.n	8008c60 <_vfiprintf_r+0x78>
 8008d8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d8e:	460c      	mov	r4, r1
 8008d90:	2001      	movs	r0, #1
 8008d92:	e7a8      	b.n	8008ce6 <_vfiprintf_r+0xfe>
 8008d94:	2300      	movs	r3, #0
 8008d96:	3401      	adds	r4, #1
 8008d98:	9305      	str	r3, [sp, #20]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	f04f 0c0a 	mov.w	ip, #10
 8008da0:	4620      	mov	r0, r4
 8008da2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008da6:	3a30      	subs	r2, #48	@ 0x30
 8008da8:	2a09      	cmp	r2, #9
 8008daa:	d903      	bls.n	8008db4 <_vfiprintf_r+0x1cc>
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d0c6      	beq.n	8008d3e <_vfiprintf_r+0x156>
 8008db0:	9105      	str	r1, [sp, #20]
 8008db2:	e7c4      	b.n	8008d3e <_vfiprintf_r+0x156>
 8008db4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008db8:	4604      	mov	r4, r0
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e7f0      	b.n	8008da0 <_vfiprintf_r+0x1b8>
 8008dbe:	ab03      	add	r3, sp, #12
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	462a      	mov	r2, r5
 8008dc4:	4b12      	ldr	r3, [pc, #72]	@ (8008e10 <_vfiprintf_r+0x228>)
 8008dc6:	a904      	add	r1, sp, #16
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f7fc fb7d 	bl	80054c8 <_printf_float>
 8008dce:	4607      	mov	r7, r0
 8008dd0:	1c78      	adds	r0, r7, #1
 8008dd2:	d1d6      	bne.n	8008d82 <_vfiprintf_r+0x19a>
 8008dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dd6:	07d9      	lsls	r1, r3, #31
 8008dd8:	d405      	bmi.n	8008de6 <_vfiprintf_r+0x1fe>
 8008dda:	89ab      	ldrh	r3, [r5, #12]
 8008ddc:	059a      	lsls	r2, r3, #22
 8008dde:	d402      	bmi.n	8008de6 <_vfiprintf_r+0x1fe>
 8008de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008de2:	f7fd faf3 	bl	80063cc <__retarget_lock_release_recursive>
 8008de6:	89ab      	ldrh	r3, [r5, #12]
 8008de8:	065b      	lsls	r3, r3, #25
 8008dea:	f53f af1f 	bmi.w	8008c2c <_vfiprintf_r+0x44>
 8008dee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008df0:	e71e      	b.n	8008c30 <_vfiprintf_r+0x48>
 8008df2:	ab03      	add	r3, sp, #12
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	462a      	mov	r2, r5
 8008df8:	4b05      	ldr	r3, [pc, #20]	@ (8008e10 <_vfiprintf_r+0x228>)
 8008dfa:	a904      	add	r1, sp, #16
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7fc fdfb 	bl	80059f8 <_printf_i>
 8008e02:	e7e4      	b.n	8008dce <_vfiprintf_r+0x1e6>
 8008e04:	0800bbb1 	.word	0x0800bbb1
 8008e08:	0800bbbb 	.word	0x0800bbbb
 8008e0c:	080054c9 	.word	0x080054c9
 8008e10:	08008bc3 	.word	0x08008bc3
 8008e14:	0800bbb7 	.word	0x0800bbb7

08008e18 <__sflush_r>:
 8008e18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e20:	0716      	lsls	r6, r2, #28
 8008e22:	4605      	mov	r5, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	d454      	bmi.n	8008ed2 <__sflush_r+0xba>
 8008e28:	684b      	ldr	r3, [r1, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	dc02      	bgt.n	8008e34 <__sflush_r+0x1c>
 8008e2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	dd48      	ble.n	8008ec6 <__sflush_r+0xae>
 8008e34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e36:	2e00      	cmp	r6, #0
 8008e38:	d045      	beq.n	8008ec6 <__sflush_r+0xae>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e40:	682f      	ldr	r7, [r5, #0]
 8008e42:	6a21      	ldr	r1, [r4, #32]
 8008e44:	602b      	str	r3, [r5, #0]
 8008e46:	d030      	beq.n	8008eaa <__sflush_r+0x92>
 8008e48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	0759      	lsls	r1, r3, #29
 8008e4e:	d505      	bpl.n	8008e5c <__sflush_r+0x44>
 8008e50:	6863      	ldr	r3, [r4, #4]
 8008e52:	1ad2      	subs	r2, r2, r3
 8008e54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e56:	b10b      	cbz	r3, 8008e5c <__sflush_r+0x44>
 8008e58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e5a:	1ad2      	subs	r2, r2, r3
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e60:	6a21      	ldr	r1, [r4, #32]
 8008e62:	4628      	mov	r0, r5
 8008e64:	47b0      	blx	r6
 8008e66:	1c43      	adds	r3, r0, #1
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	d106      	bne.n	8008e7a <__sflush_r+0x62>
 8008e6c:	6829      	ldr	r1, [r5, #0]
 8008e6e:	291d      	cmp	r1, #29
 8008e70:	d82b      	bhi.n	8008eca <__sflush_r+0xb2>
 8008e72:	4a2a      	ldr	r2, [pc, #168]	@ (8008f1c <__sflush_r+0x104>)
 8008e74:	410a      	asrs	r2, r1
 8008e76:	07d6      	lsls	r6, r2, #31
 8008e78:	d427      	bmi.n	8008eca <__sflush_r+0xb2>
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	6062      	str	r2, [r4, #4]
 8008e7e:	04d9      	lsls	r1, r3, #19
 8008e80:	6922      	ldr	r2, [r4, #16]
 8008e82:	6022      	str	r2, [r4, #0]
 8008e84:	d504      	bpl.n	8008e90 <__sflush_r+0x78>
 8008e86:	1c42      	adds	r2, r0, #1
 8008e88:	d101      	bne.n	8008e8e <__sflush_r+0x76>
 8008e8a:	682b      	ldr	r3, [r5, #0]
 8008e8c:	b903      	cbnz	r3, 8008e90 <__sflush_r+0x78>
 8008e8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e92:	602f      	str	r7, [r5, #0]
 8008e94:	b1b9      	cbz	r1, 8008ec6 <__sflush_r+0xae>
 8008e96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e9a:	4299      	cmp	r1, r3
 8008e9c:	d002      	beq.n	8008ea4 <__sflush_r+0x8c>
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f7fe f8ea 	bl	8007078 <_free_r>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ea8:	e00d      	b.n	8008ec6 <__sflush_r+0xae>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b0      	blx	r6
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	1c50      	adds	r0, r2, #1
 8008eb4:	d1c9      	bne.n	8008e4a <__sflush_r+0x32>
 8008eb6:	682b      	ldr	r3, [r5, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0c6      	beq.n	8008e4a <__sflush_r+0x32>
 8008ebc:	2b1d      	cmp	r3, #29
 8008ebe:	d001      	beq.n	8008ec4 <__sflush_r+0xac>
 8008ec0:	2b16      	cmp	r3, #22
 8008ec2:	d11e      	bne.n	8008f02 <__sflush_r+0xea>
 8008ec4:	602f      	str	r7, [r5, #0]
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	e022      	b.n	8008f10 <__sflush_r+0xf8>
 8008eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ece:	b21b      	sxth	r3, r3
 8008ed0:	e01b      	b.n	8008f0a <__sflush_r+0xf2>
 8008ed2:	690f      	ldr	r7, [r1, #16]
 8008ed4:	2f00      	cmp	r7, #0
 8008ed6:	d0f6      	beq.n	8008ec6 <__sflush_r+0xae>
 8008ed8:	0793      	lsls	r3, r2, #30
 8008eda:	680e      	ldr	r6, [r1, #0]
 8008edc:	bf08      	it	eq
 8008ede:	694b      	ldreq	r3, [r1, #20]
 8008ee0:	600f      	str	r7, [r1, #0]
 8008ee2:	bf18      	it	ne
 8008ee4:	2300      	movne	r3, #0
 8008ee6:	eba6 0807 	sub.w	r8, r6, r7
 8008eea:	608b      	str	r3, [r1, #8]
 8008eec:	f1b8 0f00 	cmp.w	r8, #0
 8008ef0:	dde9      	ble.n	8008ec6 <__sflush_r+0xae>
 8008ef2:	6a21      	ldr	r1, [r4, #32]
 8008ef4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ef6:	4643      	mov	r3, r8
 8008ef8:	463a      	mov	r2, r7
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b0      	blx	r6
 8008efe:	2800      	cmp	r0, #0
 8008f00:	dc08      	bgt.n	8008f14 <__sflush_r+0xfc>
 8008f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f0a:	81a3      	strh	r3, [r4, #12]
 8008f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f14:	4407      	add	r7, r0
 8008f16:	eba8 0800 	sub.w	r8, r8, r0
 8008f1a:	e7e7      	b.n	8008eec <__sflush_r+0xd4>
 8008f1c:	dfbffffe 	.word	0xdfbffffe

08008f20 <_fflush_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	690b      	ldr	r3, [r1, #16]
 8008f24:	4605      	mov	r5, r0
 8008f26:	460c      	mov	r4, r1
 8008f28:	b913      	cbnz	r3, 8008f30 <_fflush_r+0x10>
 8008f2a:	2500      	movs	r5, #0
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
 8008f30:	b118      	cbz	r0, 8008f3a <_fflush_r+0x1a>
 8008f32:	6a03      	ldr	r3, [r0, #32]
 8008f34:	b90b      	cbnz	r3, 8008f3a <_fflush_r+0x1a>
 8008f36:	f7fd f91f 	bl	8006178 <__sinit>
 8008f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d0f3      	beq.n	8008f2a <_fflush_r+0xa>
 8008f42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f44:	07d0      	lsls	r0, r2, #31
 8008f46:	d404      	bmi.n	8008f52 <_fflush_r+0x32>
 8008f48:	0599      	lsls	r1, r3, #22
 8008f4a:	d402      	bmi.n	8008f52 <_fflush_r+0x32>
 8008f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f4e:	f7fd fa3c 	bl	80063ca <__retarget_lock_acquire_recursive>
 8008f52:	4628      	mov	r0, r5
 8008f54:	4621      	mov	r1, r4
 8008f56:	f7ff ff5f 	bl	8008e18 <__sflush_r>
 8008f5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f5c:	07da      	lsls	r2, r3, #31
 8008f5e:	4605      	mov	r5, r0
 8008f60:	d4e4      	bmi.n	8008f2c <_fflush_r+0xc>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	059b      	lsls	r3, r3, #22
 8008f66:	d4e1      	bmi.n	8008f2c <_fflush_r+0xc>
 8008f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f6a:	f7fd fa2f 	bl	80063cc <__retarget_lock_release_recursive>
 8008f6e:	e7dd      	b.n	8008f2c <_fflush_r+0xc>

08008f70 <__swbuf_r>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	460e      	mov	r6, r1
 8008f74:	4614      	mov	r4, r2
 8008f76:	4605      	mov	r5, r0
 8008f78:	b118      	cbz	r0, 8008f82 <__swbuf_r+0x12>
 8008f7a:	6a03      	ldr	r3, [r0, #32]
 8008f7c:	b90b      	cbnz	r3, 8008f82 <__swbuf_r+0x12>
 8008f7e:	f7fd f8fb 	bl	8006178 <__sinit>
 8008f82:	69a3      	ldr	r3, [r4, #24]
 8008f84:	60a3      	str	r3, [r4, #8]
 8008f86:	89a3      	ldrh	r3, [r4, #12]
 8008f88:	071a      	lsls	r2, r3, #28
 8008f8a:	d501      	bpl.n	8008f90 <__swbuf_r+0x20>
 8008f8c:	6923      	ldr	r3, [r4, #16]
 8008f8e:	b943      	cbnz	r3, 8008fa2 <__swbuf_r+0x32>
 8008f90:	4621      	mov	r1, r4
 8008f92:	4628      	mov	r0, r5
 8008f94:	f000 f82a 	bl	8008fec <__swsetup_r>
 8008f98:	b118      	cbz	r0, 8008fa2 <__swbuf_r+0x32>
 8008f9a:	f04f 37ff 	mov.w	r7, #4294967295
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	6922      	ldr	r2, [r4, #16]
 8008fa6:	1a98      	subs	r0, r3, r2
 8008fa8:	6963      	ldr	r3, [r4, #20]
 8008faa:	b2f6      	uxtb	r6, r6
 8008fac:	4283      	cmp	r3, r0
 8008fae:	4637      	mov	r7, r6
 8008fb0:	dc05      	bgt.n	8008fbe <__swbuf_r+0x4e>
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	f7ff ffb3 	bl	8008f20 <_fflush_r>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d1ed      	bne.n	8008f9a <__swbuf_r+0x2a>
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	60a3      	str	r3, [r4, #8]
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	6022      	str	r2, [r4, #0]
 8008fca:	701e      	strb	r6, [r3, #0]
 8008fcc:	6962      	ldr	r2, [r4, #20]
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d004      	beq.n	8008fde <__swbuf_r+0x6e>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	07db      	lsls	r3, r3, #31
 8008fd8:	d5e1      	bpl.n	8008f9e <__swbuf_r+0x2e>
 8008fda:	2e0a      	cmp	r6, #10
 8008fdc:	d1df      	bne.n	8008f9e <__swbuf_r+0x2e>
 8008fde:	4621      	mov	r1, r4
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f7ff ff9d 	bl	8008f20 <_fflush_r>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d0d9      	beq.n	8008f9e <__swbuf_r+0x2e>
 8008fea:	e7d6      	b.n	8008f9a <__swbuf_r+0x2a>

08008fec <__swsetup_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	4b29      	ldr	r3, [pc, #164]	@ (8009094 <__swsetup_r+0xa8>)
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	6818      	ldr	r0, [r3, #0]
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	b118      	cbz	r0, 8009000 <__swsetup_r+0x14>
 8008ff8:	6a03      	ldr	r3, [r0, #32]
 8008ffa:	b90b      	cbnz	r3, 8009000 <__swsetup_r+0x14>
 8008ffc:	f7fd f8bc 	bl	8006178 <__sinit>
 8009000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009004:	0719      	lsls	r1, r3, #28
 8009006:	d422      	bmi.n	800904e <__swsetup_r+0x62>
 8009008:	06da      	lsls	r2, r3, #27
 800900a:	d407      	bmi.n	800901c <__swsetup_r+0x30>
 800900c:	2209      	movs	r2, #9
 800900e:	602a      	str	r2, [r5, #0]
 8009010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009014:	81a3      	strh	r3, [r4, #12]
 8009016:	f04f 30ff 	mov.w	r0, #4294967295
 800901a:	e033      	b.n	8009084 <__swsetup_r+0x98>
 800901c:	0758      	lsls	r0, r3, #29
 800901e:	d512      	bpl.n	8009046 <__swsetup_r+0x5a>
 8009020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009022:	b141      	cbz	r1, 8009036 <__swsetup_r+0x4a>
 8009024:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009028:	4299      	cmp	r1, r3
 800902a:	d002      	beq.n	8009032 <__swsetup_r+0x46>
 800902c:	4628      	mov	r0, r5
 800902e:	f7fe f823 	bl	8007078 <_free_r>
 8009032:	2300      	movs	r3, #0
 8009034:	6363      	str	r3, [r4, #52]	@ 0x34
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800903c:	81a3      	strh	r3, [r4, #12]
 800903e:	2300      	movs	r3, #0
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	6923      	ldr	r3, [r4, #16]
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	f043 0308 	orr.w	r3, r3, #8
 800904c:	81a3      	strh	r3, [r4, #12]
 800904e:	6923      	ldr	r3, [r4, #16]
 8009050:	b94b      	cbnz	r3, 8009066 <__swsetup_r+0x7a>
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800905c:	d003      	beq.n	8009066 <__swsetup_r+0x7a>
 800905e:	4621      	mov	r1, r4
 8009060:	4628      	mov	r0, r5
 8009062:	f000 fc5d 	bl	8009920 <__smakebuf_r>
 8009066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800906a:	f013 0201 	ands.w	r2, r3, #1
 800906e:	d00a      	beq.n	8009086 <__swsetup_r+0x9a>
 8009070:	2200      	movs	r2, #0
 8009072:	60a2      	str	r2, [r4, #8]
 8009074:	6962      	ldr	r2, [r4, #20]
 8009076:	4252      	negs	r2, r2
 8009078:	61a2      	str	r2, [r4, #24]
 800907a:	6922      	ldr	r2, [r4, #16]
 800907c:	b942      	cbnz	r2, 8009090 <__swsetup_r+0xa4>
 800907e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009082:	d1c5      	bne.n	8009010 <__swsetup_r+0x24>
 8009084:	bd38      	pop	{r3, r4, r5, pc}
 8009086:	0799      	lsls	r1, r3, #30
 8009088:	bf58      	it	pl
 800908a:	6962      	ldrpl	r2, [r4, #20]
 800908c:	60a2      	str	r2, [r4, #8]
 800908e:	e7f4      	b.n	800907a <__swsetup_r+0x8e>
 8009090:	2000      	movs	r0, #0
 8009092:	e7f7      	b.n	8009084 <__swsetup_r+0x98>
 8009094:	20000020 	.word	0x20000020

08009098 <memmove>:
 8009098:	4288      	cmp	r0, r1
 800909a:	b510      	push	{r4, lr}
 800909c:	eb01 0402 	add.w	r4, r1, r2
 80090a0:	d902      	bls.n	80090a8 <memmove+0x10>
 80090a2:	4284      	cmp	r4, r0
 80090a4:	4623      	mov	r3, r4
 80090a6:	d807      	bhi.n	80090b8 <memmove+0x20>
 80090a8:	1e43      	subs	r3, r0, #1
 80090aa:	42a1      	cmp	r1, r4
 80090ac:	d008      	beq.n	80090c0 <memmove+0x28>
 80090ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090b6:	e7f8      	b.n	80090aa <memmove+0x12>
 80090b8:	4402      	add	r2, r0
 80090ba:	4601      	mov	r1, r0
 80090bc:	428a      	cmp	r2, r1
 80090be:	d100      	bne.n	80090c2 <memmove+0x2a>
 80090c0:	bd10      	pop	{r4, pc}
 80090c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090ca:	e7f7      	b.n	80090bc <memmove+0x24>

080090cc <strncmp>:
 80090cc:	b510      	push	{r4, lr}
 80090ce:	b16a      	cbz	r2, 80090ec <strncmp+0x20>
 80090d0:	3901      	subs	r1, #1
 80090d2:	1884      	adds	r4, r0, r2
 80090d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090dc:	429a      	cmp	r2, r3
 80090de:	d103      	bne.n	80090e8 <strncmp+0x1c>
 80090e0:	42a0      	cmp	r0, r4
 80090e2:	d001      	beq.n	80090e8 <strncmp+0x1c>
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	d1f5      	bne.n	80090d4 <strncmp+0x8>
 80090e8:	1ad0      	subs	r0, r2, r3
 80090ea:	bd10      	pop	{r4, pc}
 80090ec:	4610      	mov	r0, r2
 80090ee:	e7fc      	b.n	80090ea <strncmp+0x1e>

080090f0 <_sbrk_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4d06      	ldr	r5, [pc, #24]	@ (800910c <_sbrk_r+0x1c>)
 80090f4:	2300      	movs	r3, #0
 80090f6:	4604      	mov	r4, r0
 80090f8:	4608      	mov	r0, r1
 80090fa:	602b      	str	r3, [r5, #0]
 80090fc:	f7f8 ffce 	bl	800209c <_sbrk>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_sbrk_r+0x1a>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b103      	cbz	r3, 800910a <_sbrk_r+0x1a>
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	200004c0 	.word	0x200004c0

08009110 <memcpy>:
 8009110:	440a      	add	r2, r1
 8009112:	4291      	cmp	r1, r2
 8009114:	f100 33ff 	add.w	r3, r0, #4294967295
 8009118:	d100      	bne.n	800911c <memcpy+0xc>
 800911a:	4770      	bx	lr
 800911c:	b510      	push	{r4, lr}
 800911e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009126:	4291      	cmp	r1, r2
 8009128:	d1f9      	bne.n	800911e <memcpy+0xe>
 800912a:	bd10      	pop	{r4, pc}
 800912c:	0000      	movs	r0, r0
	...

08009130 <nan>:
 8009130:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009138 <nan+0x8>
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	00000000 	.word	0x00000000
 800913c:	7ff80000 	.word	0x7ff80000

08009140 <__assert_func>:
 8009140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009142:	4614      	mov	r4, r2
 8009144:	461a      	mov	r2, r3
 8009146:	4b09      	ldr	r3, [pc, #36]	@ (800916c <__assert_func+0x2c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4605      	mov	r5, r0
 800914c:	68d8      	ldr	r0, [r3, #12]
 800914e:	b954      	cbnz	r4, 8009166 <__assert_func+0x26>
 8009150:	4b07      	ldr	r3, [pc, #28]	@ (8009170 <__assert_func+0x30>)
 8009152:	461c      	mov	r4, r3
 8009154:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009158:	9100      	str	r1, [sp, #0]
 800915a:	462b      	mov	r3, r5
 800915c:	4905      	ldr	r1, [pc, #20]	@ (8009174 <__assert_func+0x34>)
 800915e:	f000 fba7 	bl	80098b0 <fiprintf>
 8009162:	f000 fc3b 	bl	80099dc <abort>
 8009166:	4b04      	ldr	r3, [pc, #16]	@ (8009178 <__assert_func+0x38>)
 8009168:	e7f4      	b.n	8009154 <__assert_func+0x14>
 800916a:	bf00      	nop
 800916c:	20000020 	.word	0x20000020
 8009170:	0800bc05 	.word	0x0800bc05
 8009174:	0800bbd7 	.word	0x0800bbd7
 8009178:	0800bbca 	.word	0x0800bbca

0800917c <_calloc_r>:
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	fba1 5402 	umull	r5, r4, r1, r2
 8009182:	b93c      	cbnz	r4, 8009194 <_calloc_r+0x18>
 8009184:	4629      	mov	r1, r5
 8009186:	f7fd ffeb 	bl	8007160 <_malloc_r>
 800918a:	4606      	mov	r6, r0
 800918c:	b928      	cbnz	r0, 800919a <_calloc_r+0x1e>
 800918e:	2600      	movs	r6, #0
 8009190:	4630      	mov	r0, r6
 8009192:	bd70      	pop	{r4, r5, r6, pc}
 8009194:	220c      	movs	r2, #12
 8009196:	6002      	str	r2, [r0, #0]
 8009198:	e7f9      	b.n	800918e <_calloc_r+0x12>
 800919a:	462a      	mov	r2, r5
 800919c:	4621      	mov	r1, r4
 800919e:	f7fd f896 	bl	80062ce <memset>
 80091a2:	e7f5      	b.n	8009190 <_calloc_r+0x14>

080091a4 <rshift>:
 80091a4:	6903      	ldr	r3, [r0, #16]
 80091a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80091aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80091b2:	f100 0414 	add.w	r4, r0, #20
 80091b6:	dd45      	ble.n	8009244 <rshift+0xa0>
 80091b8:	f011 011f 	ands.w	r1, r1, #31
 80091bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091c4:	d10c      	bne.n	80091e0 <rshift+0x3c>
 80091c6:	f100 0710 	add.w	r7, r0, #16
 80091ca:	4629      	mov	r1, r5
 80091cc:	42b1      	cmp	r1, r6
 80091ce:	d334      	bcc.n	800923a <rshift+0x96>
 80091d0:	1a9b      	subs	r3, r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	1eea      	subs	r2, r5, #3
 80091d6:	4296      	cmp	r6, r2
 80091d8:	bf38      	it	cc
 80091da:	2300      	movcc	r3, #0
 80091dc:	4423      	add	r3, r4
 80091de:	e015      	b.n	800920c <rshift+0x68>
 80091e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091e4:	f1c1 0820 	rsb	r8, r1, #32
 80091e8:	40cf      	lsrs	r7, r1
 80091ea:	f105 0e04 	add.w	lr, r5, #4
 80091ee:	46a1      	mov	r9, r4
 80091f0:	4576      	cmp	r6, lr
 80091f2:	46f4      	mov	ip, lr
 80091f4:	d815      	bhi.n	8009222 <rshift+0x7e>
 80091f6:	1a9a      	subs	r2, r3, r2
 80091f8:	0092      	lsls	r2, r2, #2
 80091fa:	3a04      	subs	r2, #4
 80091fc:	3501      	adds	r5, #1
 80091fe:	42ae      	cmp	r6, r5
 8009200:	bf38      	it	cc
 8009202:	2200      	movcc	r2, #0
 8009204:	18a3      	adds	r3, r4, r2
 8009206:	50a7      	str	r7, [r4, r2]
 8009208:	b107      	cbz	r7, 800920c <rshift+0x68>
 800920a:	3304      	adds	r3, #4
 800920c:	1b1a      	subs	r2, r3, r4
 800920e:	42a3      	cmp	r3, r4
 8009210:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009214:	bf08      	it	eq
 8009216:	2300      	moveq	r3, #0
 8009218:	6102      	str	r2, [r0, #16]
 800921a:	bf08      	it	eq
 800921c:	6143      	streq	r3, [r0, #20]
 800921e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009222:	f8dc c000 	ldr.w	ip, [ip]
 8009226:	fa0c fc08 	lsl.w	ip, ip, r8
 800922a:	ea4c 0707 	orr.w	r7, ip, r7
 800922e:	f849 7b04 	str.w	r7, [r9], #4
 8009232:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009236:	40cf      	lsrs	r7, r1
 8009238:	e7da      	b.n	80091f0 <rshift+0x4c>
 800923a:	f851 cb04 	ldr.w	ip, [r1], #4
 800923e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009242:	e7c3      	b.n	80091cc <rshift+0x28>
 8009244:	4623      	mov	r3, r4
 8009246:	e7e1      	b.n	800920c <rshift+0x68>

08009248 <__hexdig_fun>:
 8009248:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800924c:	2b09      	cmp	r3, #9
 800924e:	d802      	bhi.n	8009256 <__hexdig_fun+0xe>
 8009250:	3820      	subs	r0, #32
 8009252:	b2c0      	uxtb	r0, r0
 8009254:	4770      	bx	lr
 8009256:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800925a:	2b05      	cmp	r3, #5
 800925c:	d801      	bhi.n	8009262 <__hexdig_fun+0x1a>
 800925e:	3847      	subs	r0, #71	@ 0x47
 8009260:	e7f7      	b.n	8009252 <__hexdig_fun+0xa>
 8009262:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009266:	2b05      	cmp	r3, #5
 8009268:	d801      	bhi.n	800926e <__hexdig_fun+0x26>
 800926a:	3827      	subs	r0, #39	@ 0x27
 800926c:	e7f1      	b.n	8009252 <__hexdig_fun+0xa>
 800926e:	2000      	movs	r0, #0
 8009270:	4770      	bx	lr
	...

08009274 <__gethex>:
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	b085      	sub	sp, #20
 800927a:	468a      	mov	sl, r1
 800927c:	9302      	str	r3, [sp, #8]
 800927e:	680b      	ldr	r3, [r1, #0]
 8009280:	9001      	str	r0, [sp, #4]
 8009282:	4690      	mov	r8, r2
 8009284:	1c9c      	adds	r4, r3, #2
 8009286:	46a1      	mov	r9, r4
 8009288:	f814 0b01 	ldrb.w	r0, [r4], #1
 800928c:	2830      	cmp	r0, #48	@ 0x30
 800928e:	d0fa      	beq.n	8009286 <__gethex+0x12>
 8009290:	eba9 0303 	sub.w	r3, r9, r3
 8009294:	f1a3 0b02 	sub.w	fp, r3, #2
 8009298:	f7ff ffd6 	bl	8009248 <__hexdig_fun>
 800929c:	4605      	mov	r5, r0
 800929e:	2800      	cmp	r0, #0
 80092a0:	d168      	bne.n	8009374 <__gethex+0x100>
 80092a2:	49a0      	ldr	r1, [pc, #640]	@ (8009524 <__gethex+0x2b0>)
 80092a4:	2201      	movs	r2, #1
 80092a6:	4648      	mov	r0, r9
 80092a8:	f7ff ff10 	bl	80090cc <strncmp>
 80092ac:	4607      	mov	r7, r0
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d167      	bne.n	8009382 <__gethex+0x10e>
 80092b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80092b6:	4626      	mov	r6, r4
 80092b8:	f7ff ffc6 	bl	8009248 <__hexdig_fun>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d062      	beq.n	8009386 <__gethex+0x112>
 80092c0:	4623      	mov	r3, r4
 80092c2:	7818      	ldrb	r0, [r3, #0]
 80092c4:	2830      	cmp	r0, #48	@ 0x30
 80092c6:	4699      	mov	r9, r3
 80092c8:	f103 0301 	add.w	r3, r3, #1
 80092cc:	d0f9      	beq.n	80092c2 <__gethex+0x4e>
 80092ce:	f7ff ffbb 	bl	8009248 <__hexdig_fun>
 80092d2:	fab0 f580 	clz	r5, r0
 80092d6:	096d      	lsrs	r5, r5, #5
 80092d8:	f04f 0b01 	mov.w	fp, #1
 80092dc:	464a      	mov	r2, r9
 80092de:	4616      	mov	r6, r2
 80092e0:	3201      	adds	r2, #1
 80092e2:	7830      	ldrb	r0, [r6, #0]
 80092e4:	f7ff ffb0 	bl	8009248 <__hexdig_fun>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d1f8      	bne.n	80092de <__gethex+0x6a>
 80092ec:	498d      	ldr	r1, [pc, #564]	@ (8009524 <__gethex+0x2b0>)
 80092ee:	2201      	movs	r2, #1
 80092f0:	4630      	mov	r0, r6
 80092f2:	f7ff feeb 	bl	80090cc <strncmp>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d13f      	bne.n	800937a <__gethex+0x106>
 80092fa:	b944      	cbnz	r4, 800930e <__gethex+0x9a>
 80092fc:	1c74      	adds	r4, r6, #1
 80092fe:	4622      	mov	r2, r4
 8009300:	4616      	mov	r6, r2
 8009302:	3201      	adds	r2, #1
 8009304:	7830      	ldrb	r0, [r6, #0]
 8009306:	f7ff ff9f 	bl	8009248 <__hexdig_fun>
 800930a:	2800      	cmp	r0, #0
 800930c:	d1f8      	bne.n	8009300 <__gethex+0x8c>
 800930e:	1ba4      	subs	r4, r4, r6
 8009310:	00a7      	lsls	r7, r4, #2
 8009312:	7833      	ldrb	r3, [r6, #0]
 8009314:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009318:	2b50      	cmp	r3, #80	@ 0x50
 800931a:	d13e      	bne.n	800939a <__gethex+0x126>
 800931c:	7873      	ldrb	r3, [r6, #1]
 800931e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009320:	d033      	beq.n	800938a <__gethex+0x116>
 8009322:	2b2d      	cmp	r3, #45	@ 0x2d
 8009324:	d034      	beq.n	8009390 <__gethex+0x11c>
 8009326:	1c71      	adds	r1, r6, #1
 8009328:	2400      	movs	r4, #0
 800932a:	7808      	ldrb	r0, [r1, #0]
 800932c:	f7ff ff8c 	bl	8009248 <__hexdig_fun>
 8009330:	1e43      	subs	r3, r0, #1
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b18      	cmp	r3, #24
 8009336:	d830      	bhi.n	800939a <__gethex+0x126>
 8009338:	f1a0 0210 	sub.w	r2, r0, #16
 800933c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009340:	f7ff ff82 	bl	8009248 <__hexdig_fun>
 8009344:	f100 3cff 	add.w	ip, r0, #4294967295
 8009348:	fa5f fc8c 	uxtb.w	ip, ip
 800934c:	f1bc 0f18 	cmp.w	ip, #24
 8009350:	f04f 030a 	mov.w	r3, #10
 8009354:	d91e      	bls.n	8009394 <__gethex+0x120>
 8009356:	b104      	cbz	r4, 800935a <__gethex+0xe6>
 8009358:	4252      	negs	r2, r2
 800935a:	4417      	add	r7, r2
 800935c:	f8ca 1000 	str.w	r1, [sl]
 8009360:	b1ed      	cbz	r5, 800939e <__gethex+0x12a>
 8009362:	f1bb 0f00 	cmp.w	fp, #0
 8009366:	bf0c      	ite	eq
 8009368:	2506      	moveq	r5, #6
 800936a:	2500      	movne	r5, #0
 800936c:	4628      	mov	r0, r5
 800936e:	b005      	add	sp, #20
 8009370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009374:	2500      	movs	r5, #0
 8009376:	462c      	mov	r4, r5
 8009378:	e7b0      	b.n	80092dc <__gethex+0x68>
 800937a:	2c00      	cmp	r4, #0
 800937c:	d1c7      	bne.n	800930e <__gethex+0x9a>
 800937e:	4627      	mov	r7, r4
 8009380:	e7c7      	b.n	8009312 <__gethex+0x9e>
 8009382:	464e      	mov	r6, r9
 8009384:	462f      	mov	r7, r5
 8009386:	2501      	movs	r5, #1
 8009388:	e7c3      	b.n	8009312 <__gethex+0x9e>
 800938a:	2400      	movs	r4, #0
 800938c:	1cb1      	adds	r1, r6, #2
 800938e:	e7cc      	b.n	800932a <__gethex+0xb6>
 8009390:	2401      	movs	r4, #1
 8009392:	e7fb      	b.n	800938c <__gethex+0x118>
 8009394:	fb03 0002 	mla	r0, r3, r2, r0
 8009398:	e7ce      	b.n	8009338 <__gethex+0xc4>
 800939a:	4631      	mov	r1, r6
 800939c:	e7de      	b.n	800935c <__gethex+0xe8>
 800939e:	eba6 0309 	sub.w	r3, r6, r9
 80093a2:	3b01      	subs	r3, #1
 80093a4:	4629      	mov	r1, r5
 80093a6:	2b07      	cmp	r3, #7
 80093a8:	dc0a      	bgt.n	80093c0 <__gethex+0x14c>
 80093aa:	9801      	ldr	r0, [sp, #4]
 80093ac:	f7fd ff64 	bl	8007278 <_Balloc>
 80093b0:	4604      	mov	r4, r0
 80093b2:	b940      	cbnz	r0, 80093c6 <__gethex+0x152>
 80093b4:	4b5c      	ldr	r3, [pc, #368]	@ (8009528 <__gethex+0x2b4>)
 80093b6:	4602      	mov	r2, r0
 80093b8:	21e4      	movs	r1, #228	@ 0xe4
 80093ba:	485c      	ldr	r0, [pc, #368]	@ (800952c <__gethex+0x2b8>)
 80093bc:	f7ff fec0 	bl	8009140 <__assert_func>
 80093c0:	3101      	adds	r1, #1
 80093c2:	105b      	asrs	r3, r3, #1
 80093c4:	e7ef      	b.n	80093a6 <__gethex+0x132>
 80093c6:	f100 0a14 	add.w	sl, r0, #20
 80093ca:	2300      	movs	r3, #0
 80093cc:	4655      	mov	r5, sl
 80093ce:	469b      	mov	fp, r3
 80093d0:	45b1      	cmp	r9, r6
 80093d2:	d337      	bcc.n	8009444 <__gethex+0x1d0>
 80093d4:	f845 bb04 	str.w	fp, [r5], #4
 80093d8:	eba5 050a 	sub.w	r5, r5, sl
 80093dc:	10ad      	asrs	r5, r5, #2
 80093de:	6125      	str	r5, [r4, #16]
 80093e0:	4658      	mov	r0, fp
 80093e2:	f7fe f83b 	bl	800745c <__hi0bits>
 80093e6:	016d      	lsls	r5, r5, #5
 80093e8:	f8d8 6000 	ldr.w	r6, [r8]
 80093ec:	1a2d      	subs	r5, r5, r0
 80093ee:	42b5      	cmp	r5, r6
 80093f0:	dd54      	ble.n	800949c <__gethex+0x228>
 80093f2:	1bad      	subs	r5, r5, r6
 80093f4:	4629      	mov	r1, r5
 80093f6:	4620      	mov	r0, r4
 80093f8:	f7fe fbcf 	bl	8007b9a <__any_on>
 80093fc:	4681      	mov	r9, r0
 80093fe:	b178      	cbz	r0, 8009420 <__gethex+0x1ac>
 8009400:	1e6b      	subs	r3, r5, #1
 8009402:	1159      	asrs	r1, r3, #5
 8009404:	f003 021f 	and.w	r2, r3, #31
 8009408:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800940c:	f04f 0901 	mov.w	r9, #1
 8009410:	fa09 f202 	lsl.w	r2, r9, r2
 8009414:	420a      	tst	r2, r1
 8009416:	d003      	beq.n	8009420 <__gethex+0x1ac>
 8009418:	454b      	cmp	r3, r9
 800941a:	dc36      	bgt.n	800948a <__gethex+0x216>
 800941c:	f04f 0902 	mov.w	r9, #2
 8009420:	4629      	mov	r1, r5
 8009422:	4620      	mov	r0, r4
 8009424:	f7ff febe 	bl	80091a4 <rshift>
 8009428:	442f      	add	r7, r5
 800942a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800942e:	42bb      	cmp	r3, r7
 8009430:	da42      	bge.n	80094b8 <__gethex+0x244>
 8009432:	9801      	ldr	r0, [sp, #4]
 8009434:	4621      	mov	r1, r4
 8009436:	f7fd ff5f 	bl	80072f8 <_Bfree>
 800943a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800943c:	2300      	movs	r3, #0
 800943e:	6013      	str	r3, [r2, #0]
 8009440:	25a3      	movs	r5, #163	@ 0xa3
 8009442:	e793      	b.n	800936c <__gethex+0xf8>
 8009444:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009448:	2a2e      	cmp	r2, #46	@ 0x2e
 800944a:	d012      	beq.n	8009472 <__gethex+0x1fe>
 800944c:	2b20      	cmp	r3, #32
 800944e:	d104      	bne.n	800945a <__gethex+0x1e6>
 8009450:	f845 bb04 	str.w	fp, [r5], #4
 8009454:	f04f 0b00 	mov.w	fp, #0
 8009458:	465b      	mov	r3, fp
 800945a:	7830      	ldrb	r0, [r6, #0]
 800945c:	9303      	str	r3, [sp, #12]
 800945e:	f7ff fef3 	bl	8009248 <__hexdig_fun>
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	f000 000f 	and.w	r0, r0, #15
 8009468:	4098      	lsls	r0, r3
 800946a:	ea4b 0b00 	orr.w	fp, fp, r0
 800946e:	3304      	adds	r3, #4
 8009470:	e7ae      	b.n	80093d0 <__gethex+0x15c>
 8009472:	45b1      	cmp	r9, r6
 8009474:	d8ea      	bhi.n	800944c <__gethex+0x1d8>
 8009476:	492b      	ldr	r1, [pc, #172]	@ (8009524 <__gethex+0x2b0>)
 8009478:	9303      	str	r3, [sp, #12]
 800947a:	2201      	movs	r2, #1
 800947c:	4630      	mov	r0, r6
 800947e:	f7ff fe25 	bl	80090cc <strncmp>
 8009482:	9b03      	ldr	r3, [sp, #12]
 8009484:	2800      	cmp	r0, #0
 8009486:	d1e1      	bne.n	800944c <__gethex+0x1d8>
 8009488:	e7a2      	b.n	80093d0 <__gethex+0x15c>
 800948a:	1ea9      	subs	r1, r5, #2
 800948c:	4620      	mov	r0, r4
 800948e:	f7fe fb84 	bl	8007b9a <__any_on>
 8009492:	2800      	cmp	r0, #0
 8009494:	d0c2      	beq.n	800941c <__gethex+0x1a8>
 8009496:	f04f 0903 	mov.w	r9, #3
 800949a:	e7c1      	b.n	8009420 <__gethex+0x1ac>
 800949c:	da09      	bge.n	80094b2 <__gethex+0x23e>
 800949e:	1b75      	subs	r5, r6, r5
 80094a0:	4621      	mov	r1, r4
 80094a2:	9801      	ldr	r0, [sp, #4]
 80094a4:	462a      	mov	r2, r5
 80094a6:	f7fe f93f 	bl	8007728 <__lshift>
 80094aa:	1b7f      	subs	r7, r7, r5
 80094ac:	4604      	mov	r4, r0
 80094ae:	f100 0a14 	add.w	sl, r0, #20
 80094b2:	f04f 0900 	mov.w	r9, #0
 80094b6:	e7b8      	b.n	800942a <__gethex+0x1b6>
 80094b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80094bc:	42bd      	cmp	r5, r7
 80094be:	dd6f      	ble.n	80095a0 <__gethex+0x32c>
 80094c0:	1bed      	subs	r5, r5, r7
 80094c2:	42ae      	cmp	r6, r5
 80094c4:	dc34      	bgt.n	8009530 <__gethex+0x2bc>
 80094c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d022      	beq.n	8009514 <__gethex+0x2a0>
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d024      	beq.n	800951c <__gethex+0x2a8>
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d115      	bne.n	8009502 <__gethex+0x28e>
 80094d6:	42ae      	cmp	r6, r5
 80094d8:	d113      	bne.n	8009502 <__gethex+0x28e>
 80094da:	2e01      	cmp	r6, #1
 80094dc:	d10b      	bne.n	80094f6 <__gethex+0x282>
 80094de:	9a02      	ldr	r2, [sp, #8]
 80094e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	2301      	movs	r3, #1
 80094e8:	6123      	str	r3, [r4, #16]
 80094ea:	f8ca 3000 	str.w	r3, [sl]
 80094ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094f0:	2562      	movs	r5, #98	@ 0x62
 80094f2:	601c      	str	r4, [r3, #0]
 80094f4:	e73a      	b.n	800936c <__gethex+0xf8>
 80094f6:	1e71      	subs	r1, r6, #1
 80094f8:	4620      	mov	r0, r4
 80094fa:	f7fe fb4e 	bl	8007b9a <__any_on>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d1ed      	bne.n	80094de <__gethex+0x26a>
 8009502:	9801      	ldr	r0, [sp, #4]
 8009504:	4621      	mov	r1, r4
 8009506:	f7fd fef7 	bl	80072f8 <_Bfree>
 800950a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800950c:	2300      	movs	r3, #0
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	2550      	movs	r5, #80	@ 0x50
 8009512:	e72b      	b.n	800936c <__gethex+0xf8>
 8009514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1f3      	bne.n	8009502 <__gethex+0x28e>
 800951a:	e7e0      	b.n	80094de <__gethex+0x26a>
 800951c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1dd      	bne.n	80094de <__gethex+0x26a>
 8009522:	e7ee      	b.n	8009502 <__gethex+0x28e>
 8009524:	0800ba58 	.word	0x0800ba58
 8009528:	0800b8f1 	.word	0x0800b8f1
 800952c:	0800bc06 	.word	0x0800bc06
 8009530:	1e6f      	subs	r7, r5, #1
 8009532:	f1b9 0f00 	cmp.w	r9, #0
 8009536:	d130      	bne.n	800959a <__gethex+0x326>
 8009538:	b127      	cbz	r7, 8009544 <__gethex+0x2d0>
 800953a:	4639      	mov	r1, r7
 800953c:	4620      	mov	r0, r4
 800953e:	f7fe fb2c 	bl	8007b9a <__any_on>
 8009542:	4681      	mov	r9, r0
 8009544:	117a      	asrs	r2, r7, #5
 8009546:	2301      	movs	r3, #1
 8009548:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800954c:	f007 071f 	and.w	r7, r7, #31
 8009550:	40bb      	lsls	r3, r7
 8009552:	4213      	tst	r3, r2
 8009554:	4629      	mov	r1, r5
 8009556:	4620      	mov	r0, r4
 8009558:	bf18      	it	ne
 800955a:	f049 0902 	orrne.w	r9, r9, #2
 800955e:	f7ff fe21 	bl	80091a4 <rshift>
 8009562:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009566:	1b76      	subs	r6, r6, r5
 8009568:	2502      	movs	r5, #2
 800956a:	f1b9 0f00 	cmp.w	r9, #0
 800956e:	d047      	beq.n	8009600 <__gethex+0x38c>
 8009570:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009574:	2b02      	cmp	r3, #2
 8009576:	d015      	beq.n	80095a4 <__gethex+0x330>
 8009578:	2b03      	cmp	r3, #3
 800957a:	d017      	beq.n	80095ac <__gethex+0x338>
 800957c:	2b01      	cmp	r3, #1
 800957e:	d109      	bne.n	8009594 <__gethex+0x320>
 8009580:	f019 0f02 	tst.w	r9, #2
 8009584:	d006      	beq.n	8009594 <__gethex+0x320>
 8009586:	f8da 3000 	ldr.w	r3, [sl]
 800958a:	ea49 0903 	orr.w	r9, r9, r3
 800958e:	f019 0f01 	tst.w	r9, #1
 8009592:	d10e      	bne.n	80095b2 <__gethex+0x33e>
 8009594:	f045 0510 	orr.w	r5, r5, #16
 8009598:	e032      	b.n	8009600 <__gethex+0x38c>
 800959a:	f04f 0901 	mov.w	r9, #1
 800959e:	e7d1      	b.n	8009544 <__gethex+0x2d0>
 80095a0:	2501      	movs	r5, #1
 80095a2:	e7e2      	b.n	800956a <__gethex+0x2f6>
 80095a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095a6:	f1c3 0301 	rsb	r3, r3, #1
 80095aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0f0      	beq.n	8009594 <__gethex+0x320>
 80095b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095b6:	f104 0314 	add.w	r3, r4, #20
 80095ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80095be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80095c2:	f04f 0c00 	mov.w	ip, #0
 80095c6:	4618      	mov	r0, r3
 80095c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80095d0:	d01b      	beq.n	800960a <__gethex+0x396>
 80095d2:	3201      	adds	r2, #1
 80095d4:	6002      	str	r2, [r0, #0]
 80095d6:	2d02      	cmp	r5, #2
 80095d8:	f104 0314 	add.w	r3, r4, #20
 80095dc:	d13c      	bne.n	8009658 <__gethex+0x3e4>
 80095de:	f8d8 2000 	ldr.w	r2, [r8]
 80095e2:	3a01      	subs	r2, #1
 80095e4:	42b2      	cmp	r2, r6
 80095e6:	d109      	bne.n	80095fc <__gethex+0x388>
 80095e8:	1171      	asrs	r1, r6, #5
 80095ea:	2201      	movs	r2, #1
 80095ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095f0:	f006 061f 	and.w	r6, r6, #31
 80095f4:	fa02 f606 	lsl.w	r6, r2, r6
 80095f8:	421e      	tst	r6, r3
 80095fa:	d13a      	bne.n	8009672 <__gethex+0x3fe>
 80095fc:	f045 0520 	orr.w	r5, r5, #32
 8009600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009602:	601c      	str	r4, [r3, #0]
 8009604:	9b02      	ldr	r3, [sp, #8]
 8009606:	601f      	str	r7, [r3, #0]
 8009608:	e6b0      	b.n	800936c <__gethex+0xf8>
 800960a:	4299      	cmp	r1, r3
 800960c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009610:	d8d9      	bhi.n	80095c6 <__gethex+0x352>
 8009612:	68a3      	ldr	r3, [r4, #8]
 8009614:	459b      	cmp	fp, r3
 8009616:	db17      	blt.n	8009648 <__gethex+0x3d4>
 8009618:	6861      	ldr	r1, [r4, #4]
 800961a:	9801      	ldr	r0, [sp, #4]
 800961c:	3101      	adds	r1, #1
 800961e:	f7fd fe2b 	bl	8007278 <_Balloc>
 8009622:	4681      	mov	r9, r0
 8009624:	b918      	cbnz	r0, 800962e <__gethex+0x3ba>
 8009626:	4b1a      	ldr	r3, [pc, #104]	@ (8009690 <__gethex+0x41c>)
 8009628:	4602      	mov	r2, r0
 800962a:	2184      	movs	r1, #132	@ 0x84
 800962c:	e6c5      	b.n	80093ba <__gethex+0x146>
 800962e:	6922      	ldr	r2, [r4, #16]
 8009630:	3202      	adds	r2, #2
 8009632:	f104 010c 	add.w	r1, r4, #12
 8009636:	0092      	lsls	r2, r2, #2
 8009638:	300c      	adds	r0, #12
 800963a:	f7ff fd69 	bl	8009110 <memcpy>
 800963e:	4621      	mov	r1, r4
 8009640:	9801      	ldr	r0, [sp, #4]
 8009642:	f7fd fe59 	bl	80072f8 <_Bfree>
 8009646:	464c      	mov	r4, r9
 8009648:	6923      	ldr	r3, [r4, #16]
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009650:	6122      	str	r2, [r4, #16]
 8009652:	2201      	movs	r2, #1
 8009654:	615a      	str	r2, [r3, #20]
 8009656:	e7be      	b.n	80095d6 <__gethex+0x362>
 8009658:	6922      	ldr	r2, [r4, #16]
 800965a:	455a      	cmp	r2, fp
 800965c:	dd0b      	ble.n	8009676 <__gethex+0x402>
 800965e:	2101      	movs	r1, #1
 8009660:	4620      	mov	r0, r4
 8009662:	f7ff fd9f 	bl	80091a4 <rshift>
 8009666:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800966a:	3701      	adds	r7, #1
 800966c:	42bb      	cmp	r3, r7
 800966e:	f6ff aee0 	blt.w	8009432 <__gethex+0x1be>
 8009672:	2501      	movs	r5, #1
 8009674:	e7c2      	b.n	80095fc <__gethex+0x388>
 8009676:	f016 061f 	ands.w	r6, r6, #31
 800967a:	d0fa      	beq.n	8009672 <__gethex+0x3fe>
 800967c:	4453      	add	r3, sl
 800967e:	f1c6 0620 	rsb	r6, r6, #32
 8009682:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009686:	f7fd fee9 	bl	800745c <__hi0bits>
 800968a:	42b0      	cmp	r0, r6
 800968c:	dbe7      	blt.n	800965e <__gethex+0x3ea>
 800968e:	e7f0      	b.n	8009672 <__gethex+0x3fe>
 8009690:	0800b8f1 	.word	0x0800b8f1

08009694 <L_shift>:
 8009694:	f1c2 0208 	rsb	r2, r2, #8
 8009698:	0092      	lsls	r2, r2, #2
 800969a:	b570      	push	{r4, r5, r6, lr}
 800969c:	f1c2 0620 	rsb	r6, r2, #32
 80096a0:	6843      	ldr	r3, [r0, #4]
 80096a2:	6804      	ldr	r4, [r0, #0]
 80096a4:	fa03 f506 	lsl.w	r5, r3, r6
 80096a8:	432c      	orrs	r4, r5
 80096aa:	40d3      	lsrs	r3, r2
 80096ac:	6004      	str	r4, [r0, #0]
 80096ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80096b2:	4288      	cmp	r0, r1
 80096b4:	d3f4      	bcc.n	80096a0 <L_shift+0xc>
 80096b6:	bd70      	pop	{r4, r5, r6, pc}

080096b8 <__match>:
 80096b8:	b530      	push	{r4, r5, lr}
 80096ba:	6803      	ldr	r3, [r0, #0]
 80096bc:	3301      	adds	r3, #1
 80096be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c2:	b914      	cbnz	r4, 80096ca <__match+0x12>
 80096c4:	6003      	str	r3, [r0, #0]
 80096c6:	2001      	movs	r0, #1
 80096c8:	bd30      	pop	{r4, r5, pc}
 80096ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80096d2:	2d19      	cmp	r5, #25
 80096d4:	bf98      	it	ls
 80096d6:	3220      	addls	r2, #32
 80096d8:	42a2      	cmp	r2, r4
 80096da:	d0f0      	beq.n	80096be <__match+0x6>
 80096dc:	2000      	movs	r0, #0
 80096de:	e7f3      	b.n	80096c8 <__match+0x10>

080096e0 <__hexnan>:
 80096e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	680b      	ldr	r3, [r1, #0]
 80096e6:	6801      	ldr	r1, [r0, #0]
 80096e8:	115e      	asrs	r6, r3, #5
 80096ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80096ee:	f013 031f 	ands.w	r3, r3, #31
 80096f2:	b087      	sub	sp, #28
 80096f4:	bf18      	it	ne
 80096f6:	3604      	addne	r6, #4
 80096f8:	2500      	movs	r5, #0
 80096fa:	1f37      	subs	r7, r6, #4
 80096fc:	4682      	mov	sl, r0
 80096fe:	4690      	mov	r8, r2
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	f846 5c04 	str.w	r5, [r6, #-4]
 8009706:	46b9      	mov	r9, r7
 8009708:	463c      	mov	r4, r7
 800970a:	9502      	str	r5, [sp, #8]
 800970c:	46ab      	mov	fp, r5
 800970e:	784a      	ldrb	r2, [r1, #1]
 8009710:	1c4b      	adds	r3, r1, #1
 8009712:	9303      	str	r3, [sp, #12]
 8009714:	b342      	cbz	r2, 8009768 <__hexnan+0x88>
 8009716:	4610      	mov	r0, r2
 8009718:	9105      	str	r1, [sp, #20]
 800971a:	9204      	str	r2, [sp, #16]
 800971c:	f7ff fd94 	bl	8009248 <__hexdig_fun>
 8009720:	2800      	cmp	r0, #0
 8009722:	d151      	bne.n	80097c8 <__hexnan+0xe8>
 8009724:	9a04      	ldr	r2, [sp, #16]
 8009726:	9905      	ldr	r1, [sp, #20]
 8009728:	2a20      	cmp	r2, #32
 800972a:	d818      	bhi.n	800975e <__hexnan+0x7e>
 800972c:	9b02      	ldr	r3, [sp, #8]
 800972e:	459b      	cmp	fp, r3
 8009730:	dd13      	ble.n	800975a <__hexnan+0x7a>
 8009732:	454c      	cmp	r4, r9
 8009734:	d206      	bcs.n	8009744 <__hexnan+0x64>
 8009736:	2d07      	cmp	r5, #7
 8009738:	dc04      	bgt.n	8009744 <__hexnan+0x64>
 800973a:	462a      	mov	r2, r5
 800973c:	4649      	mov	r1, r9
 800973e:	4620      	mov	r0, r4
 8009740:	f7ff ffa8 	bl	8009694 <L_shift>
 8009744:	4544      	cmp	r4, r8
 8009746:	d952      	bls.n	80097ee <__hexnan+0x10e>
 8009748:	2300      	movs	r3, #0
 800974a:	f1a4 0904 	sub.w	r9, r4, #4
 800974e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009752:	f8cd b008 	str.w	fp, [sp, #8]
 8009756:	464c      	mov	r4, r9
 8009758:	461d      	mov	r5, r3
 800975a:	9903      	ldr	r1, [sp, #12]
 800975c:	e7d7      	b.n	800970e <__hexnan+0x2e>
 800975e:	2a29      	cmp	r2, #41	@ 0x29
 8009760:	d157      	bne.n	8009812 <__hexnan+0x132>
 8009762:	3102      	adds	r1, #2
 8009764:	f8ca 1000 	str.w	r1, [sl]
 8009768:	f1bb 0f00 	cmp.w	fp, #0
 800976c:	d051      	beq.n	8009812 <__hexnan+0x132>
 800976e:	454c      	cmp	r4, r9
 8009770:	d206      	bcs.n	8009780 <__hexnan+0xa0>
 8009772:	2d07      	cmp	r5, #7
 8009774:	dc04      	bgt.n	8009780 <__hexnan+0xa0>
 8009776:	462a      	mov	r2, r5
 8009778:	4649      	mov	r1, r9
 800977a:	4620      	mov	r0, r4
 800977c:	f7ff ff8a 	bl	8009694 <L_shift>
 8009780:	4544      	cmp	r4, r8
 8009782:	d936      	bls.n	80097f2 <__hexnan+0x112>
 8009784:	f1a8 0204 	sub.w	r2, r8, #4
 8009788:	4623      	mov	r3, r4
 800978a:	f853 1b04 	ldr.w	r1, [r3], #4
 800978e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009792:	429f      	cmp	r7, r3
 8009794:	d2f9      	bcs.n	800978a <__hexnan+0xaa>
 8009796:	1b3b      	subs	r3, r7, r4
 8009798:	f023 0303 	bic.w	r3, r3, #3
 800979c:	3304      	adds	r3, #4
 800979e:	3401      	adds	r4, #1
 80097a0:	3e03      	subs	r6, #3
 80097a2:	42b4      	cmp	r4, r6
 80097a4:	bf88      	it	hi
 80097a6:	2304      	movhi	r3, #4
 80097a8:	4443      	add	r3, r8
 80097aa:	2200      	movs	r2, #0
 80097ac:	f843 2b04 	str.w	r2, [r3], #4
 80097b0:	429f      	cmp	r7, r3
 80097b2:	d2fb      	bcs.n	80097ac <__hexnan+0xcc>
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	b91b      	cbnz	r3, 80097c0 <__hexnan+0xe0>
 80097b8:	4547      	cmp	r7, r8
 80097ba:	d128      	bne.n	800980e <__hexnan+0x12e>
 80097bc:	2301      	movs	r3, #1
 80097be:	603b      	str	r3, [r7, #0]
 80097c0:	2005      	movs	r0, #5
 80097c2:	b007      	add	sp, #28
 80097c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c8:	3501      	adds	r5, #1
 80097ca:	2d08      	cmp	r5, #8
 80097cc:	f10b 0b01 	add.w	fp, fp, #1
 80097d0:	dd06      	ble.n	80097e0 <__hexnan+0x100>
 80097d2:	4544      	cmp	r4, r8
 80097d4:	d9c1      	bls.n	800975a <__hexnan+0x7a>
 80097d6:	2300      	movs	r3, #0
 80097d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80097dc:	2501      	movs	r5, #1
 80097de:	3c04      	subs	r4, #4
 80097e0:	6822      	ldr	r2, [r4, #0]
 80097e2:	f000 000f 	and.w	r0, r0, #15
 80097e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80097ea:	6020      	str	r0, [r4, #0]
 80097ec:	e7b5      	b.n	800975a <__hexnan+0x7a>
 80097ee:	2508      	movs	r5, #8
 80097f0:	e7b3      	b.n	800975a <__hexnan+0x7a>
 80097f2:	9b01      	ldr	r3, [sp, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d0dd      	beq.n	80097b4 <__hexnan+0xd4>
 80097f8:	f1c3 0320 	rsb	r3, r3, #32
 80097fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009800:	40da      	lsrs	r2, r3
 8009802:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009806:	4013      	ands	r3, r2
 8009808:	f846 3c04 	str.w	r3, [r6, #-4]
 800980c:	e7d2      	b.n	80097b4 <__hexnan+0xd4>
 800980e:	3f04      	subs	r7, #4
 8009810:	e7d0      	b.n	80097b4 <__hexnan+0xd4>
 8009812:	2004      	movs	r0, #4
 8009814:	e7d5      	b.n	80097c2 <__hexnan+0xe2>

08009816 <__ascii_mbtowc>:
 8009816:	b082      	sub	sp, #8
 8009818:	b901      	cbnz	r1, 800981c <__ascii_mbtowc+0x6>
 800981a:	a901      	add	r1, sp, #4
 800981c:	b142      	cbz	r2, 8009830 <__ascii_mbtowc+0x1a>
 800981e:	b14b      	cbz	r3, 8009834 <__ascii_mbtowc+0x1e>
 8009820:	7813      	ldrb	r3, [r2, #0]
 8009822:	600b      	str	r3, [r1, #0]
 8009824:	7812      	ldrb	r2, [r2, #0]
 8009826:	1e10      	subs	r0, r2, #0
 8009828:	bf18      	it	ne
 800982a:	2001      	movne	r0, #1
 800982c:	b002      	add	sp, #8
 800982e:	4770      	bx	lr
 8009830:	4610      	mov	r0, r2
 8009832:	e7fb      	b.n	800982c <__ascii_mbtowc+0x16>
 8009834:	f06f 0001 	mvn.w	r0, #1
 8009838:	e7f8      	b.n	800982c <__ascii_mbtowc+0x16>

0800983a <_realloc_r>:
 800983a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800983e:	4680      	mov	r8, r0
 8009840:	4615      	mov	r5, r2
 8009842:	460c      	mov	r4, r1
 8009844:	b921      	cbnz	r1, 8009850 <_realloc_r+0x16>
 8009846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800984a:	4611      	mov	r1, r2
 800984c:	f7fd bc88 	b.w	8007160 <_malloc_r>
 8009850:	b92a      	cbnz	r2, 800985e <_realloc_r+0x24>
 8009852:	f7fd fc11 	bl	8007078 <_free_r>
 8009856:	2400      	movs	r4, #0
 8009858:	4620      	mov	r0, r4
 800985a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800985e:	f000 f8c4 	bl	80099ea <_malloc_usable_size_r>
 8009862:	4285      	cmp	r5, r0
 8009864:	4606      	mov	r6, r0
 8009866:	d802      	bhi.n	800986e <_realloc_r+0x34>
 8009868:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800986c:	d8f4      	bhi.n	8009858 <_realloc_r+0x1e>
 800986e:	4629      	mov	r1, r5
 8009870:	4640      	mov	r0, r8
 8009872:	f7fd fc75 	bl	8007160 <_malloc_r>
 8009876:	4607      	mov	r7, r0
 8009878:	2800      	cmp	r0, #0
 800987a:	d0ec      	beq.n	8009856 <_realloc_r+0x1c>
 800987c:	42b5      	cmp	r5, r6
 800987e:	462a      	mov	r2, r5
 8009880:	4621      	mov	r1, r4
 8009882:	bf28      	it	cs
 8009884:	4632      	movcs	r2, r6
 8009886:	f7ff fc43 	bl	8009110 <memcpy>
 800988a:	4621      	mov	r1, r4
 800988c:	4640      	mov	r0, r8
 800988e:	f7fd fbf3 	bl	8007078 <_free_r>
 8009892:	463c      	mov	r4, r7
 8009894:	e7e0      	b.n	8009858 <_realloc_r+0x1e>

08009896 <__ascii_wctomb>:
 8009896:	4603      	mov	r3, r0
 8009898:	4608      	mov	r0, r1
 800989a:	b141      	cbz	r1, 80098ae <__ascii_wctomb+0x18>
 800989c:	2aff      	cmp	r2, #255	@ 0xff
 800989e:	d904      	bls.n	80098aa <__ascii_wctomb+0x14>
 80098a0:	228a      	movs	r2, #138	@ 0x8a
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	4770      	bx	lr
 80098aa:	700a      	strb	r2, [r1, #0]
 80098ac:	2001      	movs	r0, #1
 80098ae:	4770      	bx	lr

080098b0 <fiprintf>:
 80098b0:	b40e      	push	{r1, r2, r3}
 80098b2:	b503      	push	{r0, r1, lr}
 80098b4:	4601      	mov	r1, r0
 80098b6:	ab03      	add	r3, sp, #12
 80098b8:	4805      	ldr	r0, [pc, #20]	@ (80098d0 <fiprintf+0x20>)
 80098ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80098be:	6800      	ldr	r0, [r0, #0]
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	f7ff f991 	bl	8008be8 <_vfiprintf_r>
 80098c6:	b002      	add	sp, #8
 80098c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098cc:	b003      	add	sp, #12
 80098ce:	4770      	bx	lr
 80098d0:	20000020 	.word	0x20000020

080098d4 <__swhatbuf_r>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	460c      	mov	r4, r1
 80098d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098dc:	2900      	cmp	r1, #0
 80098de:	b096      	sub	sp, #88	@ 0x58
 80098e0:	4615      	mov	r5, r2
 80098e2:	461e      	mov	r6, r3
 80098e4:	da0d      	bge.n	8009902 <__swhatbuf_r+0x2e>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098ec:	f04f 0100 	mov.w	r1, #0
 80098f0:	bf14      	ite	ne
 80098f2:	2340      	movne	r3, #64	@ 0x40
 80098f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80098f8:	2000      	movs	r0, #0
 80098fa:	6031      	str	r1, [r6, #0]
 80098fc:	602b      	str	r3, [r5, #0]
 80098fe:	b016      	add	sp, #88	@ 0x58
 8009900:	bd70      	pop	{r4, r5, r6, pc}
 8009902:	466a      	mov	r2, sp
 8009904:	f000 f848 	bl	8009998 <_fstat_r>
 8009908:	2800      	cmp	r0, #0
 800990a:	dbec      	blt.n	80098e6 <__swhatbuf_r+0x12>
 800990c:	9901      	ldr	r1, [sp, #4]
 800990e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009912:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009916:	4259      	negs	r1, r3
 8009918:	4159      	adcs	r1, r3
 800991a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800991e:	e7eb      	b.n	80098f8 <__swhatbuf_r+0x24>

08009920 <__smakebuf_r>:
 8009920:	898b      	ldrh	r3, [r1, #12]
 8009922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009924:	079d      	lsls	r5, r3, #30
 8009926:	4606      	mov	r6, r0
 8009928:	460c      	mov	r4, r1
 800992a:	d507      	bpl.n	800993c <__smakebuf_r+0x1c>
 800992c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	6123      	str	r3, [r4, #16]
 8009934:	2301      	movs	r3, #1
 8009936:	6163      	str	r3, [r4, #20]
 8009938:	b003      	add	sp, #12
 800993a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800993c:	ab01      	add	r3, sp, #4
 800993e:	466a      	mov	r2, sp
 8009940:	f7ff ffc8 	bl	80098d4 <__swhatbuf_r>
 8009944:	9f00      	ldr	r7, [sp, #0]
 8009946:	4605      	mov	r5, r0
 8009948:	4639      	mov	r1, r7
 800994a:	4630      	mov	r0, r6
 800994c:	f7fd fc08 	bl	8007160 <_malloc_r>
 8009950:	b948      	cbnz	r0, 8009966 <__smakebuf_r+0x46>
 8009952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009956:	059a      	lsls	r2, r3, #22
 8009958:	d4ee      	bmi.n	8009938 <__smakebuf_r+0x18>
 800995a:	f023 0303 	bic.w	r3, r3, #3
 800995e:	f043 0302 	orr.w	r3, r3, #2
 8009962:	81a3      	strh	r3, [r4, #12]
 8009964:	e7e2      	b.n	800992c <__smakebuf_r+0xc>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	6020      	str	r0, [r4, #0]
 800996a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800996e:	81a3      	strh	r3, [r4, #12]
 8009970:	9b01      	ldr	r3, [sp, #4]
 8009972:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009976:	b15b      	cbz	r3, 8009990 <__smakebuf_r+0x70>
 8009978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800997c:	4630      	mov	r0, r6
 800997e:	f000 f81d 	bl	80099bc <_isatty_r>
 8009982:	b128      	cbz	r0, 8009990 <__smakebuf_r+0x70>
 8009984:	89a3      	ldrh	r3, [r4, #12]
 8009986:	f023 0303 	bic.w	r3, r3, #3
 800998a:	f043 0301 	orr.w	r3, r3, #1
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	431d      	orrs	r5, r3
 8009994:	81a5      	strh	r5, [r4, #12]
 8009996:	e7cf      	b.n	8009938 <__smakebuf_r+0x18>

08009998 <_fstat_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d07      	ldr	r5, [pc, #28]	@ (80099b8 <_fstat_r+0x20>)
 800999c:	2300      	movs	r3, #0
 800999e:	4604      	mov	r4, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	4611      	mov	r1, r2
 80099a4:	602b      	str	r3, [r5, #0]
 80099a6:	f7f8 fb50 	bl	800204a <_fstat>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	d102      	bne.n	80099b4 <_fstat_r+0x1c>
 80099ae:	682b      	ldr	r3, [r5, #0]
 80099b0:	b103      	cbz	r3, 80099b4 <_fstat_r+0x1c>
 80099b2:	6023      	str	r3, [r4, #0]
 80099b4:	bd38      	pop	{r3, r4, r5, pc}
 80099b6:	bf00      	nop
 80099b8:	200004c0 	.word	0x200004c0

080099bc <_isatty_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d06      	ldr	r5, [pc, #24]	@ (80099d8 <_isatty_r+0x1c>)
 80099c0:	2300      	movs	r3, #0
 80099c2:	4604      	mov	r4, r0
 80099c4:	4608      	mov	r0, r1
 80099c6:	602b      	str	r3, [r5, #0]
 80099c8:	f7f8 fb4f 	bl	800206a <_isatty>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_isatty_r+0x1a>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_isatty_r+0x1a>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	200004c0 	.word	0x200004c0

080099dc <abort>:
 80099dc:	b508      	push	{r3, lr}
 80099de:	2006      	movs	r0, #6
 80099e0:	f000 f834 	bl	8009a4c <raise>
 80099e4:	2001      	movs	r0, #1
 80099e6:	f7f8 fae0 	bl	8001faa <_exit>

080099ea <_malloc_usable_size_r>:
 80099ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099ee:	1f18      	subs	r0, r3, #4
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bfbc      	itt	lt
 80099f4:	580b      	ldrlt	r3, [r1, r0]
 80099f6:	18c0      	addlt	r0, r0, r3
 80099f8:	4770      	bx	lr

080099fa <_raise_r>:
 80099fa:	291f      	cmp	r1, #31
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4605      	mov	r5, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	d904      	bls.n	8009a0e <_raise_r+0x14>
 8009a04:	2316      	movs	r3, #22
 8009a06:	6003      	str	r3, [r0, #0]
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	bd38      	pop	{r3, r4, r5, pc}
 8009a0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009a10:	b112      	cbz	r2, 8009a18 <_raise_r+0x1e>
 8009a12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a16:	b94b      	cbnz	r3, 8009a2c <_raise_r+0x32>
 8009a18:	4628      	mov	r0, r5
 8009a1a:	f000 f831 	bl	8009a80 <_getpid_r>
 8009a1e:	4622      	mov	r2, r4
 8009a20:	4601      	mov	r1, r0
 8009a22:	4628      	mov	r0, r5
 8009a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a28:	f000 b818 	b.w	8009a5c <_kill_r>
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d00a      	beq.n	8009a46 <_raise_r+0x4c>
 8009a30:	1c59      	adds	r1, r3, #1
 8009a32:	d103      	bne.n	8009a3c <_raise_r+0x42>
 8009a34:	2316      	movs	r3, #22
 8009a36:	6003      	str	r3, [r0, #0]
 8009a38:	2001      	movs	r0, #1
 8009a3a:	e7e7      	b.n	8009a0c <_raise_r+0x12>
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009a42:	4620      	mov	r0, r4
 8009a44:	4798      	blx	r3
 8009a46:	2000      	movs	r0, #0
 8009a48:	e7e0      	b.n	8009a0c <_raise_r+0x12>
	...

08009a4c <raise>:
 8009a4c:	4b02      	ldr	r3, [pc, #8]	@ (8009a58 <raise+0xc>)
 8009a4e:	4601      	mov	r1, r0
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	f7ff bfd2 	b.w	80099fa <_raise_r>
 8009a56:	bf00      	nop
 8009a58:	20000020 	.word	0x20000020

08009a5c <_kill_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4d07      	ldr	r5, [pc, #28]	@ (8009a7c <_kill_r+0x20>)
 8009a60:	2300      	movs	r3, #0
 8009a62:	4604      	mov	r4, r0
 8009a64:	4608      	mov	r0, r1
 8009a66:	4611      	mov	r1, r2
 8009a68:	602b      	str	r3, [r5, #0]
 8009a6a:	f7f8 fa8e 	bl	8001f8a <_kill>
 8009a6e:	1c43      	adds	r3, r0, #1
 8009a70:	d102      	bne.n	8009a78 <_kill_r+0x1c>
 8009a72:	682b      	ldr	r3, [r5, #0]
 8009a74:	b103      	cbz	r3, 8009a78 <_kill_r+0x1c>
 8009a76:	6023      	str	r3, [r4, #0]
 8009a78:	bd38      	pop	{r3, r4, r5, pc}
 8009a7a:	bf00      	nop
 8009a7c:	200004c0 	.word	0x200004c0

08009a80 <_getpid_r>:
 8009a80:	f7f8 ba7b 	b.w	8001f7a <_getpid>

08009a84 <atan2>:
 8009a84:	f000 bd6c 	b.w	800a560 <__ieee754_atan2>

08009a88 <sqrt>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	ed2d 8b02 	vpush	{d8}
 8009a8e:	ec55 4b10 	vmov	r4, r5, d0
 8009a92:	f000 f901 	bl	8009c98 <__ieee754_sqrt>
 8009a96:	4622      	mov	r2, r4
 8009a98:	462b      	mov	r3, r5
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	eeb0 8a40 	vmov.f32	s16, s0
 8009aa2:	eef0 8a60 	vmov.f32	s17, s1
 8009aa6:	f7f7 f849 	bl	8000b3c <__aeabi_dcmpun>
 8009aaa:	b990      	cbnz	r0, 8009ad2 <sqrt+0x4a>
 8009aac:	2200      	movs	r2, #0
 8009aae:	2300      	movs	r3, #0
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	f7f7 f81a 	bl	8000aec <__aeabi_dcmplt>
 8009ab8:	b158      	cbz	r0, 8009ad2 <sqrt+0x4a>
 8009aba:	f7fc fc5b 	bl	8006374 <__errno>
 8009abe:	2321      	movs	r3, #33	@ 0x21
 8009ac0:	6003      	str	r3, [r0, #0]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	4619      	mov	r1, r3
 8009aca:	f7f6 fec7 	bl	800085c <__aeabi_ddiv>
 8009ace:	ec41 0b18 	vmov	d8, r0, r1
 8009ad2:	eeb0 0a48 	vmov.f32	s0, s16
 8009ad6:	eef0 0a68 	vmov.f32	s1, s17
 8009ada:	ecbd 8b02 	vpop	{d8}
 8009ade:	bd38      	pop	{r3, r4, r5, pc}

08009ae0 <cos>:
 8009ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ae2:	ec53 2b10 	vmov	r2, r3, d0
 8009ae6:	4826      	ldr	r0, [pc, #152]	@ (8009b80 <cos+0xa0>)
 8009ae8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009aec:	4281      	cmp	r1, r0
 8009aee:	d806      	bhi.n	8009afe <cos+0x1e>
 8009af0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009b78 <cos+0x98>
 8009af4:	b005      	add	sp, #20
 8009af6:	f85d eb04 	ldr.w	lr, [sp], #4
 8009afa:	f000 b9a9 	b.w	8009e50 <__kernel_cos>
 8009afe:	4821      	ldr	r0, [pc, #132]	@ (8009b84 <cos+0xa4>)
 8009b00:	4281      	cmp	r1, r0
 8009b02:	d908      	bls.n	8009b16 <cos+0x36>
 8009b04:	4610      	mov	r0, r2
 8009b06:	4619      	mov	r1, r3
 8009b08:	f7f6 fbc6 	bl	8000298 <__aeabi_dsub>
 8009b0c:	ec41 0b10 	vmov	d0, r0, r1
 8009b10:	b005      	add	sp, #20
 8009b12:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b16:	4668      	mov	r0, sp
 8009b18:	f000 fdea 	bl	800a6f0 <__ieee754_rem_pio2>
 8009b1c:	f000 0003 	and.w	r0, r0, #3
 8009b20:	2801      	cmp	r0, #1
 8009b22:	d00b      	beq.n	8009b3c <cos+0x5c>
 8009b24:	2802      	cmp	r0, #2
 8009b26:	d015      	beq.n	8009b54 <cos+0x74>
 8009b28:	b9d8      	cbnz	r0, 8009b62 <cos+0x82>
 8009b2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b2e:	ed9d 0b00 	vldr	d0, [sp]
 8009b32:	f000 f98d 	bl	8009e50 <__kernel_cos>
 8009b36:	ec51 0b10 	vmov	r0, r1, d0
 8009b3a:	e7e7      	b.n	8009b0c <cos+0x2c>
 8009b3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b40:	ed9d 0b00 	vldr	d0, [sp]
 8009b44:	f000 fa4c 	bl	8009fe0 <__kernel_sin>
 8009b48:	ec53 2b10 	vmov	r2, r3, d0
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009b52:	e7db      	b.n	8009b0c <cos+0x2c>
 8009b54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b58:	ed9d 0b00 	vldr	d0, [sp]
 8009b5c:	f000 f978 	bl	8009e50 <__kernel_cos>
 8009b60:	e7f2      	b.n	8009b48 <cos+0x68>
 8009b62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b66:	ed9d 0b00 	vldr	d0, [sp]
 8009b6a:	2001      	movs	r0, #1
 8009b6c:	f000 fa38 	bl	8009fe0 <__kernel_sin>
 8009b70:	e7e1      	b.n	8009b36 <cos+0x56>
 8009b72:	bf00      	nop
 8009b74:	f3af 8000 	nop.w
	...
 8009b80:	3fe921fb 	.word	0x3fe921fb
 8009b84:	7fefffff 	.word	0x7fefffff

08009b88 <sin>:
 8009b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b8a:	ec53 2b10 	vmov	r2, r3, d0
 8009b8e:	4826      	ldr	r0, [pc, #152]	@ (8009c28 <sin+0xa0>)
 8009b90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009b94:	4281      	cmp	r1, r0
 8009b96:	d807      	bhi.n	8009ba8 <sin+0x20>
 8009b98:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009c20 <sin+0x98>
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	b005      	add	sp, #20
 8009ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ba4:	f000 ba1c 	b.w	8009fe0 <__kernel_sin>
 8009ba8:	4820      	ldr	r0, [pc, #128]	@ (8009c2c <sin+0xa4>)
 8009baa:	4281      	cmp	r1, r0
 8009bac:	d908      	bls.n	8009bc0 <sin+0x38>
 8009bae:	4610      	mov	r0, r2
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	f7f6 fb71 	bl	8000298 <__aeabi_dsub>
 8009bb6:	ec41 0b10 	vmov	d0, r0, r1
 8009bba:	b005      	add	sp, #20
 8009bbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bc0:	4668      	mov	r0, sp
 8009bc2:	f000 fd95 	bl	800a6f0 <__ieee754_rem_pio2>
 8009bc6:	f000 0003 	and.w	r0, r0, #3
 8009bca:	2801      	cmp	r0, #1
 8009bcc:	d00c      	beq.n	8009be8 <sin+0x60>
 8009bce:	2802      	cmp	r0, #2
 8009bd0:	d011      	beq.n	8009bf6 <sin+0x6e>
 8009bd2:	b9e8      	cbnz	r0, 8009c10 <sin+0x88>
 8009bd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009bd8:	ed9d 0b00 	vldr	d0, [sp]
 8009bdc:	2001      	movs	r0, #1
 8009bde:	f000 f9ff 	bl	8009fe0 <__kernel_sin>
 8009be2:	ec51 0b10 	vmov	r0, r1, d0
 8009be6:	e7e6      	b.n	8009bb6 <sin+0x2e>
 8009be8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009bec:	ed9d 0b00 	vldr	d0, [sp]
 8009bf0:	f000 f92e 	bl	8009e50 <__kernel_cos>
 8009bf4:	e7f5      	b.n	8009be2 <sin+0x5a>
 8009bf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009bfa:	ed9d 0b00 	vldr	d0, [sp]
 8009bfe:	2001      	movs	r0, #1
 8009c00:	f000 f9ee 	bl	8009fe0 <__kernel_sin>
 8009c04:	ec53 2b10 	vmov	r2, r3, d0
 8009c08:	4610      	mov	r0, r2
 8009c0a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009c0e:	e7d2      	b.n	8009bb6 <sin+0x2e>
 8009c10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c14:	ed9d 0b00 	vldr	d0, [sp]
 8009c18:	f000 f91a 	bl	8009e50 <__kernel_cos>
 8009c1c:	e7f2      	b.n	8009c04 <sin+0x7c>
 8009c1e:	bf00      	nop
	...
 8009c28:	3fe921fb 	.word	0x3fe921fb
 8009c2c:	7fefffff 	.word	0x7fefffff

08009c30 <tan>:
 8009c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c32:	ec53 2b10 	vmov	r2, r3, d0
 8009c36:	4816      	ldr	r0, [pc, #88]	@ (8009c90 <tan+0x60>)
 8009c38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c3c:	4281      	cmp	r1, r0
 8009c3e:	d807      	bhi.n	8009c50 <tan+0x20>
 8009c40:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8009c88 <tan+0x58>
 8009c44:	2001      	movs	r0, #1
 8009c46:	b005      	add	sp, #20
 8009c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c4c:	f000 ba84 	b.w	800a158 <__kernel_tan>
 8009c50:	4810      	ldr	r0, [pc, #64]	@ (8009c94 <tan+0x64>)
 8009c52:	4281      	cmp	r1, r0
 8009c54:	d908      	bls.n	8009c68 <tan+0x38>
 8009c56:	4610      	mov	r0, r2
 8009c58:	4619      	mov	r1, r3
 8009c5a:	f7f6 fb1d 	bl	8000298 <__aeabi_dsub>
 8009c5e:	ec41 0b10 	vmov	d0, r0, r1
 8009c62:	b005      	add	sp, #20
 8009c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c68:	4668      	mov	r0, sp
 8009c6a:	f000 fd41 	bl	800a6f0 <__ieee754_rem_pio2>
 8009c6e:	0040      	lsls	r0, r0, #1
 8009c70:	f000 0002 	and.w	r0, r0, #2
 8009c74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c78:	ed9d 0b00 	vldr	d0, [sp]
 8009c7c:	f1c0 0001 	rsb	r0, r0, #1
 8009c80:	f000 fa6a 	bl	800a158 <__kernel_tan>
 8009c84:	e7ed      	b.n	8009c62 <tan+0x32>
 8009c86:	bf00      	nop
	...
 8009c90:	3fe921fb 	.word	0x3fe921fb
 8009c94:	7fefffff 	.word	0x7fefffff

08009c98 <__ieee754_sqrt>:
 8009c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	4a68      	ldr	r2, [pc, #416]	@ (8009e40 <__ieee754_sqrt+0x1a8>)
 8009c9e:	ec55 4b10 	vmov	r4, r5, d0
 8009ca2:	43aa      	bics	r2, r5
 8009ca4:	462b      	mov	r3, r5
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	d110      	bne.n	8009ccc <__ieee754_sqrt+0x34>
 8009caa:	4622      	mov	r2, r4
 8009cac:	4620      	mov	r0, r4
 8009cae:	4629      	mov	r1, r5
 8009cb0:	f7f6 fcaa 	bl	8000608 <__aeabi_dmul>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4620      	mov	r0, r4
 8009cba:	4629      	mov	r1, r5
 8009cbc:	f7f6 faee 	bl	800029c <__adddf3>
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	460d      	mov	r5, r1
 8009cc4:	ec45 4b10 	vmov	d0, r4, r5
 8009cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ccc:	2d00      	cmp	r5, #0
 8009cce:	dc0e      	bgt.n	8009cee <__ieee754_sqrt+0x56>
 8009cd0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009cd4:	4322      	orrs	r2, r4
 8009cd6:	d0f5      	beq.n	8009cc4 <__ieee754_sqrt+0x2c>
 8009cd8:	b19d      	cbz	r5, 8009d02 <__ieee754_sqrt+0x6a>
 8009cda:	4622      	mov	r2, r4
 8009cdc:	4620      	mov	r0, r4
 8009cde:	4629      	mov	r1, r5
 8009ce0:	f7f6 fada 	bl	8000298 <__aeabi_dsub>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	f7f6 fdb8 	bl	800085c <__aeabi_ddiv>
 8009cec:	e7e8      	b.n	8009cc0 <__ieee754_sqrt+0x28>
 8009cee:	152a      	asrs	r2, r5, #20
 8009cf0:	d115      	bne.n	8009d1e <__ieee754_sqrt+0x86>
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	e009      	b.n	8009d0a <__ieee754_sqrt+0x72>
 8009cf6:	0acb      	lsrs	r3, r1, #11
 8009cf8:	3a15      	subs	r2, #21
 8009cfa:	0549      	lsls	r1, r1, #21
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d0fa      	beq.n	8009cf6 <__ieee754_sqrt+0x5e>
 8009d00:	e7f7      	b.n	8009cf2 <__ieee754_sqrt+0x5a>
 8009d02:	462a      	mov	r2, r5
 8009d04:	e7fa      	b.n	8009cfc <__ieee754_sqrt+0x64>
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	3001      	adds	r0, #1
 8009d0a:	02dc      	lsls	r4, r3, #11
 8009d0c:	d5fb      	bpl.n	8009d06 <__ieee754_sqrt+0x6e>
 8009d0e:	1e44      	subs	r4, r0, #1
 8009d10:	1b12      	subs	r2, r2, r4
 8009d12:	f1c0 0420 	rsb	r4, r0, #32
 8009d16:	fa21 f404 	lsr.w	r4, r1, r4
 8009d1a:	4323      	orrs	r3, r4
 8009d1c:	4081      	lsls	r1, r0
 8009d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d22:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d2a:	07d2      	lsls	r2, r2, #31
 8009d2c:	bf5c      	itt	pl
 8009d2e:	005b      	lslpl	r3, r3, #1
 8009d30:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009d34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d38:	bf58      	it	pl
 8009d3a:	0049      	lslpl	r1, r1, #1
 8009d3c:	2600      	movs	r6, #0
 8009d3e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009d42:	106d      	asrs	r5, r5, #1
 8009d44:	0049      	lsls	r1, r1, #1
 8009d46:	2016      	movs	r0, #22
 8009d48:	4632      	mov	r2, r6
 8009d4a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009d4e:	1917      	adds	r7, r2, r4
 8009d50:	429f      	cmp	r7, r3
 8009d52:	bfde      	ittt	le
 8009d54:	193a      	addle	r2, r7, r4
 8009d56:	1bdb      	suble	r3, r3, r7
 8009d58:	1936      	addle	r6, r6, r4
 8009d5a:	0fcf      	lsrs	r7, r1, #31
 8009d5c:	3801      	subs	r0, #1
 8009d5e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009d62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009d66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009d6a:	d1f0      	bne.n	8009d4e <__ieee754_sqrt+0xb6>
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	2720      	movs	r7, #32
 8009d70:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009d74:	429a      	cmp	r2, r3
 8009d76:	eb00 0e0c 	add.w	lr, r0, ip
 8009d7a:	db02      	blt.n	8009d82 <__ieee754_sqrt+0xea>
 8009d7c:	d113      	bne.n	8009da6 <__ieee754_sqrt+0x10e>
 8009d7e:	458e      	cmp	lr, r1
 8009d80:	d811      	bhi.n	8009da6 <__ieee754_sqrt+0x10e>
 8009d82:	f1be 0f00 	cmp.w	lr, #0
 8009d86:	eb0e 000c 	add.w	r0, lr, ip
 8009d8a:	da42      	bge.n	8009e12 <__ieee754_sqrt+0x17a>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	db40      	blt.n	8009e12 <__ieee754_sqrt+0x17a>
 8009d90:	f102 0801 	add.w	r8, r2, #1
 8009d94:	1a9b      	subs	r3, r3, r2
 8009d96:	458e      	cmp	lr, r1
 8009d98:	bf88      	it	hi
 8009d9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009d9e:	eba1 010e 	sub.w	r1, r1, lr
 8009da2:	4464      	add	r4, ip
 8009da4:	4642      	mov	r2, r8
 8009da6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009daa:	3f01      	subs	r7, #1
 8009dac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009db0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009db4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009db8:	d1dc      	bne.n	8009d74 <__ieee754_sqrt+0xdc>
 8009dba:	4319      	orrs	r1, r3
 8009dbc:	d01b      	beq.n	8009df6 <__ieee754_sqrt+0x15e>
 8009dbe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009e44 <__ieee754_sqrt+0x1ac>
 8009dc2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009e48 <__ieee754_sqrt+0x1b0>
 8009dc6:	e9da 0100 	ldrd	r0, r1, [sl]
 8009dca:	e9db 2300 	ldrd	r2, r3, [fp]
 8009dce:	f7f6 fa63 	bl	8000298 <__aeabi_dsub>
 8009dd2:	e9da 8900 	ldrd	r8, r9, [sl]
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4640      	mov	r0, r8
 8009ddc:	4649      	mov	r1, r9
 8009dde:	f7f6 fe8f 	bl	8000b00 <__aeabi_dcmple>
 8009de2:	b140      	cbz	r0, 8009df6 <__ieee754_sqrt+0x15e>
 8009de4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009de8:	e9da 0100 	ldrd	r0, r1, [sl]
 8009dec:	e9db 2300 	ldrd	r2, r3, [fp]
 8009df0:	d111      	bne.n	8009e16 <__ieee754_sqrt+0x17e>
 8009df2:	3601      	adds	r6, #1
 8009df4:	463c      	mov	r4, r7
 8009df6:	1072      	asrs	r2, r6, #1
 8009df8:	0863      	lsrs	r3, r4, #1
 8009dfa:	07f1      	lsls	r1, r6, #31
 8009dfc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009e00:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009e04:	bf48      	it	mi
 8009e06:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009e0a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009e0e:	4618      	mov	r0, r3
 8009e10:	e756      	b.n	8009cc0 <__ieee754_sqrt+0x28>
 8009e12:	4690      	mov	r8, r2
 8009e14:	e7be      	b.n	8009d94 <__ieee754_sqrt+0xfc>
 8009e16:	f7f6 fa41 	bl	800029c <__adddf3>
 8009e1a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4640      	mov	r0, r8
 8009e24:	4649      	mov	r1, r9
 8009e26:	f7f6 fe61 	bl	8000aec <__aeabi_dcmplt>
 8009e2a:	b120      	cbz	r0, 8009e36 <__ieee754_sqrt+0x19e>
 8009e2c:	1ca0      	adds	r0, r4, #2
 8009e2e:	bf08      	it	eq
 8009e30:	3601      	addeq	r6, #1
 8009e32:	3402      	adds	r4, #2
 8009e34:	e7df      	b.n	8009df6 <__ieee754_sqrt+0x15e>
 8009e36:	1c63      	adds	r3, r4, #1
 8009e38:	f023 0401 	bic.w	r4, r3, #1
 8009e3c:	e7db      	b.n	8009df6 <__ieee754_sqrt+0x15e>
 8009e3e:	bf00      	nop
 8009e40:	7ff00000 	.word	0x7ff00000
 8009e44:	200001e8 	.word	0x200001e8
 8009e48:	200001e0 	.word	0x200001e0
 8009e4c:	00000000 	.word	0x00000000

08009e50 <__kernel_cos>:
 8009e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	ec57 6b10 	vmov	r6, r7, d0
 8009e58:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009e5c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009e60:	ed8d 1b00 	vstr	d1, [sp]
 8009e64:	d206      	bcs.n	8009e74 <__kernel_cos+0x24>
 8009e66:	4630      	mov	r0, r6
 8009e68:	4639      	mov	r1, r7
 8009e6a:	f7f6 fe7d 	bl	8000b68 <__aeabi_d2iz>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	f000 8088 	beq.w	8009f84 <__kernel_cos+0x134>
 8009e74:	4632      	mov	r2, r6
 8009e76:	463b      	mov	r3, r7
 8009e78:	4630      	mov	r0, r6
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f7f6 fbc4 	bl	8000608 <__aeabi_dmul>
 8009e80:	4b51      	ldr	r3, [pc, #324]	@ (8009fc8 <__kernel_cos+0x178>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	4604      	mov	r4, r0
 8009e86:	460d      	mov	r5, r1
 8009e88:	f7f6 fbbe 	bl	8000608 <__aeabi_dmul>
 8009e8c:	a340      	add	r3, pc, #256	@ (adr r3, 8009f90 <__kernel_cos+0x140>)
 8009e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e92:	4682      	mov	sl, r0
 8009e94:	468b      	mov	fp, r1
 8009e96:	4620      	mov	r0, r4
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f7f6 fbb5 	bl	8000608 <__aeabi_dmul>
 8009e9e:	a33e      	add	r3, pc, #248	@ (adr r3, 8009f98 <__kernel_cos+0x148>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 f9fa 	bl	800029c <__adddf3>
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	462b      	mov	r3, r5
 8009eac:	f7f6 fbac 	bl	8000608 <__aeabi_dmul>
 8009eb0:	a33b      	add	r3, pc, #236	@ (adr r3, 8009fa0 <__kernel_cos+0x150>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7f6 f9ef 	bl	8000298 <__aeabi_dsub>
 8009eba:	4622      	mov	r2, r4
 8009ebc:	462b      	mov	r3, r5
 8009ebe:	f7f6 fba3 	bl	8000608 <__aeabi_dmul>
 8009ec2:	a339      	add	r3, pc, #228	@ (adr r3, 8009fa8 <__kernel_cos+0x158>)
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	f7f6 f9e8 	bl	800029c <__adddf3>
 8009ecc:	4622      	mov	r2, r4
 8009ece:	462b      	mov	r3, r5
 8009ed0:	f7f6 fb9a 	bl	8000608 <__aeabi_dmul>
 8009ed4:	a336      	add	r3, pc, #216	@ (adr r3, 8009fb0 <__kernel_cos+0x160>)
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	f7f6 f9dd 	bl	8000298 <__aeabi_dsub>
 8009ede:	4622      	mov	r2, r4
 8009ee0:	462b      	mov	r3, r5
 8009ee2:	f7f6 fb91 	bl	8000608 <__aeabi_dmul>
 8009ee6:	a334      	add	r3, pc, #208	@ (adr r3, 8009fb8 <__kernel_cos+0x168>)
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	f7f6 f9d6 	bl	800029c <__adddf3>
 8009ef0:	4622      	mov	r2, r4
 8009ef2:	462b      	mov	r3, r5
 8009ef4:	f7f6 fb88 	bl	8000608 <__aeabi_dmul>
 8009ef8:	4622      	mov	r2, r4
 8009efa:	462b      	mov	r3, r5
 8009efc:	f7f6 fb84 	bl	8000608 <__aeabi_dmul>
 8009f00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f04:	4604      	mov	r4, r0
 8009f06:	460d      	mov	r5, r1
 8009f08:	4630      	mov	r0, r6
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	f7f6 fb7c 	bl	8000608 <__aeabi_dmul>
 8009f10:	460b      	mov	r3, r1
 8009f12:	4602      	mov	r2, r0
 8009f14:	4629      	mov	r1, r5
 8009f16:	4620      	mov	r0, r4
 8009f18:	f7f6 f9be 	bl	8000298 <__aeabi_dsub>
 8009f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8009fcc <__kernel_cos+0x17c>)
 8009f1e:	4598      	cmp	r8, r3
 8009f20:	4606      	mov	r6, r0
 8009f22:	460f      	mov	r7, r1
 8009f24:	d810      	bhi.n	8009f48 <__kernel_cos+0xf8>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4650      	mov	r0, sl
 8009f2c:	4659      	mov	r1, fp
 8009f2e:	f7f6 f9b3 	bl	8000298 <__aeabi_dsub>
 8009f32:	460b      	mov	r3, r1
 8009f34:	4926      	ldr	r1, [pc, #152]	@ (8009fd0 <__kernel_cos+0x180>)
 8009f36:	4602      	mov	r2, r0
 8009f38:	2000      	movs	r0, #0
 8009f3a:	f7f6 f9ad 	bl	8000298 <__aeabi_dsub>
 8009f3e:	ec41 0b10 	vmov	d0, r0, r1
 8009f42:	b003      	add	sp, #12
 8009f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f48:	4b22      	ldr	r3, [pc, #136]	@ (8009fd4 <__kernel_cos+0x184>)
 8009f4a:	4921      	ldr	r1, [pc, #132]	@ (8009fd0 <__kernel_cos+0x180>)
 8009f4c:	4598      	cmp	r8, r3
 8009f4e:	bf8c      	ite	hi
 8009f50:	4d21      	ldrhi	r5, [pc, #132]	@ (8009fd8 <__kernel_cos+0x188>)
 8009f52:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009f56:	2400      	movs	r4, #0
 8009f58:	4622      	mov	r2, r4
 8009f5a:	462b      	mov	r3, r5
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f7f6 f99b 	bl	8000298 <__aeabi_dsub>
 8009f62:	4622      	mov	r2, r4
 8009f64:	4680      	mov	r8, r0
 8009f66:	4689      	mov	r9, r1
 8009f68:	462b      	mov	r3, r5
 8009f6a:	4650      	mov	r0, sl
 8009f6c:	4659      	mov	r1, fp
 8009f6e:	f7f6 f993 	bl	8000298 <__aeabi_dsub>
 8009f72:	4632      	mov	r2, r6
 8009f74:	463b      	mov	r3, r7
 8009f76:	f7f6 f98f 	bl	8000298 <__aeabi_dsub>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4640      	mov	r0, r8
 8009f80:	4649      	mov	r1, r9
 8009f82:	e7da      	b.n	8009f3a <__kernel_cos+0xea>
 8009f84:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009fc0 <__kernel_cos+0x170>
 8009f88:	e7db      	b.n	8009f42 <__kernel_cos+0xf2>
 8009f8a:	bf00      	nop
 8009f8c:	f3af 8000 	nop.w
 8009f90:	be8838d4 	.word	0xbe8838d4
 8009f94:	bda8fae9 	.word	0xbda8fae9
 8009f98:	bdb4b1c4 	.word	0xbdb4b1c4
 8009f9c:	3e21ee9e 	.word	0x3e21ee9e
 8009fa0:	809c52ad 	.word	0x809c52ad
 8009fa4:	3e927e4f 	.word	0x3e927e4f
 8009fa8:	19cb1590 	.word	0x19cb1590
 8009fac:	3efa01a0 	.word	0x3efa01a0
 8009fb0:	16c15177 	.word	0x16c15177
 8009fb4:	3f56c16c 	.word	0x3f56c16c
 8009fb8:	5555554c 	.word	0x5555554c
 8009fbc:	3fa55555 	.word	0x3fa55555
 8009fc0:	00000000 	.word	0x00000000
 8009fc4:	3ff00000 	.word	0x3ff00000
 8009fc8:	3fe00000 	.word	0x3fe00000
 8009fcc:	3fd33332 	.word	0x3fd33332
 8009fd0:	3ff00000 	.word	0x3ff00000
 8009fd4:	3fe90000 	.word	0x3fe90000
 8009fd8:	3fd20000 	.word	0x3fd20000
 8009fdc:	00000000 	.word	0x00000000

08009fe0 <__kernel_sin>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	ec55 4b10 	vmov	r4, r5, d0
 8009fe8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009fec:	b085      	sub	sp, #20
 8009fee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009ff2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009ff6:	4680      	mov	r8, r0
 8009ff8:	d205      	bcs.n	800a006 <__kernel_sin+0x26>
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	f7f6 fdb3 	bl	8000b68 <__aeabi_d2iz>
 800a002:	2800      	cmp	r0, #0
 800a004:	d052      	beq.n	800a0ac <__kernel_sin+0xcc>
 800a006:	4622      	mov	r2, r4
 800a008:	462b      	mov	r3, r5
 800a00a:	4620      	mov	r0, r4
 800a00c:	4629      	mov	r1, r5
 800a00e:	f7f6 fafb 	bl	8000608 <__aeabi_dmul>
 800a012:	4682      	mov	sl, r0
 800a014:	468b      	mov	fp, r1
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	4620      	mov	r0, r4
 800a01c:	4629      	mov	r1, r5
 800a01e:	f7f6 faf3 	bl	8000608 <__aeabi_dmul>
 800a022:	a342      	add	r3, pc, #264	@ (adr r3, 800a12c <__kernel_sin+0x14c>)
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	e9cd 0100 	strd	r0, r1, [sp]
 800a02c:	4650      	mov	r0, sl
 800a02e:	4659      	mov	r1, fp
 800a030:	f7f6 faea 	bl	8000608 <__aeabi_dmul>
 800a034:	a33f      	add	r3, pc, #252	@ (adr r3, 800a134 <__kernel_sin+0x154>)
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	f7f6 f92d 	bl	8000298 <__aeabi_dsub>
 800a03e:	4652      	mov	r2, sl
 800a040:	465b      	mov	r3, fp
 800a042:	f7f6 fae1 	bl	8000608 <__aeabi_dmul>
 800a046:	a33d      	add	r3, pc, #244	@ (adr r3, 800a13c <__kernel_sin+0x15c>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	f7f6 f926 	bl	800029c <__adddf3>
 800a050:	4652      	mov	r2, sl
 800a052:	465b      	mov	r3, fp
 800a054:	f7f6 fad8 	bl	8000608 <__aeabi_dmul>
 800a058:	a33a      	add	r3, pc, #232	@ (adr r3, 800a144 <__kernel_sin+0x164>)
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	f7f6 f91b 	bl	8000298 <__aeabi_dsub>
 800a062:	4652      	mov	r2, sl
 800a064:	465b      	mov	r3, fp
 800a066:	f7f6 facf 	bl	8000608 <__aeabi_dmul>
 800a06a:	a338      	add	r3, pc, #224	@ (adr r3, 800a14c <__kernel_sin+0x16c>)
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	f7f6 f914 	bl	800029c <__adddf3>
 800a074:	4606      	mov	r6, r0
 800a076:	460f      	mov	r7, r1
 800a078:	f1b8 0f00 	cmp.w	r8, #0
 800a07c:	d11b      	bne.n	800a0b6 <__kernel_sin+0xd6>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4650      	mov	r0, sl
 800a084:	4659      	mov	r1, fp
 800a086:	f7f6 fabf 	bl	8000608 <__aeabi_dmul>
 800a08a:	a325      	add	r3, pc, #148	@ (adr r3, 800a120 <__kernel_sin+0x140>)
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	f7f6 f902 	bl	8000298 <__aeabi_dsub>
 800a094:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a098:	f7f6 fab6 	bl	8000608 <__aeabi_dmul>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	f7f6 f8fa 	bl	800029c <__adddf3>
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	ec45 4b10 	vmov	d0, r4, r5
 800a0b0:	b005      	add	sp, #20
 800a0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ba:	4b1b      	ldr	r3, [pc, #108]	@ (800a128 <__kernel_sin+0x148>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f7f6 faa3 	bl	8000608 <__aeabi_dmul>
 800a0c2:	4632      	mov	r2, r6
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	4689      	mov	r9, r1
 800a0c8:	463b      	mov	r3, r7
 800a0ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ce:	f7f6 fa9b 	bl	8000608 <__aeabi_dmul>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	4649      	mov	r1, r9
 800a0da:	f7f6 f8dd 	bl	8000298 <__aeabi_dsub>
 800a0de:	4652      	mov	r2, sl
 800a0e0:	465b      	mov	r3, fp
 800a0e2:	f7f6 fa91 	bl	8000608 <__aeabi_dmul>
 800a0e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0ea:	f7f6 f8d5 	bl	8000298 <__aeabi_dsub>
 800a0ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800a120 <__kernel_sin+0x140>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	460f      	mov	r7, r1
 800a0f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0fc:	f7f6 fa84 	bl	8000608 <__aeabi_dmul>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4630      	mov	r0, r6
 800a106:	4639      	mov	r1, r7
 800a108:	f7f6 f8c8 	bl	800029c <__adddf3>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	4620      	mov	r0, r4
 800a112:	4629      	mov	r1, r5
 800a114:	f7f6 f8c0 	bl	8000298 <__aeabi_dsub>
 800a118:	e7c6      	b.n	800a0a8 <__kernel_sin+0xc8>
 800a11a:	bf00      	nop
 800a11c:	f3af 8000 	nop.w
 800a120:	55555549 	.word	0x55555549
 800a124:	3fc55555 	.word	0x3fc55555
 800a128:	3fe00000 	.word	0x3fe00000
 800a12c:	5acfd57c 	.word	0x5acfd57c
 800a130:	3de5d93a 	.word	0x3de5d93a
 800a134:	8a2b9ceb 	.word	0x8a2b9ceb
 800a138:	3e5ae5e6 	.word	0x3e5ae5e6
 800a13c:	57b1fe7d 	.word	0x57b1fe7d
 800a140:	3ec71de3 	.word	0x3ec71de3
 800a144:	19c161d5 	.word	0x19c161d5
 800a148:	3f2a01a0 	.word	0x3f2a01a0
 800a14c:	1110f8a6 	.word	0x1110f8a6
 800a150:	3f811111 	.word	0x3f811111
 800a154:	00000000 	.word	0x00000000

0800a158 <__kernel_tan>:
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	ec5b ab10 	vmov	sl, fp, d0
 800a160:	4bdb      	ldr	r3, [pc, #876]	@ (800a4d0 <__kernel_tan+0x378>)
 800a162:	b089      	sub	sp, #36	@ 0x24
 800a164:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 800a168:	429f      	cmp	r7, r3
 800a16a:	ec59 8b11 	vmov	r8, r9, d1
 800a16e:	4606      	mov	r6, r0
 800a170:	f8cd b008 	str.w	fp, [sp, #8]
 800a174:	d85d      	bhi.n	800a232 <__kernel_tan+0xda>
 800a176:	4650      	mov	r0, sl
 800a178:	4659      	mov	r1, fp
 800a17a:	f7f6 fcf5 	bl	8000b68 <__aeabi_d2iz>
 800a17e:	4605      	mov	r5, r0
 800a180:	2800      	cmp	r0, #0
 800a182:	d17c      	bne.n	800a27e <__kernel_tan+0x126>
 800a184:	1c73      	adds	r3, r6, #1
 800a186:	4652      	mov	r2, sl
 800a188:	4313      	orrs	r3, r2
 800a18a:	433b      	orrs	r3, r7
 800a18c:	d110      	bne.n	800a1b0 <__kernel_tan+0x58>
 800a18e:	ec4b ab10 	vmov	d0, sl, fp
 800a192:	f000 fe41 	bl	800ae18 <fabs>
 800a196:	49cf      	ldr	r1, [pc, #828]	@ (800a4d4 <__kernel_tan+0x37c>)
 800a198:	ec53 2b10 	vmov	r2, r3, d0
 800a19c:	2000      	movs	r0, #0
 800a19e:	f7f6 fb5d 	bl	800085c <__aeabi_ddiv>
 800a1a2:	4682      	mov	sl, r0
 800a1a4:	468b      	mov	fp, r1
 800a1a6:	ec4b ab10 	vmov	d0, sl, fp
 800a1aa:	b009      	add	sp, #36	@ 0x24
 800a1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b0:	2e01      	cmp	r6, #1
 800a1b2:	d0f8      	beq.n	800a1a6 <__kernel_tan+0x4e>
 800a1b4:	4642      	mov	r2, r8
 800a1b6:	464b      	mov	r3, r9
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	4659      	mov	r1, fp
 800a1bc:	f7f6 f86e 	bl	800029c <__adddf3>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	460f      	mov	r7, r1
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	49c3      	ldr	r1, [pc, #780]	@ (800a4d8 <__kernel_tan+0x380>)
 800a1ca:	f7f6 fb47 	bl	800085c <__aeabi_ddiv>
 800a1ce:	e9cd 0100 	strd	r0, r1, [sp]
 800a1d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1d6:	462e      	mov	r6, r5
 800a1d8:	4652      	mov	r2, sl
 800a1da:	462c      	mov	r4, r5
 800a1dc:	4630      	mov	r0, r6
 800a1de:	461d      	mov	r5, r3
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	465b      	mov	r3, fp
 800a1e4:	f7f6 f858 	bl	8000298 <__aeabi_dsub>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4640      	mov	r0, r8
 800a1ee:	4649      	mov	r1, r9
 800a1f0:	f7f6 f852 	bl	8000298 <__aeabi_dsub>
 800a1f4:	4632      	mov	r2, r6
 800a1f6:	462b      	mov	r3, r5
 800a1f8:	f7f6 fa06 	bl	8000608 <__aeabi_dmul>
 800a1fc:	4632      	mov	r2, r6
 800a1fe:	4682      	mov	sl, r0
 800a200:	468b      	mov	fp, r1
 800a202:	462b      	mov	r3, r5
 800a204:	4630      	mov	r0, r6
 800a206:	4639      	mov	r1, r7
 800a208:	f7f6 f9fe 	bl	8000608 <__aeabi_dmul>
 800a20c:	4bb1      	ldr	r3, [pc, #708]	@ (800a4d4 <__kernel_tan+0x37c>)
 800a20e:	2200      	movs	r2, #0
 800a210:	f7f6 f844 	bl	800029c <__adddf3>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	4650      	mov	r0, sl
 800a21a:	4659      	mov	r1, fp
 800a21c:	f7f6 f83e 	bl	800029c <__adddf3>
 800a220:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a224:	f7f6 f9f0 	bl	8000608 <__aeabi_dmul>
 800a228:	4622      	mov	r2, r4
 800a22a:	462b      	mov	r3, r5
 800a22c:	f7f6 f836 	bl	800029c <__adddf3>
 800a230:	e7b7      	b.n	800a1a2 <__kernel_tan+0x4a>
 800a232:	4baa      	ldr	r3, [pc, #680]	@ (800a4dc <__kernel_tan+0x384>)
 800a234:	429f      	cmp	r7, r3
 800a236:	d922      	bls.n	800a27e <__kernel_tan+0x126>
 800a238:	9b02      	ldr	r3, [sp, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	da05      	bge.n	800a24a <__kernel_tan+0xf2>
 800a23e:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a242:	469b      	mov	fp, r3
 800a244:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a248:	4699      	mov	r9, r3
 800a24a:	4652      	mov	r2, sl
 800a24c:	465b      	mov	r3, fp
 800a24e:	a182      	add	r1, pc, #520	@ (adr r1, 800a458 <__kernel_tan+0x300>)
 800a250:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a254:	f7f6 f820 	bl	8000298 <__aeabi_dsub>
 800a258:	4642      	mov	r2, r8
 800a25a:	464b      	mov	r3, r9
 800a25c:	4604      	mov	r4, r0
 800a25e:	460d      	mov	r5, r1
 800a260:	a17f      	add	r1, pc, #508	@ (adr r1, 800a460 <__kernel_tan+0x308>)
 800a262:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a266:	f7f6 f817 	bl	8000298 <__aeabi_dsub>
 800a26a:	4622      	mov	r2, r4
 800a26c:	462b      	mov	r3, r5
 800a26e:	f7f6 f815 	bl	800029c <__adddf3>
 800a272:	f04f 0800 	mov.w	r8, #0
 800a276:	4682      	mov	sl, r0
 800a278:	468b      	mov	fp, r1
 800a27a:	f04f 0900 	mov.w	r9, #0
 800a27e:	4652      	mov	r2, sl
 800a280:	465b      	mov	r3, fp
 800a282:	4650      	mov	r0, sl
 800a284:	4659      	mov	r1, fp
 800a286:	f7f6 f9bf 	bl	8000608 <__aeabi_dmul>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	e9cd 2300 	strd	r2, r3, [sp]
 800a292:	f7f6 f9b9 	bl	8000608 <__aeabi_dmul>
 800a296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a29a:	4604      	mov	r4, r0
 800a29c:	460d      	mov	r5, r1
 800a29e:	4650      	mov	r0, sl
 800a2a0:	4659      	mov	r1, fp
 800a2a2:	f7f6 f9b1 	bl	8000608 <__aeabi_dmul>
 800a2a6:	a370      	add	r3, pc, #448	@ (adr r3, 800a468 <__kernel_tan+0x310>)
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	f7f6 f9a8 	bl	8000608 <__aeabi_dmul>
 800a2b8:	a36d      	add	r3, pc, #436	@ (adr r3, 800a470 <__kernel_tan+0x318>)
 800a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2be:	f7f5 ffed 	bl	800029c <__adddf3>
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	462b      	mov	r3, r5
 800a2c6:	f7f6 f99f 	bl	8000608 <__aeabi_dmul>
 800a2ca:	a36b      	add	r3, pc, #428	@ (adr r3, 800a478 <__kernel_tan+0x320>)
 800a2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d0:	f7f5 ffe4 	bl	800029c <__adddf3>
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	462b      	mov	r3, r5
 800a2d8:	f7f6 f996 	bl	8000608 <__aeabi_dmul>
 800a2dc:	a368      	add	r3, pc, #416	@ (adr r3, 800a480 <__kernel_tan+0x328>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f7f5 ffdb 	bl	800029c <__adddf3>
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	462b      	mov	r3, r5
 800a2ea:	f7f6 f98d 	bl	8000608 <__aeabi_dmul>
 800a2ee:	a366      	add	r3, pc, #408	@ (adr r3, 800a488 <__kernel_tan+0x330>)
 800a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f4:	f7f5 ffd2 	bl	800029c <__adddf3>
 800a2f8:	4622      	mov	r2, r4
 800a2fa:	462b      	mov	r3, r5
 800a2fc:	f7f6 f984 	bl	8000608 <__aeabi_dmul>
 800a300:	a363      	add	r3, pc, #396	@ (adr r3, 800a490 <__kernel_tan+0x338>)
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	f7f5 ffc9 	bl	800029c <__adddf3>
 800a30a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a30e:	f7f6 f97b 	bl	8000608 <__aeabi_dmul>
 800a312:	a361      	add	r3, pc, #388	@ (adr r3, 800a498 <__kernel_tan+0x340>)
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a31c:	4620      	mov	r0, r4
 800a31e:	4629      	mov	r1, r5
 800a320:	f7f6 f972 	bl	8000608 <__aeabi_dmul>
 800a324:	a35e      	add	r3, pc, #376	@ (adr r3, 800a4a0 <__kernel_tan+0x348>)
 800a326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32a:	f7f5 ffb7 	bl	800029c <__adddf3>
 800a32e:	4622      	mov	r2, r4
 800a330:	462b      	mov	r3, r5
 800a332:	f7f6 f969 	bl	8000608 <__aeabi_dmul>
 800a336:	a35c      	add	r3, pc, #368	@ (adr r3, 800a4a8 <__kernel_tan+0x350>)
 800a338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33c:	f7f5 ffae 	bl	800029c <__adddf3>
 800a340:	4622      	mov	r2, r4
 800a342:	462b      	mov	r3, r5
 800a344:	f7f6 f960 	bl	8000608 <__aeabi_dmul>
 800a348:	a359      	add	r3, pc, #356	@ (adr r3, 800a4b0 <__kernel_tan+0x358>)
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	f7f5 ffa5 	bl	800029c <__adddf3>
 800a352:	4622      	mov	r2, r4
 800a354:	462b      	mov	r3, r5
 800a356:	f7f6 f957 	bl	8000608 <__aeabi_dmul>
 800a35a:	a357      	add	r3, pc, #348	@ (adr r3, 800a4b8 <__kernel_tan+0x360>)
 800a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a360:	f7f5 ff9c 	bl	800029c <__adddf3>
 800a364:	4622      	mov	r2, r4
 800a366:	462b      	mov	r3, r5
 800a368:	f7f6 f94e 	bl	8000608 <__aeabi_dmul>
 800a36c:	a354      	add	r3, pc, #336	@ (adr r3, 800a4c0 <__kernel_tan+0x368>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	f7f5 ff93 	bl	800029c <__adddf3>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a37e:	f7f5 ff8d 	bl	800029c <__adddf3>
 800a382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a386:	f7f6 f93f 	bl	8000608 <__aeabi_dmul>
 800a38a:	4642      	mov	r2, r8
 800a38c:	464b      	mov	r3, r9
 800a38e:	f7f5 ff85 	bl	800029c <__adddf3>
 800a392:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a396:	f7f6 f937 	bl	8000608 <__aeabi_dmul>
 800a39a:	4642      	mov	r2, r8
 800a39c:	464b      	mov	r3, r9
 800a39e:	f7f5 ff7d 	bl	800029c <__adddf3>
 800a3a2:	a349      	add	r3, pc, #292	@ (adr r3, 800a4c8 <__kernel_tan+0x370>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	460d      	mov	r5, r1
 800a3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3b0:	f7f6 f92a 	bl	8000608 <__aeabi_dmul>
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	462b      	mov	r3, r5
 800a3b8:	f7f5 ff70 	bl	800029c <__adddf3>
 800a3bc:	e9cd 0100 	strd	r0, r1, [sp]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	4659      	mov	r1, fp
 800a3c6:	4650      	mov	r0, sl
 800a3c8:	f7f5 ff68 	bl	800029c <__adddf3>
 800a3cc:	4b43      	ldr	r3, [pc, #268]	@ (800a4dc <__kernel_tan+0x384>)
 800a3ce:	429f      	cmp	r7, r3
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	f240 8084 	bls.w	800a4e0 <__kernel_tan+0x388>
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f7f6 f8ab 	bl	8000534 <__aeabi_i2d>
 800a3de:	4622      	mov	r2, r4
 800a3e0:	4680      	mov	r8, r0
 800a3e2:	4689      	mov	r9, r1
 800a3e4:	462b      	mov	r3, r5
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	f7f6 f90d 	bl	8000608 <__aeabi_dmul>
 800a3ee:	4642      	mov	r2, r8
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	460f      	mov	r7, r1
 800a3f4:	464b      	mov	r3, r9
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	f7f5 ff4f 	bl	800029c <__adddf3>
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	4630      	mov	r0, r6
 800a404:	4639      	mov	r1, r7
 800a406:	f7f6 fa29 	bl	800085c <__aeabi_ddiv>
 800a40a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a40e:	f7f5 ff43 	bl	8000298 <__aeabi_dsub>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4650      	mov	r0, sl
 800a418:	4659      	mov	r1, fp
 800a41a:	f7f5 ff3d 	bl	8000298 <__aeabi_dsub>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	f7f5 ff3b 	bl	800029c <__adddf3>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	4640      	mov	r0, r8
 800a42c:	4649      	mov	r1, r9
 800a42e:	f7f5 ff33 	bl	8000298 <__aeabi_dsub>
 800a432:	9b02      	ldr	r3, [sp, #8]
 800a434:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800a438:	f00a 0a02 	and.w	sl, sl, #2
 800a43c:	4604      	mov	r4, r0
 800a43e:	f1ca 0001 	rsb	r0, sl, #1
 800a442:	460d      	mov	r5, r1
 800a444:	f7f6 f876 	bl	8000534 <__aeabi_i2d>
 800a448:	4602      	mov	r2, r0
 800a44a:	460b      	mov	r3, r1
 800a44c:	4620      	mov	r0, r4
 800a44e:	4629      	mov	r1, r5
 800a450:	f7f6 f8da 	bl	8000608 <__aeabi_dmul>
 800a454:	e6a5      	b.n	800a1a2 <__kernel_tan+0x4a>
 800a456:	bf00      	nop
 800a458:	54442d18 	.word	0x54442d18
 800a45c:	3fe921fb 	.word	0x3fe921fb
 800a460:	33145c07 	.word	0x33145c07
 800a464:	3c81a626 	.word	0x3c81a626
 800a468:	74bf7ad4 	.word	0x74bf7ad4
 800a46c:	3efb2a70 	.word	0x3efb2a70
 800a470:	32f0a7e9 	.word	0x32f0a7e9
 800a474:	3f12b80f 	.word	0x3f12b80f
 800a478:	1a8d1068 	.word	0x1a8d1068
 800a47c:	3f3026f7 	.word	0x3f3026f7
 800a480:	fee08315 	.word	0xfee08315
 800a484:	3f57dbc8 	.word	0x3f57dbc8
 800a488:	e96e8493 	.word	0xe96e8493
 800a48c:	3f8226e3 	.word	0x3f8226e3
 800a490:	1bb341fe 	.word	0x1bb341fe
 800a494:	3faba1ba 	.word	0x3faba1ba
 800a498:	db605373 	.word	0xdb605373
 800a49c:	bef375cb 	.word	0xbef375cb
 800a4a0:	a03792a6 	.word	0xa03792a6
 800a4a4:	3f147e88 	.word	0x3f147e88
 800a4a8:	f2f26501 	.word	0xf2f26501
 800a4ac:	3f4344d8 	.word	0x3f4344d8
 800a4b0:	c9560328 	.word	0xc9560328
 800a4b4:	3f6d6d22 	.word	0x3f6d6d22
 800a4b8:	8406d637 	.word	0x8406d637
 800a4bc:	3f9664f4 	.word	0x3f9664f4
 800a4c0:	1110fe7a 	.word	0x1110fe7a
 800a4c4:	3fc11111 	.word	0x3fc11111
 800a4c8:	55555563 	.word	0x55555563
 800a4cc:	3fd55555 	.word	0x3fd55555
 800a4d0:	3e2fffff 	.word	0x3e2fffff
 800a4d4:	3ff00000 	.word	0x3ff00000
 800a4d8:	bff00000 	.word	0xbff00000
 800a4dc:	3fe59427 	.word	0x3fe59427
 800a4e0:	2e01      	cmp	r6, #1
 800a4e2:	d033      	beq.n	800a54c <__kernel_tan+0x3f4>
 800a4e4:	f04f 0800 	mov.w	r8, #0
 800a4e8:	4689      	mov	r9, r1
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	4918      	ldr	r1, [pc, #96]	@ (800a554 <__kernel_tan+0x3fc>)
 800a4f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a4f6:	f7f6 f9b1 	bl	800085c <__aeabi_ddiv>
 800a4fa:	4652      	mov	r2, sl
 800a4fc:	460f      	mov	r7, r1
 800a4fe:	465b      	mov	r3, fp
 800a500:	4606      	mov	r6, r0
 800a502:	460d      	mov	r5, r1
 800a504:	4640      	mov	r0, r8
 800a506:	4649      	mov	r1, r9
 800a508:	f7f5 fec6 	bl	8000298 <__aeabi_dsub>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a514:	f7f5 fec0 	bl	8000298 <__aeabi_dsub>
 800a518:	4642      	mov	r2, r8
 800a51a:	463b      	mov	r3, r7
 800a51c:	f7f6 f874 	bl	8000608 <__aeabi_dmul>
 800a520:	4642      	mov	r2, r8
 800a522:	4682      	mov	sl, r0
 800a524:	468b      	mov	fp, r1
 800a526:	463b      	mov	r3, r7
 800a528:	4640      	mov	r0, r8
 800a52a:	4649      	mov	r1, r9
 800a52c:	f7f6 f86c 	bl	8000608 <__aeabi_dmul>
 800a530:	4b09      	ldr	r3, [pc, #36]	@ (800a558 <__kernel_tan+0x400>)
 800a532:	2200      	movs	r2, #0
 800a534:	f7f5 feb2 	bl	800029c <__adddf3>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4650      	mov	r0, sl
 800a53e:	4659      	mov	r1, fp
 800a540:	f7f5 feac 	bl	800029c <__adddf3>
 800a544:	4644      	mov	r4, r8
 800a546:	4632      	mov	r2, r6
 800a548:	463b      	mov	r3, r7
 800a54a:	e66b      	b.n	800a224 <__kernel_tan+0xcc>
 800a54c:	4682      	mov	sl, r0
 800a54e:	468b      	mov	fp, r1
 800a550:	e629      	b.n	800a1a6 <__kernel_tan+0x4e>
 800a552:	bf00      	nop
 800a554:	bff00000 	.word	0xbff00000
 800a558:	3ff00000 	.word	0x3ff00000
 800a55c:	00000000 	.word	0x00000000

0800a560 <__ieee754_atan2>:
 800a560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a564:	ec57 6b11 	vmov	r6, r7, d1
 800a568:	4273      	negs	r3, r6
 800a56a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800a6e8 <__ieee754_atan2+0x188>
 800a56e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800a572:	4333      	orrs	r3, r6
 800a574:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a578:	4543      	cmp	r3, r8
 800a57a:	ec51 0b10 	vmov	r0, r1, d0
 800a57e:	4635      	mov	r5, r6
 800a580:	d809      	bhi.n	800a596 <__ieee754_atan2+0x36>
 800a582:	4244      	negs	r4, r0
 800a584:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a588:	4304      	orrs	r4, r0
 800a58a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a58e:	4544      	cmp	r4, r8
 800a590:	468e      	mov	lr, r1
 800a592:	4681      	mov	r9, r0
 800a594:	d907      	bls.n	800a5a6 <__ieee754_atan2+0x46>
 800a596:	4632      	mov	r2, r6
 800a598:	463b      	mov	r3, r7
 800a59a:	f7f5 fe7f 	bl	800029c <__adddf3>
 800a59e:	ec41 0b10 	vmov	d0, r0, r1
 800a5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5a6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800a5aa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800a5ae:	4334      	orrs	r4, r6
 800a5b0:	d103      	bne.n	800a5ba <__ieee754_atan2+0x5a>
 800a5b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b6:	f000 ba97 	b.w	800aae8 <atan>
 800a5ba:	17bc      	asrs	r4, r7, #30
 800a5bc:	f004 0402 	and.w	r4, r4, #2
 800a5c0:	ea53 0909 	orrs.w	r9, r3, r9
 800a5c4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a5c8:	d107      	bne.n	800a5da <__ieee754_atan2+0x7a>
 800a5ca:	2c02      	cmp	r4, #2
 800a5cc:	d05f      	beq.n	800a68e <__ieee754_atan2+0x12e>
 800a5ce:	2c03      	cmp	r4, #3
 800a5d0:	d1e5      	bne.n	800a59e <__ieee754_atan2+0x3e>
 800a5d2:	a141      	add	r1, pc, #260	@ (adr r1, 800a6d8 <__ieee754_atan2+0x178>)
 800a5d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5d8:	e7e1      	b.n	800a59e <__ieee754_atan2+0x3e>
 800a5da:	4315      	orrs	r5, r2
 800a5dc:	d106      	bne.n	800a5ec <__ieee754_atan2+0x8c>
 800a5de:	f1be 0f00 	cmp.w	lr, #0
 800a5e2:	da5f      	bge.n	800a6a4 <__ieee754_atan2+0x144>
 800a5e4:	a13e      	add	r1, pc, #248	@ (adr r1, 800a6e0 <__ieee754_atan2+0x180>)
 800a5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ea:	e7d8      	b.n	800a59e <__ieee754_atan2+0x3e>
 800a5ec:	4542      	cmp	r2, r8
 800a5ee:	d10f      	bne.n	800a610 <__ieee754_atan2+0xb0>
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5f6:	d107      	bne.n	800a608 <__ieee754_atan2+0xa8>
 800a5f8:	2c02      	cmp	r4, #2
 800a5fa:	d84c      	bhi.n	800a696 <__ieee754_atan2+0x136>
 800a5fc:	4b34      	ldr	r3, [pc, #208]	@ (800a6d0 <__ieee754_atan2+0x170>)
 800a5fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a602:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a606:	e7ca      	b.n	800a59e <__ieee754_atan2+0x3e>
 800a608:	2c02      	cmp	r4, #2
 800a60a:	d848      	bhi.n	800a69e <__ieee754_atan2+0x13e>
 800a60c:	4b31      	ldr	r3, [pc, #196]	@ (800a6d4 <__ieee754_atan2+0x174>)
 800a60e:	e7f6      	b.n	800a5fe <__ieee754_atan2+0x9e>
 800a610:	4543      	cmp	r3, r8
 800a612:	d0e4      	beq.n	800a5de <__ieee754_atan2+0x7e>
 800a614:	1a9b      	subs	r3, r3, r2
 800a616:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a61a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a61e:	da1e      	bge.n	800a65e <__ieee754_atan2+0xfe>
 800a620:	2f00      	cmp	r7, #0
 800a622:	da01      	bge.n	800a628 <__ieee754_atan2+0xc8>
 800a624:	323c      	adds	r2, #60	@ 0x3c
 800a626:	db1e      	blt.n	800a666 <__ieee754_atan2+0x106>
 800a628:	4632      	mov	r2, r6
 800a62a:	463b      	mov	r3, r7
 800a62c:	f7f6 f916 	bl	800085c <__aeabi_ddiv>
 800a630:	ec41 0b10 	vmov	d0, r0, r1
 800a634:	f000 fbf0 	bl	800ae18 <fabs>
 800a638:	f000 fa56 	bl	800aae8 <atan>
 800a63c:	ec51 0b10 	vmov	r0, r1, d0
 800a640:	2c01      	cmp	r4, #1
 800a642:	d013      	beq.n	800a66c <__ieee754_atan2+0x10c>
 800a644:	2c02      	cmp	r4, #2
 800a646:	d015      	beq.n	800a674 <__ieee754_atan2+0x114>
 800a648:	2c00      	cmp	r4, #0
 800a64a:	d0a8      	beq.n	800a59e <__ieee754_atan2+0x3e>
 800a64c:	a318      	add	r3, pc, #96	@ (adr r3, 800a6b0 <__ieee754_atan2+0x150>)
 800a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a652:	f7f5 fe21 	bl	8000298 <__aeabi_dsub>
 800a656:	a318      	add	r3, pc, #96	@ (adr r3, 800a6b8 <__ieee754_atan2+0x158>)
 800a658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65c:	e014      	b.n	800a688 <__ieee754_atan2+0x128>
 800a65e:	a118      	add	r1, pc, #96	@ (adr r1, 800a6c0 <__ieee754_atan2+0x160>)
 800a660:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a664:	e7ec      	b.n	800a640 <__ieee754_atan2+0xe0>
 800a666:	2000      	movs	r0, #0
 800a668:	2100      	movs	r1, #0
 800a66a:	e7e9      	b.n	800a640 <__ieee754_atan2+0xe0>
 800a66c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a670:	4619      	mov	r1, r3
 800a672:	e794      	b.n	800a59e <__ieee754_atan2+0x3e>
 800a674:	a30e      	add	r3, pc, #56	@ (adr r3, 800a6b0 <__ieee754_atan2+0x150>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	f7f5 fe0d 	bl	8000298 <__aeabi_dsub>
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	a10d      	add	r1, pc, #52	@ (adr r1, 800a6b8 <__ieee754_atan2+0x158>)
 800a684:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a688:	f7f5 fe06 	bl	8000298 <__aeabi_dsub>
 800a68c:	e787      	b.n	800a59e <__ieee754_atan2+0x3e>
 800a68e:	a10a      	add	r1, pc, #40	@ (adr r1, 800a6b8 <__ieee754_atan2+0x158>)
 800a690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a694:	e783      	b.n	800a59e <__ieee754_atan2+0x3e>
 800a696:	a10c      	add	r1, pc, #48	@ (adr r1, 800a6c8 <__ieee754_atan2+0x168>)
 800a698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a69c:	e77f      	b.n	800a59e <__ieee754_atan2+0x3e>
 800a69e:	2000      	movs	r0, #0
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	e77c      	b.n	800a59e <__ieee754_atan2+0x3e>
 800a6a4:	a106      	add	r1, pc, #24	@ (adr r1, 800a6c0 <__ieee754_atan2+0x160>)
 800a6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6aa:	e778      	b.n	800a59e <__ieee754_atan2+0x3e>
 800a6ac:	f3af 8000 	nop.w
 800a6b0:	33145c07 	.word	0x33145c07
 800a6b4:	3ca1a626 	.word	0x3ca1a626
 800a6b8:	54442d18 	.word	0x54442d18
 800a6bc:	400921fb 	.word	0x400921fb
 800a6c0:	54442d18 	.word	0x54442d18
 800a6c4:	3ff921fb 	.word	0x3ff921fb
 800a6c8:	54442d18 	.word	0x54442d18
 800a6cc:	3fe921fb 	.word	0x3fe921fb
 800a6d0:	0800bc80 	.word	0x0800bc80
 800a6d4:	0800bc68 	.word	0x0800bc68
 800a6d8:	54442d18 	.word	0x54442d18
 800a6dc:	c00921fb 	.word	0xc00921fb
 800a6e0:	54442d18 	.word	0x54442d18
 800a6e4:	bff921fb 	.word	0xbff921fb
 800a6e8:	7ff00000 	.word	0x7ff00000
 800a6ec:	00000000 	.word	0x00000000

0800a6f0 <__ieee754_rem_pio2>:
 800a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f4:	ec57 6b10 	vmov	r6, r7, d0
 800a6f8:	4bc5      	ldr	r3, [pc, #788]	@ (800aa10 <__ieee754_rem_pio2+0x320>)
 800a6fa:	b08d      	sub	sp, #52	@ 0x34
 800a6fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a700:	4598      	cmp	r8, r3
 800a702:	4604      	mov	r4, r0
 800a704:	9704      	str	r7, [sp, #16]
 800a706:	d807      	bhi.n	800a718 <__ieee754_rem_pio2+0x28>
 800a708:	2200      	movs	r2, #0
 800a70a:	2300      	movs	r3, #0
 800a70c:	ed80 0b00 	vstr	d0, [r0]
 800a710:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a714:	2500      	movs	r5, #0
 800a716:	e028      	b.n	800a76a <__ieee754_rem_pio2+0x7a>
 800a718:	4bbe      	ldr	r3, [pc, #760]	@ (800aa14 <__ieee754_rem_pio2+0x324>)
 800a71a:	4598      	cmp	r8, r3
 800a71c:	d878      	bhi.n	800a810 <__ieee754_rem_pio2+0x120>
 800a71e:	9b04      	ldr	r3, [sp, #16]
 800a720:	4dbd      	ldr	r5, [pc, #756]	@ (800aa18 <__ieee754_rem_pio2+0x328>)
 800a722:	2b00      	cmp	r3, #0
 800a724:	4630      	mov	r0, r6
 800a726:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a9d8 <__ieee754_rem_pio2+0x2e8>)
 800a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72c:	4639      	mov	r1, r7
 800a72e:	dd38      	ble.n	800a7a2 <__ieee754_rem_pio2+0xb2>
 800a730:	f7f5 fdb2 	bl	8000298 <__aeabi_dsub>
 800a734:	45a8      	cmp	r8, r5
 800a736:	4606      	mov	r6, r0
 800a738:	460f      	mov	r7, r1
 800a73a:	d01a      	beq.n	800a772 <__ieee754_rem_pio2+0x82>
 800a73c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a9e0 <__ieee754_rem_pio2+0x2f0>)
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	f7f5 fda9 	bl	8000298 <__aeabi_dsub>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	4680      	mov	r8, r0
 800a74c:	4689      	mov	r9, r1
 800a74e:	4630      	mov	r0, r6
 800a750:	4639      	mov	r1, r7
 800a752:	f7f5 fda1 	bl	8000298 <__aeabi_dsub>
 800a756:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a9e0 <__ieee754_rem_pio2+0x2f0>)
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	f7f5 fd9c 	bl	8000298 <__aeabi_dsub>
 800a760:	e9c4 8900 	strd	r8, r9, [r4]
 800a764:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a768:	2501      	movs	r5, #1
 800a76a:	4628      	mov	r0, r5
 800a76c:	b00d      	add	sp, #52	@ 0x34
 800a76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a772:	a39d      	add	r3, pc, #628	@ (adr r3, 800a9e8 <__ieee754_rem_pio2+0x2f8>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f7f5 fd8e 	bl	8000298 <__aeabi_dsub>
 800a77c:	a39c      	add	r3, pc, #624	@ (adr r3, 800a9f0 <__ieee754_rem_pio2+0x300>)
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	4606      	mov	r6, r0
 800a784:	460f      	mov	r7, r1
 800a786:	f7f5 fd87 	bl	8000298 <__aeabi_dsub>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	4680      	mov	r8, r0
 800a790:	4689      	mov	r9, r1
 800a792:	4630      	mov	r0, r6
 800a794:	4639      	mov	r1, r7
 800a796:	f7f5 fd7f 	bl	8000298 <__aeabi_dsub>
 800a79a:	a395      	add	r3, pc, #596	@ (adr r3, 800a9f0 <__ieee754_rem_pio2+0x300>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	e7dc      	b.n	800a75c <__ieee754_rem_pio2+0x6c>
 800a7a2:	f7f5 fd7b 	bl	800029c <__adddf3>
 800a7a6:	45a8      	cmp	r8, r5
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	460f      	mov	r7, r1
 800a7ac:	d018      	beq.n	800a7e0 <__ieee754_rem_pio2+0xf0>
 800a7ae:	a38c      	add	r3, pc, #560	@ (adr r3, 800a9e0 <__ieee754_rem_pio2+0x2f0>)
 800a7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b4:	f7f5 fd72 	bl	800029c <__adddf3>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4680      	mov	r8, r0
 800a7be:	4689      	mov	r9, r1
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	f7f5 fd68 	bl	8000298 <__aeabi_dsub>
 800a7c8:	a385      	add	r3, pc, #532	@ (adr r3, 800a9e0 <__ieee754_rem_pio2+0x2f0>)
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	f7f5 fd65 	bl	800029c <__adddf3>
 800a7d2:	f04f 35ff 	mov.w	r5, #4294967295
 800a7d6:	e9c4 8900 	strd	r8, r9, [r4]
 800a7da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7de:	e7c4      	b.n	800a76a <__ieee754_rem_pio2+0x7a>
 800a7e0:	a381      	add	r3, pc, #516	@ (adr r3, 800a9e8 <__ieee754_rem_pio2+0x2f8>)
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	f7f5 fd59 	bl	800029c <__adddf3>
 800a7ea:	a381      	add	r3, pc, #516	@ (adr r3, 800a9f0 <__ieee754_rem_pio2+0x300>)
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	460f      	mov	r7, r1
 800a7f4:	f7f5 fd52 	bl	800029c <__adddf3>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	4689      	mov	r9, r1
 800a800:	4630      	mov	r0, r6
 800a802:	4639      	mov	r1, r7
 800a804:	f7f5 fd48 	bl	8000298 <__aeabi_dsub>
 800a808:	a379      	add	r3, pc, #484	@ (adr r3, 800a9f0 <__ieee754_rem_pio2+0x300>)
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	e7de      	b.n	800a7ce <__ieee754_rem_pio2+0xde>
 800a810:	4b82      	ldr	r3, [pc, #520]	@ (800aa1c <__ieee754_rem_pio2+0x32c>)
 800a812:	4598      	cmp	r8, r3
 800a814:	f200 80d1 	bhi.w	800a9ba <__ieee754_rem_pio2+0x2ca>
 800a818:	f000 fafe 	bl	800ae18 <fabs>
 800a81c:	ec57 6b10 	vmov	r6, r7, d0
 800a820:	a375      	add	r3, pc, #468	@ (adr r3, 800a9f8 <__ieee754_rem_pio2+0x308>)
 800a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a826:	4630      	mov	r0, r6
 800a828:	4639      	mov	r1, r7
 800a82a:	f7f5 feed 	bl	8000608 <__aeabi_dmul>
 800a82e:	4b7c      	ldr	r3, [pc, #496]	@ (800aa20 <__ieee754_rem_pio2+0x330>)
 800a830:	2200      	movs	r2, #0
 800a832:	f7f5 fd33 	bl	800029c <__adddf3>
 800a836:	f7f6 f997 	bl	8000b68 <__aeabi_d2iz>
 800a83a:	4605      	mov	r5, r0
 800a83c:	f7f5 fe7a 	bl	8000534 <__aeabi_i2d>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a848:	a363      	add	r3, pc, #396	@ (adr r3, 800a9d8 <__ieee754_rem_pio2+0x2e8>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	f7f5 fedb 	bl	8000608 <__aeabi_dmul>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	4630      	mov	r0, r6
 800a858:	4639      	mov	r1, r7
 800a85a:	f7f5 fd1d 	bl	8000298 <__aeabi_dsub>
 800a85e:	a360      	add	r3, pc, #384	@ (adr r3, 800a9e0 <__ieee754_rem_pio2+0x2f0>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	4682      	mov	sl, r0
 800a866:	468b      	mov	fp, r1
 800a868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a86c:	f7f5 fecc 	bl	8000608 <__aeabi_dmul>
 800a870:	2d1f      	cmp	r5, #31
 800a872:	4606      	mov	r6, r0
 800a874:	460f      	mov	r7, r1
 800a876:	dc0c      	bgt.n	800a892 <__ieee754_rem_pio2+0x1a2>
 800a878:	4b6a      	ldr	r3, [pc, #424]	@ (800aa24 <__ieee754_rem_pio2+0x334>)
 800a87a:	1e6a      	subs	r2, r5, #1
 800a87c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a880:	4543      	cmp	r3, r8
 800a882:	d006      	beq.n	800a892 <__ieee754_rem_pio2+0x1a2>
 800a884:	4632      	mov	r2, r6
 800a886:	463b      	mov	r3, r7
 800a888:	4650      	mov	r0, sl
 800a88a:	4659      	mov	r1, fp
 800a88c:	f7f5 fd04 	bl	8000298 <__aeabi_dsub>
 800a890:	e00e      	b.n	800a8b0 <__ieee754_rem_pio2+0x1c0>
 800a892:	463b      	mov	r3, r7
 800a894:	4632      	mov	r2, r6
 800a896:	4650      	mov	r0, sl
 800a898:	4659      	mov	r1, fp
 800a89a:	f7f5 fcfd 	bl	8000298 <__aeabi_dsub>
 800a89e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a8a2:	9305      	str	r3, [sp, #20]
 800a8a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a8a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a8ac:	2b10      	cmp	r3, #16
 800a8ae:	dc02      	bgt.n	800a8b6 <__ieee754_rem_pio2+0x1c6>
 800a8b0:	e9c4 0100 	strd	r0, r1, [r4]
 800a8b4:	e039      	b.n	800a92a <__ieee754_rem_pio2+0x23a>
 800a8b6:	a34c      	add	r3, pc, #304	@ (adr r3, 800a9e8 <__ieee754_rem_pio2+0x2f8>)
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8c0:	f7f5 fea2 	bl	8000608 <__aeabi_dmul>
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	460f      	mov	r7, r1
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4650      	mov	r0, sl
 800a8ce:	4659      	mov	r1, fp
 800a8d0:	f7f5 fce2 	bl	8000298 <__aeabi_dsub>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4680      	mov	r8, r0
 800a8da:	4689      	mov	r9, r1
 800a8dc:	4650      	mov	r0, sl
 800a8de:	4659      	mov	r1, fp
 800a8e0:	f7f5 fcda 	bl	8000298 <__aeabi_dsub>
 800a8e4:	4632      	mov	r2, r6
 800a8e6:	463b      	mov	r3, r7
 800a8e8:	f7f5 fcd6 	bl	8000298 <__aeabi_dsub>
 800a8ec:	a340      	add	r3, pc, #256	@ (adr r3, 800a9f0 <__ieee754_rem_pio2+0x300>)
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	460f      	mov	r7, r1
 800a8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8fa:	f7f5 fe85 	bl	8000608 <__aeabi_dmul>
 800a8fe:	4632      	mov	r2, r6
 800a900:	463b      	mov	r3, r7
 800a902:	f7f5 fcc9 	bl	8000298 <__aeabi_dsub>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4606      	mov	r6, r0
 800a90c:	460f      	mov	r7, r1
 800a90e:	4640      	mov	r0, r8
 800a910:	4649      	mov	r1, r9
 800a912:	f7f5 fcc1 	bl	8000298 <__aeabi_dsub>
 800a916:	9a05      	ldr	r2, [sp, #20]
 800a918:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	2b31      	cmp	r3, #49	@ 0x31
 800a920:	dc20      	bgt.n	800a964 <__ieee754_rem_pio2+0x274>
 800a922:	e9c4 0100 	strd	r0, r1, [r4]
 800a926:	46c2      	mov	sl, r8
 800a928:	46cb      	mov	fp, r9
 800a92a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a92e:	4650      	mov	r0, sl
 800a930:	4642      	mov	r2, r8
 800a932:	464b      	mov	r3, r9
 800a934:	4659      	mov	r1, fp
 800a936:	f7f5 fcaf 	bl	8000298 <__aeabi_dsub>
 800a93a:	463b      	mov	r3, r7
 800a93c:	4632      	mov	r2, r6
 800a93e:	f7f5 fcab 	bl	8000298 <__aeabi_dsub>
 800a942:	9b04      	ldr	r3, [sp, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a94a:	f6bf af0e 	bge.w	800a76a <__ieee754_rem_pio2+0x7a>
 800a94e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a952:	6063      	str	r3, [r4, #4]
 800a954:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a958:	f8c4 8000 	str.w	r8, [r4]
 800a95c:	60a0      	str	r0, [r4, #8]
 800a95e:	60e3      	str	r3, [r4, #12]
 800a960:	426d      	negs	r5, r5
 800a962:	e702      	b.n	800a76a <__ieee754_rem_pio2+0x7a>
 800a964:	a326      	add	r3, pc, #152	@ (adr r3, 800aa00 <__ieee754_rem_pio2+0x310>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a96e:	f7f5 fe4b 	bl	8000608 <__aeabi_dmul>
 800a972:	4606      	mov	r6, r0
 800a974:	460f      	mov	r7, r1
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4640      	mov	r0, r8
 800a97c:	4649      	mov	r1, r9
 800a97e:	f7f5 fc8b 	bl	8000298 <__aeabi_dsub>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4682      	mov	sl, r0
 800a988:	468b      	mov	fp, r1
 800a98a:	4640      	mov	r0, r8
 800a98c:	4649      	mov	r1, r9
 800a98e:	f7f5 fc83 	bl	8000298 <__aeabi_dsub>
 800a992:	4632      	mov	r2, r6
 800a994:	463b      	mov	r3, r7
 800a996:	f7f5 fc7f 	bl	8000298 <__aeabi_dsub>
 800a99a:	a31b      	add	r3, pc, #108	@ (adr r3, 800aa08 <__ieee754_rem_pio2+0x318>)
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	460f      	mov	r7, r1
 800a9a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9a8:	f7f5 fe2e 	bl	8000608 <__aeabi_dmul>
 800a9ac:	4632      	mov	r2, r6
 800a9ae:	463b      	mov	r3, r7
 800a9b0:	f7f5 fc72 	bl	8000298 <__aeabi_dsub>
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	460f      	mov	r7, r1
 800a9b8:	e764      	b.n	800a884 <__ieee754_rem_pio2+0x194>
 800a9ba:	4b1b      	ldr	r3, [pc, #108]	@ (800aa28 <__ieee754_rem_pio2+0x338>)
 800a9bc:	4598      	cmp	r8, r3
 800a9be:	d935      	bls.n	800aa2c <__ieee754_rem_pio2+0x33c>
 800a9c0:	4632      	mov	r2, r6
 800a9c2:	463b      	mov	r3, r7
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	f7f5 fc66 	bl	8000298 <__aeabi_dsub>
 800a9cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a9d0:	e9c4 0100 	strd	r0, r1, [r4]
 800a9d4:	e69e      	b.n	800a714 <__ieee754_rem_pio2+0x24>
 800a9d6:	bf00      	nop
 800a9d8:	54400000 	.word	0x54400000
 800a9dc:	3ff921fb 	.word	0x3ff921fb
 800a9e0:	1a626331 	.word	0x1a626331
 800a9e4:	3dd0b461 	.word	0x3dd0b461
 800a9e8:	1a600000 	.word	0x1a600000
 800a9ec:	3dd0b461 	.word	0x3dd0b461
 800a9f0:	2e037073 	.word	0x2e037073
 800a9f4:	3ba3198a 	.word	0x3ba3198a
 800a9f8:	6dc9c883 	.word	0x6dc9c883
 800a9fc:	3fe45f30 	.word	0x3fe45f30
 800aa00:	2e000000 	.word	0x2e000000
 800aa04:	3ba3198a 	.word	0x3ba3198a
 800aa08:	252049c1 	.word	0x252049c1
 800aa0c:	397b839a 	.word	0x397b839a
 800aa10:	3fe921fb 	.word	0x3fe921fb
 800aa14:	4002d97b 	.word	0x4002d97b
 800aa18:	3ff921fb 	.word	0x3ff921fb
 800aa1c:	413921fb 	.word	0x413921fb
 800aa20:	3fe00000 	.word	0x3fe00000
 800aa24:	0800bc98 	.word	0x0800bc98
 800aa28:	7fefffff 	.word	0x7fefffff
 800aa2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800aa30:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800aa34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800aa38:	4630      	mov	r0, r6
 800aa3a:	460f      	mov	r7, r1
 800aa3c:	f7f6 f894 	bl	8000b68 <__aeabi_d2iz>
 800aa40:	f7f5 fd78 	bl	8000534 <__aeabi_i2d>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa50:	f7f5 fc22 	bl	8000298 <__aeabi_dsub>
 800aa54:	4b22      	ldr	r3, [pc, #136]	@ (800aae0 <__ieee754_rem_pio2+0x3f0>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	f7f5 fdd6 	bl	8000608 <__aeabi_dmul>
 800aa5c:	460f      	mov	r7, r1
 800aa5e:	4606      	mov	r6, r0
 800aa60:	f7f6 f882 	bl	8000b68 <__aeabi_d2iz>
 800aa64:	f7f5 fd66 	bl	8000534 <__aeabi_i2d>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	4639      	mov	r1, r7
 800aa70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa74:	f7f5 fc10 	bl	8000298 <__aeabi_dsub>
 800aa78:	4b19      	ldr	r3, [pc, #100]	@ (800aae0 <__ieee754_rem_pio2+0x3f0>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f7f5 fdc4 	bl	8000608 <__aeabi_dmul>
 800aa80:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800aa84:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800aa88:	f04f 0803 	mov.w	r8, #3
 800aa8c:	2600      	movs	r6, #0
 800aa8e:	2700      	movs	r7, #0
 800aa90:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800aa94:	4632      	mov	r2, r6
 800aa96:	463b      	mov	r3, r7
 800aa98:	46c2      	mov	sl, r8
 800aa9a:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa9e:	f7f6 f81b 	bl	8000ad8 <__aeabi_dcmpeq>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	d1f4      	bne.n	800aa90 <__ieee754_rem_pio2+0x3a0>
 800aaa6:	4b0f      	ldr	r3, [pc, #60]	@ (800aae4 <__ieee754_rem_pio2+0x3f4>)
 800aaa8:	9301      	str	r3, [sp, #4]
 800aaaa:	2302      	movs	r3, #2
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	462a      	mov	r2, r5
 800aab0:	4653      	mov	r3, sl
 800aab2:	4621      	mov	r1, r4
 800aab4:	a806      	add	r0, sp, #24
 800aab6:	f000 f9b7 	bl	800ae28 <__kernel_rem_pio2>
 800aaba:	9b04      	ldr	r3, [sp, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	4605      	mov	r5, r0
 800aac0:	f6bf ae53 	bge.w	800a76a <__ieee754_rem_pio2+0x7a>
 800aac4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800aac8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aacc:	e9c4 2300 	strd	r2, r3, [r4]
 800aad0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800aad4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aad8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800aadc:	e740      	b.n	800a960 <__ieee754_rem_pio2+0x270>
 800aade:	bf00      	nop
 800aae0:	41700000 	.word	0x41700000
 800aae4:	0800bd18 	.word	0x0800bd18

0800aae8 <atan>:
 800aae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaec:	ec55 4b10 	vmov	r4, r5, d0
 800aaf0:	4bbf      	ldr	r3, [pc, #764]	@ (800adf0 <atan+0x308>)
 800aaf2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800aaf6:	429e      	cmp	r6, r3
 800aaf8:	46ab      	mov	fp, r5
 800aafa:	d918      	bls.n	800ab2e <atan+0x46>
 800aafc:	4bbd      	ldr	r3, [pc, #756]	@ (800adf4 <atan+0x30c>)
 800aafe:	429e      	cmp	r6, r3
 800ab00:	d801      	bhi.n	800ab06 <atan+0x1e>
 800ab02:	d109      	bne.n	800ab18 <atan+0x30>
 800ab04:	b144      	cbz	r4, 800ab18 <atan+0x30>
 800ab06:	4622      	mov	r2, r4
 800ab08:	462b      	mov	r3, r5
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	f7f5 fbc5 	bl	800029c <__adddf3>
 800ab12:	4604      	mov	r4, r0
 800ab14:	460d      	mov	r5, r1
 800ab16:	e006      	b.n	800ab26 <atan+0x3e>
 800ab18:	f1bb 0f00 	cmp.w	fp, #0
 800ab1c:	f340 812b 	ble.w	800ad76 <atan+0x28e>
 800ab20:	a597      	add	r5, pc, #604	@ (adr r5, 800ad80 <atan+0x298>)
 800ab22:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ab26:	ec45 4b10 	vmov	d0, r4, r5
 800ab2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2e:	4bb2      	ldr	r3, [pc, #712]	@ (800adf8 <atan+0x310>)
 800ab30:	429e      	cmp	r6, r3
 800ab32:	d813      	bhi.n	800ab5c <atan+0x74>
 800ab34:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ab38:	429e      	cmp	r6, r3
 800ab3a:	d80c      	bhi.n	800ab56 <atan+0x6e>
 800ab3c:	a392      	add	r3, pc, #584	@ (adr r3, 800ad88 <atan+0x2a0>)
 800ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab42:	4620      	mov	r0, r4
 800ab44:	4629      	mov	r1, r5
 800ab46:	f7f5 fba9 	bl	800029c <__adddf3>
 800ab4a:	4bac      	ldr	r3, [pc, #688]	@ (800adfc <atan+0x314>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f7f5 ffeb 	bl	8000b28 <__aeabi_dcmpgt>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d1e7      	bne.n	800ab26 <atan+0x3e>
 800ab56:	f04f 3aff 	mov.w	sl, #4294967295
 800ab5a:	e029      	b.n	800abb0 <atan+0xc8>
 800ab5c:	f000 f95c 	bl	800ae18 <fabs>
 800ab60:	4ba7      	ldr	r3, [pc, #668]	@ (800ae00 <atan+0x318>)
 800ab62:	429e      	cmp	r6, r3
 800ab64:	ec55 4b10 	vmov	r4, r5, d0
 800ab68:	f200 80bc 	bhi.w	800ace4 <atan+0x1fc>
 800ab6c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ab70:	429e      	cmp	r6, r3
 800ab72:	f200 809e 	bhi.w	800acb2 <atan+0x1ca>
 800ab76:	4622      	mov	r2, r4
 800ab78:	462b      	mov	r3, r5
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	f7f5 fb8d 	bl	800029c <__adddf3>
 800ab82:	4b9e      	ldr	r3, [pc, #632]	@ (800adfc <atan+0x314>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	f7f5 fb87 	bl	8000298 <__aeabi_dsub>
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	460f      	mov	r7, r1
 800ab90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ab94:	4620      	mov	r0, r4
 800ab96:	4629      	mov	r1, r5
 800ab98:	f7f5 fb80 	bl	800029c <__adddf3>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4630      	mov	r0, r6
 800aba2:	4639      	mov	r1, r7
 800aba4:	f7f5 fe5a 	bl	800085c <__aeabi_ddiv>
 800aba8:	f04f 0a00 	mov.w	sl, #0
 800abac:	4604      	mov	r4, r0
 800abae:	460d      	mov	r5, r1
 800abb0:	4622      	mov	r2, r4
 800abb2:	462b      	mov	r3, r5
 800abb4:	4620      	mov	r0, r4
 800abb6:	4629      	mov	r1, r5
 800abb8:	f7f5 fd26 	bl	8000608 <__aeabi_dmul>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4680      	mov	r8, r0
 800abc2:	4689      	mov	r9, r1
 800abc4:	f7f5 fd20 	bl	8000608 <__aeabi_dmul>
 800abc8:	a371      	add	r3, pc, #452	@ (adr r3, 800ad90 <atan+0x2a8>)
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	4606      	mov	r6, r0
 800abd0:	460f      	mov	r7, r1
 800abd2:	f7f5 fd19 	bl	8000608 <__aeabi_dmul>
 800abd6:	a370      	add	r3, pc, #448	@ (adr r3, 800ad98 <atan+0x2b0>)
 800abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abdc:	f7f5 fb5e 	bl	800029c <__adddf3>
 800abe0:	4632      	mov	r2, r6
 800abe2:	463b      	mov	r3, r7
 800abe4:	f7f5 fd10 	bl	8000608 <__aeabi_dmul>
 800abe8:	a36d      	add	r3, pc, #436	@ (adr r3, 800ada0 <atan+0x2b8>)
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	f7f5 fb55 	bl	800029c <__adddf3>
 800abf2:	4632      	mov	r2, r6
 800abf4:	463b      	mov	r3, r7
 800abf6:	f7f5 fd07 	bl	8000608 <__aeabi_dmul>
 800abfa:	a36b      	add	r3, pc, #428	@ (adr r3, 800ada8 <atan+0x2c0>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f7f5 fb4c 	bl	800029c <__adddf3>
 800ac04:	4632      	mov	r2, r6
 800ac06:	463b      	mov	r3, r7
 800ac08:	f7f5 fcfe 	bl	8000608 <__aeabi_dmul>
 800ac0c:	a368      	add	r3, pc, #416	@ (adr r3, 800adb0 <atan+0x2c8>)
 800ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac12:	f7f5 fb43 	bl	800029c <__adddf3>
 800ac16:	4632      	mov	r2, r6
 800ac18:	463b      	mov	r3, r7
 800ac1a:	f7f5 fcf5 	bl	8000608 <__aeabi_dmul>
 800ac1e:	a366      	add	r3, pc, #408	@ (adr r3, 800adb8 <atan+0x2d0>)
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	f7f5 fb3a 	bl	800029c <__adddf3>
 800ac28:	4642      	mov	r2, r8
 800ac2a:	464b      	mov	r3, r9
 800ac2c:	f7f5 fcec 	bl	8000608 <__aeabi_dmul>
 800ac30:	a363      	add	r3, pc, #396	@ (adr r3, 800adc0 <atan+0x2d8>)
 800ac32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac36:	4680      	mov	r8, r0
 800ac38:	4689      	mov	r9, r1
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	4639      	mov	r1, r7
 800ac3e:	f7f5 fce3 	bl	8000608 <__aeabi_dmul>
 800ac42:	a361      	add	r3, pc, #388	@ (adr r3, 800adc8 <atan+0x2e0>)
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	f7f5 fb26 	bl	8000298 <__aeabi_dsub>
 800ac4c:	4632      	mov	r2, r6
 800ac4e:	463b      	mov	r3, r7
 800ac50:	f7f5 fcda 	bl	8000608 <__aeabi_dmul>
 800ac54:	a35e      	add	r3, pc, #376	@ (adr r3, 800add0 <atan+0x2e8>)
 800ac56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5a:	f7f5 fb1d 	bl	8000298 <__aeabi_dsub>
 800ac5e:	4632      	mov	r2, r6
 800ac60:	463b      	mov	r3, r7
 800ac62:	f7f5 fcd1 	bl	8000608 <__aeabi_dmul>
 800ac66:	a35c      	add	r3, pc, #368	@ (adr r3, 800add8 <atan+0x2f0>)
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	f7f5 fb14 	bl	8000298 <__aeabi_dsub>
 800ac70:	4632      	mov	r2, r6
 800ac72:	463b      	mov	r3, r7
 800ac74:	f7f5 fcc8 	bl	8000608 <__aeabi_dmul>
 800ac78:	a359      	add	r3, pc, #356	@ (adr r3, 800ade0 <atan+0x2f8>)
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	f7f5 fb0b 	bl	8000298 <__aeabi_dsub>
 800ac82:	4632      	mov	r2, r6
 800ac84:	463b      	mov	r3, r7
 800ac86:	f7f5 fcbf 	bl	8000608 <__aeabi_dmul>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4640      	mov	r0, r8
 800ac90:	4649      	mov	r1, r9
 800ac92:	f7f5 fb03 	bl	800029c <__adddf3>
 800ac96:	4622      	mov	r2, r4
 800ac98:	462b      	mov	r3, r5
 800ac9a:	f7f5 fcb5 	bl	8000608 <__aeabi_dmul>
 800ac9e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800aca2:	4602      	mov	r2, r0
 800aca4:	460b      	mov	r3, r1
 800aca6:	d148      	bne.n	800ad3a <atan+0x252>
 800aca8:	4620      	mov	r0, r4
 800acaa:	4629      	mov	r1, r5
 800acac:	f7f5 faf4 	bl	8000298 <__aeabi_dsub>
 800acb0:	e72f      	b.n	800ab12 <atan+0x2a>
 800acb2:	4b52      	ldr	r3, [pc, #328]	@ (800adfc <atan+0x314>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	4620      	mov	r0, r4
 800acb8:	4629      	mov	r1, r5
 800acba:	f7f5 faed 	bl	8000298 <__aeabi_dsub>
 800acbe:	4b4f      	ldr	r3, [pc, #316]	@ (800adfc <atan+0x314>)
 800acc0:	4606      	mov	r6, r0
 800acc2:	460f      	mov	r7, r1
 800acc4:	2200      	movs	r2, #0
 800acc6:	4620      	mov	r0, r4
 800acc8:	4629      	mov	r1, r5
 800acca:	f7f5 fae7 	bl	800029c <__adddf3>
 800acce:	4602      	mov	r2, r0
 800acd0:	460b      	mov	r3, r1
 800acd2:	4630      	mov	r0, r6
 800acd4:	4639      	mov	r1, r7
 800acd6:	f7f5 fdc1 	bl	800085c <__aeabi_ddiv>
 800acda:	f04f 0a01 	mov.w	sl, #1
 800acde:	4604      	mov	r4, r0
 800ace0:	460d      	mov	r5, r1
 800ace2:	e765      	b.n	800abb0 <atan+0xc8>
 800ace4:	4b47      	ldr	r3, [pc, #284]	@ (800ae04 <atan+0x31c>)
 800ace6:	429e      	cmp	r6, r3
 800ace8:	d21c      	bcs.n	800ad24 <atan+0x23c>
 800acea:	4b47      	ldr	r3, [pc, #284]	@ (800ae08 <atan+0x320>)
 800acec:	2200      	movs	r2, #0
 800acee:	4620      	mov	r0, r4
 800acf0:	4629      	mov	r1, r5
 800acf2:	f7f5 fad1 	bl	8000298 <__aeabi_dsub>
 800acf6:	4b44      	ldr	r3, [pc, #272]	@ (800ae08 <atan+0x320>)
 800acf8:	4606      	mov	r6, r0
 800acfa:	460f      	mov	r7, r1
 800acfc:	2200      	movs	r2, #0
 800acfe:	4620      	mov	r0, r4
 800ad00:	4629      	mov	r1, r5
 800ad02:	f7f5 fc81 	bl	8000608 <__aeabi_dmul>
 800ad06:	4b3d      	ldr	r3, [pc, #244]	@ (800adfc <atan+0x314>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f7f5 fac7 	bl	800029c <__adddf3>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	460b      	mov	r3, r1
 800ad12:	4630      	mov	r0, r6
 800ad14:	4639      	mov	r1, r7
 800ad16:	f7f5 fda1 	bl	800085c <__aeabi_ddiv>
 800ad1a:	f04f 0a02 	mov.w	sl, #2
 800ad1e:	4604      	mov	r4, r0
 800ad20:	460d      	mov	r5, r1
 800ad22:	e745      	b.n	800abb0 <atan+0xc8>
 800ad24:	4622      	mov	r2, r4
 800ad26:	462b      	mov	r3, r5
 800ad28:	4938      	ldr	r1, [pc, #224]	@ (800ae0c <atan+0x324>)
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	f7f5 fd96 	bl	800085c <__aeabi_ddiv>
 800ad30:	f04f 0a03 	mov.w	sl, #3
 800ad34:	4604      	mov	r4, r0
 800ad36:	460d      	mov	r5, r1
 800ad38:	e73a      	b.n	800abb0 <atan+0xc8>
 800ad3a:	4b35      	ldr	r3, [pc, #212]	@ (800ae10 <atan+0x328>)
 800ad3c:	4e35      	ldr	r6, [pc, #212]	@ (800ae14 <atan+0x32c>)
 800ad3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f7f5 faa7 	bl	8000298 <__aeabi_dsub>
 800ad4a:	4622      	mov	r2, r4
 800ad4c:	462b      	mov	r3, r5
 800ad4e:	f7f5 faa3 	bl	8000298 <__aeabi_dsub>
 800ad52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ad56:	4602      	mov	r2, r0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ad5e:	f7f5 fa9b 	bl	8000298 <__aeabi_dsub>
 800ad62:	f1bb 0f00 	cmp.w	fp, #0
 800ad66:	4604      	mov	r4, r0
 800ad68:	460d      	mov	r5, r1
 800ad6a:	f6bf aedc 	bge.w	800ab26 <atan+0x3e>
 800ad6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad72:	461d      	mov	r5, r3
 800ad74:	e6d7      	b.n	800ab26 <atan+0x3e>
 800ad76:	a51c      	add	r5, pc, #112	@ (adr r5, 800ade8 <atan+0x300>)
 800ad78:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ad7c:	e6d3      	b.n	800ab26 <atan+0x3e>
 800ad7e:	bf00      	nop
 800ad80:	54442d18 	.word	0x54442d18
 800ad84:	3ff921fb 	.word	0x3ff921fb
 800ad88:	8800759c 	.word	0x8800759c
 800ad8c:	7e37e43c 	.word	0x7e37e43c
 800ad90:	e322da11 	.word	0xe322da11
 800ad94:	3f90ad3a 	.word	0x3f90ad3a
 800ad98:	24760deb 	.word	0x24760deb
 800ad9c:	3fa97b4b 	.word	0x3fa97b4b
 800ada0:	a0d03d51 	.word	0xa0d03d51
 800ada4:	3fb10d66 	.word	0x3fb10d66
 800ada8:	c54c206e 	.word	0xc54c206e
 800adac:	3fb745cd 	.word	0x3fb745cd
 800adb0:	920083ff 	.word	0x920083ff
 800adb4:	3fc24924 	.word	0x3fc24924
 800adb8:	5555550d 	.word	0x5555550d
 800adbc:	3fd55555 	.word	0x3fd55555
 800adc0:	2c6a6c2f 	.word	0x2c6a6c2f
 800adc4:	bfa2b444 	.word	0xbfa2b444
 800adc8:	52defd9a 	.word	0x52defd9a
 800adcc:	3fadde2d 	.word	0x3fadde2d
 800add0:	af749a6d 	.word	0xaf749a6d
 800add4:	3fb3b0f2 	.word	0x3fb3b0f2
 800add8:	fe231671 	.word	0xfe231671
 800addc:	3fbc71c6 	.word	0x3fbc71c6
 800ade0:	9998ebc4 	.word	0x9998ebc4
 800ade4:	3fc99999 	.word	0x3fc99999
 800ade8:	54442d18 	.word	0x54442d18
 800adec:	bff921fb 	.word	0xbff921fb
 800adf0:	440fffff 	.word	0x440fffff
 800adf4:	7ff00000 	.word	0x7ff00000
 800adf8:	3fdbffff 	.word	0x3fdbffff
 800adfc:	3ff00000 	.word	0x3ff00000
 800ae00:	3ff2ffff 	.word	0x3ff2ffff
 800ae04:	40038000 	.word	0x40038000
 800ae08:	3ff80000 	.word	0x3ff80000
 800ae0c:	bff00000 	.word	0xbff00000
 800ae10:	0800be20 	.word	0x0800be20
 800ae14:	0800be40 	.word	0x0800be40

0800ae18 <fabs>:
 800ae18:	ec51 0b10 	vmov	r0, r1, d0
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ae22:	ec43 2b10 	vmov	d0, r2, r3
 800ae26:	4770      	bx	lr

0800ae28 <__kernel_rem_pio2>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	ed2d 8b02 	vpush	{d8}
 800ae30:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ae34:	f112 0f14 	cmn.w	r2, #20
 800ae38:	9306      	str	r3, [sp, #24]
 800ae3a:	9104      	str	r1, [sp, #16]
 800ae3c:	4bbe      	ldr	r3, [pc, #760]	@ (800b138 <__kernel_rem_pio2+0x310>)
 800ae3e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ae40:	9008      	str	r0, [sp, #32]
 800ae42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	9b06      	ldr	r3, [sp, #24]
 800ae4a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae4e:	bfa8      	it	ge
 800ae50:	1ed4      	subge	r4, r2, #3
 800ae52:	9305      	str	r3, [sp, #20]
 800ae54:	bfb2      	itee	lt
 800ae56:	2400      	movlt	r4, #0
 800ae58:	2318      	movge	r3, #24
 800ae5a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ae5e:	f06f 0317 	mvn.w	r3, #23
 800ae62:	fb04 3303 	mla	r3, r4, r3, r3
 800ae66:	eb03 0b02 	add.w	fp, r3, r2
 800ae6a:	9b00      	ldr	r3, [sp, #0]
 800ae6c:	9a05      	ldr	r2, [sp, #20]
 800ae6e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800b128 <__kernel_rem_pio2+0x300>
 800ae72:	eb03 0802 	add.w	r8, r3, r2
 800ae76:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ae78:	1aa7      	subs	r7, r4, r2
 800ae7a:	ae20      	add	r6, sp, #128	@ 0x80
 800ae7c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ae80:	2500      	movs	r5, #0
 800ae82:	4545      	cmp	r5, r8
 800ae84:	dd13      	ble.n	800aeae <__kernel_rem_pio2+0x86>
 800ae86:	9b06      	ldr	r3, [sp, #24]
 800ae88:	aa20      	add	r2, sp, #128	@ 0x80
 800ae8a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ae8e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ae92:	f04f 0800 	mov.w	r8, #0
 800ae96:	9b00      	ldr	r3, [sp, #0]
 800ae98:	4598      	cmp	r8, r3
 800ae9a:	dc31      	bgt.n	800af00 <__kernel_rem_pio2+0xd8>
 800ae9c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800b128 <__kernel_rem_pio2+0x300>
 800aea0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aea4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aea8:	462f      	mov	r7, r5
 800aeaa:	2600      	movs	r6, #0
 800aeac:	e01b      	b.n	800aee6 <__kernel_rem_pio2+0xbe>
 800aeae:	42ef      	cmn	r7, r5
 800aeb0:	d407      	bmi.n	800aec2 <__kernel_rem_pio2+0x9a>
 800aeb2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aeb6:	f7f5 fb3d 	bl	8000534 <__aeabi_i2d>
 800aeba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aebe:	3501      	adds	r5, #1
 800aec0:	e7df      	b.n	800ae82 <__kernel_rem_pio2+0x5a>
 800aec2:	ec51 0b18 	vmov	r0, r1, d8
 800aec6:	e7f8      	b.n	800aeba <__kernel_rem_pio2+0x92>
 800aec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aecc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800aed0:	f7f5 fb9a 	bl	8000608 <__aeabi_dmul>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aedc:	f7f5 f9de 	bl	800029c <__adddf3>
 800aee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aee4:	3601      	adds	r6, #1
 800aee6:	9b05      	ldr	r3, [sp, #20]
 800aee8:	429e      	cmp	r6, r3
 800aeea:	f1a7 0708 	sub.w	r7, r7, #8
 800aeee:	ddeb      	ble.n	800aec8 <__kernel_rem_pio2+0xa0>
 800aef0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aef4:	f108 0801 	add.w	r8, r8, #1
 800aef8:	ecaa 7b02 	vstmia	sl!, {d7}
 800aefc:	3508      	adds	r5, #8
 800aefe:	e7ca      	b.n	800ae96 <__kernel_rem_pio2+0x6e>
 800af00:	9b00      	ldr	r3, [sp, #0]
 800af02:	f8dd 8000 	ldr.w	r8, [sp]
 800af06:	aa0c      	add	r2, sp, #48	@ 0x30
 800af08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800af0e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800af10:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af14:	9309      	str	r3, [sp, #36]	@ 0x24
 800af16:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800af1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af1c:	ab98      	add	r3, sp, #608	@ 0x260
 800af1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800af22:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800af26:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af2a:	ac0c      	add	r4, sp, #48	@ 0x30
 800af2c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800af2e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800af32:	46a1      	mov	r9, r4
 800af34:	46c2      	mov	sl, r8
 800af36:	f1ba 0f00 	cmp.w	sl, #0
 800af3a:	f1a5 0508 	sub.w	r5, r5, #8
 800af3e:	dc77      	bgt.n	800b030 <__kernel_rem_pio2+0x208>
 800af40:	4658      	mov	r0, fp
 800af42:	ed9d 0b02 	vldr	d0, [sp, #8]
 800af46:	f000 fac7 	bl	800b4d8 <scalbn>
 800af4a:	ec57 6b10 	vmov	r6, r7, d0
 800af4e:	2200      	movs	r2, #0
 800af50:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800af54:	4630      	mov	r0, r6
 800af56:	4639      	mov	r1, r7
 800af58:	f7f5 fb56 	bl	8000608 <__aeabi_dmul>
 800af5c:	ec41 0b10 	vmov	d0, r0, r1
 800af60:	f000 fb3a 	bl	800b5d8 <floor>
 800af64:	4b75      	ldr	r3, [pc, #468]	@ (800b13c <__kernel_rem_pio2+0x314>)
 800af66:	ec51 0b10 	vmov	r0, r1, d0
 800af6a:	2200      	movs	r2, #0
 800af6c:	f7f5 fb4c 	bl	8000608 <__aeabi_dmul>
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	4630      	mov	r0, r6
 800af76:	4639      	mov	r1, r7
 800af78:	f7f5 f98e 	bl	8000298 <__aeabi_dsub>
 800af7c:	460f      	mov	r7, r1
 800af7e:	4606      	mov	r6, r0
 800af80:	f7f5 fdf2 	bl	8000b68 <__aeabi_d2iz>
 800af84:	9002      	str	r0, [sp, #8]
 800af86:	f7f5 fad5 	bl	8000534 <__aeabi_i2d>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	4630      	mov	r0, r6
 800af90:	4639      	mov	r1, r7
 800af92:	f7f5 f981 	bl	8000298 <__aeabi_dsub>
 800af96:	f1bb 0f00 	cmp.w	fp, #0
 800af9a:	4606      	mov	r6, r0
 800af9c:	460f      	mov	r7, r1
 800af9e:	dd6c      	ble.n	800b07a <__kernel_rem_pio2+0x252>
 800afa0:	f108 31ff 	add.w	r1, r8, #4294967295
 800afa4:	ab0c      	add	r3, sp, #48	@ 0x30
 800afa6:	9d02      	ldr	r5, [sp, #8]
 800afa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afac:	f1cb 0018 	rsb	r0, fp, #24
 800afb0:	fa43 f200 	asr.w	r2, r3, r0
 800afb4:	4415      	add	r5, r2
 800afb6:	4082      	lsls	r2, r0
 800afb8:	1a9b      	subs	r3, r3, r2
 800afba:	aa0c      	add	r2, sp, #48	@ 0x30
 800afbc:	9502      	str	r5, [sp, #8]
 800afbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800afc2:	f1cb 0217 	rsb	r2, fp, #23
 800afc6:	fa43 f902 	asr.w	r9, r3, r2
 800afca:	f1b9 0f00 	cmp.w	r9, #0
 800afce:	dd64      	ble.n	800b09a <__kernel_rem_pio2+0x272>
 800afd0:	9b02      	ldr	r3, [sp, #8]
 800afd2:	2200      	movs	r2, #0
 800afd4:	3301      	adds	r3, #1
 800afd6:	9302      	str	r3, [sp, #8]
 800afd8:	4615      	mov	r5, r2
 800afda:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800afde:	4590      	cmp	r8, r2
 800afe0:	f300 80b8 	bgt.w	800b154 <__kernel_rem_pio2+0x32c>
 800afe4:	f1bb 0f00 	cmp.w	fp, #0
 800afe8:	dd07      	ble.n	800affa <__kernel_rem_pio2+0x1d2>
 800afea:	f1bb 0f01 	cmp.w	fp, #1
 800afee:	f000 80bf 	beq.w	800b170 <__kernel_rem_pio2+0x348>
 800aff2:	f1bb 0f02 	cmp.w	fp, #2
 800aff6:	f000 80c6 	beq.w	800b186 <__kernel_rem_pio2+0x35e>
 800affa:	f1b9 0f02 	cmp.w	r9, #2
 800affe:	d14c      	bne.n	800b09a <__kernel_rem_pio2+0x272>
 800b000:	4632      	mov	r2, r6
 800b002:	463b      	mov	r3, r7
 800b004:	494e      	ldr	r1, [pc, #312]	@ (800b140 <__kernel_rem_pio2+0x318>)
 800b006:	2000      	movs	r0, #0
 800b008:	f7f5 f946 	bl	8000298 <__aeabi_dsub>
 800b00c:	4606      	mov	r6, r0
 800b00e:	460f      	mov	r7, r1
 800b010:	2d00      	cmp	r5, #0
 800b012:	d042      	beq.n	800b09a <__kernel_rem_pio2+0x272>
 800b014:	4658      	mov	r0, fp
 800b016:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800b130 <__kernel_rem_pio2+0x308>
 800b01a:	f000 fa5d 	bl	800b4d8 <scalbn>
 800b01e:	4630      	mov	r0, r6
 800b020:	4639      	mov	r1, r7
 800b022:	ec53 2b10 	vmov	r2, r3, d0
 800b026:	f7f5 f937 	bl	8000298 <__aeabi_dsub>
 800b02a:	4606      	mov	r6, r0
 800b02c:	460f      	mov	r7, r1
 800b02e:	e034      	b.n	800b09a <__kernel_rem_pio2+0x272>
 800b030:	4b44      	ldr	r3, [pc, #272]	@ (800b144 <__kernel_rem_pio2+0x31c>)
 800b032:	2200      	movs	r2, #0
 800b034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b038:	f7f5 fae6 	bl	8000608 <__aeabi_dmul>
 800b03c:	f7f5 fd94 	bl	8000b68 <__aeabi_d2iz>
 800b040:	f7f5 fa78 	bl	8000534 <__aeabi_i2d>
 800b044:	4b40      	ldr	r3, [pc, #256]	@ (800b148 <__kernel_rem_pio2+0x320>)
 800b046:	2200      	movs	r2, #0
 800b048:	4606      	mov	r6, r0
 800b04a:	460f      	mov	r7, r1
 800b04c:	f7f5 fadc 	bl	8000608 <__aeabi_dmul>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b058:	f7f5 f91e 	bl	8000298 <__aeabi_dsub>
 800b05c:	f7f5 fd84 	bl	8000b68 <__aeabi_d2iz>
 800b060:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b064:	f849 0b04 	str.w	r0, [r9], #4
 800b068:	4639      	mov	r1, r7
 800b06a:	4630      	mov	r0, r6
 800b06c:	f7f5 f916 	bl	800029c <__adddf3>
 800b070:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b078:	e75d      	b.n	800af36 <__kernel_rem_pio2+0x10e>
 800b07a:	d107      	bne.n	800b08c <__kernel_rem_pio2+0x264>
 800b07c:	f108 33ff 	add.w	r3, r8, #4294967295
 800b080:	aa0c      	add	r2, sp, #48	@ 0x30
 800b082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b086:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b08a:	e79e      	b.n	800afca <__kernel_rem_pio2+0x1a2>
 800b08c:	4b2f      	ldr	r3, [pc, #188]	@ (800b14c <__kernel_rem_pio2+0x324>)
 800b08e:	2200      	movs	r2, #0
 800b090:	f7f5 fd40 	bl	8000b14 <__aeabi_dcmpge>
 800b094:	2800      	cmp	r0, #0
 800b096:	d143      	bne.n	800b120 <__kernel_rem_pio2+0x2f8>
 800b098:	4681      	mov	r9, r0
 800b09a:	2200      	movs	r2, #0
 800b09c:	2300      	movs	r3, #0
 800b09e:	4630      	mov	r0, r6
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	f7f5 fd19 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f000 80bf 	beq.w	800b22a <__kernel_rem_pio2+0x402>
 800b0ac:	f108 33ff 	add.w	r3, r8, #4294967295
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	9900      	ldr	r1, [sp, #0]
 800b0b4:	428b      	cmp	r3, r1
 800b0b6:	da6e      	bge.n	800b196 <__kernel_rem_pio2+0x36e>
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	f000 8089 	beq.w	800b1d0 <__kernel_rem_pio2+0x3a8>
 800b0be:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0c2:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0c4:	f1ab 0b18 	sub.w	fp, fp, #24
 800b0c8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0f6      	beq.n	800b0be <__kernel_rem_pio2+0x296>
 800b0d0:	4658      	mov	r0, fp
 800b0d2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b130 <__kernel_rem_pio2+0x308>
 800b0d6:	f000 f9ff 	bl	800b4d8 <scalbn>
 800b0da:	f108 0301 	add.w	r3, r8, #1
 800b0de:	00da      	lsls	r2, r3, #3
 800b0e0:	9205      	str	r2, [sp, #20]
 800b0e2:	ec55 4b10 	vmov	r4, r5, d0
 800b0e6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b0e8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800b144 <__kernel_rem_pio2+0x31c>
 800b0ec:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b0f0:	4646      	mov	r6, r8
 800b0f2:	f04f 0a00 	mov.w	sl, #0
 800b0f6:	2e00      	cmp	r6, #0
 800b0f8:	f280 80cf 	bge.w	800b29a <__kernel_rem_pio2+0x472>
 800b0fc:	4644      	mov	r4, r8
 800b0fe:	2c00      	cmp	r4, #0
 800b100:	f2c0 80fd 	blt.w	800b2fe <__kernel_rem_pio2+0x4d6>
 800b104:	4b12      	ldr	r3, [pc, #72]	@ (800b150 <__kernel_rem_pio2+0x328>)
 800b106:	461f      	mov	r7, r3
 800b108:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b10a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b10e:	9306      	str	r3, [sp, #24]
 800b110:	f04f 0a00 	mov.w	sl, #0
 800b114:	f04f 0b00 	mov.w	fp, #0
 800b118:	2600      	movs	r6, #0
 800b11a:	eba8 0504 	sub.w	r5, r8, r4
 800b11e:	e0e2      	b.n	800b2e6 <__kernel_rem_pio2+0x4be>
 800b120:	f04f 0902 	mov.w	r9, #2
 800b124:	e754      	b.n	800afd0 <__kernel_rem_pio2+0x1a8>
 800b126:	bf00      	nop
	...
 800b134:	3ff00000 	.word	0x3ff00000
 800b138:	0800bea0 	.word	0x0800bea0
 800b13c:	40200000 	.word	0x40200000
 800b140:	3ff00000 	.word	0x3ff00000
 800b144:	3e700000 	.word	0x3e700000
 800b148:	41700000 	.word	0x41700000
 800b14c:	3fe00000 	.word	0x3fe00000
 800b150:	0800be60 	.word	0x0800be60
 800b154:	f854 3b04 	ldr.w	r3, [r4], #4
 800b158:	b945      	cbnz	r5, 800b16c <__kernel_rem_pio2+0x344>
 800b15a:	b123      	cbz	r3, 800b166 <__kernel_rem_pio2+0x33e>
 800b15c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b160:	f844 3c04 	str.w	r3, [r4, #-4]
 800b164:	2301      	movs	r3, #1
 800b166:	3201      	adds	r2, #1
 800b168:	461d      	mov	r5, r3
 800b16a:	e738      	b.n	800afde <__kernel_rem_pio2+0x1b6>
 800b16c:	1acb      	subs	r3, r1, r3
 800b16e:	e7f7      	b.n	800b160 <__kernel_rem_pio2+0x338>
 800b170:	f108 32ff 	add.w	r2, r8, #4294967295
 800b174:	ab0c      	add	r3, sp, #48	@ 0x30
 800b176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b17a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b17e:	a90c      	add	r1, sp, #48	@ 0x30
 800b180:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b184:	e739      	b.n	800affa <__kernel_rem_pio2+0x1d2>
 800b186:	f108 32ff 	add.w	r2, r8, #4294967295
 800b18a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b18c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b190:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b194:	e7f3      	b.n	800b17e <__kernel_rem_pio2+0x356>
 800b196:	a90c      	add	r1, sp, #48	@ 0x30
 800b198:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	430a      	orrs	r2, r1
 800b1a0:	e787      	b.n	800b0b2 <__kernel_rem_pio2+0x28a>
 800b1a2:	3401      	adds	r4, #1
 800b1a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b1a8:	2a00      	cmp	r2, #0
 800b1aa:	d0fa      	beq.n	800b1a2 <__kernel_rem_pio2+0x37a>
 800b1ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b1b2:	eb0d 0503 	add.w	r5, sp, r3
 800b1b6:	9b06      	ldr	r3, [sp, #24]
 800b1b8:	aa20      	add	r2, sp, #128	@ 0x80
 800b1ba:	4443      	add	r3, r8
 800b1bc:	f108 0701 	add.w	r7, r8, #1
 800b1c0:	3d98      	subs	r5, #152	@ 0x98
 800b1c2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b1c6:	4444      	add	r4, r8
 800b1c8:	42bc      	cmp	r4, r7
 800b1ca:	da04      	bge.n	800b1d6 <__kernel_rem_pio2+0x3ae>
 800b1cc:	46a0      	mov	r8, r4
 800b1ce:	e6a2      	b.n	800af16 <__kernel_rem_pio2+0xee>
 800b1d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1d2:	2401      	movs	r4, #1
 800b1d4:	e7e6      	b.n	800b1a4 <__kernel_rem_pio2+0x37c>
 800b1d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b1dc:	f7f5 f9aa 	bl	8000534 <__aeabi_i2d>
 800b1e0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b4a8 <__kernel_rem_pio2+0x680>
 800b1e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b1e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b1ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b1f0:	46b2      	mov	sl, r6
 800b1f2:	f04f 0800 	mov.w	r8, #0
 800b1f6:	9b05      	ldr	r3, [sp, #20]
 800b1f8:	4598      	cmp	r8, r3
 800b1fa:	dd05      	ble.n	800b208 <__kernel_rem_pio2+0x3e0>
 800b1fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b200:	3701      	adds	r7, #1
 800b202:	eca5 7b02 	vstmia	r5!, {d7}
 800b206:	e7df      	b.n	800b1c8 <__kernel_rem_pio2+0x3a0>
 800b208:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b20c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b210:	f7f5 f9fa 	bl	8000608 <__aeabi_dmul>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b21c:	f7f5 f83e 	bl	800029c <__adddf3>
 800b220:	f108 0801 	add.w	r8, r8, #1
 800b224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b228:	e7e5      	b.n	800b1f6 <__kernel_rem_pio2+0x3ce>
 800b22a:	f1cb 0000 	rsb	r0, fp, #0
 800b22e:	ec47 6b10 	vmov	d0, r6, r7
 800b232:	f000 f951 	bl	800b4d8 <scalbn>
 800b236:	ec55 4b10 	vmov	r4, r5, d0
 800b23a:	4b9d      	ldr	r3, [pc, #628]	@ (800b4b0 <__kernel_rem_pio2+0x688>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	4620      	mov	r0, r4
 800b240:	4629      	mov	r1, r5
 800b242:	f7f5 fc67 	bl	8000b14 <__aeabi_dcmpge>
 800b246:	b300      	cbz	r0, 800b28a <__kernel_rem_pio2+0x462>
 800b248:	4b9a      	ldr	r3, [pc, #616]	@ (800b4b4 <__kernel_rem_pio2+0x68c>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	4620      	mov	r0, r4
 800b24e:	4629      	mov	r1, r5
 800b250:	f7f5 f9da 	bl	8000608 <__aeabi_dmul>
 800b254:	f7f5 fc88 	bl	8000b68 <__aeabi_d2iz>
 800b258:	4606      	mov	r6, r0
 800b25a:	f7f5 f96b 	bl	8000534 <__aeabi_i2d>
 800b25e:	4b94      	ldr	r3, [pc, #592]	@ (800b4b0 <__kernel_rem_pio2+0x688>)
 800b260:	2200      	movs	r2, #0
 800b262:	f7f5 f9d1 	bl	8000608 <__aeabi_dmul>
 800b266:	460b      	mov	r3, r1
 800b268:	4602      	mov	r2, r0
 800b26a:	4629      	mov	r1, r5
 800b26c:	4620      	mov	r0, r4
 800b26e:	f7f5 f813 	bl	8000298 <__aeabi_dsub>
 800b272:	f7f5 fc79 	bl	8000b68 <__aeabi_d2iz>
 800b276:	ab0c      	add	r3, sp, #48	@ 0x30
 800b278:	f10b 0b18 	add.w	fp, fp, #24
 800b27c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b280:	f108 0801 	add.w	r8, r8, #1
 800b284:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b288:	e722      	b.n	800b0d0 <__kernel_rem_pio2+0x2a8>
 800b28a:	4620      	mov	r0, r4
 800b28c:	4629      	mov	r1, r5
 800b28e:	f7f5 fc6b 	bl	8000b68 <__aeabi_d2iz>
 800b292:	ab0c      	add	r3, sp, #48	@ 0x30
 800b294:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b298:	e71a      	b.n	800b0d0 <__kernel_rem_pio2+0x2a8>
 800b29a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b29c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b2a0:	f7f5 f948 	bl	8000534 <__aeabi_i2d>
 800b2a4:	4622      	mov	r2, r4
 800b2a6:	462b      	mov	r3, r5
 800b2a8:	f7f5 f9ae 	bl	8000608 <__aeabi_dmul>
 800b2ac:	4652      	mov	r2, sl
 800b2ae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b2b2:	465b      	mov	r3, fp
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	f7f5 f9a6 	bl	8000608 <__aeabi_dmul>
 800b2bc:	3e01      	subs	r6, #1
 800b2be:	4604      	mov	r4, r0
 800b2c0:	460d      	mov	r5, r1
 800b2c2:	e718      	b.n	800b0f6 <__kernel_rem_pio2+0x2ce>
 800b2c4:	9906      	ldr	r1, [sp, #24]
 800b2c6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b2ca:	9106      	str	r1, [sp, #24]
 800b2cc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b2d0:	f7f5 f99a 	bl	8000608 <__aeabi_dmul>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	4650      	mov	r0, sl
 800b2da:	4659      	mov	r1, fp
 800b2dc:	f7f4 ffde 	bl	800029c <__adddf3>
 800b2e0:	3601      	adds	r6, #1
 800b2e2:	4682      	mov	sl, r0
 800b2e4:	468b      	mov	fp, r1
 800b2e6:	9b00      	ldr	r3, [sp, #0]
 800b2e8:	429e      	cmp	r6, r3
 800b2ea:	dc01      	bgt.n	800b2f0 <__kernel_rem_pio2+0x4c8>
 800b2ec:	42b5      	cmp	r5, r6
 800b2ee:	dae9      	bge.n	800b2c4 <__kernel_rem_pio2+0x49c>
 800b2f0:	ab48      	add	r3, sp, #288	@ 0x120
 800b2f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b2f6:	e9c5 ab00 	strd	sl, fp, [r5]
 800b2fa:	3c01      	subs	r4, #1
 800b2fc:	e6ff      	b.n	800b0fe <__kernel_rem_pio2+0x2d6>
 800b2fe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b300:	2b02      	cmp	r3, #2
 800b302:	dc0b      	bgt.n	800b31c <__kernel_rem_pio2+0x4f4>
 800b304:	2b00      	cmp	r3, #0
 800b306:	dc39      	bgt.n	800b37c <__kernel_rem_pio2+0x554>
 800b308:	d05d      	beq.n	800b3c6 <__kernel_rem_pio2+0x59e>
 800b30a:	9b02      	ldr	r3, [sp, #8]
 800b30c:	f003 0007 	and.w	r0, r3, #7
 800b310:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b314:	ecbd 8b02 	vpop	{d8}
 800b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b31e:	2b03      	cmp	r3, #3
 800b320:	d1f3      	bne.n	800b30a <__kernel_rem_pio2+0x4e2>
 800b322:	9b05      	ldr	r3, [sp, #20]
 800b324:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b328:	eb0d 0403 	add.w	r4, sp, r3
 800b32c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b330:	4625      	mov	r5, r4
 800b332:	46c2      	mov	sl, r8
 800b334:	f1ba 0f00 	cmp.w	sl, #0
 800b338:	f1a5 0508 	sub.w	r5, r5, #8
 800b33c:	dc6b      	bgt.n	800b416 <__kernel_rem_pio2+0x5ee>
 800b33e:	4645      	mov	r5, r8
 800b340:	2d01      	cmp	r5, #1
 800b342:	f1a4 0408 	sub.w	r4, r4, #8
 800b346:	f300 8087 	bgt.w	800b458 <__kernel_rem_pio2+0x630>
 800b34a:	9c05      	ldr	r4, [sp, #20]
 800b34c:	ab48      	add	r3, sp, #288	@ 0x120
 800b34e:	441c      	add	r4, r3
 800b350:	2000      	movs	r0, #0
 800b352:	2100      	movs	r1, #0
 800b354:	f1b8 0f01 	cmp.w	r8, #1
 800b358:	f300 809c 	bgt.w	800b494 <__kernel_rem_pio2+0x66c>
 800b35c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b360:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b364:	f1b9 0f00 	cmp.w	r9, #0
 800b368:	f040 80a6 	bne.w	800b4b8 <__kernel_rem_pio2+0x690>
 800b36c:	9b04      	ldr	r3, [sp, #16]
 800b36e:	e9c3 7800 	strd	r7, r8, [r3]
 800b372:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b376:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b37a:	e7c6      	b.n	800b30a <__kernel_rem_pio2+0x4e2>
 800b37c:	9d05      	ldr	r5, [sp, #20]
 800b37e:	ab48      	add	r3, sp, #288	@ 0x120
 800b380:	441d      	add	r5, r3
 800b382:	4644      	mov	r4, r8
 800b384:	2000      	movs	r0, #0
 800b386:	2100      	movs	r1, #0
 800b388:	2c00      	cmp	r4, #0
 800b38a:	da35      	bge.n	800b3f8 <__kernel_rem_pio2+0x5d0>
 800b38c:	f1b9 0f00 	cmp.w	r9, #0
 800b390:	d038      	beq.n	800b404 <__kernel_rem_pio2+0x5dc>
 800b392:	4602      	mov	r2, r0
 800b394:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b398:	9c04      	ldr	r4, [sp, #16]
 800b39a:	e9c4 2300 	strd	r2, r3, [r4]
 800b39e:	4602      	mov	r2, r0
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b3a6:	f7f4 ff77 	bl	8000298 <__aeabi_dsub>
 800b3aa:	ad4a      	add	r5, sp, #296	@ 0x128
 800b3ac:	2401      	movs	r4, #1
 800b3ae:	45a0      	cmp	r8, r4
 800b3b0:	da2b      	bge.n	800b40a <__kernel_rem_pio2+0x5e2>
 800b3b2:	f1b9 0f00 	cmp.w	r9, #0
 800b3b6:	d002      	beq.n	800b3be <__kernel_rem_pio2+0x596>
 800b3b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3bc:	4619      	mov	r1, r3
 800b3be:	9b04      	ldr	r3, [sp, #16]
 800b3c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b3c4:	e7a1      	b.n	800b30a <__kernel_rem_pio2+0x4e2>
 800b3c6:	9c05      	ldr	r4, [sp, #20]
 800b3c8:	ab48      	add	r3, sp, #288	@ 0x120
 800b3ca:	441c      	add	r4, r3
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	f1b8 0f00 	cmp.w	r8, #0
 800b3d4:	da09      	bge.n	800b3ea <__kernel_rem_pio2+0x5c2>
 800b3d6:	f1b9 0f00 	cmp.w	r9, #0
 800b3da:	d002      	beq.n	800b3e2 <__kernel_rem_pio2+0x5ba>
 800b3dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	9b04      	ldr	r3, [sp, #16]
 800b3e4:	e9c3 0100 	strd	r0, r1, [r3]
 800b3e8:	e78f      	b.n	800b30a <__kernel_rem_pio2+0x4e2>
 800b3ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b3ee:	f7f4 ff55 	bl	800029c <__adddf3>
 800b3f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3f6:	e7eb      	b.n	800b3d0 <__kernel_rem_pio2+0x5a8>
 800b3f8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b3fc:	f7f4 ff4e 	bl	800029c <__adddf3>
 800b400:	3c01      	subs	r4, #1
 800b402:	e7c1      	b.n	800b388 <__kernel_rem_pio2+0x560>
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	e7c6      	b.n	800b398 <__kernel_rem_pio2+0x570>
 800b40a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b40e:	f7f4 ff45 	bl	800029c <__adddf3>
 800b412:	3401      	adds	r4, #1
 800b414:	e7cb      	b.n	800b3ae <__kernel_rem_pio2+0x586>
 800b416:	ed95 7b00 	vldr	d7, [r5]
 800b41a:	ed8d 7b00 	vstr	d7, [sp]
 800b41e:	ed95 7b02 	vldr	d7, [r5, #8]
 800b422:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b426:	ec53 2b17 	vmov	r2, r3, d7
 800b42a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b42e:	f7f4 ff35 	bl	800029c <__adddf3>
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	4606      	mov	r6, r0
 800b438:	460f      	mov	r7, r1
 800b43a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b43e:	f7f4 ff2b 	bl	8000298 <__aeabi_dsub>
 800b442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b446:	f7f4 ff29 	bl	800029c <__adddf3>
 800b44a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b44e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b452:	e9c5 6700 	strd	r6, r7, [r5]
 800b456:	e76d      	b.n	800b334 <__kernel_rem_pio2+0x50c>
 800b458:	ed94 7b00 	vldr	d7, [r4]
 800b45c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b460:	ec51 0b17 	vmov	r0, r1, d7
 800b464:	4652      	mov	r2, sl
 800b466:	465b      	mov	r3, fp
 800b468:	ed8d 7b00 	vstr	d7, [sp]
 800b46c:	f7f4 ff16 	bl	800029c <__adddf3>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	4606      	mov	r6, r0
 800b476:	460f      	mov	r7, r1
 800b478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b47c:	f7f4 ff0c 	bl	8000298 <__aeabi_dsub>
 800b480:	4652      	mov	r2, sl
 800b482:	465b      	mov	r3, fp
 800b484:	f7f4 ff0a 	bl	800029c <__adddf3>
 800b488:	3d01      	subs	r5, #1
 800b48a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b48e:	e9c4 6700 	strd	r6, r7, [r4]
 800b492:	e755      	b.n	800b340 <__kernel_rem_pio2+0x518>
 800b494:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b498:	f7f4 ff00 	bl	800029c <__adddf3>
 800b49c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4a0:	e758      	b.n	800b354 <__kernel_rem_pio2+0x52c>
 800b4a2:	bf00      	nop
 800b4a4:	f3af 8000 	nop.w
	...
 800b4b0:	41700000 	.word	0x41700000
 800b4b4:	3e700000 	.word	0x3e700000
 800b4b8:	9b04      	ldr	r3, [sp, #16]
 800b4ba:	9a04      	ldr	r2, [sp, #16]
 800b4bc:	601f      	str	r7, [r3, #0]
 800b4be:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b4c2:	605c      	str	r4, [r3, #4]
 800b4c4:	609d      	str	r5, [r3, #8]
 800b4c6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b4ca:	60d3      	str	r3, [r2, #12]
 800b4cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4d0:	6110      	str	r0, [r2, #16]
 800b4d2:	6153      	str	r3, [r2, #20]
 800b4d4:	e719      	b.n	800b30a <__kernel_rem_pio2+0x4e2>
 800b4d6:	bf00      	nop

0800b4d8 <scalbn>:
 800b4d8:	b570      	push	{r4, r5, r6, lr}
 800b4da:	ec55 4b10 	vmov	r4, r5, d0
 800b4de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	462b      	mov	r3, r5
 800b4e6:	b991      	cbnz	r1, 800b50e <scalbn+0x36>
 800b4e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b4ec:	4323      	orrs	r3, r4
 800b4ee:	d03d      	beq.n	800b56c <scalbn+0x94>
 800b4f0:	4b35      	ldr	r3, [pc, #212]	@ (800b5c8 <scalbn+0xf0>)
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f7f5 f886 	bl	8000608 <__aeabi_dmul>
 800b4fc:	4b33      	ldr	r3, [pc, #204]	@ (800b5cc <scalbn+0xf4>)
 800b4fe:	429e      	cmp	r6, r3
 800b500:	4604      	mov	r4, r0
 800b502:	460d      	mov	r5, r1
 800b504:	da0f      	bge.n	800b526 <scalbn+0x4e>
 800b506:	a328      	add	r3, pc, #160	@ (adr r3, 800b5a8 <scalbn+0xd0>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	e01e      	b.n	800b54c <scalbn+0x74>
 800b50e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b512:	4291      	cmp	r1, r2
 800b514:	d10b      	bne.n	800b52e <scalbn+0x56>
 800b516:	4622      	mov	r2, r4
 800b518:	4620      	mov	r0, r4
 800b51a:	4629      	mov	r1, r5
 800b51c:	f7f4 febe 	bl	800029c <__adddf3>
 800b520:	4604      	mov	r4, r0
 800b522:	460d      	mov	r5, r1
 800b524:	e022      	b.n	800b56c <scalbn+0x94>
 800b526:	460b      	mov	r3, r1
 800b528:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b52c:	3936      	subs	r1, #54	@ 0x36
 800b52e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b532:	4296      	cmp	r6, r2
 800b534:	dd0d      	ble.n	800b552 <scalbn+0x7a>
 800b536:	2d00      	cmp	r5, #0
 800b538:	a11d      	add	r1, pc, #116	@ (adr r1, 800b5b0 <scalbn+0xd8>)
 800b53a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b53e:	da02      	bge.n	800b546 <scalbn+0x6e>
 800b540:	a11d      	add	r1, pc, #116	@ (adr r1, 800b5b8 <scalbn+0xe0>)
 800b542:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b546:	a31a      	add	r3, pc, #104	@ (adr r3, 800b5b0 <scalbn+0xd8>)
 800b548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54c:	f7f5 f85c 	bl	8000608 <__aeabi_dmul>
 800b550:	e7e6      	b.n	800b520 <scalbn+0x48>
 800b552:	1872      	adds	r2, r6, r1
 800b554:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b558:	428a      	cmp	r2, r1
 800b55a:	dcec      	bgt.n	800b536 <scalbn+0x5e>
 800b55c:	2a00      	cmp	r2, #0
 800b55e:	dd08      	ble.n	800b572 <scalbn+0x9a>
 800b560:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b564:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b568:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b56c:	ec45 4b10 	vmov	d0, r4, r5
 800b570:	bd70      	pop	{r4, r5, r6, pc}
 800b572:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b576:	da08      	bge.n	800b58a <scalbn+0xb2>
 800b578:	2d00      	cmp	r5, #0
 800b57a:	a10b      	add	r1, pc, #44	@ (adr r1, 800b5a8 <scalbn+0xd0>)
 800b57c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b580:	dac1      	bge.n	800b506 <scalbn+0x2e>
 800b582:	a10f      	add	r1, pc, #60	@ (adr r1, 800b5c0 <scalbn+0xe8>)
 800b584:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b588:	e7bd      	b.n	800b506 <scalbn+0x2e>
 800b58a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b58e:	3236      	adds	r2, #54	@ 0x36
 800b590:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b594:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b598:	4620      	mov	r0, r4
 800b59a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d0 <scalbn+0xf8>)
 800b59c:	4629      	mov	r1, r5
 800b59e:	2200      	movs	r2, #0
 800b5a0:	e7d4      	b.n	800b54c <scalbn+0x74>
 800b5a2:	bf00      	nop
 800b5a4:	f3af 8000 	nop.w
 800b5a8:	c2f8f359 	.word	0xc2f8f359
 800b5ac:	01a56e1f 	.word	0x01a56e1f
 800b5b0:	8800759c 	.word	0x8800759c
 800b5b4:	7e37e43c 	.word	0x7e37e43c
 800b5b8:	8800759c 	.word	0x8800759c
 800b5bc:	fe37e43c 	.word	0xfe37e43c
 800b5c0:	c2f8f359 	.word	0xc2f8f359
 800b5c4:	81a56e1f 	.word	0x81a56e1f
 800b5c8:	43500000 	.word	0x43500000
 800b5cc:	ffff3cb0 	.word	0xffff3cb0
 800b5d0:	3c900000 	.word	0x3c900000
 800b5d4:	00000000 	.word	0x00000000

0800b5d8 <floor>:
 800b5d8:	ec51 0b10 	vmov	r0, r1, d0
 800b5dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b5e8:	2e13      	cmp	r6, #19
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	4605      	mov	r5, r0
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	dc34      	bgt.n	800b65c <floor+0x84>
 800b5f2:	2e00      	cmp	r6, #0
 800b5f4:	da17      	bge.n	800b626 <floor+0x4e>
 800b5f6:	a332      	add	r3, pc, #200	@ (adr r3, 800b6c0 <floor+0xe8>)
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f7f4 fe4e 	bl	800029c <__adddf3>
 800b600:	2200      	movs	r2, #0
 800b602:	2300      	movs	r3, #0
 800b604:	f7f5 fa90 	bl	8000b28 <__aeabi_dcmpgt>
 800b608:	b150      	cbz	r0, 800b620 <floor+0x48>
 800b60a:	2c00      	cmp	r4, #0
 800b60c:	da55      	bge.n	800b6ba <floor+0xe2>
 800b60e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b612:	432c      	orrs	r4, r5
 800b614:	2500      	movs	r5, #0
 800b616:	42ac      	cmp	r4, r5
 800b618:	4c2b      	ldr	r4, [pc, #172]	@ (800b6c8 <floor+0xf0>)
 800b61a:	bf08      	it	eq
 800b61c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b620:	4621      	mov	r1, r4
 800b622:	4628      	mov	r0, r5
 800b624:	e023      	b.n	800b66e <floor+0x96>
 800b626:	4f29      	ldr	r7, [pc, #164]	@ (800b6cc <floor+0xf4>)
 800b628:	4137      	asrs	r7, r6
 800b62a:	ea01 0307 	and.w	r3, r1, r7
 800b62e:	4303      	orrs	r3, r0
 800b630:	d01d      	beq.n	800b66e <floor+0x96>
 800b632:	a323      	add	r3, pc, #140	@ (adr r3, 800b6c0 <floor+0xe8>)
 800b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b638:	f7f4 fe30 	bl	800029c <__adddf3>
 800b63c:	2200      	movs	r2, #0
 800b63e:	2300      	movs	r3, #0
 800b640:	f7f5 fa72 	bl	8000b28 <__aeabi_dcmpgt>
 800b644:	2800      	cmp	r0, #0
 800b646:	d0eb      	beq.n	800b620 <floor+0x48>
 800b648:	2c00      	cmp	r4, #0
 800b64a:	bfbe      	ittt	lt
 800b64c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b650:	4133      	asrlt	r3, r6
 800b652:	18e4      	addlt	r4, r4, r3
 800b654:	ea24 0407 	bic.w	r4, r4, r7
 800b658:	2500      	movs	r5, #0
 800b65a:	e7e1      	b.n	800b620 <floor+0x48>
 800b65c:	2e33      	cmp	r6, #51	@ 0x33
 800b65e:	dd0a      	ble.n	800b676 <floor+0x9e>
 800b660:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b664:	d103      	bne.n	800b66e <floor+0x96>
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	f7f4 fe17 	bl	800029c <__adddf3>
 800b66e:	ec41 0b10 	vmov	d0, r0, r1
 800b672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b676:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b67a:	f04f 37ff 	mov.w	r7, #4294967295
 800b67e:	40df      	lsrs	r7, r3
 800b680:	4207      	tst	r7, r0
 800b682:	d0f4      	beq.n	800b66e <floor+0x96>
 800b684:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6c0 <floor+0xe8>)
 800b686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68a:	f7f4 fe07 	bl	800029c <__adddf3>
 800b68e:	2200      	movs	r2, #0
 800b690:	2300      	movs	r3, #0
 800b692:	f7f5 fa49 	bl	8000b28 <__aeabi_dcmpgt>
 800b696:	2800      	cmp	r0, #0
 800b698:	d0c2      	beq.n	800b620 <floor+0x48>
 800b69a:	2c00      	cmp	r4, #0
 800b69c:	da0a      	bge.n	800b6b4 <floor+0xdc>
 800b69e:	2e14      	cmp	r6, #20
 800b6a0:	d101      	bne.n	800b6a6 <floor+0xce>
 800b6a2:	3401      	adds	r4, #1
 800b6a4:	e006      	b.n	800b6b4 <floor+0xdc>
 800b6a6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	40b3      	lsls	r3, r6
 800b6ae:	441d      	add	r5, r3
 800b6b0:	4545      	cmp	r5, r8
 800b6b2:	d3f6      	bcc.n	800b6a2 <floor+0xca>
 800b6b4:	ea25 0507 	bic.w	r5, r5, r7
 800b6b8:	e7b2      	b.n	800b620 <floor+0x48>
 800b6ba:	2500      	movs	r5, #0
 800b6bc:	462c      	mov	r4, r5
 800b6be:	e7af      	b.n	800b620 <floor+0x48>
 800b6c0:	8800759c 	.word	0x8800759c
 800b6c4:	7e37e43c 	.word	0x7e37e43c
 800b6c8:	bff00000 	.word	0xbff00000
 800b6cc:	000fffff 	.word	0x000fffff

0800b6d0 <_init>:
 800b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d2:	bf00      	nop
 800b6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d6:	bc08      	pop	{r3}
 800b6d8:	469e      	mov	lr, r3
 800b6da:	4770      	bx	lr

0800b6dc <_fini>:
 800b6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6de:	bf00      	nop
 800b6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6e2:	bc08      	pop	{r3}
 800b6e4:	469e      	mov	lr, r3
 800b6e6:	4770      	bx	lr
